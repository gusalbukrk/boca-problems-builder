[
  {
    "name": "Tomadas",
    "text": "Finalmente, o time da Universidade conseguiu a classificação para a Final Nacional da Maratona de Programação da SBC. Os três membros do time e o técnico estão ansiosos para bem representar a Universidade, e além de treinar muito, preparam com todos os detalhes a sua viagem a São Paulo, onde será realizada a Final Nacional.\nEles planejam levar na viagem todos os seus vários equipamentos eletrônicos: celular, tablet, notebook, ponto de acesso wifi, câmeras, etc, e sabem que necessitarão de várias tomadas de energia para conectar todos esses equipamentos. Eles foram informados de que ficarão os quatro no mesmo quarto de hotel, mas já foram alertados de que em cada quarto há apenas uma tomada de energia disponível.\nPrecavidos, os três membros do time e o técnico compraram cada um uma régua de tomadas, permitindo assim ligar vários aparelhos na única tomada do quarto de hotel; eles também podem ligar uma régua em outra para aumentar ainda mais o número de tomadas disponíveis. No entanto, como as réguas têm muitas tomadas, eles pediram para você escrever um programa que, dado o número de tomadas em cada régua, determine o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.\nEntrada\nA entrada consiste de uma linha com quatro números inteiros T1, T2, T3, T4, indicando o número de tomadas de cada uma das quatro réguas (2 ≤ Ti ≤ 6).\nSaída\nSeu programa deve produzir uma única linha contendo um único número inteiro, indicando o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.\nExemplos",
    "samplesExamples": [
      [
        "2 4 3 2",
        "8"
      ],
      [
        "6 6 6 6",
        "21"
      ],
      [
        "2 2 2 2",
        "5"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Triângulo",
    "text": "Ana e suas amigas estão fazendo um trabalho de geometria para o colégio, em que precisam formar vários triângulos, numa cartolina, com algumas varetas de comprimentos diferentes. Logo elas perce beram que não dá para formar triângulos com três varetas de comprimentos quaisquer: se uma das varetas for muito grande em relação às outras duas, não dá para formar o triângulo.\nNeste problema, você precisa ajudar Ana e suas amigas a determinar se, dados os comprimentos de quatro varetas, é ou não é possível selecionar três varetas, dentre as quatro, e formar um triângulo.\nEntrada\nA entrada é composta por apenas uma linha contendo quatro números inteiros A,B,C e D (1 ≤ A,B,C,D ≤ 100).\nSaída\nSeu programa deve produzir apenas uma linha contendo apenas um caractere, que deve ser ‘S’ caso seja possível formar o triângulo, ou ‘N’ caso não seja possível formar o triângulo.\nExemplos",
    "samplesExamples": [
      [
        "6 9 22 5",
        "S"
      ],
      [
        "14 40 12 60",
        "N"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo da Memória",
    "text": "Pedro e Paulo resolveram complicar um pouco o tradicional Jogo da Memória, em que os jogadores precisam virar duas cartas iguais. Eles colocam N cartas no chão, com as faces viradas para baixo.\nA face de cada carta tem a figura de um número de 1 até N/2, sendo que exatamente duas cartas possuem a figura de cada número entre 1 e N/2. Como as cartas têm as faces viradas para baixo, elas podem também ser identificadas por suas posições, que são inteiros de 1 a N.\nPedro e Paulo então desenham no chão, usando giz, algumas linhas ligando pares de cartas, de modo que para qualquer par de cartas (A,B) existe uma e apenas uma sequência de cartas e linhas desenhadas que leva de A até B. A figura abaixo mostra um exemplo de jogo, (a) com todas as cartas com as faces viradas para baixo, e (b) com todas as cartas com as faces viradas para cima.\nO jogo é jogado com todas as cartas com as faces viradas para baixo. A cada jogada, o jogador deve escolher um par de cartas A e B. Se as faces das duas cartas escolhidas têm a mesma figura, o jogador acumula um número de pontos igual ao número de linhas desenhadas que existem no caminho entre as cartas A e B.\nPedro e Paulo, agora, estão estudando qual é a melhor estratégia para esse jogo e precisam da sua ajuda para resolver uma tarefa específica: dadas as cartas existentes em cada posição, e as ligações desenhadas com giz, calcular o maior valor total de pontos que é possível acumular.\nEntrada\nA primeira linha da entrada contém o número de cartas N (2 ≤ N ≤ 50000, N é par). A segunda linha da entrada contém N inteiros Ci, indicando qual número está anotado na carta na posição i (1 ≤ Ci ≤ N/2, para 1 ≤ i ≤ N). As cartas são dadas na ordem crescente das posições: a primeira carta ocupa a posição 1, a segunda a posição 2, e assim por diante até a última carta, que ocupa a posição N. Cada uma das N − 1 linhas seguintes contém dois números A e B, indicando que existe uma linha desenhada entre as cartas nas posições A e B (1 ≤ A ≤ N e 1 ≤ B ≤ N).\nSaída\nSeu programa deve produzir uma linha contendo um inteiro, o maior valor total de pontos que é possível acumular.\nExemplos",
    "samplesExamples": [
      [
        "6\n3 2 1 1 2 3\n1 2\n3 4\n6 5\n2 6\n3 6",
        "5"
      ],
      [
        "8\n1 2 3 3 2 4 1 4\n1 2\n2 3\n2 6\n5 6\n6 8\n7 8\n4 7",
        "12"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Quebra-cabeça",
    "text": "Discussões recentes na Internet causaram uma onda de renovado interesse em quebra-cabeças de lógica.\nNeste problema a sua tarefa é escrever um programa que resolva quebra-cabeças como o mostrado na figura abaixo, muito comum em revistas de desafios lógicos. Nesse quebra-cabeças, as letras dentro do quadriculado representam variáveis, e os números representam as somas dos valores das variáveis em cada linha ou coluna.\nO objetivo desse tipo de quebra-cabeça é determinar o valor de cada variável de modo a satisfazer as somas das linhas e colunas mostradas. Mas como esse tipo de quebra-cabeças é para crianças, ele tem uma propriedade que o torna mais fácil de encontrar a solução: sempre é possível encontrar uma linha ou coluna em que há apenas uma variável cujo valor ainda é desconhecido. Assim, uma possível maneira de resolver o problema é, a cada passo da solução, encontrar o valor de uma variável.\nDado um quebra-cabeça, você deve determinar os valores das variáveis que o solucionam.\nEntrada\nA primeira linha contém dois inteiros L (1 ≤ L ≤ 100) e C (1 ≤ C ≤ 100) indicando o número de linhas e o número de colunas do quebra-cabeça. Cada uma das L linhas seguintes contém C nomes de variáveis, seguidos de um inteiro S, a soma resultante das variáveis dessa linha (−108 ≤ S ≤ 108). A última linha contém C inteiros Xi (−108 ≤ Xi ≤ 108), indicando respectivamente a soma das variáveis na coluna i. Nomes de variáveis são formados por precisamente duas letras minúsculas, de ’a’ a ’z’.\nTodos os quebra-cabeças têm solução única, em que todas as variáveis são números inteiros.\nSaída\nSeu programa deve produzir uma linha para cada variável do quebra-cabeças, contendo o nome da variável e o seu valor inteiro. As variáveis devem ser escritas em ordem alfabética crescente, ou seja, respeitando a ordem aa,ab,...,az,ba,bb,...,za,zb,...,zz.\nExemplos",
    "samplesExamples": [
      [
        "4 5\ndf bb cg df df 11\nee az cg az ee 6\ndf cg cg df df 10\naz az cg az az 6\n6 7 8 6 6",
        "az 1\nbb 3\ncg 2\ndf 2\nee 1"
      ],
      [
        "3 4\naa bb cc dd 10\naa bb cc dd 10\naa bb cc dd 10\n3 6 9 12",
        "aa 1\nbb 2\ncc 3\ndd 4"
      ],
      [
        "3 3\naa zz aa 27\nvv zz aa -5\nkk kk aa 40\n15 -7 54",
        "aa 18\nkk 11\nvv -14\nzz -9"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Guardiões Curiosos",
    "text": "Oa é um dos mundos mais antigos do universo DC, é lá que habitam os guardiões do universo. Eles administram a tropa dos lanternas verdes, uma das maiores forças do universo! Todos sabem que os lanternas verdes sabem voar devido ao poder do anel, porém nem todos os habitantes de Oa fazem parte da tropa. Para esses habitantes está difícil se locomover entre as cidades, pois não há estradas! Os guardiões desejam conectar as cidades de Oa construindo algumas estradas. Existem N cidades em Oa, e eles desejam construir N −1 estradas de duas mãos, de tal forma que seja possível chegar de uma cidade até qualquer outra, direta ou indiretamente. Os guardiões também não desejam privilegiar demais nenhuma cidade, por isso eles estabeleceram que nenhuma cidade pode ter mais de K estradas.\nPor exemplo, se temos três cidades e K vale 2, temos as três opções: 1 2 3 ou 1 3 2 ou 3 1 2 Os guardiões, porém, são muito curiosos, e perguntaram aos lanternas verdes se eles eram capazes de dizer de quantas formas é possível construir N −1 estradas obedecendo estas restrições. Sua tarefa, como membro da tropa dos lanternas verdes é, dados N e K, satisfazer a curiosidade dos guardiões.\nEntrada\nA entrada consiste de uma única linha que contém dois números inteiros N (1 ≤ N ≤ 102) e K (1 ≤ K ≤ N).\nSaída\nSeu programa deve produzir uma única linha, contendo um único número inteiro, a resposta do problema. Como essa resposta pode ser muito grande, imprima-a módulo 109 + 7.\nExemplos",
    "samplesExamples": [
      [
        "3 2",
        "3"
      ],
      [
        "4 1",
        "0"
      ],
      [
        "4 3",
        "16"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Palíndromo",
    "text": "Um palíndromo é uma cadeia de caracteres tal que sua reversão é igual à cadeia original. Em outras palavras, é uma cadeia que, quando lida de trás pra frente, é igual à cadeia original. Por exemplo BANANAB é um palíndromo, enquanto BANANAS não. Neste problema estamos interessados em uma questão um pouco mais interessante.\nDada uma cadeia S, queremos encontrar uma subsequência que seja um palíndromo. Uma sub sequência é uma cadeia que pode ser obtida a partir da remoção de zero ou mais caracteres da cadeia original. Por exemplo ANNA é uma subsequência de BANANAS.\nSerá dado também um conjunto de posições de S que chamamos de posições especiais. Sua tarefa é encontrar o tamanho da subsequência que seja um palíndromo e que contenha o maior número de posições especiais possível. Caso exista mais de uma subsequência maximizando o número de posições especiais, você deve imprimir o tamanho da maior delas.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém uma cadeia de caracteres maiúsculos S com pelo menos 1 e no máximo 2000 caracteres. A segunda linha contém um inteiro N, 0 ≤ N ≤ |S|, indicando o número de posições especiais que estamos interessados em incluir no palíndromo, seguido de N números distintos, entre 1 e |S|, inclusive, contendo as posições especiais de S.\nSaída\nSeu programa deve imprimir um único inteiro, representando o tamanho do maior palíndromo possível, como definido acima.\nExemplos",
    "samplesExamples": [
      [
        "BANANAS\n0",
        "5"
      ],
      [
        "BANANAS\n1 7",
        "1"
      ],
      [
        "ACDAAACX\n3 2 3 8",
        "3"
      ],
      [
        "MARATONA\n4 3 1 5 2",
        "3"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.\nExemplos",
    "samplesExamples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Tri-du",
    "text": "Tri-du é um jogo de cartas derivado do popular jogo de Truco. O jogo utiliza um baralho normal de 52 cartas, com treze cartas de cada naipe, mas os naipes são ignorados. Apenas o valor das cartas, considerados como inteiros de 1 a 13, são utilizados.\nNo jogo, cada jogador recebe três cartas. As regras são simples: • Um trio (três cartas de mesmo valor) ganha de uma dupla (duas cartas de mesmo valor).\n• Um trio formado por cartas de maior valor ganha de um trio formado por cartas de menor valor.\n• Uma dupla formada por cartas de maior valor ganha de uma dupla formada por cartas de menor valor.\nNote que o jogo pode não ter ganhador em muitas situações; nesses casos, as cartas distribuídas são devolvidas ao baralho, que é embaralhado e uma nova partida é iniciada.\nUm jogador já recebeu duas das cartas que deve receber, e conhece seus valores. Sua tarefa é escrever um programa para determinar qual o valor da terceira carta que maximiza a probabilidade de esse jogador ganhar o jogo.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros, A (1 ≤ A ≤ 13) e B (1 ≤ B ≤ 13) indicando os valores das duas primeiras cartas recebidas.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o valor da carta que maximiza a probabilidade de o jogador ganhar a partida.\nExemplos",
    "samplesExamples": [
      [
        "10 7",
        "10"
      ],
      [
        "2 2",
        "2"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Bolsa de Valores",
    "text": "Um investidor principiante deseja aprender a investir na bolsa de valores. Como ele não tem ex periência, selecionou uma única empresa, e acompanhou os valores diários das ações dessa empresa, durante N dias. Ficou curioso quanto teria ganhado se tivesse investido nesse período em que acompa nhou os valores. Na verdade, o investidor é milionário e tem muito dinheiro, suficiente para comprar qualquer quantidade de ações da empresa. Entretanto, como é um investidor cuidadoso, decidiu que nunca teria mais do que uma ação da empresa.\nComo sempre há intermediários, a corretora de valores cobra uma taxa fixa de C reais a cada compra de uma ação da empresa.\nVocê deve calcular qual o lucro máximo que o investidor poderia ter auferido, investindo durante alguns dos N dias, podendo inclusive decidir não investir.\nEntrada\nA primeira linha contém dois inteiros, N e C (1 ≤ N ≤ 2 × 105 e 0 ≤ C ≤ 30).\nA segunda linha contém as N cotações P1,P2,...,PN, dos dias 1,2,...,N, respectivamente. Cada cotação Pi satisfaz as desigualdades 1 ≤ Pi ≤ 1000.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o lucro máximo do investidor, em reais.\nExemplos",
    "samplesExamples": [
      [
        "6 10\n100 120 130 80 50 40",
        "20"
      ],
      [
        "5 10\n70 80 50 40 50",
        "0"
      ],
      [
        "13 30\n10 80 20 40 30 50 40 60 50 70 60 10 200",
        "220"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Mania de Par",
    "text": "Patrícia é uma ótima desenvolvedora de software. No entanto, como quase toda pessoa brilhante, ela tem algumas manias estranhas, e uma delas é que tudo que ela faz tem que ser em número par.\nMuitas vezes essa mania não atrapalha, apesar de causar estranhamento nos outros. Alguns exemplos: ela tem que fazer diariamente um número par de refeições; no café da manhã toma duas xícaras de café, duas torradas e duas fatias de queijo; sempre que vai ao cinema compra dois bilhetes de entrada (felizmente sempre tem um amigo ou amiga lhe acompanhando); e toma dois banhos por dia (ou quatro, ou seis...).\nMas algumas vezes essa mania de Patrícia atrapalha. Por exemplo, ninguém gosta de viajar de carro com ela, pois se no trajeto ela tem que pagar pedágios, o número de pedágios que ela paga tem que ser par.\nPatrícia mora em um país em que todas as estradas são bidirecionais e têm exatamente um pedágio.\nEla precisa ir visitar um cliente em uma outra cidade, e deseja calcular o mínimo valor total de pedágios que ela tem que pagar, para ir da sua cidade à cidade do cliente, obedecendo à sua estranha mania de que o número de pedágios pagos tem que ser par.\nEntrada\nA entrada consiste de diversas linhas. A primeira linha contém 2 inteiros C e V , o número total de cidades e o número de estradas (2 ≤ C ≤ 104 e 0 ≤ V ≤ 50000). As cidades são identificadas por inteiros de 1 a C. Cada estrada liga duas cidades distintas, e há no máximo uma estrada entre cada par de cidades. Cada uma das V linhas seguintes contém três inteiros C1, C2 e G, indicando que o valor do pedágio da estrada que liga as cidades C1 e C2 é G (1 ≤ C1,C2 ≤ C e 1 ≤ G ≤ 104). Patrícia está atualmente na cidade 1 e a cidade do cliente é C.\nSaída\nUma única linha deve ser impressa, contendo um único inteiro, o custo total de pedágios para Patrícia ir da cidade 1 à cidade C, pagando um número par de pedágios, ou, se isso não for possível, o valor −1.\nExemplos",
    "samplesExamples": [
      [
        "4 4\n1 2 2\n2 3 1\n2 4 10\n3 4 6",
        "12"
      ],
      [
        "5 6\n1 2 3\n2 3 5\n3 5 2\n5 1 8\n2 4 1\n4 5 4",
        "-1"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Espiral",
    "text": "Dado um tabuleiro de dimensões N × N, gostaríamos de colocar feijões, um grão em cada quadrado, seguindo uma 1 espiral como mostrado na figura. Começando do canto L superior esquerdo, com coordenadas (1,1), e depois indo para a direita enquanto possível, depois para baixo en q du epan oit so pp ao rass´ cıv imel a, ed ne qp uo ais ntp oar pa ose ss íq vu ele .rd Ra epe en tq imua on st eo ssp eo pss aí dv re ãl oe , direita-baixo-esquerda-cima, até que B grãos de feijão se jam colocados no tabuleiro. O problema é: dados N e B, em que coordenadas será colocado o último grão de feijão? Na figura, para N = 8 e B = 53, o último grão foi colocado no quadrado de coordenadas (4,6).\nEntrada\nA entrada contém apenas uma linha com dois inteiros, N e B, onde 1 ≤ N ≤ 230 and 1 ≤ B ≤ N2.\nSaída\nSeu programa deve produzir uma única linha com dois inteiros L e C representando as coordenadas do último grão de feijão.\nExemplos",
    "samplesExamples": [
      [
        "8 53",
        "4 6"
      ],
      [
        "1073741824 1152921504603393520",
        "536871276 536869983"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Jogo de Estratégia",
    "text": "Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas.\nDado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J,R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram.\nOs Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive.\nSaída\nSeu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador ven cedor.\nExemplos",
    "samplesExamples": [
      [
        "3 3\n1 1 1 1 2 2 2 3 3",
        "3"
      ],
      [
        "2 3\n0 0 1 0 2 0",
        "1"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ominobox",
    "text": "O planeta de Skyrk nunca vai conhecer a paz enquanto o malvado Mago estiver livre. Dessa vez, o malicioso plano do Mago foi armar uma bomba no meio da maior cidade do planeta. Mago aprecia observar o caos, então, ao invés de explodir a bomba imediatamente, ele colocou um temporizador na bomba e a deixou junto com um desafio. A bomba tem um teclado, e a solução do desafio desarma a bomba.\nO desafio se chama Ominobox; ele consiste de uma caixa retangular com alguns cubos unitários dentro e de uma coleção de todos os possíveis N-ominos. Skyrk deve soltar todo omino em algum lugar da caixa para ganhar pontos. A pontuação máxima é a solução do Ominobox.\nUm N-omino é uma coleção de N quadrados unitários arranjados com lados coincidentes. Um 1-omino é um quadrado unitário, e um N-omino é um (N − 1)-omino com pelo menos um dos seus lados ligados a um quadrado unitário.\nA caixa tem uma superfície retangular e paredes verticais; cada um dos quadrados de um sistema Cartesiano de coordenadas em grade colocado na superfície da caixa possui uma pilha não negativa de cubos unitários. Os cubos não podem ser movidos.\nSkyrk irá alinhar cada omino com os quadrados da grade, e soltá-lo na caixa. O omino irá cair até tocar um cubo ou o fundo. Não é permitido que Skyrk reflita ou rotacione o omino, e ele deve situar-se completamente dentro dos limites da caixa. O número de pontos obtidos após soltá-lo é a distância entre o omino e o topo da caixa. Após soltá-lo, Skyrk anota o número de pontos, remove o omino, e solta o próximo. A pontuação final é a soma de todos os pontos.\nO tempo está passando e a contagem regressiva na bomba diz 5:00 (cinco horas!). Você consegue descobrir a pontuação máxima que Skyrk pode obter para desarmar a bomba e salvar o destino do planeta das mãos do vil Mago? Entrada\nA primeira linha contém T (T ≤ 200) — o número de desafios, após essa linha haverá T desafios.\nCada desafio começa com uma linha com quatro inteiros R, C, H e N (1 ≤ R,C,H ≤ 30; 1 ≤ N ≤ 10) — as dimensões da superfície da caixa são R × C, a altura é H, e a ordem dos ominos é N. Cada uma das próximas R linhas contém C inteiros Hi,j (0 ≤ Hi,j ≤ H) — o número de cubos no quadrado (i,j) da grade.\nSaída\nPara cada desafio, imprima uma linha contendo X, onde X é a solução do Ominobox.\nExemplos\nNotas\nFig. 1 Fig. 2 Fig. 3 Fig. 4 Fig. 5 Fig. 6 Fig. 7 Fig. 8 No primeiro desafio, Fig. 1 mostra a melhor maneira de colocar o único 1-omino. O omino atinge o fundo da caixa na posição (1,0) e possui distância de 3 até o topo da caixa. Esta configuração rende um total de 3 pontos.\nNo segundo desafio, Fig. 2 e Fig. 3 mostram as melhores maneiras de colocar os dois 2-ominos.\nNa Fig. 2 o omino atinge a pilha de cubos de altura 1 na posição (0,0) e possui distância de 2 até o topo de caixa. Na Fig. 3 o omino atinge a pilha de cubos de altura 2 na posição (0,1) e possui uma distância de 1 até o topo de caixa. Esta configuração rende um total de 3 pontos.\nNo terceiro desafio, Fig. 4 mostra a melhor maneira de colocar o único 3-omino que cabe dentro da caixa. Esta configuração rende um total de 1 ponto.\nNo quarto desafio, Fig. 5-8 mostram as melhores maneiras de colocar os quatro 4-ominos que cabem dentro da caixa. Esta configuração rende um total de 5 pontos.",
    "samplesExamples": [
      [
        "4\n2 2 3 1\n1 2\n0 3\n2 2 3 2\n1 2\n0 3\n2 2 3 3\n1 2\n0 3\n2 3 5 4\n1 2 5\n0 3 4",
        "3\n3\n1\n5"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Loteria",
    "text": "A loteria BWS é feita anualmente. Nela N pessoas apostam escolhendo K números cada uma. De modo formal, podemos dizer que Bij é o j-ésimo valor apostado pela i-ésima pessoa. Então os orga nizadores escolhem K inteiros positivos. Os números escolhidos são chamados de W1,W2,...,WK.\nOs vencedores são calculados da seguinte maneira: • Um subconjunto não vazio dos N participantes é escolhido aleatoriamente, ou seja, alguns par ticipantes são escolhidos por pura sorte.\n• Para cada pessoa neste subconjunto é calculado o valor S1, que é a soma de todos os primeiros números apostados por elas, ou seja, a soma de Bi1, onde i seria oíndice de cada pessoa escolhida.\nDa mesma maneira os valores S2,...,SK são calculados.\n• É feito um teste de paridade entre Wj e Sj, ou seja, é testado se as paridades (se o número é par ou ímpar) casam entre W1 e S1, W2 e S2, e assim por diante até WK e SK.\n• Se todas as paridades casam, então este conjunto de pessoas é considerado vencedor! Os organizadores querem saber: é possível escolher os números W1,W2,...,WK de forma que não exista nenhum subconjunto de participantes vencedor? Entrada\nA primeira linha contém os números N (1 ≤ N ≤ 104) e K (3 ≤ K ≤ 50), representando o número de participantes e a quantidade de números apostados por cada pessoa respectivamente. As pessoas apostam em inteiros maiores do que 1 e menores do que 50, inclusive. Cada uma das N linhas seguintes contém K números, representando as apostas de cada pessoa, uma pessoa por linha.\nSaída\nImprima ‘S’ caso seja possível ou ‘N’ caso contrário.\nExemplos",
    "samplesExamples": [
      [
        "2 3\n1 2 3\n5 6 7",
        "S"
      ],
      [
        "3 3\n3 2 1\n6 5 4\n4 4 4",
        "S"
      ],
      [
        "4 3\n9 4 7\n4 4 4\n2 7 2\n2 2 1",
        "N"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Concorrência",
    "text": "Bob e Alice estão participando de um concurso de programação em equipe.\nO concurso tem N problemas que devem ser resolvidos em ordem. Naturalmente, existem alguns problemas que eles não conseguem resolver; nesse caso, podem ignorá-los. Também pode haver problemas que apenas Bob ou Alice podem resolver.\nEles querem resolver todos os problemas possíveis trocando o mínimo de vezes possível quem está no computador programando a solução.\nDado o número de problemas e os problemas que Bob e Alice podem resolver, calcule o número mínimo de alternâncias entre o uso do computador. Qualquer pessoa pode começar a usá-lo.\nEntrada\nA primeira linha contém três inteiros N (1 ≤ N ≤ 109), A (1 ≤ A ≤ min(N,5 ∗ 104)) e B (1 ≤ B ≤ min(N,5 ∗ 104)). A próxima linha contém inteiros únicos A denotando os problemas que Alice pode resolver. A linha a seguir contém B inteiros únicos denotando os problemas que Bob pode resolver. O primeiro problema é denotado pelo número 1, o segundo pelo número 2, o N-ésimo por N e assim por diante.\nSaída\nImprima o número mínimo de alternâncias entre o uso do computador.",
    "samplesExamples": [
      [
        "5 2 3\n2 4\n1 5 3",
        "4"
      ],
      [
        "4 3 3\n1 2 3\n2 3 4",
        "1"
      ],
      [
        "4 3 3\n1 3 4\n4 3 1",
        "0"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Bruno Junqueira Adami, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "O retorno do Rei",
    "text": "O prolífico autor Stephen King estava registrando as notas de seus alunos de literatura em uma calculadora on-line de média geral. Ao terminar, percebeu que sua tecla de retorno estava quebrada, então em vez de inserir as notas de um aluno em uma linha separada cada, ele as inseriu em uma única linha sem qualquer separação.\nComo o Sr. King não tem as habilidades necessárias para consertar sua chave de retorno imediatamente, ele precisa que você calcule a média das notas do aluno a partir da entrada não separada.\nCada nota é um número inteiro entre 1 e 10. Todas as notas foram inseridas escritas na base 10 sem zeros à esquerda. Por exemplo, se as notas do aluno do Sr. King fossem 3, 10, 1 e 10, elas seriam inseridas como “310110”.\nEntrada\nA entrada consiste em uma única linha que contém uma string não vazia S de no máximo 100 dígitos de base 10.\nExiste uma maneira única de particionar S em uma lista de substrings de forma que cada substring represente um número inteiro entre 1 e 10 na base 10 sem zeros à esquerda.\nSaída\nProduza uma linha com um número racional representando a média das notas do aluno cujas notas o Sr. King inseriu como S. O resultado deve ser exibido como um número racional com exatamente dois dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "310110",
        "6.00"
      ],
      [
        "10910",
        "9.67"
      ],
      [
        "222222223",
        "2.11"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "A sociedade do Anel",
    "text": "Box é um esporte muito violento. Para compensar, existe um código de conduta para manter o cavalheirismo e o companheirismo no topo do ringue em jogos amistosos. Uma das regras mais conhecidas deste código de conduta é evitar bater no adversário abaixo da cintura ou acima do pescoço.\nDadas as alturas da cintura e do pescoço de um oponente, e as alturas de uma série de socos, calcule quantos desses socos são justos de acordo com a regra acima.\nEntrada\nA primeira linha contém três inteiros W, N e P, representando respectivamente a altura da cintura do oponente, a altura do pescoço e o número de socos desferidos (1 ≤ W < N ≤ 200 e 1 ≤ P ≤ 100) . A segunda linha contém P inteiros H1,H2,...,HP (1 ≤ Hi ≤ 200 para i = 1,2,...,P) indicando as alturas dos punções. Todas as alturas são fornecidas em centímetros.\nSaída\nProduza uma linha com um número inteiro representando o número de golpes justos, de acordo com o código de conduta.",
    "samplesExamples": [
      [
        "80 150 3\n10 100 160",
        "1"
      ],
      [
        "80 150 3\n80 100 150",
        "3"
      ],
      [
        "2 199 5\n2 1 200 199 1",
        "2"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "D como em Dédalo",
    "text": "Dédalo está jogando o jogo “Não seja ganancioso”, no qual N jogadores sentam-se ao redor de uma mesa com cada um deles cinco cartas marcadas com 1, 10, 100, 1.000 e 10.000 pontos. Em “Não seja ganancioso” os jogadores não podem conversar entre si quando o jogo começa e há M rodadas. Em cada rodada, o banco anuncia um orçamento B. Em seguida, cada jogador escolhe uma das cartas e a coloca, virada para baixo, sobre a mesa. O banco então vira as cartas, para que todos os jogadores possam ver todas as N cartas. Se a soma dos pontos das cartas escolhidas for menor ou igual a B, então o banco dá a cada jogador exatamente a quantidade de pontos da carta que ele escolheu. Caso contrário, ninguém ganha nada. Cada jogador recebe sua carta de volta antes da próxima rodada. Os jogadores são muito racionais e gostariam de maximizar os seus pontos e minimizar os seus arrependimentos! o que você faria nesta situação? Cooperar ou desertar? Tome a tabela a seguir como exemplo. Daedalus conquistou um total de 10 pontos, no final, pois apenas o primeiro round foi bem sucedido. Mas, analisando o jogo, ele vê que poderia ter conquistado 110 pontos, se tivesse escolhido 100 pontos no primeiro turno e 10 pontos no terceiro turno. Ou seja, Dédalo poderia ter conquistado 100 pontos extras! Isto só é válido, claro, assumindo que as cartas escolhidas pelos outros jogadores permanecem inalteradas.\nOrçamento redondo B Daedalus Ipyx icarus Ariadne Minos Soma Resultado 1 300 10 100 10 1 10 131 Sucesso 2 1100 100 10 100 1 1000 1211 Falha 3 1200 100 100 10 1000 1211 Falha, dado o orçamento e os cartões escolhidos em cada rodada, precisamos para calcular o número total máximo de pontos extras que Dédalo poderia ter ganho, no final, se tivesse escolhido a melhor carta possível em cada rodada, assumindo que as cartas escolhidas pelos outros jogadores permanecessem inalteradas.\nEntrada\nA primeira linha contém dois inteiros N e M, representando respectivamente o número de jogadores e o número de rodadas (1 ≤ N ≤ 20 e 1 ≤ M ≤ 50). Cada uma das próximas M linhas descreve uma rodada com um inteiro B indicando o orçamento (1 ≤ B ≤ 106), seguido por N inteiros C1,C2,...,CN representando que o i-ésimo jogador escolheu a carta rotulada com Ci pontos durante essa rodada (Ci ∈ {1,10,100,1000,10000} para i = 1,2,...,N). Daedalus é o primeiro jogador.\nSaída\nProduza uma linha com um número inteiro representando o número total máximo de pontos extras que Dédalo poderia ter ganho, se tivesse escolhido a melhor carta possível em cada rodada, assumindo que as cartas escolhidas pelos outros jogadores permanecessem inalteradas.",
    "samplesExamples": [
      [
        "5 3\n300 10 100 10 1 10\n1100 100 10 100 1 1000\n1200 100 100 10 1 1000",
        "100"
      ],
      [
        "3 2\n2000 1000 1000 1000\n21 1 1 10",
        "9"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Guilherme Albuquerque Pinto, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Impostos galácticos",
    "text": "O ano é 2115. O Centro de Planejamento Comercial Interplanetário (ICPC) é apoiado pelo Ministério Autônomo das Comunicações (ACM).\nUma operação comercial é realizada executando transações entre escritórios conectados da ACM em toda a galáxia. A execução de uma transação entre dois escritórios conectados da ACM envolve um imposto não negativo cujo valor aumenta, ou diminui, continuamente como uma função linear A × t + B do tempo t, onde t é um número real medido em minutos durante o dia (0 ≤ t ≤ 24 × 60).\nO imposto total de uma operação comercial realizada entre um escritório de origem da ACM e um escritório de destino da ACM em algum momento t, é calculado como a soma mínima possível dos impostos das transações executadas entre os escritórios da ACM visitados ao longo de algum caminho do escritório de origem da ACM para o escritório da ACM de destino. O imposto de cada transação é calculado ao mesmo tempo t.\nComo o imposto das transações entre escritórios conectados da ACM muda continuamente durante o dia, seria melhor realizar a operação comercial em algum horário específico do dia, a fim de maximizar o imposto arrecadado. Nesse momento, a ACM decide realizar a operação comercial, e não antes ou depois.\nSua tarefa é escrever um programa que receba como entrada a descrição da rede de escritórios do ACM e retorne como saída o imposto total máximo da operação comercial que pode ser alcançado durante o dia, ou seja, o imposto total máximo que o ACM pode arrecadar.\nEntrada\nA primeira linha contém dois inteiros N e M, representando respectivamente o número de escritórios ACM na rede e o número de conexões (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 104). Os escritórios do ACM são identificados com números inteiros distintos de 1 a N, sendo 1 o escritório do ACM origem e N o escritório do ACM destino. Cada uma das próximas M linhas descreve uma conexão com quatro inteiros I, J, A e B, indicando que existe uma conexão bidirecional entre o escritório I e o escritório J (1 ≤ I < J ≤ N), tal que o imposto de uma transação executado entre o escritório I e o escritório J no tempo t é definido pela fórmula A×t+B (−100 ≤ A ≤ 100 e 0 ≤ B ≤ 106). Os impostos não são negativos, então A×t+B ≥ 0 para 0 ≤ t ≤ 24×60. Há no máximo uma conexão entre cada par de escritórios do ACM e há pelo menos um caminho entre o escritório do ACM de origem e o escritório do ACM de destino.\nSaída\nProduza uma linha com um número racional representando o imposto total máximo que o ACM pode cobrar.\nO resultado deve ser apresentado como um número racional com exatamente cinco dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "2 1\n1 2 1 0",
        "1440.00000"
      ],
      [
        "5 8\n1 2 27 610658\n2 3 -48 529553\n3 4 -6 174696\n4 5 47 158238\n3 5 84 460166\n1 3 -21 74502\n2 4 -13 858673\n1 5 -90 473410",
        "419431.27273"
      ],
      [
        "3 3\n1 2 1 0\n2 3 1 0\n1 3 -1 1440",
        "960.00000"
      ],
      [
        "4 5\n1 2 1 0\n2 4 2 0\n1 4 0 500\n1 3 -1 1440\n3 4 -2 2880",
        "500.00000"
      ],
      [
        "2 1\n1 2 0 0",
        "0.00000"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Rafael Armando Garcia Gomez, Colômbia"
    },
    "hasImages": false
  },
  {
    "name": "Mantenha-o energizado",
    "text": "A Incredible Consoles Production Company (ICPC) está agora projetando seu mais novo modelo de console de videogame, o Super-Arcade Reloaded (SAR). O lançamento do SAR será acompanhado pelo lançamento de um jogo carro-chefe, que estará disponível apenas para seus usuários. Este jogo, que aliás se chamará Adventures of Captain Mikado (ACM), ainda apresenta uma moeda do jogo que pode ser convenientemente comprada com dinheiro do mundo real! O ACM é um jogo muito simples que consiste em N níveis numerados 1,2,...,N, o i-ésimo nível exigindo exatamente Ei unidades de energia para ser concluído. Isso significa que para completar esse nível, a energia do usuário deve ser de pelo menos Ei, e após isso diminuirá exatamente nessa quantidade. Para vencer o jogo o usuário deverá completar todos os níveis em ordem crescente, começando no nível 1 e continuando até o nível N sem nunca voltar a algum nível já concluído.\nInicialmente o usuário começa sem energia e para obtê-la deve comprar pacotes de energia nas lojas do jogo distribuídas entre os N níveis. Existem M dessas lojas. Cada loja vende um pacote de energia com força S e custo C que depende da loja. O usuário só pode comprar pacotes de energia nas lojas do nível em que se encontra, antes de começar a completar esse nível. O efeito de comprar um pacote de energia de força S é que a energia do usuário se transforma imediatamente em S, independentemente do valor que tinha antes.\nPara aumentar ainda mais suas vendas, o ICPC pensou em uma promoção revolucionária: reembolsará o custo total do SAR a quem completar o jogo ACM utilizando o valor mínimo de dinheiro do jogo. Dada a descrição do jogo, você pode ajudá-los a descobrir qual é a quantia mínima de dinheiro necessária para terminar o jogo? Entrada\nA primeira linha contém dois inteiros N e M, representando respectivamente o número de níveis e o número de lojas do jogo (1 ≤ N,M ≤ 105). A segunda linha contém N inteiros E1,E2,...,EN, onde Ei é a energia necessária para completar o i-ésimo nível (1 ≤ Ei ≤ 104 para i = 1,2,...,N). Cada uma das M linhas seguintes descreve uma loja com três inteiros L, S e C, representando respetivamente o nível onde a loja está localizada e a resistência e o custo do pacote de energia que vende (1 ≤ L ≤ N, 1 ≤ S ≤ 109 e 1 ≤ C ≤ 104).\nSaída\nProduza uma linha com um número inteiro representando a quantia mínima de dinheiro do jogo necessária para completar todos os N níveis do jogo. Se for impossível completar todos os níveis, escreva o valor −1.",
    "samplesExamples": [
      [
        "5 4\n1 2 3 4 5\n1 6 5\n2 14 10\n5 5 4\n3 7 5",
        "14"
      ],
      [
        "3 4\n14 11 2015\n1 14 23\n2 11 9\n3 1987 1\n1 2039 33",
        "-1"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Fidel I. Schaposnik Massolo, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Cercar os vegetais falha",
    "text": "Aos 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas trabalhando como exemplos para protocolos de rede, livros teóricos de jogos e diversos outros textos, eles estavam cansados. Para permanecerem ativos, eles decidiram se dedicar à jardinagem.\nAlice e Bob plantaram várias hortaliças em um campo enorme. Depois de terminarem, perceberam que suas plantas precisavam de proteção contra animais selvagens, então decidiram construir uma cerca ao redor delas. O campo é representado como o plano XY, e cada planta vegetal como um ponto diferente nele. Uma cerca é representada como um polígono no plano. No entanto, nem todo polígono é uma cerca válida. A cerca precisa ser um único polígono simples com cada um dos lados paralelo a um dos eixos. Claro, o polígono deve conter todos os pontos que representam as plantas vegetais. Uma cerca muito próxima das plantas ou de si mesma pode dificultar a caminhada, portanto, cada lado do polígono precisa estar longe de todas as plantas e de todos os lados não adjacentes.\nInfelizmente, Alice e Bob subcontrataram a construção da cerca a uma multinacional desagradável.\nA empresa tinha muitos advogados na folha de pagamento, mas nenhum bom projetista de cercas, então eles não cumpriram todos os requisitos. Eles construíram uma cerca que é um polígono simples com lados paralelos aos eixos e cujos lados ficam afastados das plantas e de si mesmo. Porém, eles se esqueceram de fazer a cerca conter todas as plantas! Alice e Bob querem avaliar a extensão do problema. Como nem todas as plantas têm o mesmo valor para eles, eles querem saber o valor total das plantas que ficaram do lado de fora da cerca.\nEntrada\nA primeira linha contém dois inteiros P e V , representando respectivamente o número de plantas e o número de vértices da cerca poligonal (1 ≤ P,V ≤ 105). Cada uma das próximas P linhas descreve uma planta diferente com dois inteiros Xp e Yp, indicando as coordenadas da planta (−109 ≤ Xp,Yp ≤ 109). O valor da p-ésima planta na entrada é p, para p = 1,2,...,P. Cada uma das próximas V linhas descreve um vértice da cerca com dois inteiros Xv e Yv, indicando as coordenadas do vértice (−109 ≤ Xv,Yv ≤ 109).\nOs vértices são dados em sentido anti-horário. Cada um desses pontos é um vértice real do polígono, ou seja, não é colinear com seus dois vértices adjacentes. O polígono representado é um polígono simples com cada lado paralelo a um eixo. Não há duas plantas na mesma posição e nenhuma planta fica do lado de uma cerca.\nSaída\nProduza uma linha com um número inteiro representando a soma dos valores de todas as plantas que estão fora da cerca.",
    "samplesExamples": [
      [
        "4 8\n1 2\n1 0\n5 3\n3 4\n0 1\n6 1\n6 4\n4 4\n4 3\n2 3\n2 5\n0 5",
        "6"
      ],
      [
        "6 12\n6 5\n1 9\n3 6\n3 4\n2 0\n4 4\n5 8\n5 3\n2 3\n2 5\n4 5\n4 7\n0 7\n0 1\n7 1\n7 10\n0 10\n0 8",
        "15"
      ],
      [
        "1 4\n1 1\n2 0\n2 2\n0 2\n0 0",
        "0"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Corte de bolo",
    "text": "Carol e Carla são colegas de quarto. Ontem deram uma grande festa e hoje têm um bolo meio comido que querem dividir. Como as pessoas eram descuidadas ao cortar uma fatia, o bolo agora tem o formato de um prisma, com as faces superior e inferior sendo o mesmo polígono convexo simples.\nPara divertir o processo de divisão do bolo, as meninas criaram o seguinte jogo.\nCarol escolhe um vértice v da face superior do bolo. Carla escolhe outro vértice w da face superior que não seja adjacente a v. Em seguida, cortam o bolo em dois pedaços estendendo para baixo o segmento vw, de modo a obter dois pedaços separados de bolo, cada um em forma de prisma. Por fim, Carol escolhe a peça que prefere e Carla fica com a outra. Carla percebeu imediatamente que esse sistema dá uma vantagem a Carol. Carla quer saber exatamente quanta vantagem Carol tem.\nVocê recebe um polígono que representa as faces superior e inferior do bolo. A altura do bolo é 2, então o volume de um pedaço de bolo é 2 vezes a área da sua face superior. Supondo que o bolo esteja dividido conforme explicado e que ambas as meninas tomem a decisão de maximizar o volume do pedaço que terão no final, calcule o volume do pedaço que cada menina receberá.\nEntrada\nA primeira linha contém um inteiro N representando o número de vértices da face superior poligonal do bolo (4 ≤ N ≤ 105). Cada uma das próximas N linhas descreve um vértice do polígono com dois inteiros X e Y , indicando as coordenadas do vértice no plano XY (−108 ≤ X,Y ≤ 108). Os vértices são dados no sentido anti-horário e definem um polígono convexo simples. Não há três pontos na entrada que sejam colineares.\nSaída\nProduza uma linha com dois inteiros representando o volume da peça que Carol e Carla obterão, nessa ordem, se ambas tomarem suas decisões de maneira otimizada.",
    "samplesExamples": [
      [
        "5\n0 0\n3 0\n3 1\n2 2\n0 1",
        "7 2"
      ],
      [
        "6\n0 1\n1 0\n2 0\n3 1\n2 2\n0 2",
        "6 3"
      ],
      [
        "4\n-100000000 -100000000\n100000000 -100000000\n100000000 100000000\n-100000000 100000000",
        "40000000000000000 40000000000000000"
      ],
      [
        "4\n-99999995 -100000000\n100000000 -100000000\n100000000 99999995\n-100000000 100000000",
        "39999999999999975 39999998000000025"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Grupos sanguíneos",
    "text": "Existem quatro grupos sanguíneos possíveis para humanos: AB, A, B e O, o que significa que os glóbulos vermelhos possuem antígenos dos tipos, respectivamente, A e B, apenas A, apenas B e nenhum antígeno. Nosso grupo sanguíneo é determinado por dois alelos em nosso DNA. Cada alelo é do tipo A, B ou O. A tabela a seguir lista as possíveis combinações de alelos que alguém pode ter para cada grupo sanguíneo: Grupo sanguíneo AB A B O Alelos possíveis AB OA,AA OB,BB OO Herdamos exatamente um alelo de cada um dos nossos dois pais. Assim, dados os grupos sanguíneos dos dois pais, podemos dizer com certeza se algum grupo sanguíneo é possível, ou não, nos seus descendentes. Por exemplo, se os grupos sanguíneos dos dois pais são AB e B, então as possíveis combinações de alelos para eles são, respectivamente, {AB} e {OB,BB}. Como a ordem dos alelos não importa, as possíveis combinações de alelos para a prole são {OA,AB,OB,BB}. Isso significa que os grupos sanguíneos AB, A e B são possíveis em seus descendentes, mas o grupo sanguíneo O não. Muito bom mesmo! Mas e se a vida na Terra tivesse evoluído de modo que uma pessoa tivesse três pais, três alelos e três tipos diferentes de antígenos? As combinações de alelos seriam assim: Grupo sanguíneo ABC AB AC BC A B C O Alelos possíveis ABC OAB, AAB OAC, AAC OBC, BBC OOA, OAA OOB, OBB OOC, OCC OOO ABB ACC BCC AAA BBB CCC Se os grupos sanguíneos dos três os pais são A, BC e O, então todos os grupos sanguíneos são possíveis em seus descendentes, exceto os grupos BC e ABC.\nO universo é vasto! Pode haver, no espaço, alguma forma de vida cujos indivíduos tenham N pais, N alelos e N diferentes tipos de antígenos. Dados os grupos sanguíneos dos pais N e uma lista de grupos sanguíneos Q a serem testados, seu programa deve determinar quais são possíveis e quais não são, na prole de determinados pais.\nEntrada\nA primeira linha contém dois inteiros N e Q, representando respectivamente o número de pais (e alelos e tipos de antígenos) e o número de consultas (1 ≤ N ≤ 100 e 1 ≤ Q ≤ 40). Cada uma das próximas N linhas descreve o grupo sanguíneo de um dos pais. Depois disso, cada uma das próximas Q linhas descreve um grupo sanguíneo a ser testado. Os tipos de antígeno são identificados com números inteiros distintos de 1 a N, não com letras. Cada linha que descreve um grupo sanguíneo contém um inteiro B indicando o número de tipos de antígeno no grupo sanguíneo (0 ≤ B ≤ N), seguido por B inteiros diferentes C1,C2,...,CB representando os tipos de antígeno presentes no sangue grupo (1 ≤ Ci ≤ N para i = 1,2,...,B).\nSaída\nPara cada uma das consultas Q, imprima uma linha com a letra “Y” maiúscula se o grupo sanguíneo correspondente for possível na prole de determinados pais; caso contrário, imprima a letra maiúscula “N”. Escreva os resultados na mesma ordem em que as consultas aparecem na entrada.",
    "samplesExamples": [
      [
        "2 1\n2 2 1\n1 2\n0",
        "N"
      ],
      [
        "3 4\n1 1\n2 2 3\n0\n1 3\n3 2 1 3\n2 1 2\n2 3 2",
        "Y\nN\nY\nN"
      ],
      [
        "4 3\n4 2 1 3 4\n4 2 1 3 4\n1 1\n1 2\n1 3\n2 2 1\n0",
        "Y\nY\nN"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Guilherme Albuquerque Pinto, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "No máximo duas vezes",
    "text": "Dado um inteiro positivo U, encontre o maior inteiro L tal que L ≤ U e L não contenha nenhum dígito mais de duas vezes.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro U (1 ≤ U ≤ 1018).\nSaída\nProduza uma linha com um número inteiro representando o maior número menor ou igual a U que não contenha nenhum dígito mais de duas vezes.",
    "samplesExamples": [
      [
        "2210102960",
        "2210099887"
      ],
      [
        "1000000000000000000",
        "998877665544332211"
      ],
      [
        "1001223343",
        "998877665"
      ],
      [
        "20152015",
        "20152015"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Expondo a corrupção",
    "text": "O Comité Central da Nlogónia é formado por muitos congressistas. Como o sistema político é dicotômico, cada parlamentar pertence a um de dois partidos: o Partido Mortalmente Sério e o Partido! Festa! Festa. A tradição histórica os chama de DSP e PPP, respectivamente.\nEdward é um jornalista investigativo. Ele descobriu que os membros do congresso são corruptos e mudarão de partido se receberem uma determinada quantia de Nlogmoney para fazê-lo. Cada congressista tem seu preço específico, mas todos têm um preço. Como é habitual na política, existem rivalidades entre algumas duplas de congressistas. Os rivais nunca aceitariam estar no mesmo partido.\nEdward tem um orçamento e quer usá-lo para fazer com que alguns congressistas mudem de partido, reunindo assim evidências indiscutíveis para sua investigação. Ao fazer isso, ele tem que respeitar as rivalidades: depois que todos a quem foi oferecido dinheiro trocam, os rivais devem permanecer pertencentes a partidos diferentes.\nEdward quer causar o máximo impacto. Você pode ajudá-lo a descobrir o número máximo de congressistas que podem pertencer ao DSP se ele usar no máximo todo o seu orçamento para esse objetivo? Da mesma forma, qual é o número máximo de congressistas que podem pertencer ao PPP sob as mesmas restrições? Entrada\nA primeira linha contém quatro inteiros D, P, R e B, representando respectivamente o número de congressistas que pertencem inicialmente ao DSP (1 ≤ D ≤ 100), o número de congressistas que pertencem inicialmente ao PPP (1 ≤ P ≤ 100 ), o número de rivalidades entre os congressistas (1 ≤ R ≤ 2000) e o orçamento do jornalista expresso em Nlogmoney (1 ≤ B ≤ 104). Os membros do DSP são identificados com inteiros distintos de 1 a D, enquanto os membros do PPP são identificados com inteiros distintos de 1 a P. A segunda linha contém D inteiros S1,S2,...,SD, indicando que o membro i do DSP irá trocar de partido se for oferecido Si Nlogmoney (1 ≤ Si ≤ 100 para i = 1,2,...,D). A terceira linha contém P inteiros T1,T2,...,TP, indicando que o membro j do PPP trocará de partido se for oferecido Tj Nlogmoney (1 ≤ Tj ≤ 100 para j = 1,2,...,P). Cada uma das próximas R linhas descreve uma rivalidade com dois inteiros X e Y, representando que o membro X do DSP e o membro Y do PPP são rivais (1 ≤ X ≤ D e 1 ≤ Y ≤ P).\nSaída\nProduza uma linha com dois inteiros representando o número máximo de congressistas que podem pertencer ao DSP com o orçamento determinado e, da mesma forma, o número máximo de congressistas que podem pertencer ao PPP com o orçamento determinado.",
    "samplesExamples": [
      [
        "2 3 2 55\n20 30\n40 30 1\n2 3\n1 3",
        "3 4"
      ],
      [
        "3 2 6 30\n5 5 5\n5 5\n2 1\n2 2\n1 1\n1 2\n3 1\n3 2",
        "3 3"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Walter Erquínigo Pezo, Perú"
    },
    "hasImages": false
  },
  {
    "name": "Só um pouco resolvido",
    "text": "Jurgen Guntherswarchzhaffenstrassen é conhecido por seu jeito virtuoso de tocar guitarra e pelos métodos de ensino cruéis que emprega com seus alunos. O que a maioria das pessoas ignora nele é que ele também é fã de números.\nUltimamente Jurgen tem estudado listas ordenadas, mas está ficando entediado. Ele acha que essas listas são muito previsíveis e pouco abundantes, então decidiu apimentar um pouco as coisas.\nJurgen diz que uma lista (cid:96) de N inteiros positivos não necessariamente diferentes é apenas um pouco ordenada se e somente se para cada inteiro positivo x > 1 que ocorre em (cid:96), o número x - 1 aparece pelo menos uma vez antes da última ocorrência de x in (cid:96). Por exemplo • [2,3,1,2] é apenas um pouco classificado porque 1 aparece antes dos últimos 2 e 2 aparece antes dos últimos 3; • [2,3,4,3,2,1,3,4] não é apenas classificado por bits porque cada 1 aparece depois dos últimos 2; • [1,1,3,1,3,3,1,3] não é apenas um pouco classificado porque nenhum 2 aparece antes dos últimos 3 (já que 2 não aparece nesta lista).\nJurgen está tentando descobrir quantas listas diferentes, apenas um pouco ordenadas, de N inteiros positivos não maiores que K existem. Duas listas são diferentes se e somente se houver pelo menos uma posição na qual as listas possuem elementos distintos. Você pode ajudar Jurgen a contar o número de listas diferentes? Entrada\nA primeira linha contém dois inteiros N e Q, representando respectivamente o número de elementos nas listas apenas um pouco ordenadas e o número de consultas a serem respondidas (1 ≤ N ≤ 5000 e 1 ≤ Q ≤ 1000).\nA segunda linha contém Q inteiros K1,K2,...,KQ, indicando que as listas que você deve contar na i-ésima consulta não podem conter valores maiores que Ki (1 ≤ Ki ≤ 109 para i = 1,2,.. .,Q).\nSaída\nProduza uma linha com Q inteiros, de modo que o i-ésimo inteiro represente o número de diferentes listas classificadas apenas um pouco de N inteiros positivos não maiores que Ki (para i = 1,2,...,Q). Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "1 1\n1",
        "1"
      ],
      [
        "3 4\n2 2 1 10",
        "5 5 1 6"
      ],
      [
        "1000 3\n100 5 300",
        "265428620 285047952 668355714"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Jorge Enrique Moreira Broche, Cuba"
    },
    "hasImages": false
  },
  {
    "name": "Identificando chá",
    "text": "A degustação de chá às cegas é a habilidade de identificar um chá usando apenas os sentidos do olfato e do paladar.\nComo parte do Desafio Ideal dos Consumidores de Chá Puro (ICPC), é organizado um programa de TV local. Durante o show, um bule cheio é preparado e cinco competidores recebem uma xícara de chá cada. Os participantes deverão cheirar, provar e avaliar a amostra para identificar o tipo de chá, que pode ser: (1) chá branco; (2) chá verde; (3) chá preto; ou (4) chá de ervas. Ao final, as respostas são verificadas para determinar o número de palpites corretos.\nDado o tipo real de chá e as respostas fornecidas, determine o número de competidores que acertaram a resposta.\nEntrada\nA primeira linha contém um inteiro T representando o tipo de chá (1 ≤ T ≤ 4). A segunda linha contém cinco inteiros A, B, C, D e E, indicando a resposta dada por cada competidor (1 ≤ A,B,C,D,E ≤ 4).\nSaída\nProduza uma linha com um número inteiro representando o número de competidores que acertaram a resposta.",
    "samplesExamples": [
      [
        "1\n1 2 3 2 1",
        "2"
      ],
      [
        "3\n4 1 1 2 1",
        "0"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Inés Kereki, Uruguai"
    },
    "hasImages": false
  },
  {
    "name": "Mapa de altura",
    "text": "Um mapa de altura é uma matriz bidimensional de inteiros positivos que representa um poliedro. Cada célula da matriz com valor V representa uma coluna em forma de paralelepípedo de 1 × 1 × V que é colocada em uma de suas faces 1 × 1 na célula. Isso cria um poliedro com uma única face na parte inferior composta de todas as faces 1×1 voltadas para baixo combinadas e possivelmente várias faces na parte superior e nas laterais.\nPor exemplo, uma matriz 2 × 2 com todos os valores iguais a 2 representa um cubo de lado 2. Porém, se um dos valores for 1, o poliedro representado é o mesmo cubo com um canto cortado. A imagem a seguir representa ambas as alternativas.\nEmbora nem todos os poliedros possam ser representados desta forma, existem vários que podem. Aqui estão alguns exemplos de 2 1o 1 2er = arquivos.\nDado um mapa de altura, você deverá contar o número de faces do poliedro representado.\nObserve que uma face é definida como um polígono simples que descreve um limite contíguo e máximo do poliedro. Como você pode ver nos dois últimos exemplos, é possível que duas faces coplanares diferentes compartilhem um vértice comum, ou mesmo um lado, ou porções de um lado.\nEntrada\nA primeira linha contém dois inteiros R e C, representando respectivamente o número de linhas e colunas do mapa de altura (1 ≤ R,C ≤ 100). Cada uma das próximas R linhas contém C inteiros; o j-ésimo inteiro na i-ésima linha é o valor Vi,j localizado na i-ésima linha e j-ésima coluna da matriz (1 ≤ Vi,j ≤ 109 para i = 1,2,... ,R e j = 1,2,...,C).\nSaída\nProduza uma linha com um número inteiro representando o número de faces do poliedro representado pelo mapa de altura de entrada.\nExemplo de entrada 1 Exemplo de saída 1 2 2 6 Exemplo de entrada 2 Exemplo de saída 2 2 2 9 Exemplo de entrada 3 Exemplo de saída 3 2 2 13 Exemplo de entrada 4 Exemplo de saída 4 2 3 14",
    "samplesExamples": [
      [
        "2 2\n2 2\n2 2",
        "6"
      ],
      [
        "2 2\n2 2\n2 1",
        "9"
      ],
      [
        "2 2\n2 1\n1 2",
        "13"
      ],
      [
        "2 3\n3 2 2\n1 3 2",
        "14"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": true
  },
  {
    "name": "Cachorros-quentes",
    "text": "Em 2012 foi alcançado um novo recorde mundial na famosa Competição de Cachorros-Quentes do Nathan: o campeão, Joey Chestnut, devorou 68 cachorros-quentes em dez minutos, um aumento incrível em relação aos 62 sanduíches devorados pelo mesmo Chestnut em 2011.\nO restaurante Nathan’s Famous Corporation, localizado no Brooklyn, NY, é o responsável pela competição. Eles produzem deliciosos cachorros-quentes, mundialmente famosos, mas quando o as sunto é matemática eles não são tão bons. Eles desejam ser listados no Livro de Recordes do Guinness, mas para isso devem preencher um formulário descrevendo os fatos básicos da competição. Em par ticular, eles devem informar o número médio de cachorros-quentes consumidos pelos participantes durante a competição.\nVocê pode ajudá-los? Eles prometeram pagá-lo com um dos seus saborosos cachorros-quentes. Da dos o número total de cachorros-quentes consumidos e o número total de participantes na competição, você deve escrever um programa para determinar o número médio de cachorros-quentes consumidos pelos participantes.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros H e P (1 ≤ H,P ≤ 1000) indicando respectivamente o número total de cachorros-quentes consumidos e o número total de participantes na competição.\nSaída\nSeu programa deve produzir uma única linha com um número racional representando o número médio de cachorros-quentes consumidos pelos participantes. O resultado deve ser escrito como um número racional com exatamente dois dígitos após o ponto decimal, arredondado se necessário.",
    "samplesExamples": [
      [
        "10 90",
        "0.11"
      ],
      [
        "840 11",
        "76.36"
      ],
      [
        "1 50",
        "0.02"
      ],
      [
        "34 1000",
        "0.03"
      ],
      [
        "35 1000",
        "0.04"
      ],
      [
        "36 1000",
        "0.04"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Concurso de contos",
    "text": "Machado gosta muito de escrever. Já escreveu muitos contos, resenhas, relatos de viagens que fez, além de um pequeno romance. Agora Machado quer participar de um concurso de contos, que tem regras muito rígidas sobre o formato de submissão do conto.\nAs regras do concurso especificam o número máximo de caracteres por linha, o número máximo de linhas por página, além de limitar o número total de páginas. Adicionalmente, cada palavra deve ser escrita integralmente em uma linha (ou seja, a palavra não pode ser separada silabicamente em duas linhas). Machado quer escrever um conto com o maior número de palavras possível, dentro das regras do concurso, e precisa de sua ajuda.\nDados o número máximo de caracteres por linha, o número máximo de linhas por página, e as palavras do conto que Machado está escrevendo, ele quer saber o número mínimo de páginas que seu conto utilizaria seguindo as regras do concurso.\nEntrada\nA primeira linha da entrada contém três inteiros N, L e C (2 ≤ N ≤ 1000, 1 ≤ L ≤ 30 e 1 ≤ C ≤ 70) que indicam, respectivamente, o número de palavras do conto de Machado, o número máximo de linhas por página e o número máximo de caracteres por linha. O conto de Machado é inovador e não contém nenhum caractere além de letras maiúsculas e minúsculas e espaços em branco, sem letras acentuadas e sem cedilha. A segunda linha contém o conto de Machado, composto de N palavras separadas por espaços em branco; há espaço em branco somente entre duas palavras, e entre duas palavras há exatamente um espaço em branco. Cada palavra é composta por no mínimo uma e no máximo C letras.\nSaída\nSeu programa deve produzir uma única linha, contendo um único número inteiro, indicando o número mínimo de páginas que o conto de Machado ocupa, considerando as regras do concurso.",
    "samplesExamples": [
      [
        "14 4 20\nSe mana Piedade tem casado com Quincas Borba apenas me daria uma esperanca colateral",
        "2"
      ],
      [
        "16 3 30\nNo dia seguinte entrou a dizer de mim nomes feios e acabou alcunhando me Dom Casmurro",
        "1"
      ],
      [
        "5 2 2\na de i de o",
        "3"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Divisores",
    "text": "Pense um número positivo n. Agora me diga um divisor A de n. Agora me dê um outro número B que não seja divisor de n. Agora um múltiplo C. E um não múltiplo D. O número que você pensou é...\nParece um truque de mágica, mas é matemática! Será que, conhecendo os números A,B,C e D, você consegue descobrir qual era o número original n? Note que pode existir mais de uma solução! Neste problema, dados os valores de A, B, C e D, você deve escrever um programa que determine qual o menor número n que pode ter sido pensado ou concluir que não existe um valor possível.\nEntrada\nA entrada consiste de uma única linha que contém quatro números inteiros A, B, C, e D, como descrito acima (1 A,B,C,D 109).\n  Saída\nSeu programa deve produzir uma única linha. Caso exista pelo menos um número n para os quais A, B, C e D façam sentido, a linha deve conter o menor n possível. Caso contrário, a linha deve conter 1.\n\u0000",
    "samplesExamples": [
      [
        "2 12 8 2",
        "4"
      ],
      [
        "3 4 60 105",
        "6"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Kit de encolhimento de polígonos",
    "text": "Um Kit de Encolhimento de Polígonos é um material muito utilizado nas aulas de magia geométrica na Nlogônia. O kit consiste de dois pontos, A e B no plano cartesiano. Considere um polígono convexo dado pelos vértices 1,2...N, nessa ordem. Para encolher esse polígono usando o kit, algumas regras devem ser respeitadas. Cada vértice x do polígono deve ser movido uma vez só: para o ponto médio do segmento Ax ou para o ponto médio do segmento Bx. A operação de encolhimento deve produzir um novo polígono convexo que preserve a ordem relativa dos vértices do polígono original. Em outras palavras, considerando todas as possíveis maneiras de aplicar o kit, apenas aquelas cuja sequência final dos vértices 1,2...N representa um polígono convexo são válidas. Veja que o polígono convexo original pode estar em sentido horário e uma operação de encolhimento válida produzir um polígono convexo em sentido anti-horário, na mesma ordem dos vértices. Apenas a ordem relativa dos pontos é importante, não o sentido.\nÉ sabido que magia geométrica não é o forte da maioria dos alunos. A professora pediu que eles usassem o kit de encolhimento para encolher um polígono convexo fornecido por ela de forma a obter a menor área possível e um amigo seu implorou para que você resolva a questão por ele. Responda a menor área possível do polígono para ele.\nA Figura acima ilustra um uso válido do kit, onde o polígono sombreado é o de menor área possível que preserva a sequência dos vértices. Os pontos A e B correspondem aos pontos do kit. Note que, apesar do nome encolhimento, às vezes é possível utilizar o kit para aumentar a área dos polígonos! Como geometria é difícil! Observe que um único ponto ou uma reta não são considerados polígonos. Sendo assim, se um uso do kit produzir como resultado algo diferente de um polígono convexo, esse não é um uso válido.\nEntrada\nA primeira linha da entrada contém um inteiro N (3 N 105), o número de vértices do polígono.\nSeguem N linhas, cada uma com dois inteiros x,y ( 106 x,y 106), os vértices do poligono. A u c´ olt oi rm da enl ain dh aa s d xa ee ynt dra ed Aa c eo an sté cm ooq rdu ea ntr ao dain st xeir eos y, dA ex, B\u0000A , y r, esB p x ece tiB vay m( e\u0000n1 te0 .6 OsA px o, nA toy, sB dx a,B eny trad1 a06 s) e, rãa os dados na ordem correta em que aparecem no polígono, no sentido horário ou anti-horário. Não haverão pontos repetidos e o polígono será convexo.\nSaída\nSeu programa deve produzir uma linha, contendo um número real, com 3 casas decimais de precisão, representando a menor área possível para um polígono obtido com o uso do kit.",
    "samplesExamples": [
      [
        "3\n20 6\n4 8\n2 6\n0 0 4 0",
        "3.500"
      ],
      [
        "3\n0 4\n4 4\n0 0\n3 -2 -3 -2",
        "1.000"
      ],
      [
        "3\n0 4\n4 4\n0 0\n2 -2 -2 -2",
        "2.000"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Fundindo árvores",
    "text": "Em Computação árvores são objetos estranhos: a raiz está no topo e as folhas estão embaixo! Uma árvore é uma estrutura de dados composta de N vértices conectados por N 1 arestas de forma que é possível chegar de um vértice a qualquer outro vértice seguindo as arestas. E\u0000m uma árvore enraizada, cada aresta conecta um vértice pai a um vértice filho. Um único vértice não tem pai, e é chamado de raiz. Assim, partir da raiz é possivel chegar a qualquer outro vértice da árvore seguindo as arestas na direção de pai para filho.\nEm uma árvore ternária cada vértice pode ter até três vértices filhos, chamados esquerdo, central e direito. Uma árvore ternária canhota é uma árvore ternária enraizada em que nenhum vértice tem filho direito. Uma árvore ternária destra é uma árvore ternária enraizada em que nenhum vértice tem filho esquerdo. A raiz de uma árvore ternária é sempre um vértice central. A figura abaixo mostra exemplos de uma árvore canhota e de uma árvore destra.\nA superposição S de uma árvore canhota C com uma árvore destra D é uma árvore ternária enraizada em que a raiz é ou a raiz de C ou a raiz de D ou ambas as raízes, de C e de D, superpostas, e que contém a estrutura de ambas as árvores superpostas. A figura abaixo mostra algumas árvores formadas pela superposição da árvore canhota e da árvore destra da figura acima.\nNote que na Figura (a) a raiz é o vértice x (da árvore destra) e os pares de vértices (a,y) e (c,u) são superpostos. Na Figura (b) a raiz é o vértice a (da árvore canhota) e os pares de vértices (d,x), (e,y) e (f,u) são superpostos. Na Figura (c) a raiz também é o vértice a (da árvore canhota) e o par de vértices (f,x) é superposto.\nDadas uma árvore canhota e uma árvore destra, sua tarefa é determinar o número mínimo de vértices necessários para construir uma árvore ternária que é uma superposição das árvores dadas.\nEntrada\nA primeira linha de um caso de teste contém um inteiro N indicando o número de vértices da árvore canhota (1 N 104). Vértices nesta árvore são identificados por números de 1 a N, e a raiz é o vértice de número 1. Cada uma das N linhas seguintes contém três inteiros I, L e K, indicando respectivamente o identificador de um vértice I, o identificador do filho esquerdo L de I e o identificador do filho central K de I (0 I,L,K N). A linha seguinte contém um inteiro M indicando o número de vértices da árvore destra (1 M 104). Vértices nesta árvore são identificados por números de 1 a M, e a raiz é o vértice de número 1. Cada uma das M linhas seguintes contém três inteiros P, Q e R, indicando respectivamente o identificador de um vértice P, o identificador do filho central Q de P e o identificador do filho direito R de P (0 P,Q,R N). O valor zero indica um vértice não existente (usado quando um vértice não tem umou ambosos seus filhos).\nSaída\nImprima o número mínimo de vértices de uma árvore que é a superposição das duas árvores dadas na entrada.",
    "samplesExamples": [
      [
        "7\n1 2 3\n2 0 0\n3 4 0\n4 0 5\n5 0 6\n6 7 0\n7 0 0\n7\n1 2 3\n2 4 0\n3 5 0\n4 0 6\n5 0 0\n6 0 7\n7 0 0",
        "11"
      ],
      [
        "5\n1 2 3\n2 4 5\n3 0 0\n4 0 0\n5 0 0\n3\n1 2 3\n2 0 0\n3 0 0",
        "6"
      ],
      [
        "3\n3 0 2\n2 0 0\n1 0 3\n2\n2 0 0\n1 2 0",
        "3"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Containers",
    "text": "O SBC–Sistema de Balanceamento de Containers precisa ser atua lizado para funcionar com uma nova classe de navios, a “dois por quatro”, que são navios que podem carregar oito grandes containers numa disposição de duas linhas e quatro colunas, como mostrado na figura ao lado. Esses navios possuem um guindaste fixo que é capaz de realizar um único tipo de movimentação: levantar dois containers adjacentes, na linha ou na coluna, e trocá-los de posição. Para ace lerar o carregamento nos portos, os oito containers são embarcados em qualquer uma das oito posições, definindo uma configuração ini cial. Depois que o navio deixa o porto, o guindaste precisa mover os containers para deixá-los numa configuração final pré-definida para a viagem.\nO problema é que o custo de combustível para o guindaste realizar uma movimentação é igual à soma dos pesos dos dois containers adjacentes cujas posições foram trocadas. Dados os pesos dos containers em cada posição nas configurações inicial e final, o SBC precisa computar o custo total mínimo possível de uma sequência de movimentações que leve os containers da configuração inicial à configuração final.\nEntrada\nA entrada consiste de quatro linhas contendo, cada uma, quatro inteiros entre 1 e 1000, inclusive.\nAs duas primeiras linhas definem os pesos na configuração inicial e as duas últimas linhas, os pesos na configuração final. Sempre existe uma solução, pois os containers nas configurações inicial e final são os mesmos, com as posições possivelmente trocadas.\nSaída\nSeu programa deve produzir uma única linha contendo um inteiro, representando o custo total mínimo de uma sequência de movimentos que leve da configuração inicial à configuração final.\nExemplo de entrada 1 Exemplo de saída 1 81 Exemplo de entrada 2 Exemplo de saída 2   3 4 50 5 10 7 8   3 4 5 8 7 10",
    "samplesExamples": [
      [
        "3 1 2 1\n4 7 52 9\n7 1 2 1\n3 9 52 4",
        "81"
      ],
      [
        "1 2 3 4\n5 10 7 8\n1 2 3 4\n5 8 7 10",
        "50"
      ],
      [
        "34 5 6 998\n4 17 77 84\n34 5 6 998\n4 17 77 84",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Batata quente",
    "text": "Batata quente é uma brincadeira bastante popular entre crianças na escola. A brincadeira é simples: a criança que está com a batata a joga para uma outra criança. Em algum momento, o professor, que não está olhando para o que está acontecendo, irá dizer que a brincadeira acabou. Quando isso acontece, a criança que está com a batata perde.\nUma variação da brincadeira, jogada na fila da cantina, é proposta por um professor. As crianças estão numeradas de 1 a N de acordo com sua posição na fila, onde a criança com o número 1 é a primeira da fila. Cada uma receberá um papel com um número, e sempre que receber a batata, deverá passá-la para a criança na posição anotada em seu papel. O jogo termina com o professor vitorioso se a batata chegar em uma posição menor ou igual a X na fila, com X definido no início da brincadeira.\nSe isso nunca acontecer, o jogo nunca termina, porém as crianças saem vitoriosas: no dia seguinte todas ganham um desconto na cantina.\nO professor começa o jogo jogando a batata para alguma criança na fila. Como sua mira não é muito boa, ele só consegue garantir que vai jogar a batata para alguma criança em um invervalo L...R da fila com a mesma probabilidade. Ele está considerando vários possíveis intervalos da fila para iniciar a brincadeira. Para isso, o professor gostaria de descobrir, para cada um desses intervalos, qual o valor de X que ele deve escolher para que o jogo seja o mais justo possível, ou seja, a probabilidade de o jogo terminar seja a mais próxima possível da probabilidade de o jogo não terminar.\nVocê deve auxiliar o professor a avaliar as propostas. Dados os papéis de cada criança da fila e vários intervalos possíveis, responda, para cada intervalo, o valor de X que torne o jogo mais justo possível. Se houver empate, responda o X mais próximo do início da fila.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e Q (2 N 50000, 1 Q 105). A l uin mh aa ds aeg su ci rn it ae nçc ao sn .té Sm egN ueminte ei nr to ãs op Q1,p l2 in. h. a.p s,N ca(1 daup mi acN om), o ds oiv sa il no tr ee is rod sos Lp eap Réis (1receb Lidos Rpor c Nad )a , representando um intervalo considerado pelo professor.    Saída\nImprima Q linhas, cada uma contendo, para cada intervalo considerado pelo professor, o número inteiro X que o professor deverá escolher para que a brincadeira seja a mais justa possível.",
    "samplesExamples": [
      [
        "9 4\n2 3 4 5 6 7 4 9 5\n1 3\n3 5\n2 8\n7 9",
        "1\n3\n3\n1"
      ],
      [
        "3 3\n1 3 3\n1 1\n1 2\n2 3",
        "1\n1\n2"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Andando no tempo",
    "text": "Imagine que você tenha uma máquina do tempo que pode ser usada no máximo três vezes, e a cada uso da máquina você pode escolher voltar para o passado ou ir para o futuro. A máquina possui três créditos fixos; cada crédito representa uma certa quantidade de anos, e pode ser usado para ir essa quantidade de anos para o passado ou para o futuro. Você pode fazer uma, duas ou três viagens, e cada um desses três créditos pode ser usado uma vez apenas. Por exemplo, se os créditos forem 5,12 e 9, você poderia decidir fazer duas viagens: ir 5 anos para o futuro e, depois, voltar 9 anos para o passado. Dessa forma, você terminaria quatro anos no passado, em 2012. Também poderia fazer três viagens, todas indo para o futuro, usando os créditos em qualquer ordem, terminando em 2042.\nNeste problema, dados os valores dos três créditos da máquina, seu programa deve dizer se é ou não possível viajar no tempo e voltar para o presente, fazendo pelo menos uma viagem e, no máximo, três viagens; sempre usando cada um dos três créditos no máximo uma vez.\nEntrada\nA entrada consiste de uma linha contendo os valores dos três créditos A,B e C (1 A,B,C 1000).   Saída\nSeu programa deve imprimir uma linha contendo o caracter “S” se é possível viajar e voltar para o presente, ou “N” caso contrário.",
    "samplesExamples": [
      [
        "22 5 22",
        "S"
      ],
      [
        "31 110 79",
        "S"
      ],
      [
        "45 8 7",
        "N"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Estatística hexa",
    "text": "Dada uma sequência de inteiros positivos em hexadecimal, por exemplo, S = [9af47c0b,2545557, ff6447979], definimos soma(S) como sendo a soma de todos os elementos de S. Considere agora uma certa permutação dos 16 dígitos hexadecimais, por exemplo, p = [4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e].\nA partir da sequência base S, podemos definir uma sequência transformada S[4], que é obtida pela remoção de todas as ocorrências do dígito hexadecimal 4 de todos os inteiros em S, S[4] = [9af7c0b, 255557,ff67979]. Em seguida, podemos remover o dígito 9 e obter S[4,9] = [af7c0b, 255557,ff677].\nSeguindo a ordem dos dígitos na permutação p, podemos definir dessa forma 16 sequências: S[4],S[4,9], S[4,9,5],...,S[4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e]. Estamos interessados em somar todos os elementos dessas 16 sequências: total(S,p) = soma(S[4]) + soma(S[4,9]) + soma(S[4,9,5]) + + soma(S[4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e]) ··· Claramente, esse total depende da permutação p usada na remoção sucessiva. Dada uma sequência de N inteiros positivos em hexadecimal, seu programa deve computar, considerando todas as possíveis permutações dos 16 dígitos hexadecimais: o total mínimo, o total máximo e o somatório dos totais de todas as permutações. Para o somatório dos totais de todas as permutações, imprima o resultado módulo 3b9aca07 (109 + 7 na base 10).\nEntrada\nA primeira linha da entrada contém um inteiro N, 1 N 3f, representando o tamanho da sequência. As N linhas seguintes contêm, cada uma, um inteiropositivo P, 0 P fffffffff, definindo a sequência inicial S de inteiros. Todos os números na entrada estão emhexadecimal, com letras minúsculas.\nSaída\nSeu programa deve produzir uma única linha na saída contendo três inteiros positivos, em hexade cimal com letras minúsculas, representando o total mínimo, o total máximo e o somatório dos totais considerando todas as permutações possíveis dos 16 dígitos hexadecimais.",
    "samplesExamples": [
      [
        "3\n9af47c0b\n2545557\nff6447979",
        "1312c99c b4e87e9387 5bb5fc"
      ],
      [
        "1\nfffffffff",
        "0 effffffff1 15dac189"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogos olímpicos",
    "text": "Um grupo de investidores está pensando em investir pesado em atletas da delegação brasileira após as olimpíadas do Rio. Para isso, eles vêm observando N atletas e perceberam que alguns estão em decadência e outros em ascensão. Em especial, o grupo está de olho em dois fatores sobre cada atleta: seu cansaço e sua habilidade. Eles anotaram os valores de habilidade e cansaço de cada atleta logo ao final das olimpíadas de 2016. Em seguida, o grupo estimou a taxa com a qual cada atleta perde ou ganha habilidade e a taxa com a qual cada atleta se cansa ao longo do tempo, e percebeu que essas taxas são constantes para os dois atributos.\nOs investidores perceberam que esses dados lhes permitem definir o que resolveram chamar de atleta de ouro: um atleta que, em um determinado período de tempo, é o atleta menos cansado e o mais habilidoso. Ficou decidido que investimentos serão feitos apenas em atletas de ouro. Descubra quantos jogadores, entre os observados inicialmente, receberão algum investimento. Considere que o tempo t = 0 é o tempo das olimpíadas do Rio: nenhum atleta que foi de ouro antes desse tempo pode receber investimento. Considere também que qualquer tempo após as olimpíadas do Rio deve ser considerado, por maior que seja. Um atleta que é de ouro exatamente no tempo t = 0 deve ser contado.\nEntrada\nA primeira linha da entrada contém um inteiro, N (1 N 105), o número de atletas. Seguem N H dait,l hi Cn ai bth ia 6= ls id, 0 a)c d,a erd ,ea p oru cem ase na n st ac a ço n om d ao oq , u r fiea nst apr lo e dcn t aiu s´ vm a om le imr eo n ps t íe ai ,n dat ae shir a eo bs a: ili tdH aa xi d a, e dH a ei ot, vfi aC n r ii a a, l çC ãd oait s d( o\u0000 oli1 cm0 a6 np´ sıa< ad çoaH s d,i, oaH it -it a é, x sC ia mi, d oC e ait v ta l er tia a1 ç .0 ã6 o, Saída\nSeu programa deve produzir uma única linha com um inteiro O, representando o número de atletas que receberão algum investimento do grupo.",
    "samplesExamples": [
      [
        "3\n3 2 1 2\n2 2 2 2\n1 2 3 2",
        "1"
      ],
      [
        "6\n1 10 5 8\n8 7 12 -5\n10 -2 -3 8\n-3 -5 -8 -12\n0 1 10 2\n8 3 9 -3",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "huaauhahhuahau",
    "text": "Em chats, é muito comum entre jovens e adolescentes utilizar sequências de letras, que parecem muitas vezes aleatórias, para representar risadas. Alguns exemplos comuns são: huaauhahhuahau hehehehe ahahahaha jaisjjkasjksjjskjakijs huehuehue Cláudia é uma jovem programadora que ficou intrigada pela sonoridade das “risadas digitais”.\nAlgumas delas ela nem mesmo consegue pronunciar! Mas ela percebeu que algumas delas parecem transmitir melhor o sentimento da risada que outras. A primeira coisa que ela percebeu é que as consoantes não interferem no quanto as risadas digitais influenciam na transmissão do sentimento.\nA segunda coisa que ela percebeu é que as risadas digitais mais engraçadas são aquelas em que as sequências de vogais são iguais quando lidas na ordem natural (da esquerda para a direita) ou na ordem inversa (da direita para a esquerda), ignorando as consoantes. Por exemplo, “hahaha” e “huaauhahhuahau” estão entre as risadas mais engraçadas, enquanto “riajkjdhhihhjak” e “huehuehue” não estão entre as mais engraçadas.\nCláudia está muito atarefada com a análise estatística das risadas digitais e pediu sua ajuda para escrever um programa que determine, para uma risada digital, se ela é das mais engraçadas ou não.\nEntrada\nA entrada é composta por uma linha, contendo uma sequência de no máximo 50 caracteres, formada apenas por letras minúsculas sem acentuação. As vogais são as letras ‘a’,‘e’,‘i’,‘o’,‘u’. A sequência contém pelo menos uma vogal.\nSaída\nSeu programa deve produzir uma linha contendo um caractere, “S” caso a risada seja das mais engraçadas, ou “N” caso contrário.",
    "samplesExamples": [
      [
        "hahaha",
        "S"
      ],
      [
        "riajkjdhhihhjak",
        "N"
      ],
      [
        "a",
        "S"
      ],
      [
        "huaauhahhuahau",
        "S"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ladrilhos",
    "text": "Avelino tem um mosaico em uma das paredes de sua casa. É uma mosaico muito antigo, composto por pequenos ladrilhos coloridos. Como é um mosaico antigo, alguns ladrilhos se soltaram ao longo dos anos formando buracos.\nAgora, Avelino quer restaurar o mosaico cobrindo os buracos com novos ladrilhos. Entretanto, para economizar, Avelino quer comprar ladrilhos de uma única cor para tapar os buracos. Em particular, quer comprar ladrilhos de uma das cores originais ou de uma cor ainda não contida no mosaico.\nPor ser um mosaico, não se deseja que hajam áreas muito grandes com a mesma cor. Avelino resolveu que vai escolher a cor dos ladrilhos tentando fazer com que o tamanho da menor área mo nocromática seja o menor possível, para que haja mais detalhes. Veja que pode existir mais de uma cor possível. Uma área é monocromática se todos os ladrilhos nela são da mesma cor. Dois ladrilhos adjacentes fazem parte da mesma área se possuem a mesma cor, e dois ladrilhos são adjacentes se compartilham um lado.\nVeja o primeiro caso de exemplo, temos três áreas da cor 1 (uma de tamanho 3 e duas de tamanho 2), uma área da cor 2 (de tamanho 3) e uma área da cor 3 de tamanho 7. Uma resposta possível seria escolher a cor 2, fazendo com que a menor área monocromática seja de tamanho 2. Se escolhermos a cor 1 a menor área seria de tamanho 3.\nCrie um programa que imprima o tamanho da menor área possível.\nEntrada\nA primeira linha contém dois inteiros H e L, a altura e largura do mosaico, respectivamente, satisfazendo 1 H 200 e 1 L 200 . Em seguida, H linhas conterão cada uma L inteiros, separados por espaço,correspondendoàs cores dos ladrilhos. Um inteiro 0 corresponde a um buraco e um inteiro i = 0 corresponde a um ladrilho com a i-ésima cor, podendo ir de 1 até 40000 no máximo.\n6 Saída\nSeu programa deve produzir uma linha, contendo um inteiro, o tamanho da menor área possível.",
    "samplesExamples": [
      [
        "3 8\n3 3 3 1 1 0 0 0\n3 1 1 0 2 2 0 1\n3 3 3 0 0 2 1 1",
        "2"
      ],
      [
        "3 7\n1 1 0 2 2 1 1\n1 1 0 2 2 1 1\n1 1 0 0 3 3 3",
        "3"
      ],
      [
        "3 6\n2 2 2 2 0 2\n2 2 2 0 2 2\n2 2 2 2 0 2",
        "1"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Concorrência",
    "text": "Bob e Alice estão participando de um concurso de programação em equipe. O concurso tem N problemas que devem ser resolvidos em ordem. Naturalmente, existem alguns problemas que eles não conseguem resolver; nesse caso, podem ignorá-los. Também pode haver problemas que apenas Bob ou Alice podem resolver.\nEles querem resolver todos os problemas possíveis trocando o mínimo de vezes possível quem está no computador programando a solução.\nDado o número de problemas e os problemas que Bob e Alice podem resolver, calcule o número mínimo de alternâncias entre o uso do computador. Qualquer pessoa pode começar a usá-lo.\nEntrada\nA primeira linha contém três inteiros N (1 ≤ N ≤ 109), A (1 ≤ A ≤ min(N,5 ∗ 104)) e B (1 ≤ B ≤ min(N,5 ∗ 104)). A próxima linha contém inteiros únicos A denotando os problemas que Alice pode resolver. A linha a seguir contém B inteiros únicos denotando os problemas que Bob pode resolver. O primeiro problema é denotado pelo número 1, o segundo pelo número 2, o N-ésimo por N e assim por diante.\nSaída\nProduza uma linha com um número inteiro representando o número mínimo de alternâncias entre o uso do computador.",
    "samplesExamples": [
      [
        "5 2 3\n2 4\n1 5 3",
        "4"
      ],
      [
        "4 3 3\n1 2 3\n2 3 4",
        "1"
      ],
      [
        "4 3 3\n1 3 4\n4 3 1",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Bruno Junqueira Adami, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Dígitos Diferentes",
    "text": "Os habitantes da Nlogônia são muito supersticiosos. Uma de suas crenças é que números de casas de rua com dígitos repetidos trazem azar aos moradores. Portanto, eles nunca morariam em uma casa com número de rua como 838 ou 1004.\nA Rainha da Nlogónia mandou construir uma nova avenida à beira-mar, e quer atribuir às novas casas apenas números sem dígitos repetidos, para evitar desconforto entre os seus súbditos. Você foi nomeado por Sua Majestade para escrever um programa que, dados dois inteiros N e M, determine o número máximo de casas às quais podem ser atribuídos números de ruas entre N e M, inclusive, que não tenham dígitos repetidos.\nEntrada\nA entrada consiste em uma única linha que contém dois inteiros N e M, conforme descrito acima (1 ≤ N ≤ M ≤ 5000).\nSaída\nProduza uma linha com um número inteiro representando o número de números de casas entre N e M, inclusive, sem dígitos repetidos.",
    "samplesExamples": [
      [
        "87 104",
        "14"
      ],
      [
        "989 1022",
        "0"
      ],
      [
        "22 25",
        "3"
      ],
      [
        "1234 1234",
        "1"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Ines Kereki, Uruguai"
    },
    "hasImages": false
  },
  {
    "name": "Máquina de verificação automatizada",
    "text": "A Internet Computer Parts Company (ICPC) é uma loja on-line que vende peças de computador. Pares de conectores elétricos em linha estão entre as peças mais populares vendidas pela ICPC. Porém, também são uma das peças que mais são devolvidas por clientes insatisfeitos, pois devido a erros na embalagem os conectores enviados aos clientes podem não ser compatíveis.\nUm conector em linha é composto por cinco pontos de conexão, rotulados de 1 a 5. Cada ponto de conexão de um conector pode ser um plugue ou uma tomada. Dizemos que dois conectores são compatíveis se, para cada etiqueta, um ponto de conexão for um plugue e o outro ponto de conexão for uma tomada (em outras palavras, dois conectores são compatíveis se, para cada ponto de conexão com a mesma etiqueta, um plugue e um tomada se encontram quando os dois conectores estão conectados).\nA figura abaixo mostra exemplos de dois conectores compatíveis e dois conectores não compatíveis.\nA ICPC está lançando uma Máquina de Verificação Automatizada (ACM) de última geração, com um verificador óptico, que verificará se os dois conectores embalados para um cliente são realmente compatíveis. O hardware complexo e caro do ACM está pronto, mas eles precisam da sua ajuda para finalizar o software.\nDadas as descrições de um par de conectores em linha, sua tarefa é determinar se os conectores são compatíveis.\nEntrada\nA primeira linha contém cinco inteiros Xi (0 ≤ Xi ≤ 1 para i = 1,2,...,5), representando os pontos de conexão do primeiro conector do par. A segunda linha contém cinco inteiros Yi (0 ≤ Yi ≤ 1 para i = 1,2,...,5), representando os pontos de conexão do segundo conector. Na entrada, 0 representa uma tomada e 1 representa um plugue.\nSaída\nProduza uma linha com um caractere que representa se os conectores são compatíveis ou não. Se forem compatíveis escreva a letra “Y” maiúscula; caso contrário, escreva a letra maiúscula “N”.",
    "samplesExamples": [
      [
        "1 1 0 1 0\n0 0 1 0 1",
        "Y"
      ],
      [
        "1 0 0 1 0\n1 0 1 1 0",
        "N"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Namoro on-line",
    "text": "Alex se registrou em um sistema de namoro online para procurar o parceiro perfeito. O sistema exige que cada um de seus membros preencha um formulário especificando o quanto eles gostam de N atividades diferentes, classificando-as em uma escala de 0 a 100. Para apresentar essas informações a datas potenciais, o sistema cria um perfil apresentando um tipo especial de polígono chamado “diagrama radial”.\nUm diagrama radial para N atividades é desenhado marcando N pontos no plano. Começando na direção vertical, o i-ésimo ponto no sentido horário representa a i-ésima atividade especificada pelo membro, e está a uma distância Si do centro do diagrama, onde Si é a pontuação dada pelo membro para o correspondente atividade. O ângulo sustentado no centro do diagrama a partir de cada par de pontos consecutivos é sempre o mesmo, e o polígono é formado desenhando-se os segmentos cujas extremidades são pontos consecutivos. Observe que para efeitos do diagrama radial, o primeiro e o último pontos são considerados consecutivos.\nPor exemplo, se N = 6, Alex pode especificar as seguintes atividades: cantar com pontuação S1 = 10, correr com pontuação S2 = 60, ouvir música com pontuação S3 = 70, viajar com pontuação S4 = 70, comer fora com pontuação S5 = 80, e visitar museus com pontuação S6 = 80. Então o diagrama radial correspondente seria como mostrado na figura abaixo.\nA área de um diagrama radial depende da ordem em que as diferentes atividades são especificadas, e Alex suspeita que um perfil que represente um diagrama radial com área maior possa ser mais bem-sucedido.\nPor exemplo, o diagrama radial da figura a seguir apresenta as mesmas atividades e pontuações do exemplo acima, mas possui uma área maior.\nAlex pediu que você escrevesse um programa para encontrar a área máxima possível de um diagrama radial, dada uma lista de atividades avaliadas com pontuações entre 0 e 100.\nEntrada\nA primeira linha contém um inteiro N representando o número de atividades (3 ≤ N ≤ 105). A segunda linha contém N inteiros S1,S2,...,SN representando as notas dadas por Alex para cada atividade (0 ≤ Si ≤ 100 para i = 1,2,...,N).\nSaída\nProduza uma linha com um número racional representando a área máxima possível de um diagrama radial apresentando as pontuações fornecidas na entrada. O resultado deve ser exibido como um número racional com exatamente 3 dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "6\n10 60 70 70 80 80",
        "10002.593"
      ],
      [
        "3\n100 100 100",
        "12990.381"
      ],
      [
        "7\n16 37 50 35 12 39 24",
        "2772.765"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Rafael Garcia Gomes, Colômbia"
    },
    "hasImages": true
  },
  {
    "name": "Jogo de Combinações",
    "text": "Adam e Carol estão se divertindo muito jogando o Jogo dos Matchings. O jogo é jogado em uma corda S composta por |S| letras minúsculas em inglês, s1s2 ...s|S|. O objetivo é encontrar todas as correspondências de um tipo especial de padrão P em S. O padrão tem comprimento N e é definido por uma sequência de inteiros entre 1 e 26.\nConsideramos uma substring contígua sisi+1 ...si+N−1 começando na posição i de S uma correspondência do padrão P se houver um mapeamento dos números em P para letras minúsculas do inglês, de modo que o padrão seja mapeado para sisi+ 1...si+N−1 mas não há dois números distintos mapeados para a mesma letra.\nPor exemplo, se S é “awawww” e P é [10,21,10], as correspondências de P são as substrings de S de comprimento três começando nas posições 1 e 2: “awa” e “waw”. Observe que “www” não é uma ocorrência porque os números de padrão 10 e 21 seriam ambos mapeados para ‘w’.\nAdam e Carol perderam a folha de respostas e não têm certeza se estão encontrando todas as ocorrências de algumas sequências do jogo. Dados S e P, você consegue encontrar o número de correspondências para eles? Entrada\nA primeira linha contém uma string S não vazia de no máximo 5 × 105 caracteres. Cada caractere de S é uma letra minúscula em inglês de ‘a’ a ‘z’. A segunda linha contém um inteiro N representando o tamanho do padrão (1 ≤ N ≤ |S|). A terceira linha contém N inteiros P1, P2, ..., PN denotando o padrão (1 ≤ Pi ≤ 26 para i = 1,2,...,N).\nSaída\nProduza uma linha com um inteiro representando o número de correspondências de P encontradas em S.",
    "samplesExamples": [
      [
        "awawww\n3\n10 21 10",
        "2"
      ],
      [
        "abcdefghij\n10\n1 2 3 4 5 6 7 8 9 1",
        "0"
      ],
      [
        "abbabaabbaababba\n4\n1 2 2 1",
        "5"
      ],
      [
        "aabcddabccefkkgem\n5\n10 10 3 14 9",
        "4"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Luís Fernando Dorelli de Abreu, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Mate o lobisomem",
    "text": "No popular jogo de tabuleiro One Night Werewolf, os jogadores são distribuídos aleatoriamente nos papéis de aldeões e lobisomens. O objetivo dos aldeões é decidir juntos sobre uma pessoa para matar durante a noite – com sorte, eles matarão um Lobisomem. Lobisomens se passam por aldeões na esperança de que a pessoa morta seja um aldeão, não um lobisomem.\nNa variação Lobisomem Incerto, existe apenas um Lobisomem e o jogo consiste em duas fases.\nDurante a primeira fase os jogadores ainda não têm certeza sobre quem devem votar para matar, então cada um deles escolhe dois outros jogadores como possíveis vítimas. Após a primeira fase, o Lobisomem se revela e, na segunda fase, cada jogador deve decidir em qual das duas escolhas iniciais votará para matar. O Lobisomem é o último a decidir entre suas duas escolhas iniciais, fazendo isso depois que todos os outros jogadores já tiverem decidido.\nO Lobisomem então perde o jogo se tiver mais votos do que qualquer outro. Se houver empate, o Lobisomem vence.\nVocê recebe os votos de N jogadores após a primeira fase do jogo. Você deve responder quantos jogadores poderiam se revelar neste ponto como o Lobisomem e ainda assim vencer o jogo se os outros jogadores escolhessem seus votos de maneira ideal para matar o Lobisomem.\nEntrada\nA primeira linha contém um inteiro N (3 ≤ N ≤ 50), o número de jogadores no jogo. Cada uma das N linhas seguintes contém dois inteiros, ai e bi (1 ≤ ai,bi ≤ N, ai (cid:54)= bi), o índice dos jogadores que o i-ésimo jogador decidiu matar na primeira fase de votação . Nenhum jogador tentará se matar.\nSaída\nProduza uma linha com um número inteiro representando o número de jogadores que poderiam ganhar o jogo se fossem o Lobisomem e todos jogassem de maneira otimizada.",
    "samplesExamples": [
      [
        "5\n3 4\n1 3\n2 4\n1 3\n2 3",
        "4"
      ],
      [
        "4\n3 4\n1 4\n4 1\n3 1",
        "2"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Luis Fernando Dorelli de Abreu, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Robô agrícola",
    "text": "Para desencorajar pássaros como corvos e pardais de se alimentarem das suas colheitas, um agricultor precisou colocar alguns espantalhos no seu campo de milho. Seu sobrinho gosta muito de robôs e sugeriu que ele usasse um espantalho robô: “Um único espantalho robô pode proteger melhor todo o campo de milho e vai durar muito mais do que dez espantalhos tradicionais!”, disse ele.\nComo o fazendeiro acha que seu sobrinho é um menino inteligente, ele seguiu seu conselho e comprou um espantalho robô.\nO robô se move ao longo de um caminho que circunda o milharal. No caminho existem N estações de carregamento não tripuladas, numeradas sequencialmente no sentido horário a partir de 1. A figura abaixo mostra um exemplo com oito estações de carregamento.\nO robô começa todos os dias na estação número 1 e recebe uma sequência de comandos que devem ser executados em ordem durante o dia. Esses comandos são gerados com base em algoritmos avançados de aprendizado de máquina que funcionam em dados coletados por sensores espalhados pela plantação de milho, garantindo uma cobertura ideal da cultura. Cada comando faz com que o robô se mova para outra estação de carregamento próxima àquela em que está atualmente, no sentido horário ou anti-horário.\nApesar das promessas de cobertura ideal por parte do robô, ao final de um determinado dia o agricultor encontrou parte de sua lavoura devastada. Para descobrir o que pode ter acontecido o agricultor quer saber quantas vezes o robô esteve na estação de carregamento mais próxima da área devastada. Dado o número do posto mais próximo da área devastada e a sequência de comandos para um único dia, você consegue ajudar o agricultor a encontrar esse número? Entrada\nA primeira linha contém três inteiros N, C e S representando respectivamente o número de postos (2 ≤ N ≤ 100), o número de comandos (1 ≤ C ≤ 1000) e a estação de carregamento mais próxima da área devastada (1 ≤ S ≤ N). A segunda linha contém C inteiros X1,X2,...,XC, representando a sequência de comandos recebidos pelo robô espantalho. Para i = 1,2,...,C, se Xi for 1, então o i-ésimo comando significa “mover para a próxima estação de carregamento no sentido horário”, enquanto se Xi for −1, então o i-ésimo comando significa “ vá para a próxima estação de carregamento no sentido anti-horário”. O robô sempre inicia na estação número 1.\nSaída\nProduza uma linha com um número inteiro representando o número de vezes que o robô esteve na estação número S durante o dia.",
    "samplesExamples": [
      [
        "8 8 3\n1 -1 1 1 1 -1 1 1",
        "2"
      ],
      [
        "5 4 1\n1 1 1 1",
        "1"
      ],
      [
        "2 1 1\n1",
        "1"
      ],
      [
        "2 1 2\n1",
        "1"
      ],
      [
        "2 2 1\n-1 1",
        "2"
      ],
      [
        "2 2 1\n-1 -1",
        "2"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Contando subconjuntos auto-rotativos",
    "text": "Um conjunto de pontos no plano é auto-rotativo se houver um ponto P, o centro, e um ângulo α, expresso em graus, onde 0 < α < 360, tal que a rotação do plano, com centro P e ângulo α, mapeia cada ponto do conjunto para algum ponto também do conjunto.\nVocê recebe um conjunto de N pontos distintos, todos com coordenadas inteiras. Encontre o número de subconjuntos distintos de tamanho 1,2,...,N que giram automaticamente. Dois subconjuntos são considerados distintos se um contém um ponto que o outro não contém.\nEntrada\nA primeira linha da entrada contém um inteiro N representando o número de pontos no conjunto de entrada (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes descreve um ponto diferente do conjunto e contém dois inteiros X e Y dando suas coordenadas em um sistema de coordenadas cartesianas (−109 ≤ X,Y ≤ 109). Todos os pontos no conjunto de entrada são distintos.\nSaída\nProduza uma única linha contendo N inteiros S1,S2,...,SN. Para i = 1,2,...,N o inteiro Si deve ser o número de subconjuntos de i pontos do conjunto de entrada que são auto-rotativos. Como esses números podem ser muito grandes, produza-os módulo 109 + 7.",
    "samplesExamples": [
      [
        "3\n1 1\n2 2\n1 0",
        "3 3 0"
      ],
      [
        "7\n-2 0\n-1 1\n0 2\n0 0\n2 0\n1 -1\n0 -2",
        "7 21 5 5 3 1 1"
      ],
      [
        "1\n-1000000000 1000000000",
        "1"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "De volta para o Futuro",
    "text": "O Doutor Emmet está trabalhando em um dispositivo mais seguro para viajar no tempo. Ele reuniu N peças de metal diferentes e raras. Cada peça pode ser compatível com outras peças diferentes. Ele possui uma lista completa com M pares distintos de metais compatíveis. Qualquer par de metais que não esteja na lista é incompatível.\nPara que o dispositivo funcione, ele deve escolher um conjunto de metais tal que cada um deles seja compatível com pelo menos A outros desse conjunto. No entanto, para preservar algum equilíbrio, eles também devem ser incompatíveis com pelo menos B outros nesse conjunto.\nMais metais significam mais energia e um dispositivo mais seguro. É por isso que o Doutor Emmet precisa da sua ajuda, ele quer saber o tamanho do maior conjunto que pode escolher que atenda a esses critérios.\nEntrada\nA primeira linha contém quatro inteiros N, M, A e B, representando respectivamente quantas peças diferentes de metal existem (1 ≤ N ≤ 105), quantas compatibilidades existem (1 ≤ M ≤ 105) e as variáveis ​​A e B descritas na declaração do problema (0 ≤ A,B < N). Os diferentes metais são convenientemente numerados de 1 a N. Cada uma das M linhas seguintes contém dois inteiros X e Y correspondentes a um par de metais compatíveis (1 ≤ X,Y ≤ N com X (cid:54)= Y ). Não há pares repetidos na entrada.\nSaída\nProduza uma linha com um número inteiro representando o tamanho do maior conjunto de metais que atende aos requisitos especificados na definição do problema.",
    "samplesExamples": [
      [
        "3 1 1 0\n1 2",
        "2"
      ],
      [
        "3 1 1 1\n1 2",
        "0"
      ],
      [
        "7 12 2 2\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n3 4\n7 1\n2 7\n3 7\n4 7\n5 7",
        "6"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Bruno Junqueira Adami, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Atribuindo equipes",
    "text": "Quatro amigos estão jogando tênis de mesa. Cada um deles possui um nível de habilidade representado por um número inteiro: quanto maior o número, melhor é o jogador.\nOs quatro amigos querem formar duas equipes de dois jogadores cada. Para que o jogo seja mais emocionante, eles querem que o nível de habilidade das equipes seja o mais próximo possível. O nível de habilidade de uma equipe é a soma dos níveis de habilidade dos jogadores dessa equipe.\nEmbora sejam muito bons jogadores de tênis de mesa, esses amigos não são tão bons em outras coisas, como matemática ou informática. Você pode ajudá-los a encontrar a menor diferença possível entre os níveis de habilidade das equipes? Entrada\nA entrada consiste em uma única linha que contém quatro inteiros A, B, C e D, representando os níveis de habilidade dos quatro jogadores (0 ≤ A ≤ B ≤ C ≤ D ≤ 104).\nSaída\nProduza uma linha com um número inteiro representando a menor diferença entre os níveis de habilidade de ambas as equipes.",
    "samplesExamples": [
      [
        "4 7 10 20",
        "7"
      ],
      [
        "0 0 1 1000",
        "999"
      ],
      [
        "1 2 3 4",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Espectro de emissão",
    "text": "Cientistas do Consórcio Interestelar de Planetas e Constelações (ICPC) estão estudando a composição de muitos objetos celestes analisando seu espectro de emissão. O espectro de emissão de um objeto celeste é o espectro de frequências da radiação eletromagnética emitida devido às suas transições de energia atômica, juntamente com a intensidade da radiação emitida. Ou seja, corresponde à intensidade de cada cor da luz irradiada pelo objeto.\nDe acordo com os postulados da mecânica quântica, o espectro de emissão de um objeto celeste é sempre discreto. Portanto, o ICPC pode armazenar o espectro de emissão de um objeto como uma sequência de números inteiros onde cada posição na sequência corresponde à intensidade de um comprimento de onda específico. Nesta representação do espectro, números maiores correspondem a intensidades emitidas mais altas, e posições contíguas na sequência correspondem a comprimentos de onda contíguos no espectro.\nO espectro de emissão de um objeto celeste é o resultado de processos físicos muito complexos e pode, portanto, variar ao longo da sua vida. Notavelmente, devido a reações atômicas complexas ainda não totalmente compreendidas, a intensidade de dois comprimentos de onda contíguos pode ser trocada em um determinado momento.\nO ICPC está estudando atentamente o espectro de emissão de alguns objetos celestes em comprimentos de onda específicos. No entanto, os cientistas estão a ter dificuldade em obter dados úteis a partir das suas observações.\nParticularmente, dada uma faixa de comprimentos de onda e um número inteiro K, eles estão interessados ​​em saber a intensidade do comprimento de onda que possui a K-ésima menor intensidade nessa faixa. Dada uma lista de eventos observacionais que misturam informações solicitadas pelos cientistas e trocas de intensidade de comprimento de onda no espectro, sua tarefa é ajudar os cientistas respondendo às suas perguntas.\nEntrada\nA primeira linha contém dois inteiros N e Q, representando o número de comprimentos de onda medidos e o número de eventos, respectivamente (1 ≤ N,Q ≤ 105). A segunda linha contém N inteiros I1,I2,...,IN, representando Ii a intensidade inicial do i-ésimo comprimento de onda (0 ≤ Ii ≤ 109 para i = 1,2,...,N). Cada uma das Q linhas seguintes corresponde a um evento e começa com um caractere que representa o tipo de evento. Se o evento corresponder a uma consulta dos cientistas do ICPC, o carácter é um ‘Q’; se corresponder a uma reação de troca atômica, é um ‘S’. Os eventos de consulta possuem três inteiros A, B e K após o caractere 'Q', representando que os cientistas estão interessados ​​na K-ésima menor intensidade no intervalo de A a B, inclusive (1 ≤ A ≤ B ≤ N e 1 ≤ K ≤ B − A + 1). Os eventos de troca de intensidade têm um único inteiro W após o caractere 'S', representando que as intensidades dos comprimentos de onda nas posições W e W + 1 no espectro são trocadas (1 ≤ W ≤ N − 1).\nSaída\nProduza uma linha para cada evento de consulta na entrada, contendo um único número inteiro representando a intensidade do comprimento de onda com a K-ésima menor intensidade na faixa do espectro de A a B, inclusive (onde A, B e K são os parâmetros especificados na consulta correspondente). As consultas devem ser respondidas na mesma ordem em que aparecem na entrada.",
    "samplesExamples": [
      [
        "10 4\n1 2 6 7 5 8 9 3 0 4\nQ 1 10 7\nQ 2 5 2\nS 5\nQ 2 5 2",
        "6\n5\n6"
      ],
      [
        "4 3\n33333333 22222222 44444444 11111111\nQ 3 3 1\nS 1\nQ 2 4 2",
        "44444444\n33333333"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Nico Lehmann, Chile"
    },
    "hasImages": false
  },
  {
    "name": "Na hora certa",
    "text": "Olá concorrente, quero jogar um jogo. Seu treinador está na sala de competição com uma bomba prestes a explodir nas mãos. Esta bomba será configurada para detonar em T segundos e, se detonar na sala de competição, explodirá apenas os balões do seu time.\nPosso dizer que a sala do concurso fica dentro de um prédio que contém N salas no total. De cada sala há exatamente um túnel direto para outra sala, que só pode ser usado em uma direção. Por exemplo, se a sala A estiver conectada à sala B, você poderá caminhar da sala A para a sala B, mas não da sala B para a sala A, a menos, é claro, que a sala B tenha um túnel direto para a sala A.\nA bomba possui um mecanismo especial que detecta se o seu treinador para de se mover e, nesse caso, aciona imediatamente a detonação, derrubando todos os balões do seu time. Por esse motivo, seu treinador caminhará constantemente entre as salas, levando exatamente um segundo para percorrer cada túnel. A única maneira de sua equipe salvar os balões é seu treinador não estar na sala de competição quando a bomba explodir.\nVocê não tem o mapa de construção em mãos, tudo o que posso dizer é que os túneis são escolhidos de maneira uniforme e aleatória. Porém, darei a você a possibilidade de definir T, que deve ser um número inteiro entre 2 e N inclusive. Seu trabalho é escolher T de forma que maximize a chance de seus balões sobreviverem a esse enigma.\nQue comece o jogo.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro N, representando quantos cômodos existem no edifício (2 ≤ N ≤ 109).\nSaída\nProduza uma linha com um número inteiro representando o valor de T que maximiza a chance de seus balões sobreviverem ao enigma.",
    "samplesExamples": [
      [
        "3",
        "3"
      ],
      [
        "12",
        "11"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Bruno Junqueira Adami, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Problemas na Internet",
    "text": "O governo está planejando fornecer internet para pessoas em áreas remotas, neste caso pequenas cidades que se desenvolveram ao lado de uma rodovia longa e movimentada. Existem N cidades localizadas lado a lado ao longo da rodovia, cada uma ocupando exatamente um quilômetro de rodovia. As cidades são numeradas consecutivamente ao longo da rodovia, de 1 a N. Para fornecer conexão à Internet, o governo vai colocar estações de acesso com links de satélite, que fornecerão conexões com fio para as cidades.\nAs estações deverão ser instaladas em uma ou mais cidades diferentes, sendo B o custo de construção de cada estação.\nComo o governo quer prestar um serviço extremamente bom, cada casa será ligada diretamente a uma dessas estações. Ao conectar uma casa na cidade i, devemos escolher uma estação na cidade j para conectar essa casa. O custo da conexão é então |i − j| × C, onde C é o custo de um quilômetro de cabo. Observe que o custo do cabo dentro da cidade é pequeno o suficiente para ser ignorado, portanto, em particular, casas em uma cidade onde uma estação está instalada não incorrem em nenhum custo de cabeamento quando conectadas a essa estação.\nDados N, B, C e o número de casas em cada cidade, escreva um programa para determinar o custo total mínimo para fornecer uma conexão à Internet para cada casa em cada cidade, incluindo o custo de construção das estações e instalação do cabeamento para cada casa . Como o governo ainda não decidiu o número final de estações de acesso a serem construídas, deverá calcular o custo mínimo quando houver 1, 2, ..., N estações.\nEntrada\nA primeira linha contém três inteiros N, B e C representando o número de cidades, o custo de construção de uma estação de ponto de acesso e o custo de um quilômetro de cabo, respectivamente (1 ≤ N ≤ 6.000, 1 ≤ B ≤ 109 e 1 ≤ C ≤ 100). A segunda linha contém N inteiros H1,H2,...,HN, onde Hi representa o número de casas do i-ésimo município (1 ≤ Hi ≤ 109 para i = 1,2,...,N).\nSaída\nProduza uma linha com N inteiros representando o custo total mínimo para fornecer uma conexão à Internet para cada casa em cada cidade ao construir 1, 2, ..., N estações de pontos de acesso.",
    "samplesExamples": [
      [
        "5 6 1\n1 2 3 4 5",
        "21 20 22 25 30"
      ],
      [
        "6 8 1\n9 10 3 2 7 6",
        "69 36 35 37 42 48"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Recompensas de hotéis",
    "text": "Você está planejando passar suas férias viajando pela Europa, ficando cada noite em uma cidade diferente por N noites consecutivas. Você já escolheu o hotel que deseja ficar para cada cidade, então sabe o preço Pi do quarto onde ficará hospedado na i-ésima noite de suas férias, para i = 1,...,N .\nVocê reservará sua hospedagem através de um site que possui um programa de recompensas muito conveniente, que funciona da seguinte maneira. Depois de ficar uma noite num hotel que reservou através deste site é-lhe atribuído um ponto, e a qualquer momento pode trocar K desses pontos na sua conta por uma noite grátis em qualquer hotel (que no entanto não lhe dará outro ponto) .\nPor exemplo, considere o caso com N = 6 e K = 2 onde os preços dos quartos são P1 = 10, P2 = 3, P3 = 12, P4 = 15, P5 = 12 e P6 = 18. Depois de pagar o primeiro quatro noites você teria quatro pontos em sua conta, que poderia trocar para ficar grátis nas duas noites restantes, pagando um total de P1 + P2 + P3 + P4 = 40 pela sua hospedagem. No entanto, se após as três primeiras noites você usar dois dos três pontos que ganhou para ficar a quarta noite gratuitamente, poderá pagar pela quinta noite e usar os dois pontos finais para obter a sexta noite gratuitamente. Neste caso, o custo total da sua hospedagem é P1 + P2 + P3 + P5 = 37, então esta opção é realmente mais conveniente.\nPretende fazer um programa para saber qual é o custo mínimo possível para o alojamento das suas férias. Você pode assumir com segurança que todos os hotéis que você deseja ficar sempre terão um quarto disponível para você, e que a ordem das cidades que você vai visitar não pode ser alterada.\nEntrada\nA primeira linha de entrada contém dois inteiros N e K, representando o número total de noites que suas férias durarão e o número de pontos necessários para obter uma noite grátis (1 ≤ N,K ≤ 105). A segunda linha contém N inteiros P1, P2, ..., PN, representando o preço dos quartos onde irá ficar durante as suas férias (1 ≤ Pi ≤ 104 para i = 1,2,...,N).\nSaída\nProduza uma linha com um número inteiro representando o custo mínimo da sua acomodação para todas as suas férias.",
    "samplesExamples": [
      [
        "6 2\n10 3 12 15 12 18",
        "37"
      ],
      [
        "6 1\n10 3 12 15 12 18",
        "25"
      ],
      [
        "5 5\n1 2 3 4 5",
        "15"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Fidel I. Schaposnik, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Guarda costeira",
    "text": "“Pega ladrão! Pega ladrão!” Roubaram a bolsa de uma inocente senhora que caminhava na praia da Nlogônia e o ladrão fugiu em direção ao mar. Seu plano parece óbvio: ele pretende pegar um barco e escapar! O fugitivo, que a essa altura já está a bordo de sua embarcação de fuga, pretende seguir perpen dicularmente à costa em direção ao limite de águas internacionais, que fica a 12 milhas náuticas de distância, onde estará são e salvo das autoridades locais. Seu barco consegue percorrer essa distância a uma velocidade constante de VF nós.\nA Guarda Costeira pretende interceptá-lo, e sua embarcação tem uma velocidade constante de VG nós. Supondo que ambas as embarcações partam da costa exatamente no mesmo instante, com uma distância de D milhas náuticas entre elas, será possível a Guarda Costeira alcançar o ladrão antes do limite de águas internacionais? Assuma que a costa da Nlogônia é perfeitamente retilínea e o mar bastante calmo, de forma a permitir uma trajetória tão retilínea quanto a costa.\nEntrada\nA entrada consiste de apenas uma linha, contendo três inteiros, D, VF e VG, indicando respectivamente a distância inicial entre o fugitivo e a Guarda Costeira, a velocidade da embarcação do fugitivo e a velocidade da embarcação da Guarda Costeira.\nSaída\nSeu programa deve produzir uma única linha, contendo ‘S’ se for possível que a Guarda Costeira alcance o fugitivo antes que ele ultrapasse o limite de águas internacionais ou ‘N’ caso contrário.\nRestrições • 1 ≤ D ≤ 100 • 1 ≤ VF ≤ 100 • 1 ≤ VG ≤ 100 Exemplos",
    "samplesExamples": [
      [
        "5 1 12",
        "S"
      ],
      [
        "12 10 7",
        "N"
      ],
      [
        "12 9 10",
        "N"
      ],
      [
        "10 5 5",
        "N"
      ],
      [
        "9 12 15",
        "S"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Botas perdidas",
    "text": "A divisão de Suprimentos de Botas e Calçados do Exército comprou um grande número de pares de botas de vários tamanhos para seus soldados. No entanto, por uma falha de empacotamento da fábrica contratada, nem todas as caixas entregues continham um par de botas correto, com duas botas do mesmo tamanho, uma para cada pé. O sargento mandou que os recrutas retirassem todas as botas de todas as caixas para reembalá-las, desta vez corretamente.\nQuando o sargento descobriu que você sabia programar, ele solicitou com a gentileza habitual que você escrevesse um programa que, dada a lista contendo a descrição de cada bota entregue, determina quantos pares corretos de botas poderão ser formados no total.\nEntrada\nA primeira linha da entrada contém um inteiro N indicando o número de botas individuais entregues.\nCada uma das N linhas seguintes descreve uma bota, contendo um número inteiro M e uma letra L, separados por um espaço em branco. M indica o número do tamanho da bota e L indica o pé da bota: L = ‘D’ indica que a bota é para o pé direito, L = ‘E’ indica que a bota é para o pé esquerdo.\nSaída\nSeu programa deve imprimir uma única linha contendo um único número inteiro indicando o número total de pares corretos de botas que podem ser formados.\nRestrições • 2 ≤ N ≤ 104 • N é par.\n• 30 ≤ M ≤ 60 • L ∈ {D,E} Exemplos",
    "samplesExamples": [
      [
        "4\n40 D\n41 E\n41 D\n40 E",
        "2"
      ],
      [
        "6\n38 E\n39 E\n40 D\n38 D\n40 D\n37 E",
        "1"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Máquina Dobradora",
    "text": "Uma das principais ferramentas de uma Máquina de Turing, que possibilita que seu poder de computação seja maior do que de outros modelos mais simples, é uma fita infinita, dividida em células, onde informações de um alfabeto ficam armazenadas.\nUma Máquina Dobradora é uma máquina inspirada na Máquina de Turing, onde a fita é finita, os dados armazenados são números inteiros e, ao invés do mecanismo de funcionamento tradicional de Turing, a máquina utiliza operações de dobras da fita para fazer computações.\nPara efetuar uma dobra, a máquina escolhe uma posição entre células adjacentes e, ao realizar a dobra, ela soma os valores das células que se sobrepuseram, como pode ser visto na figura abaixo.\n      Observe também que a dobra pode ser feita em uma posição anterior ao centro da fita, como ilustrado a seguir. Note também que, com isso, podem ser feitas dobras também no início e no final da fita, invertendo a ordem desta.\nA empresa Science of Bends Company vem desenvolvendo versões comerciais da Máquina Dobra dora e a produção tem aumentado recentemente. Infelizmente o último lote de Máquinas Dobradoras produzidas está com problemas e algumas máquinas não estão funcionando corretamente. Assim, testes são necessários para evitar a venda de produtos com defeito, o que poderia denegrir a imagem da empresa.\nPara testar as máquinas, um conjunto de testes é dado e, para cada fita, a máquina devolve o resultado da computação. Assim os engenheiros responsáveis pelos testes tomam nota do resultado e podem verificar se este está correto. Mas os engenheiros esqueceram-se de tomar nota de qual com putação foi feita em cada conjunto de teste. Para evitar a necessidade de testar todas as máquinas novamente, os engenheiros estariam satisfeitos em descobrir se pelo menos existe uma sequência de dobras coerente para um par de fitas de entrada e saída. Para isso, eles contrataram você para desen volver um programa que verifique, para cada fita de entrada, se existe uma sequência de dobraduras que leve a uma fita de saída.\nEntrada\nCada caso de teste é composto por 4 linhas. As primeiras duas linhas referem-se à entrada fornecida à Máquina Dobradora e as duas seguintes referem-se à saída fornecida pela Máquina. A primeira linha da entrada contém um único inteiro N, descrevendo o tamanho da fita de entrada. A linha seguinte conterá N inteiros v1,...,vN, correspondentes ao conteúdo da fita de entrada. A terceira linha contém um inteiro M, o tamanho da fita de saída e a última linha conterá inteiros w1,...,wM, correspondentes ao conteúdo da fita de saída.\nSaída\nA saída de cada caso de teste conterá uma única linha contendo a letra “S” caso exista uma sequência de dobraduras que transforme a fita de entrada na fita de saída e “N” em caso contrário.\nRestrições • 1 ≤ M ≤ N ≤ 15.\n• 0 ≤ vi,wj ≤ 108, para 1 ≤ i ≤ N e 1 ≤ j ≤ M.\nExemplos\nExemplos\nEntrada\nSaída\n7 S   4   Entrada\nSaída\n7 S   5   Entrada\nSaída\n4 S   3 4 1 10 Entrada\nSaída\n6 N 19 23 3 5  0 2 34 64 Entrada\nSaída\n6 S   3 4 5 6 6   3 4 5 6 Entrada\nSaída\n6 S   3 4 5 6 6 6 5 4 3 2 1",
    "samplesExamples": [
      [
        "7\n5 6 23 8 19 7 10\n4\n5 16 30 27",
        "S"
      ],
      [
        "7\n1 2 3 4 5 6 7\n5\n7 6 5 5 5",
        "S"
      ],
      [
        "4\n1 2 3 4\n1\n10",
        "S"
      ],
      [
        "6\n19 23 3 51 2 0\n2\n34 64",
        "N"
      ],
      [
        "6\n1 2 3 4 5 6\n6\n1 2 3 4 5 6",
        "S"
      ],
      [
        "6\n1 2 3 4 5 6\n6\n6 5 4 3 2 1",
        "S"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Linhas de contêineres",
    "text": "Um carregamento de Nlogs, principal produto de exportação de Nlogônia, está no porto, em contêineres, pronto para ser embarcado. Todos os contêineres têm as mesmas dimensões e são cubos. Os contêineres estão organizados no pátio do porto em L linhas e C colunas, num total de LC contêineres. Cada contêiner está marcado com um número de identificação distinto, de 1 a LC.\nCada uma das L linhas de contêineres será embarcada em um navio distinto. Para facilitar o desembarque nos divesos países em que serão entregues, os containeres de uma linha devem estar organizados de forma que os números de identificação estejam ordenados. Mais precisamente, a linha 1 foi organizada no pátio de forma a conter os contêineres identificados de 1 a C ordenados crescen temente, a linha 2 de forma a conter os contêineres de C + 1 a 2C (ordenados crescentemente), e assim por diante, até a linha L, organizada de forma a conter os contêineres de (L − 1)C + 1 a LC (ordenados crescentemente). A figura (a) abaixo mostra a organização de um carregamento com 5 linhas e 4 colunas de contêineres.\nO guindaste de embarque é capaz de movimentar ou uma linha completa ou uma coluna completa de contêineres, não sendo capaz de movimentar outros tipos de agrupamentos ou contêineres individuais.\nNa noite anterior ao embarque, um grupo de estivadores operou os guindastes para trocar linhas e colunas do carregamento, como forma de protestar quanto aos baixos salários. A figura (b) acima mostra a configuração dos contêineres apás a troca das linhas 1 e 4; a figura (c) mostra a configuração após mais uma troca, entre as colunas 2 e 3.\nO carregamento precisa ser embarcado ainda hoje, mas antes disso é necessário que os contêineres sejam reorganizados da forma descrita. Você deve escrever um programa que, dada a informação sobre a posição de cada contêiner após o protesto, determine se é possível recolocar os contêineres na forma originalmente prevista utilizando apenas os guindastes, e nesse caso calcular o menor número de trocas de linhas e colunas necessário para esse fim.\nEntrada\nA primeira linha de um programa contém dois inteiros L e C indicando respectivamente o número de linhas e o número de colunas do carregamento. As L linhas seguintes descrevem a posição dos contêineres depois do protesto dos estivadores. Cada uma dessas L linhas contém C números inteiros Xl,c indicando a posição de um contêiner. Cada número inteiro entre 1 e LC aparece na entrada, em alguma das L linhas. É garantido que cada número na configuração apareça uma única vez cada e que todos os números entre 1 e LC aparecerão na mesma.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o número mínimo de trocas de linhas e colunas que devem ser realizadas pelo guindaste para recolocar os contêineres na posição original. Se não for possível colocar os contêineres na posição original, utilizando apenas trocas de linhas e colunas, imprima o caractere ‘*’.\nRestrições • 1 ≤ L ≤ 300 • 1 ≤ C ≤ 300 • 1 ≤ Xl,c ≤ LC Exemplos\nEntrada\nSaída\n5 4 2",
    "samplesExamples": [
      [
        "2 2\n3 4\n1 2",
        "1"
      ],
      [
        "3 3\n9 2 4\n5 8 7\n6 1 3",
        "*"
      ],
      [
        "5 4\n13 15 14 16\n5 7 6 8\n9 11 10 12\n1 3 2 4\n17 19 18 20",
        "2"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Triângulos",
    "text": "São dados N pontos em uma circunferência. Você deve escrever um programa que determine quantos triângulos equiláteros distintos podem ser construídos usando esses pontos como vértices.\nA figura abaixo ilustra um exemplo; (a) mostra um conjunto de pontos, determinados pelos com primentos dos arcos de circunferência que têm pontos adjacentes como extremos, e (b) mostra os dois triângulos que podem ser construídos com esses pontos.\nEntrada\nA primeira linha da entrada contém um número inteiro N, o número de pontos dados. A segunda linha contém N inteiros Xi, representando os comprimentos dos arcos entre dois pontos consecutivos na circunferência: para 1 ≤ i ≤ (N − 1), Xi representa o comprimento do arco entre os pontos i e i + 1; XN representa o comprimento do arco entre os pontos N e 1.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o número de triângulos equiláteros distintos que podem ser construídos utilizando os pontos dados como vértices.\nRestrições • 3 ≤ N ≤ 105 • 1 ≤ Xi ≤ 103, para 1 ≤ i ≤ N Exemplos",
    "samplesExamples": [
      [
        "8\n4 2 4 2 2 6 2 2",
        "2"
      ],
      [
        "6\n3 4 2 1 5 3",
        "1"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Chefe",
    "text": "Todos conhecem Iks, a última moda em redes sociais, que fez tanto sucesso que competidores como Facebook e Google+ estão começando a ter dificuldades financeiras. Assim como muitas companhias “.com”, Iks surgiu em uma pequena garagem, mas hoje emprega milhares de pessoas no mundo todo.\nO sistema de gerência utilizado em Iks é bem diferente do padrão. Por exemplo, não há diretorias ou superintendências. No entanto, como é usual em outras companhias, há uma cadeia (ou melhor, várias cadeias) de comando: uma pessoa pode gerenciar outras pessoas, e pode ser gerenciada por outras pessoas. As figuras abaixo mostra a cadeia de comando para alguns empregados, junto com suas idades.\nUma pessoa P1 pode gerenciar outra pessoa P2 diretamente (quando P1 é o superior imediato de P2) ou indiretamente (quando P1 gerencia diretamente uma pessoa P3 que gerencia P2 direta ou indiretamente). Por exemplo, na figura (a) acima, Alice gerencia David diretamente e Clara indiretamente. Uma pessoa não gerencia a si própria, nem direta nem indiretamente.\nUm folclore que apareceu em Wall Street é que Iks é tão bem sucedido porque em sua rede de comando um(a) gerente é sempre mais jovem do que as pessoas que ele(a) gerencia. Como podemos ver na figura acima, isso não é verdade. Mas esse folclore incentivou Iks a desenvolver uma ferramenta para analisar o seu sistema de gerenciamento, e estudar se tem alguma influência no sucesso da empresa.\nVocê foi contratado para trabalhar nessa ferramenta.\nDadas a descrição da cadeia de comando na Iks e as idades de seus empregados, escreva um programa que execute uma série de instruções. Instruções podem ser de dois tipos: trocas de gerência e perguntas. Uma instrução de troca de gerência faz dois empregados A e B trocarem suas posições na cadeia de comando. Como exemplo, a figura (b) acima mostra a cadeia de comando resultante quando David e George trocam suas respectivas posições na cadeia de comando. Uma instrução de pergunta identifica um empregado A e deseja saber a idade do mais jovem gerente (direto ou indireto) de A na cadeia de comando. Por exemplo, no cenário da figura (a) acima a idade do(a) gerente mais jovem de Clara é 18 anos; já no cenário da figura (b), a idade do(a) gerente mais jovem de Clara é 21 anos.\nInput\nA entrada é composta de várias linhas. A primeira linha contém três inteiros N, M e I, indicando respectivamente o número de empregados, o número de relações de gerência direta e o número de instruções. Empregados são identificados por números de 1 a N. A segunda linha contém N inteiros Ki, onde Ki indica a idade do empregado de número i.\nCada uma das M linhas seguintes contém dois inteiros X e Y , indicando que X gerencia Y diretamente. Seguem-se I linhas, cada uma descrevendo uma instrução. Uma instrução de troca de gerência é descrita em uma linha contendo o identificador T seguido de dois inteiros A e B, indicando os dois empregados que devem trocar seus lugares na cadeia de comando. Uma instrução de pergunta é descrita em uma linha contendo o identificador P seguido de um inteiro E , indicando um empregado.\nA última instrução será sempre do tipo pergunta.\nOutput\nPara cada instrução de pergunta seu programa deve imprimir uma linha contendo um único inteiro, a idade da pessoa mais jovem que gerencia (direta ou indiretamente) o empregado nomeado na pergunta.\nSe o empregado nomeado não possui um gerente, imprima o caractere ‘*’ (asterisco).\nRestrições • 1 ≤ N ≤ 500 • 0 ≤ M ≤ 60 × 103 • 1 ≤ I ≤ 500 • 1 ≤ Ki ≤ 100, para 1 ≤ i ≤ N • 1 ≤ X,Y ≤ N, X (cid:54)= Y • 1 ≤ A,B ≤ N • 1 ≤ E ≤ N Exemplos",
    "samplesExamples": [
      [
        "7 8 9\n21 33 33 18 42 22 26\n1 2\n1 3\n2 5\n3 5\n3 6\n4 6\n4 7\n6 7\nP 7\nT 4 2\nP 7\nP 5\nT 1 4\nP 7\nT 4 7\nP 2\nP 6",
        "18\n21\n18\n18\n*\n26"
      ],
      [
        "6 5 6\n10 20 30 40 50 60\n1 5\n1 4\n3 6\n2 5\n4 5\nP 1\nP 5\nP 6\nT 1 6\nP 1\nP 4",
        "*\n10\n30\n30\n60"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Zerinho ou Um",
    "text": "Todos devem conhecer o jogo Zerinho ou Um (em algumas regiões também conhecido como Dois ou Um), utilizado para determinar um ganhador entre três ou mais jogadores. Para quem não conhece, o jogo funciona da seguinte maneira. Cada jogador escolhe um valor entre zero ou um; a um comando (geralmente um dos competidores anuncia em voz alta “Zerinho ou... Um!”), todos os participantes mostram o valor escolhido, utilizando uma das mãos: se o valor escolhido foi um, o competidor mostra o dedo indicador estendido; se o valor escolhido foi zero, mostra a mão com todos os dedos fechados.\nO ganhador é aquele que tiver escolhido um valor diferente de todos os outros; se não há um jogador com valor diferente de todos os outros (por exemplo todos os jogadores escolhem zero, ou um grupo de jogadores escolhe zero e outro grupo escolhe um), não há ganhador.\nAlice, Beto e Clara são grandes amigos e jogam Zerinho a toda hora: para determinar quem vai comprar a pipoca durante a sessão de cinema, quem vai entrar na piscina primeiro, etc. Jogam tanto que resolveram fazem um plugin no Facebook para jogar Zerinho. Como não sabem programar, dividiram as tarefas entre amigos que sabem, inclusive você.\nDados os três valores escolhidos por Alice, Beto e Clara, cada valor zero ou um, escreva um programa que determina se há um ganhador, e nesse caso determina quem é o ganhador.\nEntrada\nA entrada é composta de uma única linha, que contém três inteiros A, B e C, indicando respectivamente os valores escolhidos por Alice, Beto e Clara.\nSaída\nSeu programa deve produzir uma única linha, contendo um único caractere. Se o vencedor é Alice o caractere deve ser ‘A’, se o vencedor é Beto o caractere deve ser ‘B’, se o vencedor é Clara o caractere deve ser ‘C’ e se não há vencedor o caractere deve ser ‘*’ (asterisco).\nRestrições • A,B,C ∈ {0,1} Exemplos",
    "samplesExamples": [
      [
        "1 1 0",
        "C"
      ],
      [
        "0 0 0",
        "*"
      ],
      [
        "1 0 0",
        "A"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Mergulho",
    "text": "O recente terremoto em Nlogônia não chegou a afetar muito as edificações da capital, principal epicentro do abalo. Mas os cientistas detectaram que o principal dique de contenção teve um dano significativo na sua parte subterrânea que, se não for consertado rapidamente, pode causar o seu desmoronamento, com a consequente inundação de toda a capital.\nO conserto deve ser feito por mergulhadores, a uma grande profundidade, em condições extre mamente difíceis e perigosas. Mas como é a sobrevivência da própria cidade que está em jogo, seus moradores acudiram em grande número como voluntários para essa perigosa missão.\nComo é tradicional em missões perigosas, cada mergulhador recebeu no início do mergulho uma pequena placa com um número de identificação. Ao terminar o mergulho, os voluntários devolviam a placa de identificação, colocando-a em um repositório.\nO dique voltou a ser seguro, mas aparentemente alguns voluntários não voltaram do mergulho.\nVocê foi contratado para a penosa tarefa de, dadas as placas colocadas no repositório, determinar quais voluntários perderam a vida salvando a cidade.\nEntrada\nA entrada é composta de duas linhas. A primeira linha contém dois inteiros N e R, indicando respectivamente o número de voluntários que mergulhou e o número de voluntários que retornou do mergulho. Os voluntários são identificados por números de 1 a N. A segunda linha da entrada contém R inteiros, indicando os voluntários que retornaram do mergulho (ao menos um voluntário retorna do mergulho).\nSaída\nSeu programa deve produzir uma única linha, contendo os identificadores dos voluntários que não retornaram do mergulho, na ordem crescente de suas identificações. Deixe um espaço em branco após cada identificador (note que isto significa que deve haver um espaço em branco também após o último identificador). Se todos os voluntários retornaram do mergulho, imprima apenas o caractere ‘*’ (asterisco).\nRestrições • 1 ≤ R ≤ N ≤ 104 Exemplos",
    "samplesExamples": [
      [
        "5 3\n3 1 5",
        "2 4"
      ],
      [
        "6 6\n6 1 3 2 5 4",
        "*"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Caminhão",
    "text": "A Sociedade de Balões Coloridos (SBC) é a principal fornecedora de balões para competições de programação; ela dispõe de grandes fábricas e depósitos, além de uma extensa frota de caminhões para garantir a alegria dos competidores.\nHá várias sedes regionais na Nlogônia, todas as quais contrataram a SBC para o fornecimento de balões para a prova. A Nlogônia é um arquipélago ligado por várias pontes. Cada ilha do arquipélago pode conter várias sedes regionais e vários depósitos da SBC.\nAo planejar as rotas, a SBC se deparou com um problema: por razões de segurança, cada ponte da Nlogônia tem um limite máximo de peso permitido para os veículos que trafegam sobre ela. Devido ao grande número de pontes na Nlogônia, e ao elevado peso da mercadoria transportada, o diretor de operações da SBC pediu que você escrevesse um programa que determina o maior peso bruto que pode ser transportado entre os depósitos e os locais de prova.\nEntrada\nA primeira linha contém três inteiros N, M e S, indicando, respectivamente, o número de ilhas da Nlogônia, o número de pontes que ligam as ilhas e o número de sedes. As ilhas nlogonianas são numeradas de 1 a N.\nCada uma das M linhas seguintes descreve uma ponte. A descrição de cada ponte consiste de uma linha contendo três inteiros A, B e P, indicando as duas ilhas ligadas por aquela ponte e o peso máximo permitido naquela ponte, em toneladas.\nTodas as pontes são de mão dupla; cada par de ilhas é ligado por no máximo uma ponte; é possível ir de qualquer ilha para qualquer outra ilha utilizando apenas as pontes do arquipélago (mas pode ser preciso passar por outras ilhas primeiro).\nCada uma das S linhas seguintes descreve uma sede. A descrição de cada sede consiste de uma linha contendo dois inteiros A e B, indicando, respectivamente, a ilha onde está a sede e a ilha onde está o depósito que irá fornecer os balões àquela sede.\nSaída\nPara cada sede, na ordem em que elas foram descritas na entrada, seu programa deve imprimir uma linha contendo um único inteiro, indicando o maior peso bruto, em toneladas, que pode ser transportado por caminhão do depósito que irá fornecer os balões até ela.\nRestrições • 2 ≤ N ≤ 2 × 104 • 1 ≤ M ≤ 105 • 1 ≤ S ≤ 5 × 104 • 1 ≤ A,B ≤ N, A (cid:54)= B • 0 ≤ P ≤ 105 Exemplos",
    "samplesExamples": [
      [
        "4 5 4\n1 2 9\n1 3 0\n2 3 8\n2 4 7\n3 4 4\n1 4\n2 1\n3 1\n4 3",
        "7\n9\n8\n7"
      ],
      [
        "4 5 2\n1 2 30\n2 3 20\n3 4 10\n4 1 40\n2 4 50\n1 3\n1 2",
        "20\n40"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Remendo",
    "text": "Carlão é muito preocupado com o meio ambiente. Sempre que possível, ele tenta utilizar meios de transporte menos poluentes. Recentemente ele conseguiu um emprego próximo de casa e agora está utilizando sua bicicleta para ir ao trabalho.\nInfelizmente, no caminho entre sua casa e seu emprego, há uma fábrica de pregos, que frequente mente deixa alguns pregos caírem de seus caminhões que acabam furando os pneus de da bicicleta de Carlão. Por isso, ele acaba tendo que fazer diversos remendos nos pneus de sua bicicleta.\nPara fazer os consertos, Carlão usa dois tipos diferentes de remendos. Ambos os tipos têm a largura do pneu da bicicleta, mas diferem no comprimento. Como o valor do remendo é proporcional ao seu comprimento, Carlão está tentando encontrar uma maneira de economizar, gastando o menor comprimento total possível de remendos para fazer os consertos, mas sem precisar cortá-los.\nO primeiro passo para efetuar o conserto é fazer uma marca com giz em uma posição do pneu e depois anotar as distâncias, medidas no sentido horário, de cada um dos furos em relação à marca de giz. Todos os furos devem ser cobertos por um remendo. Carlão gostaria de sua ajuda para determinar, a partir das posições dos furos, a forma mais econômica de efetuar o conserto.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém quatro inteiros N,C,T1 e T2. O inteiro N corresponde ao número de furos no pneu e C corresponde ao comprimento da circunferência do pneu, em centímetros. Os comprimentos dos remendos, em centímetros, são dados pelos inteiros T1 e T2. A segunda linha da entrada contém N inteiros Fi, um para cada furo, descrevendo a distância no sentido horário da marca de giz até o furo i, em centímetros.\nSaída\nSeu programa deve imprimir uma única linha contendo um inteiro indicando o menor comprimento total de remendos que é suficiente para consertar todos os furos do pneu.\nRestrições • 1 ≤ N ≤ 1000 • 1 ≤ C ≤ 106 • 1 ≤ T1,T2 ≤ C • 0 ≤ Fi ≤ C − 1, 1 ≤ i ≤ N • Se a distância entre dois furos é exatamente k centímetros, um remendo de comprimento k centímetros é suficiente para cobrir ambos os furos.\nExemplos",
    "samplesExamples": [
      [
        "5 20 2 3\n2 5 8 11 15",
        "8"
      ],
      [
        "4 20 12 9\n1 2 3 13",
        "12"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ô nibus",
    "text": "Competições de programação normalmente exigem infraestrutura e organização por parte dos res ponsáveis. Um problema que frequentemente deve ser resolvido é em relação ao transporte. Ao participar de uma competição recente, Ricardinho ficou observando os ônibus e micro-ônibus utiliza dos no transporte dos competidores, todos enfileirados um atrás do outro enquanto os competidores desembarcavam. Os veículos eram todos de uma mesma empresa, embora tivessem pinturas distin tas. Ricardinho começou a se perguntar de quantas maneiras aquela fila poderia ser formada, usando ônibus e micro-ônibus daquela empresa.\nCada ônibus tem 10 metros de comprimento. Já os micro-ônibus possuem 5 metros de compri mento. A partir de um dado comprimento total a ser alcançado com ônibus e micro-ônibus enfileirados, e das quantidades de cores diferentes para ônibus e micro-ônibus, Ricardinho quer saber de quantas formas uma fila pode ser formada.\nEntrada\nA entrada é composta por apenas uma linha, contendo três inteiros N,K e L, separados por espaço.\nO inteiro N representa o comprimento total, em metros, da fila que Ricardinho está considerando. K e L representam o número de cores distintas disponíveis para micro-ônibus e ônibus, respectivamente.\nNote que, como os inteiros N,K e L podem ser muito grandes, recomenda-se o uso de inteiros de 64 bits.\nSaída\nComo o número de formas diferentes de se formar a fila pode ser muito grande, Ricardinho está interessado nos últimos 6 dígitos da quantidade. Assim, seu programa deve produzir uma única linha contendo exatamente 6 dígitos, correspondentes aos últimos dígitos da solução.\nRestrições • 5 ≤ N ≤ 1015 e N é múltiplo de 5 • 1 ≤ K ≤ 1015 • 1 ≤ L ≤ 1015 Exemplos",
    "samplesExamples": [
      [
        "25 5 5",
        "006000"
      ],
      [
        "5 1000 1000",
        "001000"
      ],
      [
        "20 17 31",
        "111359"
      ],
      [
        "15 9 2",
        "000765"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Linda Ecaterimburgo",
    "text": "Yekaterinburg é uma bela cidade fundada no século XVIII. Sua tarefa neste problema é nos fornecer informações sobre o ano exato de sua fundação. Para tornar a tarefa menos cansativa, você só precisa calcular um dos quatro dígitos do ano.\nPara indicar a posição do dígito que você deve calcular, os dígitos são numerados entre 1 e 4, do mais significativo ao menos significativo. Por exemplo, para o ano de 2013 o dígito 1 é “2”, o dígito 2 é “0”, o dígito 3 é “1” e o dígito 4 é “3”.\nCaso você não tenha trazido uma enciclopédia, informações sobre Yekaterinburg podem ser obtidas por meio de um esclarecimento.\nEntrada\nUma única linha que contém um inteiro D (1 ≤ D ≤ 4) indicando a posição do dígito que você deve calcular.\nSaída\nProduza uma linha com um número inteiro representando o dígito na posição D do ano em que Yekaterinburg foi fundada.",
    "samplesExamples": [
      [
        "1",
        "1"
      ],
      [
        "2",
        "7"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Aritmética com Morse",
    "text": "O código Morse é um método usado para transmitir mensagens de texto como uma série de pontos “.” e travessões “-”. Por exemplo, a letra “A” é representada por “.-” e a letra “B” por “-...”. Esse código tem sido usado há vários anos no exército e em aplicações civis, mas você o usará para fazer contas.\nPensando nisso, atribuímos valores aos pontos e traços, e para economizar espaço usamos dois caracteres adicionais. A tabela a seguir mostra os quatro caracteres permitidos e seus valores.\nValor do personagem. 1 - 5: 2 (duas vezes “.”) = 10 (duas vezes “-”) Um número Morse é uma string que contém apenas os quatro caracteres acima; seu valor é a soma dos valores atribuídos a cada caractere individual. Por exemplo, o valor de “=.-..” é 10+1+5+1+1 = 18. Observe que cada número Morse representa um valor único, mas existem valores que podem ser representados com vários números Morse. Por exemplo, existem três números Morse com valor 3: “...”, “.:” e “:.”.\nBem, os números estão prontos. Para formar expressões também precisamos de operadores. Consideramos dois operadores aritméticos: “+” representa adição, enquanto “*” representa multiplicação. Uma expressão Morse é uma sequência de strings que intercala números e operadores Morse, que começa e termina com um número Morse e contém pelo menos um operador. As expressões Morse podem ser avaliadas substituindo cada número Morse pelo seu valor e, em seguida, avaliando a expressão matemática obtida usando a precedência e associatividade dos operadores comuns. Por exemplo, o valor da expressão Morse “=.-.. +... *:.” é 18 + 3 × 3 = 18 + (3 × 3) = 27. Dada uma expressão Morse, imprima seu valor.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 4) representando o número de operadores na expressão Morse. A segunda linha contém 2N + 1 strings não vazias representando a expressão Morse.\nA linha intercala números Morse e operadores, sendo a primeira e a última string números Morse.\nCada número Morse tem no máximo 7 caracteres, onde cada caractere é “.”, “-”, “:” ou “=”.\nCada operador é “+” ou “*”.\nSaída\nProduza uma linha com um número inteiro representando o valor da expressão Morse.",
    "samplesExamples": [
      [
        "2\n=.-.. + ... * :.",
        "27"
      ],
      [
        "3\n- * - + - * -",
        "50"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Abastecimento de água disjunto",
    "text": "A Nlogônia é um reino que consiste em várias cidades localizadas em uma grande montanha. A capital é Logville, localizada no pico da montanha. Logville possui um enorme lago de formato perfeitamente redondo, apropriadamente chamado de “The Big O”. Este é o único lago com água potável em todo o reino, por isso é utilizado para abastecer todas as cidades. Algumas cidades da Nlogónia estão ligadas por condutas de água que permitem a distribuição da água. Como não há bombas, cada tubulação transporta água de uma cidade para outra cidade em menor altitude, por meio da gravidade.\nO sistema de água da Nlogónia tem sido uma fonte de preocupações para a Rainha, porque como as cidades dependem de outras cidades para o seu abastecimento de água, ocorrem discussões acaloradas sobre a quantidade de água que uma cidade pode utilizar. Uma rota de abastecimento de água é uma sequência de cidades em ordem decrescente de altitude, começando em Logville e de forma que haja uma tubulação conectando cada par de cidades consecutivas na sequência. Duas cidades têm abastecimento de água disjunto se e somente se existirem dois caminhos de abastecimento de água, um caminho de abastecimento terminando em cada uma das cidades, de modo que Logville seja a única cidade que está presente em ambos os caminhos. Observe que a própria Logville tem abastecimento de água desconexo com todas as outras cidades.\nA Rainha considera o abastecimento de água disjunto uma boa propriedade porque reduz os problemas de dependência e também evita que os cortes de água se espalhem tão rapidamente pela Nlogónia. Ela, portanto, ordenou uma pesquisa para avaliar o estado atual da desarticulação do abastecimento de água em todo o reino. Sendo os conselheiros mais inteligentes da corte da Rainha, vocês foram convocados para ajudar a calcular o número de pares de cidades distintas que possuem abastecimento de água disjunto.\nEntrada\nA primeira linha contém dois inteiros C (2 ≤ C ≤ 1000) e P (1 ≤ P ≤ 105), representando respectivamente o número de cidades e o número de tubulações de água na Nlogônia. As cidades são identificadas com números inteiros diferentes de 1 a C, em ordem estritamente decrescente de altitude (não há duas cidades com a mesma altitude); Logville é a cidade 1. Cada uma das próximas P linhas descreve um tubo com dois inteiros U e V (1 ≤ U < V ≤ C) indicando que o tubo conecta a cidade U com a cidade V . Você pode presumir que não existem duas tubulações conectando o mesmo par de cidades e que para cada cidade da Nlogônia há pelo menos um caminho de abastecimento de água que termina nela.\nSaída\nProduza uma linha com um número inteiro representando o número de pares de cidades distintas que possuem abastecimento de água disjunto.",
    "samplesExamples": [
      [
        "6 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 6",
        "14"
      ],
      [
        "8 11\n1 2\n1 3\n1 4\n2 5\n3 4\n6 7\n3 6\n3 7\n4 8\n2 6\n5 6",
        "26"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Suba nos Ultras",
    "text": "A proeminência topográfica de um pico é uma medida de especial interesse para os alpinistas e pode ser definida da seguinte forma: a proeminência de um pico p com altitude h, em relação ao nível do mar, é o maior d tal que qualquer caminho no terreno de p para qualquer pico estritamente mais alto passará por um ponto de altitude h - d. Se não houver um pico estritamente mais alto, então a proeminência é o próprio h. Aqueles picos com proeminência topográfica maior ou igual a 150.000 centímetros (a precisão é de grande importância para os escaladores!) têm um nome especial: são chamados de “Ultras”.\nVocê tem que escrever um programa que identifique todos os Ultras que ocorrem em um perfil bidimensional de uma cordilheira representada como uma sequência de pontos. Observe que a distância horizontal entre os pontos não é importante; tudo que você precisa é a altitude de cada ponto. Na imagem abaixo, os Ultras são os pontos 7, 12, 14, 20 e 23.\nEntrada\nA primeira linha contém um inteiro N (3 ≤ N ≤ 105) representando o número de pontos do perfil.\nA segunda linha contém N inteiros Hi indicando as altitudes (em centímetros) dos pontos, na ordem em que aparecem no perfil (0 ≤ Hi ≤ 106 para i = 1,2,...,N). Pontos consecutivos possuem altitudes diferentes (Hi (cid:54)= Hi+1 para i = 1,2,...,N − 1), enquanto o primeiro e o último ponto estão ao nível do mar (H1 = HN = 0) . Você pode presumir que o perfil contém pelo menos um Ultra.\nSaída\nProduza uma linha com os índices de todos os Ultras da serra, na ordem em que aparecem no perfil.",
    "samplesExamples": [
      [
        "5\n0 10000 100000 884813 0",
        "4"
      ],
      [
        "7\n0 100000 0 200000 180000 200000 0",
        "4 6"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Futebol",
    "text": "Seu time de futebol favorito está participando de um torneio beneficente, que faz parte de um esforço mundial de arrecadação de fundos para ajudar crianças com deficiência. Como em um torneio normal, três pontos são atribuídos ao time vencedor da partida, e nenhum ponto ao time perdedor. Se o jogo terminar empatado, cada equipe recebe um ponto.\nSua equipe disputou N partidas durante a primeira fase do torneio, que acabou de terminar.\nApenas algumas equipes, aquelas com mais pontos acumulados, avançarão para a segunda fase do torneio. Porém, como o objetivo principal do torneio é arrecadar dinheiro, antes de ser definido o conjunto de times que passarão para a segunda fase, cada equipe pode comprar gols adicionais.\nEsses novos gols contam como gols normalmente marcados e podem ser usados ​​para alterar o resultado de qualquer uma das partidas disputadas pelo time.\nO orçamento da sua equipe é suficiente para comprar até metas G. Você consegue dizer o número total máximo de pontos que seu time pode obter após comprar os gols, supondo que os outros times não comprem nenhum gol? Entrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 105) e G (0 ≤ G ≤ 106) representando respectivamente o número de partidas que seu time disputou e o número de gols que seu time pode comprar. Cada uma das próximas N linhas descreve um resultado de partida com dois inteiros S e R (0 ≤ S,R ≤ 100), indicando respectivamente os gols que seu time marcou e recebeu naquela partida antes de comprar gols.\nSaída\nProduza uma linha com um número inteiro representando o número total máximo de pontos que sua equipe pode obter após comprar os gols.",
    "samplesExamples": [
      [
        "2 1\n1 1\n1 1",
        "4"
      ],
      [
        "3 2\n1 3\n3 1\n2 2",
        "6"
      ],
      [
        "4 10\n1 1\n2 2\n1 3\n0 4",
        "12"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Contando uns",
    "text": "Carl é neste momento a criança mais feliz do mundo: ele acabou de aprender esta manhã o que é o sistema binário. Ele aprendeu, por exemplo, que a representação binária de um inteiro positivo k é a s ktr =in (cid:80)g n ia =n 0a an i− ×1 · 2· i· .a I1 ta0 isw rehae lr lye nea icc eh toai seis e a himbin ta ur ry nid ni ggi dt ec0 imor al1 n, us mta br et rin sg inw toit bh ina an ry= nu1 m, ban erd s,sau ​​nch d tt hh ea nt somando e até multiplicando eles.\nCésar é o irmão mais velho de Carl e ele simplesmente não suporta ver seu irmão mais novo tão feliz. Então ele preparou um desafio: “Olha Carl, tenho uma pergunta fácil para você: vou te dar dois inteiros A e B, e você tem que me dizer quantos 1 existem na representação binária de todos os inteiros de A para B, inclusive. Prepare-se\". Carl concordou com o desafio. Depois de alguns minutos, ele voltou com uma lista da representação binária de todos os números inteiros de 1 a 100. “César, estou pronto”. César sorriu e disse: “Bem, deixe-me ver, escolho A = 1015 e B = 1016. Sua lista não será útil”.\nCarl odeia perder para o irmão, então precisa de uma solução melhor rapidamente. Você pode ajudá-lo? Entrada\nUma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 1016).\nSaída\nProduza uma linha com um inteiro representando o número total de dígitos 1 na representação binária de todos os inteiros de A a B, inclusive.",
    "samplesExamples": [
      [
        "1000000000000000 10000000000000000",
        "239502115812196372"
      ],
      [
        "2 12",
        "21"
      ],
      [
        "9007199254740992 9007199254740992",
        "1"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Linguagem do blogueiro",
    "text": "A neta de Benjamin, Brenda, tem um blog onde posta artigos sobre a escola, amigos e outros assuntos da vida. Intrigado com as opiniões dela, Benjamin tentou lê-lo, mas logo percebeu que era muito difícil de ler por causa das peculiaridades de escrita de Brenda.\nBrenda escreve sem espaços nem sinais de pontuação e, além disso, usa letras maiúsculas e minúsculas de forma liberal e estranha. Por exemplo, uma de suas postagens é “PrOgRAMmINgiSgrEAt”. Benjamin tem dificuldade em perceber as palavras “programação”, “é” e “ótimo” quando são escritas dessa forma.\nPara melhorar seu entendimento, Benjamin decidiu fazer o seguinte: primeiro ele escolherá uma string T específica e uma postagem de blog em que esteja interessado; então ele selecionará uma substring contígua da postagem e procurará T dentro da substring, sem distinção entre maiúsculas e minúsculas; para cada ocorrência de T dentro da substring, ele calculará o número de incompatibilidades de casos e, finalmente, obterá o máximo entre todos esses valores. Por exemplo, se Benjamin escolher “GR” como T e depois selecionar a substring “PrOgRAM”, ele encontrará uma única ocorrência “gR” para a qual o número de incompatibilidades de casos é 1.\nPara a mesma substring, se “r” fosse escolhido como T, ele teria encontrado duas ocorrências, “r” com 0 incompatibilidades e “R” com 1 incompatibilidade, portanto o número máximo de incompatibilidades seria 1.\nPara complicar ainda mais, Brenda incluiu no blog um script que, após operar com uma seleção de substring, inverte a caixa de todas as letras selecionadas. Isso significa que após selecionar “PrOgRAM” e proceder conforme explicado acima, o exemplo de postagem seria “pRoGrammINgiSgrEAt”. Se Ben jamin selecionasse “ammINgi” como segunda substring, após calcular seu resultado o post ficaria como “pRoGrAMMinGISgrEAt”, acumulando ambos os flips.\nVocê receberá a string T e o texto original da postagem do blog escolhida por Benjamin. Você também receberá uma lista de seleções de substrings que Benjamin fez, na ordem em que ele as fez. É necessário calcular, para cada seleção, o número máximo de incompatibilidades de caso das ocorrências de T na parte selecionada, considerando todas as inversões de caso feitas pelas seleções anteriores. Observe que a inversão do caso ocorre após o cálculo do resultado de cada seleção.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) e uma string não vazia T de no máximo 5 letras, representando respectivamente o número de seleções de substring e a string a ser pesquisada. A segunda linha contém uma string P não vazia de no máximo 105 letras, indicando o texto original da postagem do blog.\nAs posições do post são numeradas com números inteiros consecutivos da esquerda para a direita, sendo 1 a posição mais à esquerda e |P| a posição mais à direita. Cada uma das próximas N linhas descreve uma seleção de substring com dois inteiros L e R (1 ≤ L ≤ R ≤ |P|) indicando que a substring começa na posição L e termina na posição R, inclusive.\nSaída\nProduza N linhas, cada uma delas contendo um número inteiro. Na i-ésima linha escreva o número máximo de incompatibilidades de caso das ocorrências de T na i-ésima seleção da substring, considerando todas as inversões de caso feitas pelas seleções anteriores; se tal ocorrência não existir, escreva o valor −1.",
    "samplesExamples": [
      [
        "3 gR\nPrOgRAMmINgiSgrEAt\n1 7\n4 18\n6 14",
        "0\n2\n-1"
      ],
      [
        "9 abCAb\naBcAbCAbaBCAb\n1 13\n1 13\n4 8\n5 11\n3 11\n4 10\n1 13\n8 8\n1 13",
        "2\n4\n1\n-1\n0\n5\n2\n-1\n4"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Torres de ataque",
    "text": "Problemas inspirados no xadrez são uma fonte comum de exercícios em aulas de algoritmos. Começando com o conhecido problema das 8 rainhas, foram feitas diversas generalizações e variações. Um deles é o problema das N-torres, que consiste em colocar N torres em um tabuleiro de xadrez N por N de forma que não se ataquem.\nO professor Anand apresentou o problema das N-torres aos seus alunos. Como as torres só atacam umas às outras quando compartilham uma linha ou coluna, eles logo descobriram que o problema pode ser facilmente resolvido colocando as torres ao longo de uma diagonal principal do tabuleiro. Então, o professor decidiu complicar o problema adicionando alguns peões ao tabuleiro. Num tabuleiro com peões, duas torres atacam-se se e somente se partilham uma linha ou coluna e não há nenhum peão colocado entre elas. Além disso, os peões ocupam algumas casas, o que dá uma restrição adicional sobre as casas em que as torres podem ser colocadas.\nDado o tamanho do tabuleiro e a localização dos peões, diga ao Professor Anand o número máximo de torres que podem ser colocadas em casas vazias, de modo que duas delas não ataquem uma à outra.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 100) representando o número de linhas e colunas do tabuleiro. Cada uma das próximas N linhas contém uma sequência de N caracteres. Na i-ésima dessas strings, o j-ésimo caractere representa o quadrado na i-ésima linha e na j-ésima coluna do tabuleiro. O caractere é “.” (ponto) ou a letra “X” maiúscula, indicando respectivamente uma casa vazia ou uma casa contendo um peão.\nSaída\nProduza uma linha com um número inteiro representando o número máximo de torres que podem ser colocadas nas casas vazias do tabuleiro sem atacar umas às outras.",
    "samplesExamples": [
      [
        "5\nX....\nX....\n..X..\n.X...\n....X",
        "7"
      ],
      [
        "4\n....\n.X..\n....\n....",
        "5"
      ],
      [
        "1\nX",
        "0"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Onze",
    "text": "Neste problema, referimo-nos aos dígitos de um número inteiro positivo como a sequência de dígitos necessária para escrevê-lo na base 10 sem zeros à esquerda. Por exemplo, os dígitos de N = 2090 são, obviamente, 2, 0, 9 e 0.\nSeja N um número inteiro positivo. Chamamos um número inteiro positivo M de anagrama de onze múltiplos de N se e somente se (1) os dígitos de M são uma permutação dos dígitos de N e (2) M é um múltiplo de 11. Você é obrigado a escrever um programa que, dado N, calcula o número de seus onze anagramas múltiplos.\nComo exemplo, considere novamente N = 2.090. Os valores que atendem à primeira condição acima são 2.009, 2.090, 2.900, 9.002, 9.020 e 9.200. Entre esses, apenas 2.090 e 9.020 satisfazem a segunda condição, então a resposta para N = 2.090 é 2.\nEntrada\nUma única linha que contém um número inteiro N (1 ≤ N ≤ 10100).\nSaída\nProduza uma linha com um número inteiro representando o número de onze anagramas múltiplos de N. Como esse número pode ser muito grande, é necessário gerar o restante da divisão por 109 + 7.",
    "samplesExamples": [
      [
        "2090",
        "2"
      ],
      [
        "16510",
        "12"
      ],
      [
        "201400000000000000000000000000",
        "0"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Junte-se a dois reinos",
    "text": "Os reinos da Nlogónia e da Quadradonia travaram uma guerra longa e terrível que os historiadores passaram a chamar de Quase Completamente Sem Sentido (ACM) porque ninguém se consegue lembrar agora por que começou.\nQuando a guerra de ACM finalmente terminou, os dois reinos decidiram fortalecer os seus laços para evitar mais derramamento de sangue, e por isso consultaram o Consórcio Internacional para a Prevenção de Conflitos (ICPC). O ICPC recomendou a construção de uma estrada única para ligar uma cidade na Nlogónia a uma cidade na Quadradonia, permitindo assim o intercâmbio comercial e cultural entre as duas.\nNlogônia e Quadradonia têm cidades N e Q respectivamente. O sistema rodoviário de cada reino consiste em um conjunto de estradas bidirecionais que unem pares de cidades diferentes no mesmo reino, de modo que haja um caminho único (ou seja, uma sequência de estradas consecutivas) que se pode seguir para ir de qualquer cidade de um reino. para qualquer outra cidade do mesmo reino. O “tamanho” de tal sistema rodoviário é definido como o número máximo de estradas que se deve percorrer para viajar entre qualquer par de cidades.\nDado que o ICPC não especificou quais as duas cidades que deveriam ser ligadas pela nova estrada que une os dois reinos, os cidadãos estão agora preocupados que o tamanho do sistema rodoviário combinado possa ser demasiado grande. Para evitar uma segunda guerra ACM, você gostaria de convencê-los de que este não é o caso e, para esse fim, você precisa calcular o tamanho esperado do sistema rodoviário resultante, assumindo que todas as estradas possíveis entre os dois reinos são igualmente prováveis. ser construido.\nEntrada\nA primeira linha contém dois inteiros N e Q representando o número de cidades em cada um dos dois reinos (1 ≤ N,Q ≤ 4 × 104). As cidades na Nlogônia são identificadas com números inteiros diferentes de 1 a N, enquanto as cidades na Quadradonia são identificadas com números inteiros diferentes de 1 a Q. Cada uma das próximas N - 1 linhas descreve uma estrada na Nlogônia com dois inteiros distintos A e B indicando que o estrada conecta a cidade A com a cidade B (1 ≤ A,B ≤ N). Cada uma das próximas Q−1 linhas descreve uma estrada na Quadradonia com dois inteiros distintos C e D indicando que a estrada conecta a cidade C com a cidade D (1 ≤ C,D ≤ Q).\nO sistema rodoviário de cada reino é tal que existe exatamente um caminho entre cada par de cidades do reino.\nSaída\nProduza uma linha com um número racional representando o tamanho esperado do sistema rodoviário após a união dos dois reinos, considerando que todas as estradas possíveis que os ligam têm a mesma probabilidade de serem construídas. O resultado deve ser apresentado como um número racional com exatamente três dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "4 5\n1 2\n2 3\n4 2\n2 3\n3 4\n4 1\n4 5",
        "5.350"
      ],
      [
        "1 5\n1 2\n2 3\n3 4\n4 5",
        "4.400"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Invertendo Huffman",
    "text": "A codificação estática de Huffman é um algoritmo de codificação usado principalmente para compactação de texto. Dado um texto de determinado tamanho composto por N caracteres diferentes, o algoritmo escolhe N códigos, um para cada caractere diferente. O texto é compactado usando esses códigos. Para escolher os códigos, o algoritmo constrói uma árvore binária com raiz e N folhas. Para N ≥ 2 a árvore pode ser construída da seguinte forma.\n1. Para cada caracter diferente do texto construa uma árvore contendo apenas um nó, e atribua a ela um peso coincidente com o número de ocorrências do caracter no texto.\n2. Construa um conjunto contendo as N árvores acima.\n3. Enquanto s contém mais de uma árvore: (a) Escolha t1 ∈ s com peso mínimo e remova-o de s.\n(b) Escolha t2 ∈ s com peso mínimo e remova-o de s.\n(c) Construa uma nova árvore t com t1 como subárvore esquerda e t2 como subárvore direita, e atribua a t as somas dos pesos de t1 e t2.\n(d) Incluir t em s.\n4. Retorne a única árvore que resta em s.\nPara o texto “abracadabra”, a árvore produzida pelo procedimento acima pode ser semelhante à da esquerda da imagem a seguir, onde cada nó interno é rotulado com o peso da subárvore enraizada naquele nó. Observe que a árvore obtida também pode ser semelhante à da direita da figura, entre outras, pois nos passos 3a e 3b o conjunto s pode conter diversas árvores com peso mínimo.\nPara cada caractere diferente do texto, seu código depende do caminho que existe, na árvore final, da raiz até a folha correspondente ao caractere. O comprimento do código é o número de arestas nesse caminho (que coincide com o número de nós internos no caminho). Supondo que a árvore à esquerda foi construída pelo algoritmo, o código para “r” tem comprimento 3 enquanto o código para “d” tem comprimento 4.\nSua tarefa é, dados os comprimentos dos N códigos escolhidos pelo algoritmo, encontrar o tamanho mínimo (número total de caracteres) que o texto pode ter para que os códigos gerados tenham esses N comprimentos.\nEntrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 50) representando a quantidade de caracteres diferentes que aparecem no texto. A segunda linha contém N inteiros Li indicando os comprimentos dos códigos escolhidos pelo algoritmo de Huffman para os diferentes caracteres (1 ≤ Li ≤ 50 para i = 1,2,...,N). Você pode assumir que existe pelo menos uma árvore, construída conforme descrito, que produz códigos com os comprimentos fornecidos.\nSaída\nProduza uma linha com um número inteiro representando o tamanho mínimo (número total de caracteres) que o texto pode ter para que os códigos gerados tenham os comprimentos determinados.",
    "samplesExamples": [
      [
        "2\n1 1",
        "2"
      ],
      [
        "4\n2 2 2 2",
        "4"
      ],
      [
        "10\n8 2 4 7 5 1 6 9 3 9",
        "89"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Esconde-esconde",
    "text": "Em um playground, um grupo de crianças brinca de esconde-esconde. Como o nome sugere, o jogo é sobre crianças que se escondem e procuram outras crianças. Cada criança é uma criança escondida ou uma criança que procura. Crianças escondidas são crianças que apenas tentam não ser encontradas, enquanto crianças que procuram são crianças que tentam encontrar (se esconder e procurar) crianças.\nComo você pode notar, tanto as crianças que se escondem quanto as que procuram tentam não ser encontradas, e para isso utilizam algumas paredes que existem no parquinho. Cada parede é representada por um segmento de reta e cada criança é representada por um ponto no plano XY. Duas crianças se veem se e somente se o segmento de reta entre elas não intercepta nenhum segmento de parede.\nSua tarefa é calcular quantas outras crianças cada criança que procura pode ver. Para simplificar o problema, você pode assumir que as paredes não se cruzam nem mesmo nas suas extremidades. Além disso, não existem três pontos colineares dentro do conjunto formado por crianças e extremidades de paredes; isso implica que as crianças não estão dentro de paredes e que não há duas crianças no mesmo local.\nEntrada\nA primeira linha contém três inteiros S, K e W representando respectivamente o número de crianças que procuram, o número total de crianças e o número de paredes do parquinho (1 ≤ S ≤ 10; 1 ≤ K, W ≤ 104 e S ≤ K ). Cada uma das próximas K linhas descreve uma criança com dois inteiros X e Y (−106 ≤ X,Y ≤ 106), indicando que a localização da criança no plano XY é o ponto (X,Y); o primeiro S destas linhas descreve a procura de crianças. Cada uma das próximas W linhas descreve uma parede com quatro inteiros X1, Y1, X2 e Y2 (−106 ≤ X1,Y1,X2,Y2 ≤ 106), indicando que as duas extremidades da parede no plano XY são (X1, Y1) e (X2,Y2). Você pode assumir que os segmentos da parede não se cruzam e que nenhum dos três pontos fornecidos na entrada são colineares.\nSaída\nProduza S linhas, cada uma delas contendo um número inteiro. Na i-ésima linha escreva o número de outras crianças que a i-ésima criança que procura pode ver.",
    "samplesExamples": [
      [
        "2 3 2\n0 0\n100 0\n0 100\n50 -1 48 3\n49 49 51 52",
        "1\n0"
      ],
      [
        "4 4 4\n-100 0\n0 100\n0 -100\n100 0\n3 3 -2 -2\n-101 50 101 50\n-101 -101 101 -101\n-49 -50 49 -50",
        "1\n0\n2\n1"
      ],
      [
        "5 6 4\n40 40\n60 10\n70 30\n60 80\n30 81\n20 40\n0 10 40 50\n10 61 30 61\n-100 90 200 90\n50 20 50 50",
        "1\n2\n3\n5\n2"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Nota Esquecida",
    "text": "João não é muito bom em Matemática mas aprendeu que a média de dois números é o valor da soma desses dois números dividido por dois. Ou seja, a média de dois números A e B é M = A+ 2B.\nA professora de Cálculo I contou para João as notas que ele tirou nas duas provas já realizadas. As duas notas são números inteiros entre 0 e 100. João prontamente calculou a média das duas provas, que também resultou em um número inteiro.\nMas João é muito esquecido, e agora não consegue lembrar-se das duas notas que tirou na prova. Ele consegue se lembrar de apenas uma das notas das provas. Por sorte, ele consegue se lembrar também da média entre as duas notas.\nVocê pode ajudar João a determinar a nota da outra prova? Entrada\nA primeira linha contém um número inteiro A (0 ≤ A ≤ 100), indicando a nota de uma prova. A segunda linha contém um número inteiro M (0 ≤ M ≤ 100), indicando a média entre as duas notas das provas.\nSaída\nSeu programa deve produzir uma única linha com um número inteiro representando a nota da outra prova, que João não consegue recordar.",
    "samplesExamples": [
      [
        "100\n70",
        "40"
      ],
      [
        "80\n75",
        "70"
      ],
      [
        "1\n50",
        "99"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3!+2!+2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
    "samplesExamples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Teleférico",
    "text": "A turma da faculdade vai fazer uma excursão na serra e todos os alunos e monitores vão tomar um teleférico para subir até o pico de uma montanha. A cabine do teleférico pode levar C pessoas no máximo, contando alunos e monitores, durante uma viagem até o pico. Por questão de segurança, deve haver pelo menos um monitor dentro da cabine junto com os alunos. Por exemplo, se cabem C = 10 pessoas na cabine e a turma tem A = 20 alunos, os alunos poderiam fazer três viagens: a primeira com 8 alunos e um monitor; a segunda com 6 alunos e um monitor; e a terceira com 6 alunos e um monitor.\nDados como entrada a capacidade C da cabine e o número total A de alunos, você deve escrever um programa para calcular o número mínimo de viagens do teleférico.\nSe você estiver com muita preguiça hoje, não se preocupe: virando a página você encontra soluções para este problema.\nEntrada\nA primeira linha da entrada contém um inteiro C, representando a capacidade da cabine (2 ≤ C ≤ 100). A segunda linha da entrada contém um inteiro A, representando o número total de alunos na turma (1 ≤ A ≤ 1000).\nSaída\nSeu programa deve imprimir uma linha contendo um número inteiro representando o número mínimo de viagens do teleférico para levar todos os alunos até o pico da montanha.\n      Solução em C++ #include <iostream> using namespace std; int main(void){ int C,A; cin >> C >> A; // le a entrada int quociente = A/(C-1); int resto = A%(C-1); int resposta = quociente; if ( resto > 0 ) resposta++; cout << resposta << endl; // escreve a resposta return 0; } Solução em Python C = int(input()) # le a entrada A = int(input()) quociente, resto = A//(C-1), A%(C-1) resposta = quociente if resto>0: resposta += 1 print(resposta) # escreve a resposta Solução em Java import java.util.Scanner; public class A { public static void main(String[] args) { Scanner in = new Scanner(System.in); int quociente, resto, resposta; int C,A; C=in.nextInt(); // le a entrada A=in.nextInt(); quociente=A/(C-1); resto=A%(C-1); resposta=quociente; if (resto>0) resposta=resposta+1; System.out.println(resposta); // imprime a resposta } }",
    "samplesExamples": [
      [
        "10\n20",
        "3"
      ],
      [
        "12\n55",
        "5"
      ],
      [
        "100\n87",
        "1"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Delação Premiada",
    "text": "A polícia da Nlogônia está investigando a máfia local. Eles já conhecem todos os membros e a estrutura da organização: a máfia nlogoniana tem N membros no total, e cada um é identificado por um inteiro entre 1 e N, onde 1 é o ID do chefão. Além disso, todo membro é subordinado direto de um outro membro, exceto o chefão.\nMesmo após meses de investigação, a polícia ainda não tem informação suficiente para prender nenhum membro da máfia por nenhum crime. Por isso, resolveram pedir a ajuda de um vidente: dado um membro da máfia, o vidente pode magicamente adivinhar os crimes que ele cometeu, e a polícia pode então confirmá-los através de interrogatório.\nAlém disso, quando um mafioso nlogoniano é interrogado, ele não só admite os seus crimes, mas também delata os crimes de seu superior direto, em troca de uma pena mais leve. Se este já não tiver sido preso, a polícia pode interrogá-lo também, e ele vai então delatar o superior dele, e assim por diante, até chegarem no chefão.\nInfelizmente, o vidente só tem energia suficiente para adivinhar os crimes de no máximo K mafiosos, e a polícia quer usar seus poderes cuidadosamente pra prender o máximo possível de bandidos. Dado o valor de K e a estrutura completa da máfia, qual a quantidade máxima de mafiosos que a polícia consegue prender? Entrada\nA primeira linha contém dois inteiros, N e K, onde N é o número de membros da máfia e K é o número máximo de mafiosos cujos crimes o vidente pode adivinhar (3 ≤ N ≤ 105, 1 ≤ K < N). A segunda linha contém N − 1 inteiros, onde o i-ésimo deles identifica o superior direto do mafioso de ID i + 1.\nÉ garantido que todos os inteiros da segunda linha estão entre 1 e N, e que todos os membros da máfia são subordinados do chefão, direta ou indiretamente.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número máximo de mafiosos que a polícia pode prender.",
    "samplesExamples": [
      [
        "8 2\n1 1 2 3 4 4 6",
        "7"
      ],
      [
        "10 3\n1 1 2 2 3 3 4 4 5",
        "8"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Guardando Enfeites",
    "text": "Sicrana adora enfeites. Em casa, ela tem N enfeites que são exibidos enfileirados em uma grande prateleira. Cada enfeite é identificado por um inteiro distinto entre 1 e N.\nUm dia, enquanto jogava bola dentro de casa, Fulano, filho de Sicrana, acertou a prateleira de enfeites de sua mãe, derrubando todos no chão. Mas felizmente nenhum enfeite foi danificado com a queda. Por isso, se Fulano conseguir colocar todos os enfeites de volta na prateleira exatamente como estavam antes, pode ser que sua mãe não perceba que algo de errado aconteceu.\nMas como Fulano tem uma péssima memória, ele não consegue se lembrar da ordem em que os enfeites estavam originalmente, e por isso ele precisa da sua ajuda. Para cada enfeite i, Fulano te informará N valores entre 1 e 100, onde o j-ésimo valor indica quanta confiança Fulano tem de que o enfeite i estava originalmente na posição j da prateleira. Para maximizar sua confiança de que não receberá uma bronca e ficará de castigo, ao escolher uma ordem e posicionar os enfeites, Fulano irá multiplicar as confianças de que cada enfeite esteja no lugar certo. Mais formalmente, a confiança total de Fulano em uma determinada ordem dos enfeites é calculada do seguinte modo: Se pi é a posição ocupada pelo i-ésimo enfeite e a(i,j) é a confiança de Fulano de que o i-ésimo enfeite estava originalmente na posição j, então a confiança total é dada por (cid:81)N i=1 a(i,pi).\nComo existem muitas possibilidades diferentes para posicionar os enfeites, sua missão, caso queira aceitar, é encontrar a ordem na qual Fulano mais pode confiar.\nEntrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 100), indicando o número de enfeites.\nCada uma das N linhas seguintes contém N inteiros entre 1 e 100. O j-ésimo inteiro na i-ésima linha indica o quanto Fulano confia que o enfeite i estava originalmente na posição j da prateleira.\nSaída\nSeu programa deve produzir uma única linha com N inteiros representando a ordem em que Fulano deve colocar os enfeites de modo a maximizar sua confiança total. Caso exista mais de uma ordem que resulte na confiança máxima, qualquer uma delas será aceita.",
    "samplesExamples": [
      [
        "3\n1 15 37\n42 8 25\n77 2 1",
        "3 1 2"
      ],
      [
        "2\n15 1\n33 42",
        "1 2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Keep Calm e Venda Balões",
    "text": "Walter vende balões de porta em porta. Todo dia ele escolhe uma rua da sua cidade e visita todas as casas nela, oferecendo seus coloridos balões.\nCada rua da cidade de Walter tem a mesma quantidade de casas dos dois lados, e todas as casas da cidade são do mesmo tamanho. Dessa forma, cada rua pode ser vista como uma matriz 2 × N, onde cada célula é uma casa, e N é a quantidade de casas ao longo de cada lado da rua.\nDepois de escolher a rua do dia, Walter visita cada casa dessa rua exatamente uma vez. Ele pode começar seu caminho em qualquer casa, mas só pode se mover entre casas adjacentes horizontalmente, verticalmente ou diagonalmente.\n  A tabela acima ilustra um exemplo para N = 6. Após visitar a casa de número 1, Walter só poderia seguir imediatamente para as casas de número 2, 7 e 8 (isto é, se ele já não tiver visitado elas antes). E após visitar a casa de número 11, a próxima casa do caminho só poderia ser uma das seguintes: 4, 5, 6, 10 ou 12.\nHoje, antes de sair de casa, Walter olhou o mapa da cidade para contar a quantidade N de casas de cada lado da rua escolhida. Agora ele quer saber de quantas maneiras distintas ele pode visitar todas as 2N casas da rua, seguindo as regras descritas. Duas maneiras de visitar as casas são diferentes se e somente se a ordem das casas varia: isto é, se existem duas casas A e B tais que A é visitada antes de B em uma ordem e B é visitada antes de A na outra.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 109).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número de maneiras possíveis de visitar todas as casas da rua. Dado que este número pode ser muito grande, você deve fornecer o resto da divisão deste número por 109 + 7.",
    "samplesExamples": [
      [
        "2",
        "24"
      ],
      [
        "3",
        "96"
      ],
      [
        "4",
        "416"
      ],
      [
        "61728",
        "654783381"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Cruzamento Perigoso",
    "text": "A Agência de Simulação Veicular (ASV), gerenciada pela fundadora Crishna, está trabalhando em um projeto que tem como objetivo a obtenção de dados relacionados às colisões de veículos nos cruzamentos de determinadas regiões do país.\nA primeira simulação da ASV consiste em posicionar arbitrariamente C veículos em cruzamentos de uma determinada região. Inicialmente, haverá no máximo um veículo em cada cruzamento. Uma região é representada por N vias horizontais que se cruzam com M vias verticais.\nApós o início da simulação, cada veículo irá se deslocar na sua direção inicial (Norte, Sul, Leste ou Oeste) com velocidade constante de 1 cruzamento por segundo.\nSe dois ou mais veículos chegarem em um mesmo cruzamento ao mesmo tempo, eles irão colidir e não se movimentarão mais. Se um veículo passar por um cruzamento no qual houve uma colisão anteriormente, ele também colidirá com os veículos parados. Por motivos desconhecidos, quando dois veículos colidem horizontalmente entre dois cruzamentos, ambos vão parar no cruzamento ao leste, e quando dois veículos colidem verticalmente entre dois cruzamentos, ambos vão parar no cruzamento ao norte.\nAbaixo temos um exemplo de simulação com N = 5, M = 6 e C = 7 veículos representados por setas indicando suas direções. Nota-se que os 3 veículos destacados irão colidir eventualmente: Como o software de simulação da ASV ainda não é totalmente confiável, eles irão prover exemplos de configurações iniciais para que seja possível contabilizar a quantidade de veículos que nunca irão colidir.\nEntrada\nA primeira linha contém três inteiros N, M e C (2 ≤ N,M ≤ 105 e 1 ≤ C ≤ min(105,N × M)), representando a quantidade de vias horizontais, a quantidade de vias verticais e a quantidade de veículos na simulação, respectivamente. Cada uma das próximas C linhas conterá dois inteiros Ai e Bi e um caractere D (1 ≤ Ai ≤ N e 1 ≤ Bi ≤ M), representando que o i-ésimo veículo está inicialmente no cruzamento da Ai-ésima via horizontal com a Bi-ésima via vertical, com direção indicada por D (’N’, ’S’, ’L’ ou ’O’).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade de veículos que não colidirão.",
    "samplesExamples": [
      [
        "5 6 7\n2 2 O\n3 2 N\n4 2 N\n4 5 N\n2 6 O\n5 5 L\n2 4 O",
        "4"
      ],
      [
        "2 2 3\n1 1 L\n1 2 O\n2 2 N",
        "0"
      ],
      [
        "2 2 3\n1 1 L\n1 2 O\n2 1 N",
        "1"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Bobo da Corte",
    "text": "O Reino dos Emparelhamentos é governado por um generoso Comendador. A fama do Comendador e de suas grandes qualidades é conhecida por todos, inclusive em reinos vizinhos. Uma de suas mais famosas qualidades é seu bom humor, que é nutrido diariamente por um bobo da corte, eleito anualmente no Grande Concurso de Comédia (GCC) do reino. O bobo da corte ajuda a aliviar as tensões das diversas reuniões políticas que o cargo exige, alegrando não só o Comendador como também todo o reino.\nO jovem Carlos é um grande comediante cujo sonho é se tornar bobo da corte na próxima tem porada. Ele passou os últimos meses anotando piadas e trocadilhos dos mais diversos tipos, muitos dos quais sobre sua própria (diminuta) estatura. Chegou a época da eleição do bobo da corte, e um total de N candidatos se inscreveram. Cada um dos candidatos terá cinco minutos para se apresentar perante uma platéia. Após as apresentações, cada cidadão do Reino dos Emparelhamentos poderá votar em um dos candidatos, e o mais votado será o novo bobo da corte. Caso haja empate entre um ou mais candidatos, aquele que tiver feito a inscrição primeiro é eleito. Sabendo disso, o jovem Carlos passou noites na frente do escritório eleitoral e garantiu que sua inscrição fosse a primeira a ser feita.\nApós a votação, resta apenas apurar os resultados. A urna eletrônica gera um relatório com N inteiros, correspondentes ao número de votos de cada candidato, ordenados pela ordem de inscrição.\nSua missão é determinar se o jovem Carlos foi eleito ou não.\nEntrada\nA primeira linha da entrada contém um inteiro N, satisfazendo 2 ≤ N ≤ 104. As N linhas seguintes conterão N inteiros positivos v1,...,vN, um em cada linha, correspondentes ao número de votos recebido por cada um dos candidatos, em ordem de inscrição. Como a população do Reino dos Emparelhamentos é de 100.000 pessoas, o número total de votos não será superior a este valor, ou seja, (cid:80)N i=1 vi ≤ 100.000.\nSaída\nSeu programa deve produzir uma única linha contendo o caractere ‘S’ caso o jovem Carlos seja eleito bobo da corte, ou o caractere ‘N’ caso contrário.",
    "samplesExamples": [
      [
        "3\n1000\n1000\n1000",
        "S"
      ],
      [
        "5\n1\n2\n3\n4\n5",
        "N"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Arte Valiosa",
    "text": "A Mona Dura é uma das obras de arte mais valiosas do museu da Nlogônia. A famosa pintura fica em exibição num salão retangular de M por N metros. A entrada do salão fica em um canto, e a Mona fica no canto diagonalmente oposto à entrada.\nPara impedir roubos, o salão dispõe de sensores de movimento, que são ativados toda noite quando o museu fecha. Cada sensor tem um valor de sensibilidade S, tal que o sensor dispara um alarme se detectar qualquer movimento a no máximo S metros de distância dele.\nUm ladrão invadiu o museu esta noite com a intenção de roubar a Mona Dura. Para isso, ele precisa entrar no salão e chegar até a pintura sem ser detectado por nenhum sensor de movimento.\nOu seja, ele tem que manter uma distância maior do que Si metros do i-ésimo sensor o tempo todo, para todos os sensores.\nO ladrão obteve acesso às plantas do museu, e portanto sabe as dimensões do salão e as coordenadas e sensibilidades de cada um dos sensores. Dadas essas informações, sua tarefa é determinar se o roubo é possível ou não.\nEntrada\nA primeira linha contém três inteiros, M, N e K, as dimensões do salão e o número de sensores de movimento, respectivamente (10 ≤ M,N ≤ 104, 1 ≤ K ≤ 1000). A entrada do salão fica no ponto (0,0) e a pintura fica no ponto (M,N).\nCada uma das K linhas seguintes corresponde a um dos K sensores e contém três inteiros, X, Y e S, onde (X,Y ) indica a localização do sensor e S indica a sua sensibilidade (0 < X < M, 0 < Y < N, 0 < S ≤ 104). Todas as dimensões e coordenadas da entrada são em metros. É garantido que todos os sensores têm coordenadas distintas.\nSaída\nSeu programa deve produzir uma única linha contendo o caractere ‘S’ caso seja for possível roubar a pintura, ou o caractere ‘N’ caso contrário.",
    "samplesExamples": [
      [
        "10 22 2\n4 6 5\n6 16 5",
        "S"
      ],
      [
        "10 10 2\n3 7 4\n5 4 4",
        "N"
      ],
      [
        "100 100 3\n40 50 30\n5 90 50\n90 10 5",
        "S"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Exibição de Peixes",
    "text": "O Grande Aquário da Nlogônia recebe milhares de visitantes todo mês. Uma das suas atrações mais populares é a exibição de peixes-palhaço, um salão com vários tanques com cardumes dessa bela espécie branca e laranja. Os visitantes têm a oportunidade de aprender muitas curiosidades sobre os peixes-palhaço, incluindo sua organização social: cardumes de peixes-palhaço são liderados por fêmeas, e quando a última fêmea morre ou deixa o grupo, um dos machos restantes sofre mutação, vira uma fêmea e passa a liderar o cardume! Assim que aprendeu isso, Zélio, o Zelador, decidiu pregar uma peça no Aquário e fazer todos os peixes-palhaço da exibição virarem fêmeas! Pra isso, ele vai mover os peixes de um tanque para o outro durante a noite, quando o Aquário está fechado. Se ao final da noite algum tanque ficar com um ou mais machos e nenhuma fêmea, no dia seguinte um deles já terá se transformado em fêmea.\nPara não levantar suspeitas dos outros funcionários, Zélio só pode mover um peixe-palhaço a cada noite, e cada peixe só pode ser movido entre tanques da exibição. Cada tanque é grande o bastante para conter uma quantidade ilimitada de peixes, e Zélio pode deixar tantos tanques vazios quanto quiser. Podemos assumir que nenhuma outra pessoa irá mexer nos peixes, e que nenhum peixe vai nascer, morrer, ser adicionado ou removido dos aquários.\nZélio contou quantos peixes machos e fêmeas vivem atualmente em cada tanque da exibição. Agora ele precisa da sua ajuda pra planejar seus movimentos de forma a transformar todos os peixes-palhaço em fêmeas no menor tempo possível.\nEntrada\nA primeira linha contém um único inteiro N, a quantidade de tanques da exibição (2 ≤ N ≤ 3000).\nCada uma das N linhas seguintes corresponde a um dos tanques e contém dois inteiros, M e F, as quantidades de peixes machos e fêmeas naquele tanque, respectivamente (0 ≤ M,F ≤ 105, M = 0 ou F > 0).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade mínima de movimentos necessários.",
    "samplesExamples": [
      [
        "2\n2 1\n0 2",
        "2"
      ],
      [
        "2\n2 5\n1 3",
        "7"
      ],
      [
        "4\n2 3\n0 0\n3 1\n0 0",
        "5"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Baralho",
    "text": "O cronograma do dia das competições de programação normalmente segue o mesmo padrão: aqueci mento de manhã, seguido do horário de almoço, um tempo de descanso, ajustes finais do ambiente de competição e então o início da prova.\nNo tempo de descanso, alguns competidores preferem relaxar, outros preferem socializar e uma parte tem o costume de jogar algum jogo de baralho. Luciano e seus amigos gostam de jogar um jogo conhecido como “Copo d’Água”. Cansado de não ser o vencedor, Luciano quer escrever um programa que, dadas as cartas iniciais de todos os jogadores (não me pergunte como ele sabe disso), determine se ele irá vencer ou não. Se ele não for vencer, ele pode então inventar uma desculpa qualquer e pedir para não participar daquela rodada.\nO jogo funciona da seguinte maneira: – O baralho utilizado possui as cartas: “A23456789DQJK” (nessa ordem, de menor para maior valor), onde os naipes são ignorados. Além disso, o baralho possui mais uma única carta extra: o curinga.\n– N competidores sentam lado a lado em círculo. O competidor 1 está imediatamente à esquerda do 2, que está imediatamente à esquerda do 3, e assim por diante até completar o círculo com o N-ésimo competidor imediatamente à esquerda do 1. Um competidor K é sorteado para iniciar o jogo.\n– Em um jogo com N competidores, existirão quatro cartas de N diferentes valores e um curinga.\nNo começo do jogo, o competidor K recebe o curinga; as demais cartas são embaralhadas e distribuídas entre os jogadores, de modo que cada jogador receba quatro delas.\n– Em cada rodada, o jogador da vez escolhe uma de suas cartas e a passa para o jogador à sua direita. O jogador que recebeu uma carta será o próximo jogador da vez.\n– Dizemos que um jogador está em estado vencedor se possuir exatamente quatro cartas em mãos e elas forem todas iguais. O jogo termina assim que ao menos um competidor estiver em estado vencedor. Nesse caso, o competidor de menoríndice em estado vencedor será declarado o jogador vencedor.\nA carta que será passada de um competidor para o próximo é definida pela seguinte regra: – O curinga nunca pode ser passado logo depois de ser recebido. Isso também se aplica ao jogador inicial, que recebeu o curinga do distribuidor de cartas logo antes da primeira rodada.\n– O competidor irá, sempre que possível, passar o curinga para o próximo.\n– Caso não passe o curinga, o competidor irá escolher a carta que menos aparece em sua mão e passar para o próximo. Caso exista mais de uma carta que aparece uma menor quantidade de vezes, ele irá passar, dentre essas, a carta de menor valor de acordo com a ordem descrita anteriormente.\nSabendo das regras, ajude Luciano escrevendo um programa que, dada a configuração inicial do jogo, diga qual jogador será declarado vencedor.\nEntrada\nA primeira linha contém dois inteiros N e K (2 ≤ N ≤ 13 e 1 ≤ K ≤ N) representando, respectivamente, a quantidade de competidores e o competidor que iniciará o jogo. Cada uma das próximas N linhas conterá quatro caracteres, representando as cartas iniciais do i-ésimo competidor (com exceção do curinga).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o competidor que será declarado vencedor.",
    "samplesExamples": [
      [
        "2 1\n33J3\nJJJ3",
        "2"
      ],
      [
        "2 2\nA2A2\n22AA",
        "2"
      ],
      [
        "4 2\n774Q\nJJQ7\n44Q7\n4QJJ",
        "3"
      ],
      [
        "3 1\nJQAA\nJJJA\nQQQA",
        "3"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Interplanetário",
    "text": "Estamos no ano de 2306 e, com o avanço da nanotecnologia, viagens interplanetárias estão cada vez mais acessíveis. Bibika trabalha na maior agência de viagem interplanetária do universo e recebe clientes interessados diariamente.\nOs clientes de Bibika são exigentes e fazem várias demandas antes de fechar o roteiro de suas viagens, como minimizar a distância total percorrida. Mas as maiores restrições são com relação às temperaturas dos planetas visitados no percurso (excluindo os planetas de origem e de destino). A temperatura de um planeta, medida em graus Anidos, pode variar de 109 graus Anidos negativos até 109 graus Anidos positivos. Os clientes de Bibika são oriundos de planetas de climas variados e, consequentemente, possuem preferências diferentes em relação a temperatura: alguns se incomodam com planetas muito frios e outros com planetas muito quentes. Bibika precisa planejar a rota das viagens de forma a poupar seus clientes de qualquer desconforto, mesmo que para isso o comprimento total da rota não seja o menor possível (ou até mesmo que não exista uma rota: nesse caso Bibika simplesmente informa os clientes de que a viagem é impossível).\nBibika lhe forneceu a temperatura média histórica de cada um dos N planetas e as R rotas que ligam pares de planetas diretamente (é garantido que entre dois planetas existe no máximo uma rota direta), juntamente com suas respectivas distâncias. Ela lhe fornecerá também os pedidos de viagem de Q clientes. Cada pedido consiste de um planeta de origem A, um planeta de destino B, e a restrição do cliente em relação às temperaturas dos planetas intermediários: cada cliente pode exigir passar apenas por planetas com temperaturas entre as K menores ou K maiores dentre todos os N planetas.\nSua tarefa é, para cada pedido de viagem, encontrar a menor distância percorrida possível dadas as restrições descritas, ou dizer que a viagem é impossível.\nEntrada\nA primeira linha contém dois inteiros N e R (2 ≤ N ≤ 400 e 0 ≤ R ≤ N ·(N −1)/2), representando a quantidade de planetas conhecidos e a quantidade de rotas diretas entre eles. O primeiro planeta é representado pelo número 1, o segundo pelo número 2, ..., até o N-ésimo pelo número N. A segunda linha contém N inteiros Ti (−109 ≤ Ti ≤ 109), representando a temperatura média de cada um dos planetas. A seguir haverá R linhas, cada uma contendo três inteiros X, Y e D (1 ≤ X,Y ≤ N com X (cid:54)= Y e 1 ≤ D ≤ 103), representando uma rota direta de comprimento D entre os planetas X e Y . Em seguida haverá um inteiro Q (1 ≤ Q ≤ 105), representando a quantidade de pedidos de viagens dos clientes. Por fim, cada uma das próximas Q linhas conterá quatro inteiros A, B, K e T (1 ≤ A,B,K ≤ N com A (cid:54)= B e T ∈ {0,1}), representando um cliente que deseja ir do planeta A para o planeta B passando apenas por planetas que estejam entre os K mais frios se T = 0 ou K mais quentes se T = 1.\nSaída\nSeu programa deve produzir uma linha para cada cliente contendo um inteiro que representa a menor distância total de viagem entre os dois planetas dadas as restrições do cliente, ou −1 caso a viagem não seja possível.",
    "samplesExamples": [
      [
        "7 9\n-53 -180 456 420 -210 15 150\n1 2 2\n1 3 1\n2 3 4\n2 4 2\n2 5 5\n3 4 6\n6 4 10\n4 5 4\n3 7 2\n4\n1 5 2 1\n1 2 1 1\n5 6 1 0\n1 7 2 1",
        "11\n2\n-1\n3"
      ],
      [
        "6 5\n5 10 20 10 10 8\n1 2 5\n2 3 5\n3 4 5\n4 5 5\n5 6 5\n4\n1 6 2 1\n1 6 1 1\n4 5 1 0\n2 4 1 1",
        "25\n-1\n5\n10"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hora da Corrida",
    "text": "Vinicius leva muito a sério seu condicionamento físico e, diariamente às 6h da manhã, chova ou faça sol, no verão e no inverno, ele corre no entorno de uma lagoa. Ao longo da pista de corrida existem N placas igualmente espaçadas. Para não desanimar do exercício, Vinicius conta o número de placas pelas quais ele já passou e verifica se ele já correu pelo menos 10%, pelo menos 20%, ..., pelo menos 90% do percurso.\nVamos ajudar o Vinicius, calculando para ele o número de placas que ele precisa contar para ter completado pelo menos 10%, 20%, ..., 90% da corrida, dados o número de voltas que ele pretende correr e o número total de placas ao longo da pista.\nPor exemplo, suponhamos que Vinicius queira dar 3 voltas e o número de placas seja 17. Então, para garantir ter corrido pelo menos 30% do percurso, ele precisa contar 16 placas. Para garantir pelo menos 60%, ele precisa contar 31 placas.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros, V e N (1 ≤ V,N ≤ 104), onde V é o número pretendido de voltas e N é o número de placas na pista.\nSaída\nSeu programa deve produzir uma única linha com nove inteiros representando os números de placas que devem ser contadas para garantir o cumprimento, respectivamente, de 10%, 20%, ..., 90% da meta.",
    "samplesExamples": [
      [
        "3 17",
        "6 11 16 21 26 31 36 41 46"
      ],
      [
        "5 17",
        "9 17 26 34 43 51 60 68 77"
      ],
      [
        "3 11",
        "4 7 10 14 17 20 24 27 30"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lançando Moedas",
    "text": "Carla e Daniel decidiram jogar cara-ou-coroa para decidir quem vai lavar os pratos hoje. Eles vão jogar com uma das moedas antigas da coleção de Carla. Isso deixa Daniel preocupado, pois essas moedas são tortas e desbalanceadas: no lançamento de uma moeda, as probabilidades da obtenção de cara e de coroa não são necessariamente iguais.\nCarla conhece bem suas moedas, e pode escolher uma que maximize suas chances de vencer. Por isso, Daniel inventou um esquema para fazer com que o sorteio seja completamente justo, indepen dentemente da moeda escolhida. Primeiro, a cada um deles será atribuído um conjunto não-vazio de cadeias binárias de tamanho N. Nenhuma cadeia pode pertencer a ambos, e algumas cadeias podem não ser incluídas no conjunto de nenhum dos dois. Por exemplo, para N = 3, uma forma válida de dividir as cadeias seria: • “010” e “110” para Carla; • “001” e “011” para Daniel; • “000”, “100”, “101” e “111” para nenhum dos dois.\nApós a divisão das cadeias, Carla e Daniel vão jogar a mesma moeda N vezes e anotar a sequência de resultados, onde cada cara equivale a um 0 e cada coroa equivale a um 1. Se a cadeia binária resultante pertencer ao conjunto de Carla, ela é a vencedora. Se pertencer ao conjunto de Daniel, ele é o vencedor. Se a cadeia não pertencer a nenhum dos dois, a moeda é jogada mais N vezes para gerar uma nova cadeia. O processo é repetido tantas vezes quanto necessário, até conseguirem um vencedor.\nO justo funcionamento desse esquema depende da repartição das cadeias entre Carla e Daniel: é preciso que a probabilidade de gerar uma cadeia do conjunto de Carla seja igual à probabilidade de gerar uma cadeia do conjunto de Daniel. Em outras palavras, seja P(S) a probabilidade de que uma cadeia binária S de comprimento N seja gerada por uma sequência de N lançamentos de uma mesma moeda, possivelmente desbalanceada. O total de P para todas as cadeias do conjunto de Carla deve ser o mesmo que o total de P para todas as cadeias do conjunto de Daniel.\nAlém de repartir as cadeias de forma justa, Carla e Daniel querem evitar ao máximo ter que repetir os lançamentos da moeda, e por isso querem minimizar a quantidade de cadeias que não pertençam a nenhum dos dois. Dado o valor de N, determine o menor número possível de cadeias não atribuídas.\nEntrada\nA entrada consiste de uma única linha que contém contém um inteiro N, o número de lançamentos da moeda e o comprimento das cadeias binárias (2 ≤ N ≤ 1018).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número mínimo de cadeias não utilizadas na divisão.",
    "samplesExamples": [
      [
        "3",
        "4"
      ],
      [
        "5",
        "4"
      ],
      [
        "8",
        "2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Maratona Brasileira de Comedores de pipocas",
    "text": "A Maratona Brasileira de Comedores de pipocas é uma competição que ocorre anualmente com o intuito de descobrir qual a equipe mais organizada, preparada e bem-treinada na arte de comer pipoca.\nEla é organizada pela SBCp (Sociedade Brasileira de Comedores de pipocas), que periodicamente se reúne para discutir as regras e o formato da competição.\nA competição consiste em N sacos de pipocas colocados lado a lado, onde cada saco possui uma quantidade arbitrária de pipoca. Para proporcionar uma maior diversão, a competição ocorre em equipes, cada uma composta por C competidores. Como a Maratona Brasileira de Comedores de pipocas é um evento sério que preza, além de tudo, pela saúde dos competidores, a comissão médica impôs que cada competidor poderá comer, no máximo, T pipocas por segundo, a fim de evitar um possível mal-estar.\nA SBCp, em sua última reunião, definiu duas novas regras para a edição de 2019: – Cada competidor da equipe deverá comer uma sequência contígua de sacos de pipoca. É perfei tamente válido que um competidor não coma nenhuma pipoca.\n– Todas as pipocas de um mesmo saco devem ser comidas por um único competidor.\nO objetivo da competição é comer todas as pipocas no menor tempo possível, dado que os C competidores podem comer em paralelo e eles respeitarão todas as regras impostas pela SBCp.\nEntrada\nA primeira linha contém três inteiros N, C e T (1 ≤ N ≤ 105, 1 ≤ C ≤ 105 e 1 ≤ T ≤ 50), representando a quantidade de sacos de pipoca, a quantidade de competidores de uma mesma equipe e quantidade máxima de pipoca por segundo que um competidor pode comer. A segunda linha conterá N inteiros Pi (1 ≤ Pi ≤ 104), sendo estes a quantidade de pipoca em cada um dos N sacos.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade mínima de segundos necessária para a equipe comer todas as pipocas se ela se organizar da melhor maneira possível.",
    "samplesExamples": [
      [
        "5 3 4\n5 8 3 10 7",
        "4"
      ],
      [
        "3 2 1\n1 5 1",
        "6"
      ],
      [
        "3 2 1\n1 1 5",
        "5"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Banco de Dados de Clientes",
    "text": "Hoje em dia existem bilhões de usuários de e-mail. Um fato pouco conhecido é que alguns provedores de e-mail oferecem muito mais do que o endereço de e-mail usual username@provider.com.\nAlguns provedores simplesmente ignoram os pontos nos nomes de usuário. Assim, se John possuir o nome de usuário johnsmith, ele poderá informar às pessoas que seu endereço de e-mail é johnsmith@provider.com, john.smith@provider.com ou john.smith@provider.com, entre outros. Os e-mails enviados para qualquer um desses endereços acabariam em sua caixa de correio.\nOutros provedores permitem anexar o caractere “+” seguido por qualquer combinação de letras e/ou dígitos após o nome de usuário. Com esse recurso, ao registrar o nome de usuário johnsmith, John também poderia usar johnsmith+friends@provider.com e johnsmith+2x3is6@provider.com.\nÀs vezes, os dois recursos estão disponíveis ao mesmo tempo e, nesses casos, john.smith+icpc@provider.com e john.smith+wants.2.eat.lemon.3.14@provider.com são endereços válidos que John poderia usar.\nIsto é bastante útil para os usuários, que podem gerenciar diferentes endereços para ajudar a organizar suas caixas de correio e filtrar facilmente as newsletters eventualmente enviadas após o registro em um novo site. Infelizmente, isso também abre espaço para abusos. Alguns sites dependem do fato de que cada endereço de e-mail identifica um único usuário. No entanto, um usuário mal-comportado pode facilmente criar várias contas aproveitando os vários endereços permitidos pelo provedor de e-mail.\nDepois de saber de tudo isso, seu chefe ficou muito preocupado. E se o número de usuários únicos informado aos acionistas não for preciso e, em vez disso, estiver inchado por contas duplicadas? Isso leva você à tarefa em questão: dada a lista de todos os endereços de e-mail do banco de dados de usuários da empresa, você deve determinar o número real de usuários únicos, assumindo que todos os provedores de e-mail tenham ambos os recursos descritos disponíveis.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000) representando o número de endereços de e-mail no banco de dados. Cada uma das próximas N linhas contém uma sequência de no máximo 100 caracteres representando um endereço de e-mail no banco de dados. Cada endereço de e-mail tem o formato localpart@provider onde localpart é uma lista não vazia de rótulos com um “.” (ponto) ou um “+” (sinal de mais) entre cada par de rótulos consecutivos, e provedor é uma lista não vazia de rótulos sempre com um “.” (ponto) entre cada par de rótulos consecutivos. Um rótulo é uma sequência não vazia de letras minúsculas e/ou dígitos. O caracter “+” (sinal de mais) aparece no máximo uma vez em cada endereço de e-mail.\nSaída\nProduza uma única linha com um número inteiro indicando o número de usuários únicos no banco de dados.",
    "samplesExamples": [
      [
        "2\ntwo.different.providers@now.here\ntwo.different.providers@nowhere",
        "2"
      ],
      [
        "2\n1.2.3@testing\ntesting@1.2.3",
        "2"
      ],
      [
        "7\nalice@e.mail\neve@another.mail\nbob@e.mail\njoe90@e.mail\nb.o.b@e.mail\nbob+new@e.mail\nbob@another.provider",
        "5"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Uma pizza simétrica",
    "text": "Bob tem uma mania de simetria. Tudo na sua vida deve ser simétrico: a sua casa, as suas roupas, o seu carro, até a sua comida. E a pizza não é exceção. Para ele comer uma pizza, todos os recheios, como tomate, azeitona, calabresa ou manjericão, devem estar dispostos com algum grau de simetria rotacional.\nEsta noite Bob pediu pizza. Como sempre, quando chegou, pediu ao entregador que demonstrasse que a pizza atendia às suas exigências de simetria rotacional. O motorista demonstrou então a simetria, conforme foi treinado para fazer, utilizando o seguinte procedimento: • tirar foto da pizza com o celular; • gire a pizza em R graus em torno de seu centro; • tire outra foto; • mostre ao Bob as duas imagens lado a lado, para que ele veja que a pizza parece idêntica em ambas.\nSatisfeito, Bob pagou a pizza e levou-a para a cozinha. Para testar seu novo cortador de pizza a laser, ele decidiu cortar a pizza em tantas fatias quanto possível. Claro que Bob quer cortar as fatias de forma que todas fiquem exatamente iguais, de acordo com outra de suas manias. Agora, dado o ângulo R da demonstração de simetria, Bob quer saber a quantidade máxima de fatias iguais em que ele pode cortar a pizza.\nEntrada\nA entrada consiste em uma única linha que contém um número racional R (0 < R < 360) indicando o ângulo de demonstração da simetria rotacional. Este número tem exatamente dois dígitos após a vírgula.\nSaída\nProduza uma única linha com um número inteiro representando a quantidade máxima de fatias iguais em que Bob pode cortar a pizza, com base nas informações fornecidas.",
    "samplesExamples": [
      [
        "45.00",
        "8"
      ],
      [
        "180.00",
        "2"
      ],
      [
        "240.00",
        "3"
      ],
      [
        "35.00",
        "72"
      ],
      [
        "2.50",
        "144"
      ],
      [
        "11.34",
        "2000"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Robô Agrícola",
    "text": "Para desencorajar pássaros como corvos e pardais de se alimentarem das suas colheitas, um agricultor precisou colocar alguns espantalhos no seu campo de milho. Seu sobrinho gosta muito de robôs e sugeriu que ele usasse um espantalho robô: “Um único espantalho robô pode proteger melhor todo o campo de milho e vai durar muito mais do que dez espantalhos tradicionais!”, disse ele.\nComo o fazendeiro acha que seu sobrinho é um menino inteligente, ele seguiu seu conselho e comprou um espantalho robô.\nO robô se move ao longo de um caminho que circunda o milharal. No caminho existem N estações de carregamento não tripuladas, numeradas sequencialmente no sentido horário a partir de 1. A figura abaixo mostra um exemplo com oito estações de carregamento.\nO robô começa todos os dias na estação número 1 e recebe uma sequência de comandos que devem ser executados em ordem durante o dia. Esses comandos são gerados com base em algoritmos avançados de aprendizado de máquina que funcionam em dados coletados por sensores espalhados pela plantação de milho, garantindo uma cobertura ideal da cultura. Cada comando faz com que o robô se mova para outra estação de carregamento próxima àquela em que está atualmente, no sentido horário ou anti-horário.\nApesar das promessas de cobertura ideal por parte do robô, ao final de um determinado dia o agricultor encontrou parte de sua lavoura devastada. Para descobrir o que pode ter acontecido o agricultor quer saber quantas vezes o robô esteve na estação de carregamento mais próxima da área devastada. Dado o número do posto mais próximo da área devastada e a sequência de comandos para um único dia, você consegue ajudar o agricultor a encontrar esse número? Entrada\nA primeira linha contém três inteiros N, C e S representando respectivamente o número de postos (2 ≤ N ≤ 100), o número de comandos (1 ≤ C ≤ 1000) e a estação de carregamento mais próxima da área devastada (1 ≤ S ≤ N). A segunda linha contém C inteiros X1,X2,...,XC, representando a sequência de comandos recebidos pelo robô espantalho. Para i = 1,2,...,C, se Xi for 1, então o i-ésimo comando significa “mover para a próxima estação de carregamento no sentido horário”, enquanto se Xi for −1, então o i-ésimo comando significa “ vá para a próxima estação de carregamento no sentido anti-horário”. O robô sempre inicia na estação número 1.\nSaída\nProduza uma única linha com um número inteiro indicando o número de vezes que o robô esteve na estação número S durante o dia.",
    "samplesExamples": [
      [
        "8 8 3\n1 -1 1 1 1 -1 1 1",
        "2"
      ],
      [
        "5 4 1\n1 1 1 1",
        "1"
      ],
      [
        "2 1 1\n1",
        "1"
      ],
      [
        "2 1 2\n1",
        "1"
      ],
      [
        "2 2 1\n-1 1",
        "2"
      ],
      [
        "2 2 1\n-1 -1",
        "2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Estrelas deslumbrantes",
    "text": "O pequeno Bernie adora olhar as estrelas no céu. Sua constelação favorita é a Constelação Bola de Papel, por causa de seu formato distinto e inconfundível de... uma bola de papel amassado.\nBernie baixou uma foto da constelação da internet e agora quer imprimi-la e colá-la na parede. Bernie também gosta de observar as folhas de papel saindo gradativamente da impressora e, para essa ocasião, tomou uma decisão: quer que as estrelas sejam impressas em ordem não crescente de brilho.\nA constelação tem N estrelas. Para cada um deles, Bernie conhece o seu nível de brilho B, bem como as suas coordenadas X e Y na imagem, onde a direção X aponta para a direita e a direção Y aponta para cima. Ele sabe que as imagens são impressas de cima para baixo (ou seja, em ordem decrescente da coordenada Y) e que tudo na linha horizontal é impresso simultaneamente.\nO plano de Bernie pode ser descrito assim: para quaisquer duas estrelas S e T, se S for mais brilhante que T, então S deve ser impresso antes ou ao mesmo tempo que T. Antes de imprimir a imagem, Bernie pode girá-la em qualquer ângulo ao redor qualquer ponto, mas ele não pode dimensioná-lo, refleti-lo ou distorcê-lo. Agora Bernie precisa da sua ajuda para descobrir se existe alguma rotação que permita que as estrelas sejam impressas na ordem que ele deseja.\nEntrada\nA primeira linha contém um inteiro N (3 ≤ N ≤ 1000) indicando o número de estrelas na constelação. Cada uma das próximas N linhas descreve uma estrela com três inteiros X, Y (−104 ≤ X,Y ≤ 104) e B (1 ≤ B ≤ 1000), onde X e Y são as coordenadas da estrela na imagem, e B é o seu nível de brilho. Não há duas estrelas com a mesma localização.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se houver alguma rotação que permita que as estrelas sejam impressas em ordem não crescente de brilho, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "4\n0 2 1\n1 -1 2\n3 3 5\n4 0 2",
        "Y"
      ],
      [
        "5\n0 4 6\n2 4 5\n3 7 2\n4 4 6\n3 0 8",
        "Y"
      ],
      [
        "4\n-1 2 5\n0 0 2\n3 4 1\n4 2 4",
        "N"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Colando fotos",
    "text": "Enzo viajou recentemente para a cidade de Montevidéu, onde viu uma grande placa com o nome da cidade. Resolveu tirar fotos da placa para fazer uma colagem e enviar ao amigo Demonio.\nEnzo quer formar o nome de seu amigo tirando uma ou várias fotos de seções da placa. Por exemplo, com a string “MONTEVIDEO”, ele pode formar o nome do seu amigo juntando “DE-MON-I-O”, usando quatro figuras para formar o nome completo. É fácil mostrar que o resultado não pode ser alcançado com menos fotos.\nVocê receberá o nome de uma cidade e uma lista de nomes de amigos. Devolva o número mínimo de fotos necessárias para formar o nome de cada amigo. Ao formar os nomes, as imagens não podem ser giradas, refletidas ou modificadas de forma alguma.\nEntrada\nA primeira linha contém uma string C indicando o nome da cidade. A segunda linha contém um inteiro positivo N representando o número de amigos. Cada uma das N linhas a seguir contém uma string indicando o nome de um amigo. Todas as strings não estão vazias e consistem apenas em letras maiúsculas. A soma dos comprimentos de todas as strings é no máximo 2 × 105.\nSaída\nSaída N linhas, cada linha com um número inteiro indicando o número mínimo de imagens necessárias para formar o nome correspondente na entrada, ou o valor “-1” caso não seja possível gerar o nome.",
    "samplesExamples": [
      [
        "MONTEVIDEO\n4\nDEMONIO\nMONTE\nEDIT\nWON",
        "4\n1\n4\n-1"
      ],
      [
        "SANTIAGO\n3\nTITA\nSANTIAGO\nNAS",
        "3\n1\n3"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Conheça seus alienígenas",
    "text": "Nosso mundo foi invadido por alienígenas metamorfos que sequestram pessoas e roubam suas identidades.\nVocê é um inspetor de uma força-tarefa dedicada a detectá-los e capturá-los. Como tal, você recebeu ferramentas especiais para detectar alienígenas e diferenciá-los de humanos reais. Sua missão atual é visitar uma cidade suspeita de ter sido invadida, inspecionar secretamente todas as pessoas lá para saber quem são alienígenas e quem não é, e relatar tudo à Sede. Então eles podem enviar forças para a cidade de surpresa e capturar todos os alienígenas de uma só vez.\nOs alienígenas estão cientes do trabalho de inspetores como você e estão monitorando todos os canais de rádio para detectar a transmissão de tais relatórios, a fim de antecipar qualquer retaliação. Portanto, têm havido vários esforços para criptografar os relatórios, e o método mais recente utiliza polinômios.\nA cidade que você deve visitar tem N cidadãos, cada um identificado por um número inteiro par distinto de 2 a 2N. Você deseja encontrar um polinômio P tal que, para cada cidadão i, P(i) > 0 se o cidadão i for humano, e P(i) < 0 caso contrário. Este polinômio será transmitido à Sede.\nCom o objetivo de minimizar a largura de banda, o polinômio possui alguns requisitos adicionais: cada raiz e coeficiente deve ser um número inteiro, o coeficiente do seu termo de maior grau deve ser 1 ou -1, e seu grau deve ser o menor possível.\nPara cada cidadão, você sabe se ele é humano ou não. Dadas essas informações, você deve encontrar um polinômio que satisfaça as restrições descritas.\nEntrada\nA entrada consiste em uma única linha que contém uma string S de comprimento N (1 ≤ N ≤ 104), onde N é a população da cidade. Para i = 1,2,...,N, o i-ésimo caractere de S é a letra maiúscula “H” ou a letra maiúscula “A”, indicando respectivamente que o cidadão 2i é um humano ou um alienígena.\nSaída\nA primeira linha deve conter um inteiro D indicando o grau de um polinômio que satisfaz as restrições descritas. A segunda linha deve conter D+1 inteiros representando os coeficientes do polinômio, em ordem decrescente dos termos correspondentes. É garantido que existe pelo menos uma solução tal que o valor absoluto de cada coeficiente seja inferior a 263.",
    "samplesExamples": [
      [
        "HHH",
        "0\n1"
      ],
      [
        "AHHA",
        "2\n-1 10 -21"
      ],
      [
        "AHHHAH",
        "3\n1 -23 159 -297"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fabricando Esculturas",
    "text": "Miguel Angelo é um grande escultor, amplamente reconhecido pelas suas esculturas ao ar livre. Em sua cidade natal é muito comum encontrar uma de suas criações em praças e jardins. As pessoas adoram as suas esculturas, não só pela sua beleza, mas também porque parecem novas mesmo depois de décadas.\nAs esculturas não se degradam facilmente devido ao material e técnica desenvolvidos por Miguel e sua equipa ao longo dos anos.\nPara construir as esculturas, ele primeiro constrói sua base empilhando blocos de gesso impermeável (seu material secreto), formando diversas pilhas de blocos em linha reta. Ele sempre usa blocos idênticos e cada pilha possui pelo menos um bloco. Para estabilizar a estrutura, ele a envolve com duas grandes vidraças, uma atrás das pilhas e outra na frente delas. Então ele espera a chuva o tempo que for preciso. Se a estrutura for tal que não acumule água durante este procedimento, Miguel tem a certeza que a base pode ser utilizada para obter uma obra de arte duradoura.\nObserve que a água se acumulará em um bloco se houver obstáculos (outros blocos) em ambos os lados (à esquerda e à direita).\nA imagem a seguir mostra a vista frontal de várias bases diferentes. Todos eles consistem em três pilhas compostas por um total de seis blocos, sendo que cada pilha possui pelo menos um bloco conforme necessário.\nNo entanto, as oito bases à esquerda resultarão em obras de arte duradouras, enquanto as duas bases à direita não.\nMiguel Angelo está recebendo muitos pedidos de esculturas. Embora tenha toda a liberdade para criar a obra, ele quer ser justo e usar o mesmo número de pilhas e o mesmo número de blocos em cada uma das esculturas. Como não quer vender esculturas idênticas para clientes diferentes, ele construirá uma base diferente a cada vez.\nEle teme não conseguir atender a todas as solicitações. Ajude-o a calcular o número de bases diferentes, dado o número de pilhas e o número de blocos que a base deve ter.\nEntrada\nA entrada consiste em uma única linha que contém dois inteiros S e B (1 ≤ S ≤ B ≤ 5000) indicando respectivamente o número de pilhas e o número de blocos que a base deve possuir.\nSaída\nProduza uma única linha com um número inteiro indicando a quantidade de bases diferentes que não acumulam água que Miguel pode construir. Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "3 6",
        "8"
      ],
      [
        "3 7",
        "12"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Reduzir a desigualdade",
    "text": "A Complejidonia nem sempre foi a terra pacífica e igualitária que todos conhecemos hoje. Os ricos Constantones eram os proprietários dos meios de comunicação locais e mergulharam a Complejidonia na tirania do seu sistema económico implacável: o Nlogonialismo, um sistema que promovia extrema injustiça que, estranhamente, sempre beneficiou os Constantones.\nEnquanto os Constantones detinham a maior parte da riqueza, os Cuadradones viviam em extrema pobreza e a desigualdade era justificada pela classificação de Cuadradones como preguiçosos e ineficientes. Os Nlogones normalmente desprezavam Cuadradones, apesar de trabalharem tanto quanto eles, acreditando que estavam em melhor situação graças à sua mistura de trabalho duro e astúcia. Para os Cubiones e Cuaterniones foi ainda pior, vindos de países vizinhos eram vistos como criminosos e, ao mesmo tempo, acusados ​​de roubar empregos complejidonianos.\nTudo mudou depois que o Congresso Internacional Coletivista e Popular (ICPC) conseguiu derrubar os Constantones e estabelecer um novo sistema econômico, um sistema que busca a justiça e leva em conta que cada habitante pode passar por bons e maus períodos econômicos na vida. .\nNo novo sistema foram estabelecidos um limite superior U para quanta riqueza um indivíduo pode acumular e um limite inferior L representando a riqueza mínima necessária para que um indivíduo mantenha um estilo de vida decente. No final de cada mês cada habitante avaliará a sua riqueza. Aqueles com mais de U doarão o que possuem acima do limite superior ao ICPC, enquanto aqueles que infelizmente têm menos de L receberão o suficiente do ICPC para atingir o limite inferior estabelecido.\nOs Cuadradones, que são agricultores muito bons, precisam da sua ajuda para administrar suas finanças.\nA longa era do Nlogonialismo prejudicou gravemente o ambiente e agora o clima na Complejidonia é muito volátil. Isto tem um grande impacto na sua agricultura, que oscila entre períodos bons e maus.\nUm agricultor mantém um registo longo A1,A2,...,AN do seu rendimento líquido (rendimento menos despesas) numa sequência de N meses. Com base nestes dados, o agricultor quer planear como investir a sua riqueza, a fim de evitar ser um fardo para o CIPC no futuro. O agricultor quer saber, dada uma riqueza inicial X no início do mês B, quanto possuiria no final do mês E (considerando que no final de cada mês poderia doar ou receber uma doação para garantir que sua riqueza esteja entre L e U, inclusive).\nEntrada\nA primeira linha contém três inteiros N (1 ≤ N ≤ 105), L e U (1 ≤ L ≤ U ≤ 2 × 106), indicando respectivamente o número de meses em que o agricultor tem registos de rendimento líquido, o limite inferior de riqueza e o limite superior da riqueza. A segunda linha contém N inteiros A1,A2,...,AN (−106 ≤ Ai ≤ 106 para i = 1,2,...,N), onde Ai é o lucro líquido do i-ésimo mês. A terceira linha contém um inteiro Q (1 ≤ Q ≤ 105) representando o número de cenários nos quais o agricultor está interessado. Cada uma das próximas Q linhas descreve um cenário com três inteiros B, E (1 ≤ B ≤ E ≤ N) e X (L ≤ X ≤ U), indicando que o agricultor gostaria de saber quanto possuiria no final do mês E se passasse a possuir X no início do mês B, e a cada mês j = B,B + 1 ,...,E seu lucro líquido é Aj.\nSaída\nProduza Q linhas, cada linha com um número inteiro indicando quanto o agricultor possuiria no final do período descrito no cenário correspondente.\n  No primeiro cenário, o rendimento líquido do agricultor seria [10,1,−1,−70] e ele começa com uma riqueza de 31: • No final do primeiro mês a sua riqueza é 41. Como 1 ≤ 41 ≤ 41 eles ganharam não doar nem receber dinheiro.\n• No final do segundo mês a sua riqueza é 42. Como 42 > 41 doam 1, terminando o mês com uma riqueza de 41.\n• No final do terceiro mês a sua riqueza é 40. Como 1 ≤ 40 ≤ 41 mais uma vez não doarão nem receberão dinheiro.\n• Finalmente, no final do quarto mês a sua riqueza é de -30. Como −30 < 1 eles recebem uma doação do ICPC terminando o mês com riqueza de 1.\nAssim, neste cenário, o agricultor acaba por possuir uma riqueza de 1.",
    "samplesExamples": [
      [
        "5 1 41\n-10 10 1 -1 -70\n10\n2 5 31\n2 4 30\n2 4 29\n2 4 28\n1 2 20\n1 2 10\n1 4 11\n1 4 10\n1 4 40\n1 4 41",
        "1\n40\n39\n38\n20\n11\n11\n11\n40\n40"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Construa a casa perfeita",
    "text": "Alice e Bob estão agora com 45 anos e desfrutaram de uma longa aposentadoria de cinco anos cuidando de sua horta. Ir e voltar de sua casa na cidade para o campo tornou-se uma tarefa muito cansativa, então eles decidiram se mudar para o campo permanentemente. Atualmente eles têm uma cerca perfeita cercando todas as hortaliças (tem perímetro e área mínimos), mas vão derrubar a cerca antiga e construir uma nova casa perfeita para morar.\nEntão, o que é uma casa perfeita? Bem, você sabe, existem alguns requisitos. A área da casa deve ser um quadrado centrado no ponto do campo que tenha a vista mais bonita.\nAlém disso, a casa não pode ser construída sobre nenhuma das hortaliças, embora as hortaliças sejam permitidas bem na divisa da casa.\nComo Alice e Bob adoram cômodos espaçosos, sua tarefa é encontrar o perímetro máximo que uma casa perfeita pode ter.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 104) indicando o número de hortaliças no campo de Alice e Bob. As hortaliças são representadas como pontos no plano bidimensional, sendo (0,0) o ponto do campo que possui a vista mais bonita. Cada uma das próximas N linhas descreve uma planta vegetal com dois inteiros X e Y (−109 ≤ X,Y ≤ 109) indicando as coordenadas da planta. Não existem duas hortaliças na mesma localização e nenhuma delas está no ponto (0,0).\nSaída\nProduza uma única linha com um número indicando o perímetro máximo que uma casa perfeita pode ter. O resultado deve ser apresentado como um número racional com exatamente quatro dígitos após a vírgula, arredondado se necessário. Observe que as laterais da casa não precisam estar alinhadas com os eixos coordenados.",
    "samplesExamples": [
      [
        "1\n0 1",
        "8.0000"
      ],
      [
        "2\n10 4\n-5 -8",
        "74.9634"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ensino de Algoritmos",
    "text": "O Concurso Regional para Iniciantes da América Latina está chegando e a Universidade de Byteland quer preparar uma equipe de alunos recém-admitidos para competir. A universidade tem N professores que podem instruir os alunos no tópico de algoritmos. Cada aluno candidato deve ser treinado por um único professor, em um subconjunto não vazio dos algoritmos que o professor conhece. Por exemplo, se um determinado professor conhece os dois algoritmos PRIM e KRUSKAL, então o professor pode treinar um aluno apenas em PRIM, apenas em KRUSKAL, ou em ambos PRIM e KRUSKAL. Como você pode ver, neste caso existem três opções diferentes para este professor em particular treinar um aluno. Em geral, um determinado professor que conhece algoritmos diferentes pode treinar um aluno de 2A − 1 maneiras diferentes. Todas essas opções 2A − 1 podem ser realizadas, pois a universidade tem muitos alunos novos e não há limite de alunos que um professor pode formar.\nA universidade gostaria de formar uma equipe com o maior número possível de alunos. Porém, cada par de alunos da equipe final deve ser capaz de cooperar, o que significa que cada um deles deve ter sido treinado em um algoritmo que o outro não foi. Por exemplo, um aluno treinado em BFS e DFS pode cooperar com outro aluno treinado em DFS e DIJKSTRA, porque o primeiro aluno é treinado em BFS enquanto o segundo aluno não é, e o segundo aluno é treinado em DIJKSTRA enquanto o primeiro aluno é 't. Por outro lado, um aluno formado em BFS e DFS não pode cooperar com outro aluno formado apenas em BFS, ou apenas em DFS, ou em ambos BFS e DFS, entre outros.\nDado o conjunto de algoritmos que cada professor conhece, deve-se determinar o número máximo de alunos em uma equipe em que cada aluno pode cooperar entre si. Lembre-se que cada aluno deve ser treinado por um único professor, enquanto cada professor pode treinar quantos alunos forem necessários. Por exemplo, se houver apenas um professor que conheça os algoritmos DFS, BFS e DIJKSTRA, é possível formar uma equipe com até três alunos: um primeiro aluno treinado em DFS e BFS, um segundo aluno treinado em DFS e DIJKSTRA, e um terceiro aluno treinado em BFS e DIJKSTRA.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 100) indicando o número de professores.\nCada uma das próximas N linhas descreve um professor com um inteiro A (1 ≤ A ≤ 10) representando o número de algoritmos que o professor conhece, seguido por A diferentes sequências não vazias de no máximo 10 letras maiúsculas cada, indicando os nomes dos algoritmos que o professor conhece.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de alunos em uma equipe na qual cada aluno pode cooperar entre si.",
    "samplesExamples": [
      [
        "1\n3 DFS BFS DIJKSTRA",
        "3"
      ],
      [
        "2\n4 BFS DFS LCA RMQ\n2 PRIM KRUSKAL",
        "8"
      ],
      [
        "4\n3 BFS DFS DIJKSTRA\n4 BFS DFS LCA RMQ\n3 DIJKSTRA BFS DFS\n3 FLOYD DFS BFS",
        "10"
      ],
      [
        "1\n1 HAVEFUN",
        "1"
      ],
      [
        "3\n4 FFEK DANTZIG DEMOUCRON FFT\n4 PRIM KRUSKAL LCA FLOYD\n4 DFS BFS DIJKSTRA RMQ",
        "18"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Bolo De Ovo",
    "text": "Hoje é aniversário do Jaime e, para comemorar, os amigos encomendaram um bolo decorado com ovo e caqui. Quando o bolo chegou, para sua surpresa, notaram que a padaria não usava quantidades iguais de ovo e caqui, mas apenas distribuía as frutas aleatoriamente na borda do bolo.\nJaime come caqui todos os dias, então ele estava ansioso para experimentar alguns ovos no seu aniversário.\nPorém, como ele não quer comer muito, sua fatia de bolo deve ser decorada com no máximo frutas S. Como Jaime não gosta quando uma fruta é cortada em pedaços, cada fruta deve ficar inteira na fatia ou ficar no resto do bolo. O problema é que com as frutas distribuídas de forma tão caótica, seus amigos estão tendo dificuldade em cortar uma fatia adequada para ele.\nJaime está prestes a reclamar que seus amigos estão demorando muito para cortar sua fatia, mas para isso ele precisa saber quantas fatias diferentes com pelo menos uma fruta-ovo e contendo no máximo S frutas existem. Uma fatia é definida apenas com base no conjunto de frutas que contém. Como Jaime é bastante focado nos detalhes, ele consegue distinguir duas frutas quaisquer, mesmo que ambas sejam do mesmo tipo. Assim, duas fatias são consideradas diferentes quando não contêm exatamente o mesmo conjunto de frutas. A figura a seguir mostra um bolo possível, bem como as seis fatias diferentes com no máximo S = 2 frutas que podem ser cortadas dele.\nEntrada\nA primeira linha contém uma string circular B (3 ≤ |B| ≤ 105) descrevendo a borda do bolo.\nCada caractere de B é a letra maiúscula “E” ou a letra maiúscula “P”, indicando respectivamente que há um ovo ou um caqui na borda do bolo. A segunda linha contém um inteiro S (1 ≤ S < |B|) representando o número máximo de frutas que uma fatia pode conter.\nSaída\nProduza uma única linha com um número inteiro indicando o número de fatias diferentes com no máximo S frutas e pelo menos uma fruta-ovo.",
    "samplesExamples": [
      [
        "PEPEP\n2",
        "6"
      ],
      [
        "EPE\n1",
        "2"
      ],
      [
        "PPPP\n1",
        "0"
      ],
      [
        "EPEP\n2",
        "6"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Gafanhoto saltador",
    "text": "Jazmín tem um jardim em frente à sua casa, com N plantas formando uma linha no sentido esquerdo-direito. Ela tem muito orgulho de suas plantas e mede a altura de crescimento com muita precisão, pois acha que cada planta é diferente e por isso deve ter uma altura diferente.\nUm dia Jazmín encontrou um gafanhoto em seu jardim e, depois de observá-lo por algum tempo, percebeu um comportamento muito peculiar. Durante cada salto, o gafanhoto move-se para a primeira planta mais alta que a planta atual, na direção para a qual está olhando. Além disso, antes de pousar na nova planta, o gafanhoto dá um salto mortal para trás que muda de direção. Ou seja, se antes de saltar o gafanhoto está olhando para a esquerda, uma vez finalizado o salto ele está olhando para a direita e vice-versa. O gafanhoto continua pulando até que não haja nenhuma planta mais alta na direção para a qual está olhando.\nJazmín decidiu registrar seus avistamentos do gafanhoto. Cada vez que o via, ela escrevia a planta onde o gafanhoto estava e a direção para a qual ele olhava. Ela também registrou como suas plantas estavam crescendo, como sempre faz. Agora Jazmín se pergunta, a cada avistamento do gafanhoto, em que planta ele parou de pular. O caderno de Jazmín está quebrado, então ela não pode escrever seu próprio programa. Você pode ajudá-la? Entrada\nA primeira linha contém dois inteiros N e M (1 ≤ N,M ≤ 2×105), indicando respectivamente o número de plantas e o número de registros. As plantas são identificadas por números inteiros distintos de 1 a N de acordo com suas posições na frente da casa, começando pela planta mais à esquerda. A segunda linha contém N inteiros diferentes H1,H2,...,HN (0 ≤ Hi ≤ 109 para i = 1,2,...,N), onde Hi é a altura inicial da planta i. As M linhas seguintes descrevem os registros de Jazmín em ordem cronológica, uma linha por registro. Se um registro representa o crescimento de uma planta, a linha contém a letra “U” maiúscula seguida de dois inteiros I (1 ≤ I ≤ N) e H (H ≤ 109), indicando que a nova altura da planta I é H; a nova altura H é maior que a altura antiga da planta I e diferente da altura atual de cada uma das outras plantas. Se um registro representa o avistamento do gafanhoto, a linha contém a letra maiúscula “L” ou a letra maiúscula “R” seguida de um inteiro J (1 ≤ J ≤ N) indicando que o gafanhoto começa a pular da planta J; o gafanhoto começa a olhar para a esquerda se a letra for “L”, e começa a olhar para a direita se a letra for “R”. Há pelo menos um registro de avistamento do gafanhoto.\nSaída\nProduza uma linha para cada avistamento do gafanhoto. A linha deve conter um número inteiro indicando a planta onde o gafanhoto para de pular. Escreva os resultados em ordem cronológica, ou seja, utilizando a mesma ordem de entrada.",
    "samplesExamples": [
      [
        "10 4\n1 8 5 6 10 20 12 15 2 4\nL 2\nR 3\nU 10 16\nL 9",
        "2\n5\n6"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Melhorar SPAM",
    "text": "Depois do trabalho incrível que você fez limpando usuários duplicados do banco de dados de clientes, seu chefe está ansioso para ficar impressionado com suas melhorias no SPAM (Sistema de Publicação de Marketing Incrível) da empresa.\nApesar das campanhas de marketing serem extremamente úteis para os clientes, algumas reclamações foram recebidas pelo serviço de apoio ao cliente indicando que estão a ser enviadas demasiadas mensagens, e que alguns clientes chegam a receber a mesma mensagem várias vezes.\nSPAM é baseado em listas de discussão. Cada lista de e-mail é composta por e-mails de clientes e/ou outras listas de e-mail. Os e-mails dos clientes podem ser adicionados a listas de e-mail existentes a qualquer momento, mas somente quando uma lista de e-mail é criada ela pode ser adicionada a qualquer número de listas de e-mail existentes.\nObserve que não é possível criar diversas listas de discussão ao mesmo tempo.\nQuando uma mensagem é enviada para uma lista de e-mails, o sistema a envia para cada endereço da lista. Se o endereço na lista for um e-mail de cliente, a mensagem será enviada para esse e-mail de cliente; se, em vez disso, o endereço for uma lista de discussão, o processo será iniciado para essa lista de discussão.\nPor motivos de privacidade, no exemplo a seguir as listas de e-mail e os e-mails dos clientes são representados por números inteiros. Suponha que 1, 2 e 3 sejam listas de e-mail, enquanto 4 e 5 sejam e-mails de clientes.\nAlém disso, a lista de discussão 1 contém as listas de discussão 2 e 3, a lista de discussão 2 contém os e-mails dos clientes 4 e 5, enquanto a lista de e-mails 3 contém o e-mail do cliente 4 e a lista de e-mails 2. Agora suponha que uma mensagem seja enviada para a lista de e-mails 1. Isso significa que a lista é processada conforme descrito acima e, em seguida, as listas de discussão 2 e 3 também são processadas. Quando a lista de discussão 2 é processada, a mensagem é enviada para os e-mails dos clientes 4 e 5. Quando a lista de e-mails 3 é processada, uma segunda mensagem é enviada para o e-mail do cliente 4 e a lista de e-mails 2 é processada novamente, o que gera uma terceira mensagem enviada para email do cliente 4 e uma segunda mensagem enviada para o email do cliente 5. Assim, um total de cinco mensagens são enviadas para os emails do cliente.\nSua tarefa é otimizar o SPAM de forma que nenhum cliente receba a mesma mensagem várias vezes. Como primeiro passo, seu chefe quer saber a quantidade de mensagens enviadas antes e depois de suas melhorias. No exemplo acima, apenas duas mensagens devem ser enviadas aos e-mails dos clientes após a conclusão do seu trabalho.\nEntrada\nA primeira linha contém dois inteiros N e L (2 ≤ N ≤ 2000, 1 ≤ L ≤ min(N − 1,1000)), representando respectivamente o número de endereços no sistema e o número de endereços que são listas de discussão. Os endereços são identificados por números inteiros distintos de 1 a N. Os endereços de 1 a L são listas de discussão, enquanto o restante são emails de clientes. Para i = 1,2,...,L, a i-ésima das próximas L linhas descreve a lista de discussão i com um inteiro K (1 ≤ K < N) seguido por K inteiros diferentes M1,M2,..., MK (1 ≤ Mi ≤ N para i = 1,2,...,K), indicando que a mailing list contém os K endereços M1,M2,...,MK. Cada endereço de cliente aparece em pelo menos uma lista de discussão.\nSaída\nProduza uma única linha com dois inteiros B e A indicando respectivamente o número de mensagens enviadas para e-mails de clientes antes e depois de suas melhorias, se uma mensagem for enviada para a lista de discussão 1. Como esses números podem ser muito grandes, imprima o restante da divisão deles por 109 + 7.",
    "samplesExamples": [
      [
        "5 3\n2 2 3\n2 4 5\n2 4 2",
        "5 2"
      ],
      [
        "15 6\n1 6\n7 10 11 12 13 9 7 8\n5 6 14 4 5 15\n2 14 15\n2 4 14\n2 5 4",
        "5 2"
      ],
      [
        "10 5\n4 8 9 10 3\n3 9 10 6\n3 8 9 7\n6 2 3 6 7 8 10\n5 9 10 3 1 7",
        "6 4"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Esperar ou Continuar?",
    "text": "Pig é um jogo de dados simples para dois ou mais jogadores. Em cada jogada, um jogador lança repetidamente um dado até que seja lançado um 1 ou o jogador decida “manter”: • Se o jogador lançar um 1, não marca nada na sua vez e passa a ser a vez do jogador seguinte.\n• Se o jogador lançar qualquer outro número, ele será adicionado ao total do seu turno e o jogador poderá decidir entre “manter” ou “continuar”.\n• Se o jogador optar por “manter”, o total do seu turno será adicionado à sua pontuação e será o turno do próximo jogador. Caso contrário, o jogador continua lançando os dados.\nO primeiro jogador a marcar exatamente 75 pontos ganha o jogo. Se a pontuação de um jogador mais o total do seu turno exceder 75, ele não marcará nada no seu turno e será o turno do próximo jogador.\nCatelyn Tully está brincando de Pig com seu pai Hoster. Se Catelyn começar seu turno com um 5, ela poderá segurar e marcar 5 durante seu turno. Se ela decidir continuar e tirar 2, ela poderá segurar e pontuar 7. Se ela decidir continuar novamente e tirar 1, ela deverá terminar seu turno sem pontuar. Se no seu turno Hoster lançar a sequência 4-5-3-5-5 e então decidir segurar, ele soma o total do turno de 22 à sua pontuação atual (a menos que a soma exceda 75). Então Catelyn lança os dados novamente, e assim por diante, até que um deles marque exatamente 75.\nHoster achou o jogo muito didático e se tornou um jogador muito bom. Depois de jogar diversas vezes com Catelyn, ele percebeu que ela é muito impulsiva e continua jogando os dados mais vezes do que deveria. Catelyn gostaria de melhorar sua forma de jogar, mas infelizmente Hoster não tem muita paciência para ensiná-la, então ela precisa da sua ajuda. Enquanto brinca com o pai, Catelyn tem que decidir várias vezes se vai segurar ou continuar, e às vezes não tem certeza do que fazer. Você pode aconselhá-la para que cada decisão maximize sua probabilidade de vitória? Entrada\nA primeira linha contém um inteiro Q (1 ≤ Q ≤ 1000) indicando o número de questões sobre as quais Catelyn deseja seu conselho. Cada uma das próximas Q linhas descreve uma questão com três inteiros C, H e X (0 ≤ C,H ≤ 73, X ≥ 2, C +X ≤ 75), representando respectivamente a pontuação atual de Catelyn, a pontuação atual de Hoster e a vez de Catelyn total (soma dos lançamentos dos dados durante seu turno).\nSaída\nLinhas Q de saída, cada linha com um caractere indicando a decisão que Catelyn deve tomar para a questão correspondente da entrada, de modo a maximizar sua probabilidade de vitória se Catelyn e Hoster jogarem de maneira otimizada. Para cada pergunta, o caractere deve ser a letra maiúscula “H” se a decisão ideal for manter, ou a letra maiúscula “C” se a decisão ideal for continuar. É garantido que a decisão ideal pode ser claramente diferenciada; isso significa que |ph − pc| > 10−5, onde ph é a probabilidade de vitória se Catelyn decidir manter, e pc é a probabilidade de vitória se ela decidir continuar (0 ≤ ph,pc ≤ 1).",
    "samplesExamples": [
      [
        "3\n15 0 3\n35 50 40\n15 0 30",
        "C\nH\nH"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Aproveite o MDT",
    "text": "O reino da Nlogônia é muito próspero. Seu rei, Constantourist, expandiu o reino conquistando cidades próximas. Porém, agora que a vida de Constantourist está chegando ao fim, seus dois filhos, Javasar e Golangsar, precisam decidir o destino do reino.\nEm vez de travar uma guerra desnecessária para escolher o próximo rei, os dois filhos tentam negociar um acordo para dividir a jurisdição do reino em duas. A Nlogônia é uma terra em forma de retângulo com N quilômetros na direção Norte-Sul e M quilômetros na direção Oeste-Leste. Assim, durante a fase inicial das negociações os dois filhos conseguiram dividir o terreno em parcelas N × M quadradas de um quilómetro de cada lado, utilizando linhas divisórias paralelas à fronteira do reino. O próximo passo é distribuir as parcelas entre os dois filhos.\nAntes que as negociações possam continuar, Javasar precisa decidir quais parcelas deseja reivindicar para si. Ele já classificou cada parcela em boa ou ruim, de acordo com a qualidade do solo. Javasar deseja que a sua jurisdição seja reconhecida como a melhor da Nlogónia e, por isso, planeia escolher apenas parcelas com boa qualidade de solo. Além disso, sendo perfeccionista, decidiu que as parcelas que irá reivindicar precisam formar um quadrado.\nJavasar está preocupado que esses requisitos possam fazer com que ele receba apenas uma pequena quantidade de pacotes.\nFelizmente para ele, durante uma de suas aventuras em Byteland, ele encontrou uma antiga Ferramenta Mágica Divina (MDT) que, quando ativa, é capaz de reverter a qualidade do solo da parcela em que Javasar está atualmente. o MDT transforma um pacote de má qualidade em um pacote de boa qualidade e vice-versa.\nCom esta ferramenta útil, Javasar elaborou o plano perfeito! Ele viajará para fora do reino, para o oeste da parcela que fica no canto Noroeste, e então visitará cada parcela exatamente uma vez seguindo a rota que a imagem abaixo mostra. Observe que Javasar entrará e sairá da Nlogônia diversas vezes. Desta forma ele evitará ativar ou desativar o MDT quando estiver dentro do reino, e ninguém o verá manipulando a ferramenta.\nEmbora o MDT seja mágico e divino, ele não é ativado nem desativado por si só.\nComo principal assessor de Javasar, você deve informar a ele o número máximo de parcelas que é possível obter, atendendo às suas necessidades, se ele aproveitar de forma otimizada o MDT.\nEntrada\nA primeira linha contém dois inteiros N e M (1 ≤ N,M ≤ 1000), indicando o comprimento (em quilômetros) da Nlogônia nas direções Norte-Sul e Oeste-Leste, respectivamente. Cada uma das próximas N linhas contém uma sequência de M caracteres, onde cada caractere é a letra maiúscula “G” ou a letra maiúscula “B”, representando se a qualidade do solo de uma parcela é boa ou ruim, respectivamente. A descrição das parcelas do reino é feita de Norte a Sul, e de Oeste a Leste.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de parcelas que Javasar pode obter, ao mesmo tempo que atende aos seus requisitos, se aproveitar de forma otimizada o MDT.",
    "samplesExamples": [
      [
        "2 2\nGG\nGG",
        "4"
      ],
      [
        "5 5\nGGGGG\nGBBBG\nGBBBG\nGBBBG\nGGGGG",
        "9"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Cordilheiras",
    "text": "Famosa pelas suas cadeias de montanhas, a Nlogónia atrai milhões de turistas todos os anos. O governo dispõe de um orçamento dedicado à manutenção contínua dos percursos pedestres espalhados por todo o país e a maioria deles está repleta de miradouros panorâmicos, acessíveis através de passadiços e escadas de madeira.\nAtualmente em viagem pela Nlogônia e com esperança de voltar para casa com muitas fotos de tirar o fôlego, Lola e seu marido querem visitar o maior número possível de mirantes.\nEles planejam percorrer uma trilha diferente a cada dia e explorar seus mirantes. No entanto, para não ficarem exaustos no final do dia, se a passagem de um miradouro para outro necessitar de subir mais de X metros, basta encerrar o dia e regressar ao hotel para descansar um pouco. Felizmente, todas as trilhas para caminhadas na Nlogônia estão equipadas com teleféricos modernos, para que o casal possa começar a caminhar em qualquer ponto de vista que desejar. Iniciada a caminhada o casal só se dirige ao pico da montanha.\nPara não perder um dia, Lola só quer caminhar por trilhas onde possa chegar a um número razoável de mirantes. Dadas as altitudes dos mirantes panorâmicos de um percurso pedestre, deve-se determinar o número máximo de mirantes que o casal pode visitar.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 1000) e X (0 ≤ X ≤ 8848), indicando respectivamente o número de mirantes panorâmicos na trilha e o número máximo de metros que Lola e seu marido estão dispostos a percorrer. subir de um ponto de vista para o outro. A segunda linha contém N inteiros A1,A2,...,AN (1 ≤ Ai ≤ 8848 para i = 1,2,...,N), onde Ai é a altitude (em metros) do i-ésimo ponto de vista . Os pontos de vista são dados na ordem em que aparecem na trilha e suas altitudes não são decrescentes, ou seja, Ai ≤ Ai+1 para i = 1,2,...,N − 1.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de mirantes panorâmicos que podem ser visitados sem subir mais de X metros de um mirante a outro, e considerando que a jornada pode ser iniciada em qualquer mirante.",
    "samplesExamples": [
      [
        "9 2\n3 14 15 92 653 5897 5897 5898 5900",
        "4"
      ],
      [
        "9 0\n3 14 15 92 653 5897 5897 5898 5900",
        "2"
      ],
      [
        "9 8848\n3 14 15 92 653 5897 5897 5898 5900",
        "9"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Teleférico",
    "text": "A turma da faculdade vai fazer uma excursão na serra e todos os alunos e monitores vão tomar um teleférico para subir até o pico de uma montanha. A cabine do teleférico pode levar C pessoas no máximo, contando alunos e monitores, durante uma viagem até o pico. Por questão de segurança, deve haver pelo menos um monitor dentro da cabine junto com os alunos. Por exemplo, se cabem C = 10 pessoas na cabine e a turma tem A = 20 alunos, os alunos poderiam fazer três viagens: a primeira com 8 alunos e um monitor; a segunda com 6 alunos e um monitor; e a terceira com 6 alunos e um monitor.\nDados como entrada a capacidade C da cabine e o número total A de alunos, você deve escrever um programa para calcular o número mínimo de viagens do teleférico.\nSe você estiver com muita preguiça hoje, não se preocupe: virando a página você encontra soluções para este problema.\nEntrada\nA primeira linha da entrada contém um inteiro C, representando a capacidade da cabine (2 ≤ C ≤ 100). A segunda linha da entrada contém um inteiro A, representando o número total de alunos na turma (1 ≤ A ≤ 1000).\nSaída\nSeu programa deve imprimir uma linha contendo um número inteiro representando o número mínimo de viagens do teleférico para levar todos os alunos até o pico da montanha.\n      Solução em C++ #include <iostream> using namespace std; int main(void){ int C,A; cin >> C >> A; // le a entrada int quociente = A/(C-1); int resto = A%(C-1); int resposta = quociente; if ( resto > 0 ) resposta++; cout << resposta << endl; // escreve a resposta return 0; } Solução em Python C = int(input()) # le a entrada A = int(input()) quociente, resto = A/(C-1), A%(C-1) resposta = quociente if resto>0: resposta += 1 print(resposta) # escreve a resposta Solução em Java import java.util.Scanner; public class C { public static void main(String[] args) { Scanner in = new Scanner(System.in); int quociente, resto, resposta; int C,A; C=in.nextInt(); // le a entrada A=in.nextInt(); quociente=A/(C-1); resto=A%(C-1); resposta=quociente; if (resto>0) resposta=resposta+1; System.out.println(resposta); // imprime a resposta } }",
    "samplesExamples": [
      [
        "10\n20",
        "3"
      ],
      [
        "12\n55",
        "5"
      ],
      [
        "100\n87",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Estratégia",
    "text": "Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas.\nDado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J,R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram.\nOs Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive.\nSaída\nSeu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador ven cedor.",
    "samplesExamples": [
      [
        "3 3\n1 1 1 1 2 2 2 3 3",
        "3"
      ],
      [
        "2 3\n0 0 1 0 2 0",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
    "samplesExamples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Despojados",
    "text": "Todo inteiro positivo pode ser escrito como um produto de potências de primos. Por exemplo, 252 = 22 × 32 × 7. Um inteiro é despojado se pode ser escrito como um produto de dois ou mais primos distintos, sem repetição. Por exemplo, 6 = 2 × 3 e 14 = 2 × 7 são despojados, mas 28 = 22 × 7, 1, 17 não são despojados.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 1012).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número de divisores despojados de N.",
    "samplesExamples": [
      [
        "252",
        "4"
      ],
      [
        "6469693230",
        "1013"
      ],
      [
        "8",
        "0"
      ],
      [
        "1",
        "0"
      ],
      [
        "88290298627",
        "0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ginástica",
    "text": "Vinícius gosta muito de se exercitar na academia de ginástica. Ele fez um acordo com o seu treinador para ter programas de exercícios diferentes a cada vez que usar a bicicleta ergométrica. Um programa, na linguagem das academias, é uma sequência de níveis de dificuldade do exercício. Os programas de Vinícius para a bicicleta ergométrica devem ter a mesma duração em minutos e os níveis de dificul dade devem mudar a cada minuto, para um nível imediatamente acima ou um nível imediatamente abaixo. Os níveis de dificuldade não podem estar abaixo de um mínimo e nem acima de um máximo previamente estipulados.\nSeu problema é calcular o número de programas diferentes que o treinador pode construir, obede cidas as restrições acima.\nEntrada\nA entrada consiste de uma única linha que contém três inteiros, T,M,N (1 ≤ T ≤ 50,1 ≤ M < N ≤ 105) em que T é o número de minutos do exercício, M é o valor mínimo de dificuldade permitido e N é o valor máximo de dificuldade permitido.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número de programas diferentes que o treinador pode construir. Como esse número pode ser grande, a resposta deve ser esse número módulo 109 + 7.",
    "samplesExamples": [
      [
        "3 2 5",
        "10"
      ],
      [
        "30 2 5",
        "4356618"
      ],
      [
        "50 1 100000",
        "738072143"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "K-ésimo",
    "text": "√ √ Dado um número real X da forma A + B, com A e B inteiros positivos e −1 < A − B < 1, e dois números inteiros N e K, sua tarefa é determinar o K-ésimo dígito menos significativo da parte inteira de XN. Por exemplo, se K = 1, você precisa determinar o algarismo das unidades de (cid:98)XN(cid:99).\nEntrada\nA entrada consiste de uma única linha, que contém quatro números inteiros, A, B, N e K, com 1 ≤ A,B ≤ 104, 1 ≤ N ≤ 109 e 1 ≤ K ≤ 4.\nSaída\nSeu programa deve imprimir uma única linha, contendo o K-ésimo dígito menos significativo da parte inteira de XN.",
    "samplesExamples": [
      [
        "3 10 1 1",
        "6"
      ],
      [
        "3 10 2 1",
        "7"
      ],
      [
        "3 10 1000000000 1",
        "1"
      ],
      [
        "10 90 1000000000 2",
        "9"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fase",
    "text": "Em diversas competições acadêmicas, como a Olimpíada Brasileira de Informática (OBI), uma certa quantidade de competidores se classifica de uma fase para a fase seguinte, garantindo uma das vagas disponíveis. Entretanto, normalmente essa quantidade é variável, pois dada uma certa quantidade mínima de classificados, é frequente que haja empate na última vaga de classificação. Neste caso, é comum que todos os competidores empatados na última colocação se classifiquem.\nSua tarefa é ajuda a calcular o número de competidores classificados para a próxima fase. Você receberá uma lista de pontuações obtidas pelos competidores e o número mínimo de vagas para a fase seguinte e você deve decidir quantos competidores de fato vão se classificar.\nEntrada\nA primeira linha da entrada contém um número inteiro N, 1 ≤ N ≤ 1000, representando o número de competidores. A segunda linha conterá um inteiro K, 1 ≤ K ≤ N, indicando o número mínimo de competidores que devem se classificar para a próxima fase. Em seguida, N linhas conterão, cada uma um número entre 1 e 1000, inclusive, correspondente à pontuação de um competidor.\nSaída\nSeu programa deve imprimir uma linha, contendo o número de classificados para a próxima fase.",
    "samplesExamples": [
      [
        "10\n3\n1\n2\n3\n4\n5\n5\n4\n3\n2\n1",
        "4"
      ],
      [
        "5\n2\n500\n500\n500\n500\n500",
        "5"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Cigarras periódicas",
    "text": "As “cigarras períodicas” americanas têm o ciclo de vida mais longo de todos os insetos conhecidos.\nA cada 17 anos, estas cigarras períodicas amadurecem, se acasalam, depositam ovos e morrem. Suas crias se refugiam debaixo da terra, a 20 centímetros de profundidade, onde elas se alimentarão da seiva de raízes por 17 anos, até que chegue seu dia de buscar um lugar ao sol.\nAcredita-se que esse número não aconteceu por acaso, outras espécies de cigarras da região tem ciclos de 13 anos, assim essas duas espécies emergem ao mesmo tempo apenas a cada 221 anos. Isso é desejável pois dessa forma a chance de que as duas espécies se misturem diminui consideravelmente e características indesejáveis de uma população não são introduzidas na outra.\nInspirado por esse fenômeno, uma nova variação de algoritmo evolutivo foi criada. Na última etapa desse algoritmo as melhores possíveis soluções são divididas em populações de modo que cada população i tem um ciclo de vida Ci. Além disso uma população extra também é adicionada, de modo que a quantidade de iterações até que o ciclo de vida de todas as populações coincida seja a maior possível. Essas populações são então avaliadas até que o ciclo de vida de todas coincida e a melhor solução ao final do processo é escolhida. Como não é interessante esperar demais até que o algoritmo gere uma resposta, um limite superior L no número de iterações também deve ser respeitado.\nDados os ciclos de vida das populações criadas e o limite na quantidade de iterações L, sua tarefa é computar qual o período ótimo para a população extra que será adicionada.\nEntrada\nA primeira linha da entrada contém dois inteiros N e L, respectivamente, a quantidade de po pulações geradas pelas etapas anteriores do algoritmo e o limite da quantidade de iterações, 2 ≤ N ≤ 104, 1 ≤ L ≤ 106. A linha seguinte contém os N valores Ci representando a quantidade de iterações no ciclo de vida de cada população, onde 1 ≤ Ci. Você pode assumir que os ciclos de vida das populações atuais coincidem em menos de L iterações.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o período da população extra que maximiza a quantidade T de iterações até que os ciclos de vida de todas as populações coincidam, respeitando a restrição de que T ≤ L. Caso exista mais de um valor possível imprima o menor deles.",
    "samplesExamples": [
      [
        "2 5000\n105 55",
        "4"
      ],
      [
        "2 512\n3 14",
        "72"
      ],
      [
        "3 80\n6 10 15",
        "4"
      ],
      [
        "3 60\n12 10 15",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Brincadeira",
    "text": "Um Registrador de Deslocamento é um circuito que desloca de uma posição os elementos de um vetor de bits. O registrador de deslocamento tem uma entrada (um bit) e uma saída (também um bit), e é comandado por um pulso de relógio. Quando o pulso ocorre, o bit de entrada se transforma no bit mais significativo do vetor, o bit menos significativo é jogado na saída do registrador, e todos os outros bits são deslocados de uma posição em direção ao bit menos significativo do vetor (em direção à saída).\nUm Registrador de Deslocamento com Retroalimentação Linear (em inglês, LFSR) é um registrador de deslocamento no qual o bit de entrada é determinado pelo valor do ou-exclusivo de alguns dos bits do registrador antes do pulso de relógio. Os bits que são utilizados na retroalimentação do registrador são chamados de torneiras. A figura abaixo mostra um LFSR de 8 bits, com três torneiras (bits 0, 3 e 5).\nDurante uma competição de programação, enquanto aguardam a divulgação do resultado final, Ricardo e Cláudio se divertem com um LFSR que encontraram no local.\nEles usam o LFSR para gerar uma sequência infinita de números. Para gerar tal sequência, antes de cada pulso do relógio, os bits do registrador são convertidos para decimal. Assim, para um LFSR como o da figura os primeiros elementos da sequência são: A0 = 169 (10101001), A1 = 212 (11010100), A2 = 106 (01101010), A3 = 53 (00110101) e A4 = 26 (00011010). Note que o valor dos bits antes do primeiro pulso é o primeiro elemento da sequência.\nEm cada rodada da brincadeira um deles fala dois números inteiros, X e Y . Daí em diante o outro deve encontrar uma subsequência contígua, de tamanho maior ou igual a Y , dos elementos da sequência gerada pelo LFSR, de modo que a soma dos elementos da subsequência contígua seja divisível por X.\nDe alguma forma os dois são capazes de se divertir com isso e encontrar as respostas mesmo sem a ajuda de um computador. E você, dada a descrição de um LSFR e dois inteiros X e Y , é capaz de encontrar uma subsequência válida (ou informar caso não exista uma)? Entrada\nA primeira linha contém cinco números inteiros N,T,A0,X e Y . O inteiro N representa o número de bits (2 ≤ N ≤ 30), T é o número de torneiras (1 ≤ T ≤ N), A0 é a representação decimal do estado inicial do LFSR, X o valor pelo qual a soma da subsequência contígua deve ser divisível (1 ≤ X ≤ 106) e Y é a quantidade mínima de elementos na subsequência contígua desejada (1 ≤ Y ≤ 106). Os bits são identificados por inteiros de 0 (bit menos significativo) a N−1 (bit mais significativo). A segunda linha contém T inteiros, separados por espaços, representando os identificadores dos bits que são torneiras, em ordem crescente. O bit 0 sempre é uma torneira.\nSaída\nSeu programa deve imprimir, em uma única linha, dois inteiros I e F, representando os índices do primeiro e do último elementos da subsequência contígua escolhida. Caso não exista uma solução imprima a palavra impossivel. Caso exista mais de uma solução possível escolha aquela que minimiza o valor de F. Se mesmo assim houver mais de uma possibilidade opte por aquela que minimiza o valor de I.",
    "samplesExamples": [
      [
        "8 3 169 169 1\n0 3 5",
        "0 0"
      ],
      [
        "8 3 169 238 2\n0 3 5",
        "13 25"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Acordes intergaláticos",
    "text": "A maratona de composição de sonatas para piano intergalático está tentando dificultar a vida dos competidores, pois cada vez mais seres de inteligência superior estão participando. O piano é composto de N teclas, numeradas de 0 a N − 1. O sistema tonal intergalático possui 9 notas musicais, com valores de 0 a 8. Inicialmente todas as teclas do piano estão associadas à mesma nota 1. O competidor vai tocar uma sequência de acordes. Cada acorde intergalático é composto por duas teclas distintas, a e b, 0 ≤ a < b < N. Quando o acorde é tocado, o piano vai emitir a nota mais frequente, f, entre todas as teclas do intervalo [a,b]. Se houver mais de uma nota mais frequente, ele emite a maior delas.\nImediatamente após emitir a nota, o piano muda a nota associada a todas as teclas do intervalo [a,b].\nA nova nota associada à tecla k, a ≤ k ≤ b, será a anterior mais f, módulo 9.\nPor exemplo, se em determinado momento as notas associadas a um piano de N = 15 teclas são teclas 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 notas 2 2 1 4 5 4 3 4 8 0 1 6 2 0 1 e o acorde [3,9] é tocado, então a nota mais frequente será 4 e as novas notas após o acorde serão: teclas 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 notas 2 2 1 8 0 8 7 8 3 4 1 6 2 0 1 Dada a sequência de Q acordes, seu programa deve imprimir as notas que estarão associadas às teclas do piano após todos os acordes da sequência terem sido tocados.\nEntrada\nA primeira linha da entrada contém dois inteiros, N (2 ≤ N ≤ 100000), e Q (1 ≤ Q ≤ 100000), respectivamente o número de teclas do piano intergalático e a quantidade de acordes. As Q linhas seguintes contêm, cada uma, dois inteiros A e B, (0 ≤ A < B < N), representando um acorde.\nSaída\nSeu programa deve imprimir N inteiros, um por linha, representando as notas associadas às teclas do piano, após todos os acordes terem sido tocados.\nExemplos",
    "samplesExamples": [
      [
        "5 3\n1 2\n0 4\n0 2",
        "5\n6\n6\n2\n2"
      ],
      [
        "15 15\n10 12\n4 5\n1 14\n6 10\n9 11\n11 12\n9 13\n8 9\n5 7\n11 13\n8 10\n11 12\n11 13\n8 14\n3 9",
        "1\n2\n2\n1\n2\n6\n7\n7\n8\n6\n4\n4\n8\n0\n4"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Escala musical",
    "text": "As notas musicais são as unidades mais básicas da composição musical no ocidente. Muitas pessoas acreditam que existem apenas 7 notas musicais: dó ré mi fá sol lá si Chamaremos essas notas de notas elementares. Na verdade, existem notas além destas acima, normalmente identificadas pelo nome de uma das notas acima seguido do símbolo sustenido (#): dó dó# ré ré# mi fá fá# sol sol# lá lá# si Assim, existem 12 notas musicais básicas distintas. Entretanto, a rigor, esta sequência é infinita e períodica: após um “si” existe um outro “dó”, e a sequência se repete novamente.\nAs notas elementares são mais conhecidas, por estarem em um tom musical conhecido como “dó maior”. Em qualquer tom “maior”, as distâncias entre as possíveis notas seguem um padrão. No tom “dó maior”, por exemplo:   Note que eu poderia usar qualquer “dó” na escala de “dó maior”, pois a nota seguinte ao “si” será, novamente, um “dó”. O mesmo vale para as demais notas. Um outro exemplo de notas em um determinado tom maior seria a escala de “dó# maior”:   Guilherme está aprendendo a tocar um teclado com 61 teclas, numeradas de 1 a 61. Assim, a nota 1 corresponde a um “dó”, a nota 2 corresponde a um “dó #” e assim por diante, até chegar nas notas 60 (um “si”) e 61 (um “dó”).\nAcredita-se que as músicas com as melhores melodias são aquelas que estão em algum tom maior, ou seja, músicas em que todas as notas pertencem à escala de algum tom maior. Enquanto pratica no teclado, Guilherme usa um aparelho que grava todas as notas tocadas durante a música. Para ajudá-lo a melhorar sua técnica você decidiu criar um programa capaz de avaliar as músicas gravadas por ele e determinar se elas estão em algum tom maior ou não.\nEntrada\nA primeira linha da entrada terá um número inteiro N, com 1 ≤ N ≤ 105, correspondente ao número de notas musicais da música. Em seguida, serão fornecidos N números, um por linha, todos entre 1 e 61, inclusive, correspondendo às notas musicais.\nSaída\nSeu programa deve verificar se a música está em algum tom maior. Em caso afirmativo, seu programa deve imprimir uma única linha com o tom maior (sem acentos) em que a música está.\nCaso contrário, seu programa deve imprimir uma linha contendo a palavra desafinado. Caso a música possa estar em mais de um tom maior imprima aquele relativo a menor nota musical básica, sendo que “do” < “do#” < “re”, ...",
    "samplesExamples": [
      [
        "8\n1\n3\n5\n6\n8\n10\n12\n13",
        "do"
      ],
      [
        "10\n8\n11\n21\n16\n11\n8\n27\n57\n27\n21",
        "re#"
      ],
      [
        "7\n2\n2\n4\n3\n12\n12\n3",
        "desafinado"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Boca",
    "text": "Um jogo infantil, muito popular, é o 21 de boca. O jogo é jogado da seguinte forma: o primeiro jogador diz um número, n0, que pode ser 1 ou 2. O segundo jogador pode então dizer um número n1 tal que n1 ∈ {n0 +1,n0 +2}. E assim por diante, os jogadores se alternam, dizendo sempre um número que é um ou dois maior do que o anterior. O jogador que disser 21 ganha o jogo. Por exemplo, a sequência de números poderia ser: 1,3,5,6,7,9,11,12,14,15,16,18,19,21. Neste jogo, o primeiro jogador sempre perde, se o segundo souber jogar bem.\nA cada nova geração as crianças ficam mais espertas. Atualmente, apesar de acharem o 21 de boca um jogo interessante, muitas crianças não se sentem desafiadas o bastante e por isso resolveram generalizar o jogo, criando assim o N de boca. Dado um inteiro N, no lugar do 21, o primeiro jogador pode escolher 1 ou 2. A partir daí os jogadores se alternam, adicionando 1 ou 2 ao número anterior, até que um deles diga o número N e ganhe o jogo. Sabendo que ambos os jogadores são excelentes e sabem jogar muito bem, seu problema é determinar qual o inteiro inicial que o primeiro jogador deve escolher para ganhar o jogo.\nEntrada\nA entrada consiste de uma única linha que contém o inteiro N (3 ≤ N ≤ 10100) escolhido para a partida atual do N de boca.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número, em {1,2}, que o primeiro jogador deve escolher, para ganhar o jogo. Se não for possível, então o inteiro deve ser zero.",
    "samplesExamples": [
      [
        "7",
        "1"
      ],
      [
        "9",
        "0"
      ],
      [
        "12341234123412341234123412341234",
        "2"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Imposto Real",
    "text": "O reino de Nlogônia é rico, o povo é educado e feliz, mas o Rei é um tirano quando o assunto se refere a impostos. A cada final de ano, cada cidade do país deve pagar uma determinada quantidade de quilos de ouro em impostos. Chegado o momento de coletar os impostos, o Rei envia sua carruagem real para recolher o ouro devido, usando as estradas do reino.\nCada estrada liga duas cidades diferentes e pode ser percorrida nas duas direções. A rede de estradas é tal que é possível ir de qualquer cidade para qualquer outra cidade, possivelmente passando por cidades intermediárias, mas há apenas um caminho entre duas cidades diferentes.\nEm cada cidade há um cofre real, utilizado para armazenamento de ouro de impostos. Os cofres reais são imensos, de forma que cada cofre tem capacidade de armazenar todo o ouro devido por todo o reino. A carruagem sai da capital, percorrendo as estradas do reino, visitando as cidades para recolher o ouro devido, podendo usar qualquer cofre real para armazenar temporariamente uma parte do imposto recolhido, se necessário. Ao final da coleta, todo o ouro devido por todas as cidades deve estar armazenado no cofre real da capital.\nÁvaro como é o Rei, ele contratou o seu time para, dados a quantidade de ouro a ser recolhido em cada cidade (em kg), a lista das estradas do reino, com os respectivos comprimentos (em km) e a capacidade de carga da carruagem real (em kg), determine qual é a mínima distância que a carruagem deve percorrer para recolher todo o ouro devido.\nEntrada\nA primeira linha contém dois inteiros N e C indicando respectivamente o número de cidades e a capacidade de carga da carruagem (2 ≤ N ≤ 104 e 1 ≤ C ≤ 100). A capital do reino é identificada pelo número 1, as outras cidades são identificadas por inteiros de 2 a N. A segunda linha contém N inteiros Ei representando a quantidade de imposto devido por cada cidade i (0 ≤ Ei ≤ 100 para 1 ≤ i ≤ N). Cada uma das M linhas seguintes contém três inteiros A, B e C, indicando que uma estrada liga a cidade A e a cidade B (1 ≤ A,B ≤ N) e tem comprimento C (1 ≤ C ≤ 100).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor distância que a carruagem real deve percorrer para recolher todo o imposto devido, em km.",
    "samplesExamples": [
      [
        "6 10\n0 10 10 10 10 10\n1 4 7\n5 1 2\n3 5 3\n2 5 2\n6 5 2",
        "44"
      ],
      [
        "3 10\n10 10 12\n1 2 5\n2 3 7",
        "58"
      ],
      [
        "5 9\n5 2 6 3 6\n1 2 1\n2 3 1\n2 4 1\n2 5 1",
        "10"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hipercampo",
    "text": "São dadas duas âncoras, dois pontos A = (XA,0) e B = (XB,0), formando um segmento horizontal, tal que 0 < XA < XB, e um conjunto P de N pontos da forma (X,Y ), tal que X > 0 e Y > 0. A figura mais à esquerda exemplifica uma possível entrada.\nPara “ligar” um ponto v ∈ P precisamos desenhar os dois segmentos de reta (v,A) e (v,B). Que remos ligar vários pontos, mas de modo que os segmentos se interceptem apenas nas âncoras. Por exemplo, a figura do meio mostra dois pontos, 1 e 4, que não podem estar ligados ao mesmo tempo, pois haveria interseção dos segmentos fora das âncoras. A figura mais à direita mostra que é possível ligar pelo menos 3 pontos, 8, 5 e 3, com interseção apenas nas âncoras.\nSeu programa deve computar o número máximo de pontos que é possível ligar com interseção de segmentos apenas nas âncoras.\nEntrada\nA primeira linha da entrada contém três inteiros, N (1 ≤ N ≤ 100), XA e XB (0 < XA < XB ≤ 104), representando, respectivamente, o número de pontos no conjunto P e as abscissas das âncoras A e B. As N linhas seguintes contêm, cada uma, dois inteiros Xi e Yi (0 < Xi,Yi ≤ 104), representando as coordenadas dos pontos, para 1 ≤ i ≤ N. Não há pontos coincidentes e não há dois pontos u e v distintos tais que {A,u,v} ou {B,u,v} sejam colineares.\nSaída\nSeu programa deve imprimir uma linha contendo um inteiro, representando o número máximo de pontos de P que podem ser ligados com interseção de segmentos apenas nas âncoras.\nExemplos",
    "samplesExamples": [
      [
        "4 1 10\n2 4\n5 1\n6 5\n7 8",
        "3"
      ],
      [
        "2 2 8\n3 4\n7 4",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Laboratório de biotecnologia",
    "text": "Uma cadeia ponderada é definida sobre um alfabeto Σ e uma função f que atribui um peso a cada caractere do alfabeto. Assim, podemos definir o peso de uma cadeia s como a soma dos pesos de todos os caracteres em s.\nVários problemas da bioinformática podem ser formalizados como problemas em cadeias ponde radas. Um exemplo é a espectrometria de massa de proteínas, uma técnica que permite identificar proteínas de forma bastante eficiente. Podemos representar cada aminoácido por um caractere distinto e uma proteína é representada pela cadeia de caracteres relativos aos aminoácidos que a compõe.\nUma das aplicações da espectrometria de massa de proteínas são buscas em bancos de dados.\nPara isso a cadeia que representa a proteina é dividida em subcadeias, a massa de cada subcadeia é determinada, e a lista de massas é comparada com um banco de dados de proteínas. Um dos desafios para essa técnica é lidar com cadeias muito grandes de caracteres, que podem ter várias possíveis subcadeias. A quantidade de subcadeias selecionadas é fundamental para obter bons resultados.\nEm seu primeiro dia de estágio em um renomado laboratório de biotecnologia, Carlos recebeu a tarefa de determinar, para uma cadeia s, a quantidade de pesos distintos encontrada ao avaliar os pesos de todas as subcadeias não vazias de caracteres consecutivos de s.\nCarlos não conseguiu pensar em uma solução eficiente para essa tarefa, mas felizmente ele conhece o grupo ideal para auxiliá-lo.\nConsiderando que s é formada por letras minúsculas e cada letra tem um peso diferente entre 1 e 26: a letra a tem peso 1, a letra b tem peso 2 e assim por diante. Mostre que seu time é capaz de ajudar Carlos a impressionar seu supervisor logo na primeira semana, com uma solução capaz de lidar facilmente com as maiores cadeias de caracteres existentes.\nEntrada\nApenas uma linha, que contém a cadeia s formada por letras minúsculas, cujo comprimento |s| satisfaz 1 ≤ |s| ≤ 105.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade de pesos distintos das subcadeias não vazias de caracteres consecutivos de s.",
    "samplesExamples": [
      [
        "abbab",
        "8"
      ],
      [
        "adbbabdcdbcbacdabbaccdac",
        "56"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Máquina de café",
    "text": "O novo prédio da Sociedade Brasileira de Computação (SBC) possui 3 andares. Em determinadas épocas do ano, os funcionários da SBC bebem muito café. Por conta disso, a presidência da SBC decidiu presentear os funcionários com uma nova máquina de expresso. Esta máquina deve ser instalada em um dos 3 andares, mas a instalação deve ser feita de forma que as pessoas não percam muito tempo subindo e descendo escadas.\nCada funcionário da SBC bebe 1 café expresso por dia. Ele precisa ir do andar onde trabalha até o andar onde está a máquina e voltar para seu posto de trabalho. Todo funcionário leva 1 minuto para subir ou descer um andar. Como a SBC se importa muito com a eficiência, ela quer posicionar a máquina de forma a minimizar o tempo total gasto subindo e descendo escadas.\nSua tarefa é ajudar a diretoria a posicionar a máquina de forma a minimizar o tempo total gasto pelos funcionários subindo e descendo escadas.\nEntrada\nA entrada consiste em 3 números, A1,A2,A3 (0 ≤ A1,A2,A3 ≤ 1000), um por linha, onde Ai representa o número de pessoas que trabalham no i-ésimo andar.\nSaída\nSeu programa deve imprimir uma única linha, contendo o número total de minutos a serem gastos com o melhor posicionamento possível da máquina.",
    "samplesExamples": [
      [
        "10\n20\n30",
        "80"
      ],
      [
        "10\n30\n20",
        "60"
      ],
      [
        "30\n10\n20",
        "100"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Pangrama",
    "text": "“Pangram Show” é um novo e emocionante programa de perguntas e respostas na televisão que oferece grandes prêmios em dinheiro para os competidores que detectarem corretamente se uma frase é um pangrama. Um pangrama é uma frase que contém pelo menos uma vez cada uma das 26 letras do alfabeto inglês. Aqui estão alguns exemplos de pangramas: • a rápida raposa marrom salta sobre um cachorro preguiçoso • as gralhas adoram minha grande esfinge de quartzo • embalar minha caixa com cinco dúzias de jarros de bebida alcoólica Cada participante do Pangram Show recebe uma frase e deve indicar dentro quinze segundos se a frase dada for um pangrama ou não. Quando um competidor falha ele/ela é eliminado da competição, caso contrário ele/ela continua para a próxima rodada.\nDurante o ICPC Latin American Regional você poderá jogar junto com os competidores reais do programa. Você receberá as mesmas frases que aparecem no programa. Você consegue se sair tão bem quanto os concorrentes? Entrada\nA entrada consiste em uma única linha que contém uma string S contendo no mínimo um e no máximo 200 caracteres. Os únicos caracteres em S são letras minúsculas do alfabeto inglês e espaços.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se a frase for um pangrama e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "jackdawf loves my big quartz sphinx",
        "Y"
      ],
      [
        "hello world",
        "N"
      ],
      [
        "abcdefghijklmnopqrstuvwxyz",
        "Y"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Inés Kereki, Uruguai"
    },
    "hasImages": false
  },
  {
    "name": "Problema da Média Mediana",
    "text": "A média de três inteiros A, B e C é (A + B + C)/3. A mediana de três inteiros é aquela que estaria no meio se eles fossem classificados em ordem não decrescente.\nEscreva um programa que, dados dois inteiros distintos A e B, determine o mínimo inteiro possível C tal que a média e a mediana de A, B e C sejam iguais.\nEntrada\nA entrada consiste em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109).\nSaída\nProduza uma única linha com o número inteiro mínimo possível C, de modo que a média e a mediana de A, B e C sejam iguais.",
    "samplesExamples": [
      [
        "1 2",
        "0"
      ],
      [
        "6 10",
        "2"
      ],
      [
        "1 1000000000",
        "-999999998"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Câmara Secreta no Monte Rushmore",
    "text": "Você provavelmente já ouviu falar que há uma escultura de pedra espetacular com quatro presidentes famosos dos EUA no Monte Rushmore. No entanto, poucas pessoas sabem que este monumento contém uma câmara secreta. Parece algo saído do enredo de um filme de Hollywood, mas a câmara realmente existe. Ele pode ser encontrado atrás da cabeça de Abraham Lincoln e foi projetado para servir como um Hall de Registros para armazenar importantes documentos e artefatos históricos dos EUA. Os historiadores afirmam que a construção do salão foi interrompida em 1939 e a câmara incompleta permaneceu intocada até o final da década de 1990, mas isso não é toda a verdade.\nEm 1982, o famoso arqueólogo S. Dakota Jones visitou secretamente o monumento e descobriu que a câmara estava realmente concluída, mas foi mantida em sigilo. Isso parecia suspeito e depois de fuçar um pouco, ela encontrou um cofre escondido e alguns documentos dentro. Infelizmente, esses documentos não faziam sentido e eram todos sem sentido. Ela suspeitava que estivessem escritas em código, mas não conseguia decifrá-las, apesar de todos os seus esforços.\nNo início desta semana, quando ela estava na área para acompanhar as Finais Mundiais ACM-ICPC, a Dra. Jones finalmente descobriu a chave para decifrar os documentos, no Connolly Hall do SDSM&T. Ela encontrou um documento que contém uma lista de traduções de cartas. Algumas cartas podem ter mais de uma tradução e outras podem não ter tradução. Ao aplicar repetidamente algumas destas traduções a letras individuais nos documentos sem sentido, ela poderá ser capaz de decifrá-los para produzir documentos históricos dos EUA, como a Declaração de Independência e a Constituição. Ela precisa de sua ajuda.\nVocê recebe as possíveis traduções das letras e uma lista de pares de palavras originais e decifradas.\nSua tarefa é verificar se as palavras de cada par correspondem. Duas palavras correspondem se tiverem o mesmo comprimento e se cada letra da primeira palavra puder ser transformada na letra correspondente da segunda palavra usando as traduções disponíveis zero ou mais vezes.\nEntrada\nA primeira linha de entrada contém dois inteiros M (1 ≤ M ≤ 500) e N (1 ≤ N ≤ 50), onde M é o número de traduções de letras e N é o número de pares de palavras. Cada uma das próximas M linhas contém duas letras distintas A e B, indicando que a letra A pode ser traduzida pela letra B.\nCada par ordenado de letras (A,B) aparece no máximo uma vez. A seguir estão N linhas, cada uma contendo um par de palavras para verificar. As traduções e palavras usam apenas letras minúsculas “a” – “z”, e cada palavra contém no mínimo 1 e no máximo 50 letras.\nSaída\nPara cada par de palavras, imprima “SIM” se as duas palavras corresponderem e “NÃO” caso contrário.",
    "samplesExamples": [
      [
        "9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the",
        "YES\nNO\nNO\nYES\nYES"
      ],
      [
        "3 3\na c\nb a\na b\naaa abc\nabc aaa\nacm bcm",
        "YES\nNO\nYES"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "World Finals 2017"
    },
    "hasImages": false
  },
  {
    "name": "Dispositivo assustador",
    "text": "Em uma recente viagem a um local de escavação na ilha caribenha de São Basílio, você encontrou um dispositivo misterioso com algumas instruções que lembram um quebra-cabeça. Seu guia local Vibenas lhe diz que se você resolver o quebra-cabeça, o dispositivo poderá mostrar o lugar onde está escondido um grande tesouro deixado pelo velho impiedoso pirata Lyerpes.\nO dispositivo possui uma fita com células L indexadas de 0 a L−1. Cada célula possui uma cor que pode ser alterada com comandos para o dispositivo. Cada cor é codificada por um número inteiro e inicialmente todas as células possuem a mesma cor. As instruções que você encontrou representam N etapas a serem executadas antes que o dispositivo mostre o caminho para o tesouro. Cada etapa é descrita usando quatro inteiros P, X, A e B. As instruções dizem que para completar a etapa você deve primeiro contar o número de células que atualmente possuem a cor P. Seja este número S. Então você deve calcular os valores M1 = (A + S2) mod L , M2 = (A + (S + B)2) mod L .\nFinalmente você deve fazer com que todas as células dentro do intervalo fechado [min(M1,M2),max(M1,M2)] sejam da cor X.\nApós a exaustiva tarefa de processar as N etapas exigidas pelo dispositivo, você ainda tem uma tarefa: dada uma cor que aparece o maior número de vezes na fita do dispositivo após todas as etapas (ou seja, uma cor mais frequente), você deve ir ao naufrágio do lendário navio de Lyerpes e dizer em voz alta o número de células que têm essa cor. Observe que esse número é único mesmo que mais de uma cor apareça o maior número de vezes na fita do dispositivo após todas as etapas.\nFazer todos esses cálculos no dispositivo levará muito tempo, mas você, como programador renomado, pode criar um programa que indique rapidamente a resposta do quebra-cabeça. Depois disso, a parte mais difícil da sua missão será descobrir onde está o naufrágio do antigo navio de Lyerpes.\nEntrada\nA primeira linha contém três inteiros L, C e N (1 ≤ L,C,N ≤ 105), representando respectivamente o número de células na fita, o número de cores disponíveis e o número de passos nas instruções.\nAs cores são identificadas por inteiros distintos de 1 a C e inicialmente todas as células possuem a cor 1. Cada uma das próximas N linhas descreve uma etapa das instruções com quatro inteiros P, X, A e B (1 ≤ P,X ≤ C e 0 ≤ A,B ≤ 108), indicando respectivamente a cor cujo número de células é utilizado para decidir o intervalo da etapa, a cor que as células do intervalo devem ter após a execução da etapa e os outros dois valores utilizados para calcular o limites do intervalo conforme descrito acima.\nSaída\nDada uma cor que aparece o maior número de vezes na fita do dispositivo após executar sequencialmente todas as etapas descritas na entrada, produza uma única linha com um número inteiro indicando o número de células com aquela cor.",
    "samplesExamples": [
      [
        "7 5 2\n1 2 5 3\n3 3 0 1",
        "4"
      ],
      [
        "7 10 8\n10 6 5 6\n5 1 7 5\n9 9 10 1\n3 2 6 7\n8 3 4 8\n3 7 7 4\n9 3 9 7\n1 1 8 1000",
        "3"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Walter Erquinigo, Perú"
    },
    "hasImages": false
  },
  {
    "name": "Portões da incerteza",
    "text": "Uma porta NAND (porta AND negativa) é um circuito eletrônico digital que produz uma saída falsa apenas se todas as suas entradas forem verdadeiras; em outras palavras, a saída de uma porta NAND é o complemento da saída de uma porta AND para as mesmas entradas. Uma porta NAND de duas entradas é uma porta NAND com duas entradas.\nA figura a seguir mostra o símbolo usual de uma porta NAND de duas entradas e sua tabela verdade, usando 1 para verdadeiro e 0 para falso.\nNeste problema temos uma árvore binária representando um circuito composto apenas por portas NAND de duas entradas. Na árvore, cada nó interno representa uma porta NAND, que utiliza como entradas os valores produzidos por seus dois filhos. Cada folha da árvore representa uma entrada externa ao circuito e é um valor em {0,1}. O valor produzido pelo circuito é o valor produzido pela porta na raiz da árvore. A figura a seguir mostra um circuito com nove nós, dos quais quatro são portas NAND e cinco são entradas externas.\nCada porta no circuito pode estar travada, o que significa que ela produz apenas 0 ou apenas 1, independentemente das entradas da porta. Um padrão de teste é uma atribuição de valores às entradas externas para que o valor produzido pelo circuito fique incorreto, devido às portas emperradas.\nDada a descrição de um circuito, você deve escrever um programa para determinar o número de diferentes padrões de teste para esse circuito.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) representando o número de portas do circuito, que tem o formato de uma árvore binária. As portas são identificadas por números inteiros distintos de 1 a N, sendo a porta 1 a raiz da árvore. Para i = 1,2,...,N, a i-ésima das próximas N linhas descreve a porta i com três inteiros X, Y e F (0 ≤ X,Y ≤ N e −1 ≤ F ≤ 1). Os valores X e Y indicam as duas entradas do portão.\nSe X = 0 a primeira entrada é de uma entrada externa, caso contrário a entrada é a saída produzida pela porta X. Analogamente, se Y = 0 a segunda entrada é de uma entrada externa, caso contrário a entrada é a saída produzida pela porta Y. O valor F representa o estado do portão: −1 significa que o portão está bem comportado, 0 significa que o portão está preso em 0 e 1 significa que o portão está preso em 1.\nSaída\nProduza uma única linha com um número inteiro indicando o número de padrões de teste diferentes para o circuito fornecido. Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "4\n2 3 1\n0 0 -1\n4 0 0\n0 0 -1",
        "15"
      ],
      [
        "2\n2 0 1\n0 0 -1",
        "3"
      ],
      [
        "6\n5 4 -1\n0 0 -1\n0 0 0\n6 3 -1\n0 2 1\n0 0 -1",
        "93"
      ],
      [
        "7\n2 3 -1\n4 5 -1\n6 7 -1\n0 0 1\n0 0 -1\n0 0 -1\n0 0 -1",
        "21"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Mantenha-o coberto",
    "text": "Eva adora quebra-cabeças. Ela comprou recentemente um novo que se revelou bastante difícil. O quebra-cabeça é feito de uma grade retangular com R linhas e C colunas. Algumas células podem estar marcadas com um ponto, enquanto outras células estão vazias. Quatro tipos de peças vêm com o quebra-cabeça e existem unidades R×C de cada tipo.\nTipos de peças 11 2 3 4 O objetivo do quebra-cabeça é utilizar algumas das peças para preencher completamente a grade; isto é, cada célula deve ser coberta com um pedaço. Ao fazer isso, cada peça pode ser girada 90, 180 ou 270 graus. Mas é claro que, para torná-lo mais interessante, existem algumas restrições que devem ser respeitadas: 1. Peças do tipo 1 só podem ser utilizadas em células marcadas com ponto, enquanto os demais tipos de peças só podem ser utilizadas em células vazias.\n2. Dado qualquer par de células compartilhando uma borda, os desenhos das duas peças nelas devem corresponder.\n3. Os desenhos das peças não podem tocar a borda da grade.\nComo Eve está tendo dificuldade para resolver o quebra-cabeça, ela começou a pensar que ele foi construído de maneira desleixada e talvez não exista solução. Você pode dizer a ela se o quebra-cabeça pode ser resolvido? Entrada\nA primeira linha contém dois inteiros R e C (1 ≤ R,C ≤ 20), indicando respectivamente o número de linhas e colunas do quebra-cabeça. As linhas R seguintes contêm uma sequência de caracteres C cada, representando a grade do quebra-cabeça; nessas strings, uma letra minúscula “o” indica uma célula marcada com um ponto, enquanto um “-” (hífen) indica uma célula vazia. Existem no máximo 15 células marcadas com um ponto.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se for possível resolver o quebra-cabeça conforme descrito na instrução, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "6 6\no----o\n---oo-\n------\n--o---\no--o--\n-----o",
        "Y"
      ],
      [
        "1 1\n-",
        "N"
      ],
      [
        "6 7\n-------\n-o--o--\n--o----\n-----o-\n----o--\no------",
        "N"
      ],
      [
        "3 3\n-o-\no-o\n-o-",
        "N"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Angariação de fundos",
    "text": "Uma política de prestígio que almeja a presidência no próximo ano está planejando um jantar de arrecadação de fundos para sua campanha. Ela tem uma lista de algumas pessoas ricas do país e quer convidá-las de forma que a quantidade de dinheiro arrecadada seja a maior possível.\nÀs vezes, pessoas ricas têm um comportamento fútil e não gostam da ideia de que exista alguém mais rico ou mais bonito do que elas. Cada vez que alguém assim conhece outra pessoa que é estritamente mais bonita, mas não estritamente mais rica, surge uma discussão. Da mesma forma, se encontrarem outra pessoa que seja estritamente mais rica, mas não estritamente mais bonita, também ocorre uma discussão. Estas duas situações são as únicas causas possíveis de uma discussão envolvendo duas pessoas. Assim, duas pessoas não discutem se uma delas for estritamente mais bonita e estritamente mais rica que a outra. Além disso, duas pessoas não discutem se forem igualmente ricas e bonitas.\nComo o candidato presidencial quer arrecadar o máximo de dinheiro possível, uma discussão deve ser evitada a todo custo, pois poderia arruinar a campanha. Dadas as características de algumas pessoas ricas do país, é necessário encontrar uma lista de convidados que maximize as doações e ao mesmo tempo garanta que nenhuma discussão aconteça durante o jantar.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) representando o número de possíveis convidados com características conhecidas. Cada uma das próximas N linhas descreve um possível convidado com três inteiros B, F e D (1 ≤ B,F,D ≤ 109), indicando respectivamente a beleza da pessoa, sua fortuna e quanto essa pessoa doará se for convidada .\nSaída\nProduza uma única linha com um número inteiro indicando a soma máxima das doações caso convidados sejam convidados, para que nenhuma discussão aconteça durante o jantar.",
    "samplesExamples": [
      [
        "4\n1 2 50\n2 1 50\n2 2 30\n1 1 30",
        "60"
      ],
      [
        "3\n3 3 3\n5 5 3\n2 2 3",
        "9"
      ],
      [
        "3\n2 8 13\n1 4 12\n2 1 16",
        "25"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Complete a sequência de Naebbirac",
    "text": "Naebbirac é um marinheiro jovem e fácil de ficar entediado. Ele gosta de sequências de números inteiros e de encontrar maneiras de classificá-los. Naebbirac diz que uma sequência é completa para um número inteiro K escolhido, se a sequência contiver apenas números inteiros entre 1 e K, e cada número inteiro entre 1 e K aparecer o mesmo número de vezes.\nCom base nisso, Naebbirac criou um jogo para entreter a si e aos seus pares, quando as águas se acalmam e não há muito o que fazer para passar o tempo no meio do oceano.\nPrimeiro ele escolhe um número inteiro positivo K e depois usa giz para desenhar no baralho uma sequência S com N inteiros entre 1 e K. Depois disso ele desafia um de seus pares. O objetivo do peer desafiado é transformar a sequência S em uma sequência completa executando exatamente uma das três operações possíveis: • “-x”: remover uma ocorrência do inteiro x de S; • “+x”: adiciona um novo inteiro com valor x em S; ou • “-x +y”: substituir uma ocorrência do inteiro x de S por um inteiro com valor y.\nNaebbirac é bastante inteligente. Ele nunca escreve uma sequência que já esteja completa e muitas vezes os números inteiros escritos não seguem um padrão, tornando muito difícil encontrar uma operação que resolva o quebra-cabeça. Um de seus amigos, que costuma navegar com Naebbirac, está cansado de sempre perder o jogo. Você consegue ajudar seu amigo e criar um programa de computador que possa encontrar uma solução para o jogo de Naebbirac antes de ele embarcar na próxima viagem? Entrada\nA primeira linha contém dois inteiros K (3 ≤ K ≤ 1000) e N (1 ≤ N ≤ 104), indicando respectivamente o inteiro que Naebbirac escolhe no início do jogo e a duração da sequência escrita no baralho. A segunda linha contém N inteiros S1,S2,...,SN (1 ≤ Si ≤ K para i = 1,2,...,N) representando a sequência escrita; você pode assumir com segurança que a sequência não está completa.\nSaída\nProduza uma única linha com a descrição da operação que permite ao seu amigo vencer o jogo ou um “*” (asterisco) se não houver como vencer. A descrição da operação deve seguir o formato mostrado no extrato, ou seja, “-x”, “+x” ou “-x +y”.",
    "samplesExamples": [
      [
        "3 5\n1 3 2 3 1",
        "+2"
      ],
      [
        "3 7\n1 2 3 3 3 2 1",
        "-3"
      ],
      [
        "3 6\n3 1 2 1 3 1",
        "-1 +2"
      ],
      [
        "3 6\n2 3 2 2 2 1",
        "*"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Yonny Mondelo Hernández, Cuba"
    },
    "hasImages": false
  },
  {
    "name": "ICPC com erros",
    "text": "Alan Curing é um famoso programador esportivo. Ele é o criador do modelo teórico de computação conhecido como Alan Curing Machine (ACM). Ele é mais famoso por criar seu próprio computador para competições de programação: o Computador Integrado para Concursos de Programação (ICPC). Este computador possui um sistema operacional especializado com comandos para enviar código e testar executáveis ​​em entradas de amostra, um gerador de entrada, um display amplo para depuração e um teclado muito suave. No entanto, como acontece até com os melhores, a criação de Alan tem um bug desagradável. Cada vez que Alan digita uma vogal no ICPC, o conteúdo da linha atual é invertido.\nO bug tem sido extremamente difícil de detectar, então Alan decidiu aceitar o desafio e usar o computador como ele é. Atualmente ele está treinando digitação no ICPC. Por enquanto, ele está digitando strings apenas com letras minúsculas e sem espaços. Quando Alan digita uma consoante, ela é anexada ao final da linha atual, como seria de esperar. Quando ele digita uma vogal, porém, o caractere digitado é primeiro adicionado ao final da linha, mas logo depois toda a linha é invertida. Por exemplo, se a linha atual tiver “imc” e Alan digitar “a” (uma vogal), por um breve momento a linha se tornará “imca”, mas então o bug entra em ação e transforma a linha em “acmi”. Se depois disso ele digitar as consoantes “c”, “p” e “c”, nessa ordem, a linha passa a ser “acmicpc”.\nAo praticar, Alan primeiro pensa no texto que deseja digitar e depois tenta criar uma sequência de caracteres que possa digitar para obter esse texto. Ele está tendo problemas, entretanto, pois percebeu que não consegue obter alguns textos (como “ca”), e há múltiplas maneiras de obter outros textos (como “ac”, que é obtido se ele digitar “ac” ou “ca”). Ajude Alan em seu treinamento, dizendo-lhe de quantas maneiras ele pode digitar cada texto que deseja digitar. Uma forma de digitar um texto T pode ser codificada por uma string W com |T| caracteres tais que se os caracteres forem digitados no ICPC na ordem em que aparecem em W (ou seja, W1,W2,...,W|T|) o resultado final será igual a T, considerando o bug conhecido do ICPC. Duas maneiras são consideradas diferentes se forem codificadas por strings diferentes. As letras que acionam o bug no ICPC quando digitadas são “a”, “e”, “i”, “o” e “u”.\nEntrada\nA entrada consiste em uma única linha que contém uma string T não vazia com no máximo 105 letras minúsculas, representando o texto que Alan deseja digitar no ICPC.\nSaída\nProduza uma única linha com um número inteiro representando o número de maneiras distintas pelas quais Alan pode digitar o texto desejado T, considerando o bug conhecido do ICPC.",
    "samplesExamples": [
      [
        "ac",
        "2"
      ],
      [
        "ca",
        "0"
      ],
      [
        "acmicpc",
        "3"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Organizando peças",
    "text": "Um conjunto de telhas retangulares de pedra, todas com a mesma altura H, teve seus quatro cantos originais cortados de maneiras diferentes para que duas propriedades fossem mantidas: 1. Cada telha ainda é um polígono convexo simples.\n2. Cada ladrilho possui dois lados paralelos que fazem parte dos lados inferior e superior do ladrilho retangular original, o que implica que a altura H foi preservada.\nA figura abaixo ilustra dois ladrilhos antes e depois dos cortes. Os cantos são destacados com pequenos círculos.\nPrecisamos colocar todos os ladrilhos, lado a lado e sem sobreposição, ao longo de uma moldura de altura H, para transporte. As peças podem ser transladadas de suas posições originais, mas não podem ser giradas ou refletidas. Como as suas formas convexas podem ser muito diferentes, a ordem em que colocamos os ladrilhos ao longo da moldura é importante, pois queremos minimizar a largura da moldura. A figura seguinte mostra as duas ordens possíveis para os ladrilhos da figura anterior, sendo a segunda ordem claramente aquela que minimiza a largura da moldura.\nDada a descrição do conjunto de peças, seu programa deve calcular a largura mínima para uma moldura da mesma altura das peças que contém todas elas, lado a lado e sem sobreposição.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 14) representando o número de peças. A seguir, existem N grupos de linhas, cada grupo descrevendo um ladrilho, todos com a mesma altura.\nDentro de cada grupo que descreve um ladrilho, a primeira linha contém um inteiro K (4 ≤ K ≤ 104) representando o número de cantos do ladrilho. Cada uma das próximas K linhas descreve um canto do bloco com dois inteiros X (−108 ≤ X ≤ 108) e Y (0 ≤ Y ≤ 108), indicando as coordenadas do canto no plano XY.\nOs cantos são dados no sentido anti-horário. O primeiro canto é (0,0) e o segundo canto tem a forma (X,0) para X > 0, sendo este lado o lado inferior do ladrilho. O ladrilho tem a forma de um polígono convexo simples com a face superior paralela à inferior.\nSaída\nProduza uma única linha com um número racional indicando a largura mínima para uma moldura de mesma altura dos ladrilhos que contém todos eles, lado a lado e sem sobreposição. O resultado deve ser apresentado como um número racional com exatamente três dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "3\n4\n0 0\n1 0\n0 5\n-1 5\n4\n0 0\n1 0\n2 5\n1 5\n4\n0 0\n3 0\n2 5\n1 5",
        "5.000"
      ],
      [
        "3\n4\n0 0\n204 0\n412 1031\n-253 1031\n6\n0 0\n110 0\n290 436\n100 1031\n0 1031\n-400 750\n5\n0 0\n120 0\n100 1031\n0 1031\n-281 93",
        "1420.754"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Guilherme A. Pinto, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Enigma",
    "text": "O mundialmente famoso pirata Cornelius “Cheesehead” Bakker era um renomado astrônomo e matemático. Ele enterrou a maior parte de seu tesouro na ilha caribenha de São Basílio, onde o Pico Colombo é uma conhecida referência geográfica. Cheesehead desapareceu quando a sua frota de três navios foi apanhada por um furacão em 1617. Talvez por algum tipo de premonição, antes da sua excursão fatal escreveu numa carta a uma das suas sobrinhas na Holanda a distância exacta até ao seu tesouro escondido, do Pico. Colombo na direção sul.\nTemendo que o mapa acabasse em mãos erradas, Cheesehead usou suas habilidades matemáticas como uma garantia contra ladrões. Em vez de escrever na letra o número que indicava a distância, multiplicou-o por um segundo número N, e escreveu o resultado D na letra, juntamente com o valor de N e uma explicação do cálculo que tinha feito. Ele sabia que mesmo que alguma pessoa indesejada tivesse a carta, ela teria que saber dividir dois números, o que poucos ladrões conseguiam naquela época. Infelizmente, quando a carta chegou à Europa, a sobrinha de Cheesehead tinha ingressado num convento para se tornar freira e nem sequer se preocupou em abrir a carta.\nExatamente quatro séculos depois, Maria obteve um baú contendo os pertences de sua freira ancestral. E você pode imaginar a surpresa dela ao encontrar a carta, ainda fechada! Maria está planejando uma excursão em busca do tesouro de Cheesehead, mas precisa de sua ajuda. Embora o valor de N esteja intacto e ela possa lê-lo, o número D foi parcialmente comido pelas mariposas, de modo que alguns de seus dígitos ficam ilegíveis. A única pista que Maria tem é que o dígito mais à esquerda de D não é zero porque Cheesehead disse isso na carta para sua sobrinha.\nDada a representação parcial de D e o valor de N, você deve determinar o menor valor possível para D para que seja um múltiplo de N e não tenha zeros à esquerda.\nEntrada\nA entrada consiste em uma única linha que contém uma string não vazia S de no máximo 1000 caracteres e um inteiro N (1 ≤ N ≤ 1000). Cada caractere de S é um dígito decimal ou o caractere “?” (ponto de interrogação); o caractere mais à esquerda não é “0” e pelo menos um caractere é “?”.\nSaída\nProduza uma única linha com um inteiro D sem zeros à esquerda indicando o menor múltiplo de N que tem |S| dígitos e de modo que os dígitos em S sejam coincidentes com os dígitos correspondentes em D. Se não existir tal número inteiro D, escreva um “*” (asterisco) na saída.",
    "samplesExamples": [
      [
        "1??????????????????????????????? 2",
        "10000000000000000000000000000000"
      ],
      [
        "???????????????????????????????1 2",
        "*"
      ],
      [
        "?294?? 17",
        "129404"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Jeferson Lesbão, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Sapo saltitante",
    "text": "Pog the Frog quer competir na competição World Frog Jump, que acontecerá na Nlogônia.\nNa competição, cada sapo deverá realizar uma sequência de saltos acrobáticos em uma arena especialmente construída. A arena é composta por N posições igualmente espaçadas em torno de uma circunferência (o arco entre duas posições adjacentes tem sempre o mesmo comprimento) onde cada posição pode ser uma rocha ou um lago. As posições são numeradas sequencialmente de 0 a N − 1 no sentido horário, para que os juízes possam facilmente anotar quais saltos foram realizados em cada posição. Assim, a posição 0 é adjacente às posições 1 e N − 1 na arena.\nO regulamento da competição estipula que a sequência de saltos de cada sapo deve começar em uma pedra, passar sempre de uma pedra para outra e terminar na mesma posição em que começou. As regras não exigem que os sapos usem todas as pedras da arena para a sequência de saltos.\nPog the Frog está atualmente praticando para a competição. Ele deve desenvolver duas habilidades. Primeiro, ele precisa melhorar no salto de uma pedra para outra, pois pousar em uma lagoa ou fora das posições marcadas pode significar desclassificação. Além disso, ele deverá aprender movimentos acrobáticos impressionantes.\nCom isso em mente, ele decidiu por uma estratégia de prática. No início de cada sessão de treino, Pog, o Sapo, escolherá uma pedra inicial e um comprimento de salto inteiro K entre 1 e N − 1. Depois disso, sempre que estiver sobre uma pedra numerada i, ele mirará seu próximo salto acrobático em a pedra cujo número é obtido obtendo o restante da divisão de i+K por N. Ele irá parar quando pousar na pedra inicial. Por exemplo, se a arena tiver 3 posições, todas elas pedras, e Pog, o Sapo, começar na posição 0 e escolher K = 2, ele primeiro pulará da pedra 0 para a pedra 2, depois para a pedra 1 e, finalmente, pulará de volta para rock 0. Neste ponto, sua sessão de treinos termina.\nDada a descrição das N posições na arena, ajude Pog, o Sapo, respondendo a esta pergunta: quantos valores distintos de K ele pode escolher para suas sessões de treinos, se ele puder usar qualquer pedra como posição inicial para sua sequência de saltos? Entrada\nA entrada consiste em uma única linha que contém uma string S de N caracteres (3 ≤ N ≤ 105), representando as posições na arena. O i-ésimo caractere de S (i = 0,1,...,N − 1) indica que a posição i na arena é uma rocha (letra “R” maiúscula) ou um lago (letra “P” maiúscula ).\nSaída\nProduza uma única linha com um número inteiro representando o número de comprimentos de salto distintos que Pog, o Sapo, pode escolher para suas sessões de treino, visto que ele pode usar qualquer pedra como posição inicial para sua sequência de saltos.",
    "samplesExamples": [
      [
        "RRR",
        "2"
      ],
      [
        "RRPR",
        "1"
      ],
      [
        "PRP",
        "0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Estradas imperiais",
    "text": "As estradas de Cubiconia estão em péssimo estado, depois de anos de abandono e falta de manutenção. Cada estrada conecta duas cidades diferentes A e B e pode ser percorrida nos dois sentidos (de A para B ou de B para A). Existe no máximo uma estrada entre cada par de cidades, e utilizando as estradas existentes é possível viajar entre qualquer par de cidades. O novo imperador da Cubiconia acaba de aumentar os impostos (de novo!), mas prometeu reparar pelo menos algumas das estradas, garantindo que os cubicónios poderão viajar entre qualquer par de cidades utilizando apenas estradas restauradas.\nO Departamento de Obras Públicas calculou o custo de reparação de cada estrada individual. Agora querem calcular o custo mínimo para reparar um conjunto de estradas para que a promessa do imperador se concretize. Isto não é fácil porque o imperador quer que o conjunto de estradas reparadas inclua uma estrada específica, mas ele ainda não decidiu qual estrada incluir: poderia ser aquela que liga a cidade onde está o seu castelo à cidade onde está o palácio real da sua filha. residência é, ou a estrada que liga a cidade onde fica seu palácio de verão à única cidade à beira-mar, ou... Temendo que o imperador demore muito para decidir, os engenheiros querem sua ajuda.\nDada a descrição das estradas de Cubiconia, com os respetivos custos de reparação, deverá escrever um programa que responda a um conjunto de questões. Para cada consulta você receberá uma estrada específica que deve ser reparada e deverá determinar o custo mínimo para reparar um conjunto de estradas (incluindo a estrada específica) para que os Cubiconianos possam viajar entre qualquer par de cidades usando apenas estradas restauradas. estradas.\nEntrada\nA primeira linha contém dois inteiros N (2 ≤ N ≤ 105) e R (N − 1 ≤ R ≤ 2 × 105), representando respectivamente o número de cidades e o número de estradas em Cubiconia. As cidades são identificadas por inteiros distintos de 1 a N. Cada uma das próximas R linhas descreve uma estrada com três inteiros A, B (1 ≤ A < B ≤ N) e C (1 ≤ C ≤ 104), indicando que existe um estrada entre as cidades A e B e o custo de consertá-la é C. Existe no máximo uma estrada entre cada par de cidades, e usando as estradas existentes é possível viajar entre qualquer par de cidades. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 105) representando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta com dois inteiros U e V (1 ≤ U < V ≤ N), indicando a estrada específica que deve ser reparada. Não há consultas repetidas.\nSaída\nLinhas Q de saída, cada linha com um número inteiro indicando a resposta à consulta correspondente da entrada, ou seja, o custo mínimo para reparar um conjunto de estradas (incluindo a estrada específica na consulta) para que os Cubiconianos possam viajar entre qualquer par de cidades usando apenas estradas restauradas.",
    "samplesExamples": [
      [
        "3 3\n1 2 10\n2 3 5\n1 3 7\n3\n2 3\n1 2\n1 3",
        "12\n15\n12"
      ],
      [
        "4 4\n1 2 1\n2 4 1\n2 3 100\n1 4 50\n1\n1 4",
        "151"
      ],
      [
        "5 7\n1 2 8\n1 3 10\n2 4 5\n2 3 12\n4 5 4\n3 5 14\n1 5 20\n3\n2 3\n1 5\n3 5",
        "29\n39\n31"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Edwin Ninõ, Colômbia"
    },
    "hasImages": false
  },
  {
    "name": "Escolha difícil",
    "text": "Em voos longos, as companhias aéreas oferecem refeições quentes. Normalmente, os comissários de bordo empurram carrinhos contendo as refeições pelos corredores do avião. Quando um carrinho chega à sua fileira, você imediatamente pergunta: “Frango, carne ou macarrão?” Você conhece suas escolhas, mas tem apenas alguns segundos para escolher e não sabe como será sua escolha porque seu vizinho ainda não abriu o embrulho...\nA comissária deste voo decidiu alterar o procedimento. Primeiro ela perguntará a todos os passageiros qual opção de refeição eles preferem e depois verificará se o número de refeições disponíveis neste voo para cada escolha é suficiente.\nComo exemplo, considere que o número de refeições disponíveis para frango, carne bovina e macarrão é respectivamente (80,20,40), enquanto o número de opções de passageiros para frango, carne bovina e macarrão é respectivamente (45,23,48). Nesse caso, onze pessoas certamente não receberão sua seleção para refeição, pois três passageiros que queriam carne bovina e oito passageiros que queriam macarrão não poderiam ficar satisfeitos.\nDada a quantidade de refeições disponíveis para cada escolha e o número de refeições solicitadas para cada escolha, você poderia ajudar o comissário a determinar quantos passageiros certamente não receberão sua seleção de refeição? Entrada\nA primeira linha contém três inteiros Ca, Ba e Pa (0 ≤ Ca,Ba,Pa ≤ 100), representando respectivamente o número de refeições disponíveis para frango, carne bovina e macarrão. A segunda linha contém três inteiros Cr, Br e Pr (0 ≤ Cr,Br,Pr ≤ 100), indicando respectivamente o número de refeições solicitadas para frango, carne bovina e macarrão.\nSaída\nProduza uma única linha com um número inteiro representando a quantidade de passageiros que certamente não receberão sua seleção para refeição.",
    "samplesExamples": [
      [
        "80 20 40\n45 23 48",
        "11"
      ],
      [
        "0 0 0\n100 100 100",
        "300"
      ],
      [
        "41 42 43\n41 42 43",
        "0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Inés Kereki, Uruguai"
    },
    "hasImages": false
  },
  {
    "name": "Linearville",
    "text": "A cidade de Linearville tem N ruas paralelas de mão dupla indo- N ing na direção oeste-leste e N paralelas bidirecionais s gt rr ideet ws itg hoin (Ng i −n t 1h )e ×So (Nuth −-N 1o )rt bh lod ckir se .ct Tio hn e, m dia sktain ng ceup bea - 10 Entre duas ruas paralelas consecutivas é 1 ou 5. 89 A Autoridade de Trânsito de Linearville está conduzindo um experimento e agora exige que todos os carros sempre siga um caminho 7 que alterna a direção entre W-E e SN em cada cruzamento, o que significa que eles devem virar à esquerda ou à direita 6 ao chegar a um cruzamento. O LTA está desenvolvendo um novo aplicativo de navegação e precisa de sua ajuda para escrever um programa que calcule os comprimentos dos caminhos alternados mais curtos entre muitos pares de cruzamentos de partida e de destino. O caminho alternado na figura, como exemplo para N = 10,3, claramente não é um caminho alternado mais curto. Mas cuidado! 2 Linearville pode ser enorme.Input\nA primeira linha contém um inteiro N (2 ≤ N ≤ 105) representando o número de ruas em cada sentido. Para cada sentido, as ruas são identificadas por números inteiros distintos de 1 a N começando na esquina SW da cidade. A segunda linha contém N − 1 inteiros D1,D2,...,DN−1 (Di ∈ {1,5} para i = 1,2,...,N − 1) indicando as distâncias entre ruas consecutivas indo de S-N (ou seja, Di é a distância entre a rua i e a rua i + 1). A terceira linha contém N − 1 inteiros E1,E2,...,EN−1 (Ei ∈ {1,5} para i = 1,2,...,N − 1) indicando as distâncias entre ruas consecutivas indo para W-E (isto é, Ei é a distância entre a rua i e a rua i + 1). A quarta linha contém um inteiro Q (1 ≤ Q ≤ 105) representando o número de consultas de caminho mais curto. Cada uma das próximas Q linhas descreve uma consulta com quatro inteiros AX, AY , BX e BY (1 ≤ AX,AY ,BX,BY ≤ N), indicando que o cruzamento inicial é (AX,AY ) e o cruzamento alvo é ( BX,POR ); os valores AX e BX são ruas que vão para SN, enquanto os valores AY e BY são ruas que vão para W-E. Não há consultas repetidas.\nSaída\nLinhas Q de saída, cada linha com um número inteiro indicando o comprimento de um caminho alternado mais curto para a consulta correspondente da entrada.",
    "samplesExamples": [
      [
        "10\n5 1 5 5 5 1 1 5 5\n1 5 5 5 1 5 5 1 5\n3\n4 3 9 10\n9 2 2 9\n5 1 5 10",
        "46\n50\n49"
      ],
      [
        "5\n5 1 5 5\n5 1 5 5\n2\n3 1 4 5\n5 5 5 5",
        "23\n0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Guilherme A. Pinto, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Marblecoin",
    "text": "Cubiconia é conhecida por ter uma das taxas de impostos mais altas. Os impostos são calculados diariamente e mesmo coisas que parecem sem valor estão sujeitas a impostos. Para evitar as taxas absurdas de impostos, alguns amigos do imperador criaram uma nova moeda usando bolinhas de gude. Infelizmente não deu certo, as bolinhas de gude também ficaram sujeitas a impostos.\nApesar disso, o imperador acredita que usar bolinhas de gude como moeda é uma ótima ideia e que no futuro elas valerão muito mais. Então ele decidiu roubar todas as bolinhas de gude de seus amigos. Para evitar atenção desnecessária, no final de cada noite ele visitará um de seus amigos e durante cada visita será roubada exatamente uma bola de gude. Como os amigos do imperador mantêm suas bolinhas de gude em pilhas, apenas uma bolinha de gude que esteja no topo de uma pilha poderá ser roubada.\nCada mármore tem um valor associado a ele. O valor devido por bola de gude possuída é V ×365D, onde V é o valor associado à bola de gude e D é o número de dias que a bola de gude foi possuída. O imperador planeja vender todas as bolinhas de gude assim que terminar de roubá-las. Isso significa que, se houver um total de T bolinhas de gude, a bolinha possuída por menos tempo será possuída por 1 dia, enquanto a bolinha possuída por mais tempo será possuída por T dias.\nO imperador é esperto e já percebeu que o total devido em impostos depende da ordem em que as bolinhas são roubadas. Para evitar pagar mais impostos do que o necessário, ele gostaria de saber a melhor ordem para roubar as bolinhas de gude. Você pode ajudá-lo? Entrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) representando o número de pilhas das quais o imperador irá roubar. Cada uma das próximas N linhas descreve uma pilha com um inteiro K (1 ≤ K ≤ 105) seguido por K inteiros V1,V2,...,VK (1 ≤ Vi ≤ 300 para i = 1,2,..., K); o número K é a quantidade de bolinhas na pilha, enquanto os números V1,V2,...,VK são os valores das bolinhas na pilha, de cima para baixo. A quantidade total de bolinhas de gude é no máximo 4 × 105.\nSaída\nProduza uma única linha com um número inteiro representando o valor mínimo devido em impostos se as bolinhas forem roubadas na ordem ideal. Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "3\n1 1\n1 2\n1 3",
        "48894670"
      ],
      [
        "3\n3 2 5 7\n4 1 4 6 10\n3 3 2 1",
        "227712621"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Nota Esquecida",
    "text": "João não é muito bom em Matemática mas aprendeu que a média de dois números é o valor da soma desses dois números dividido por dois. Ou seja, a média de dois números A e B é M = A+ 2B.\nA professora de Cálculo I contou para João as notas que ele tirou nas duas provas já realizadas. As duas notas são números inteiros entre 0 e 100. João prontamente calculou a média das duas provas, que também resultou em um número inteiro.\nMas João é muito esquecido, e agora não consegue lembrar-se das duas notas que tirou na prova. Ele consegue se lembrar de apenas uma das notas das provas. Por sorte, ele consegue se lembrar também da média entre as duas notas.\nVocê pode ajudar João a determinar a nota da outra prova? Entrada\nA primeira linha contém um número inteiro A (0 ≤ A ≤ 100), indicando a nota de uma prova. A segunda linha contém um número inteiro M (0 ≤ M ≤ 100), indicando a média entre as duas notas das provas.\nSaída\nSeu programa deve produzir uma única linha com um número inteiro representando a nota da outra prova, que João não consegue recordar.",
    "samplesExamples": [
      [
        "100\n70",
        "40"
      ],
      [
        "80\n75",
        "70"
      ],
      [
        "1\n50",
        "99"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3!+2!+2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
    "samplesExamples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Teleférico",
    "text": "A turma da faculdade vai fazer uma excursão na serra e todos os alunos e monitores vão tomar um teleférico para subir até o pico de uma montanha. A cabine do teleférico pode levar C pessoas no máximo, contando alunos e monitores, durante uma viagem até o pico. Por questão de segurança, deve haver pelo menos um monitor dentro da cabine junto com os alunos. Por exemplo, se cabem C = 10 pessoas na cabine e a turma tem A = 20 alunos, os alunos poderiam fazer três viagens: a primeira com 8 alunos e um monitor; a segunda com 6 alunos e um monitor; e a terceira com 6 alunos e um monitor.\nDados como entrada a capacidade C da cabine e o número total A de alunos, você deve escrever um programa para calcular o número mínimo de viagens do teleférico.\nSe você estiver com muita preguiça hoje, não se preocupe: virando a página você encontra soluções para este problema.\nEntrada\nA primeira linha da entrada contém um inteiro C, representando a capacidade da cabine (2 ≤ C ≤ 100). A segunda linha da entrada contém um inteiro A, representando o número total de alunos na turma (1 ≤ A ≤ 1000).\nSaída\nSeu programa deve produzir uma única linha com um número inteiro representando o número mínimo de viagens do teleférico para levar todos os alunos até o pico da montanha.",
    "samplesExamples": [
      [
        "10\n20",
        "3"
      ],
      [
        "12\n55",
        "5"
      ],
      [
        "100\n87",
        "1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Dança da Divisibilidade",
    "text": "No país da Nlogônia os habitantes realizam uma dança especial para homenagear o deus da divisibili dade. A dança é executada por N homens e N mulheres dispostos em dois círculos. Os homens ficam no círculo interno e as mulheres no círculo externo. Cada mulher inicia de frente para um homem.\nA dança é composta de K movimentos; homens e mulheres se alternam nos movimentos, começando com os homens. No i-ésimo movimento, as pessoas do círculo correspondente rotacionam Pi passos em sentido horário enquanto as pessoas do outro círculo permanecem paradas. Assim, cada pessoa troca de parceiro para um que está a Pi posições de distância. Um movimento é válido se os parceiros de cada pessoa são diferentes ao início e ao fim do movimento e, além disso, nenhum par de pessoas está frente a frente em dois instantes de tempo distintos.\nComo forma de homenagem, as danças sempre precisam terminar com casais cujas somas das idades tenham o mesmo resto quando dividido pelo número sagrado M. Ou seja, se a soma das idades de um casal deixa um resto R quando divido por M, então a soma das idades de todos os casais devem deixar o mesmo resto R ao fim da dança.\nFornecidos N, M e K e as idades de todos os dançarinos, determine de quantas formas se pode realizar a dança. Como a idade dos dançarinos é medida em segundos, os valores podem ser muito grandes.\nEntrada\nA primeira linha da entrada contém três inteiros N (3 ≤ N ≤ 106), M (1 ≤ M ≤ 109) e K (1 ≤ K ≤ 109), correspondendo à quantidade de pessoas em um círculo, ao número sagrado e à quantidade de movimentos da dança, respectivamente.\nA segunda linha da entrada contém N inteiros Ai (1 ≤ Ai ≤ 109) separados por um espaço em branco e representando a idade das mulheres.\nA terceira linha da entrada contém N inteiros Bi (1 ≤ Bi ≤ 109) separados por um espaço em branco e representando a idade dos homens.\nInicialmente o i-ésimo homem está alinhado com a i-ésima mulher, e o primeiro elemento de cada vetor é considerado à direita do respectivo último elemento.\nSaída\nA saída consiste de um único inteiro representando o resto da divisão do número de danças distintas por 109 + 7.",
    "samplesExamples": [
      [
        "4 10 1\n3 4 1 7\n13 27 36 9",
        "1"
      ],
      [
        "5 10 2\n3 4 1 7 6\n4 7 1 2 5",
        "3"
      ],
      [
        "5 10 2\n3 4 1 7 6\n5 4 7 1 2",
        "4"
      ],
      [
        "6 21 3\n10 58 23 31 37 2\n45 17 9 24 38 30",
        "42"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ô nibus Venusiano",
    "text": "A Colônia Humana em Vênus está prosperando! Aqui, o meio de transporte mais usado é o Ônibus Venusiano: um disco voador com janelas e assentos ao longo de suas bordas. Nesse ônibus, todos os assentos são nas janelas. E não é permitido mudar de assento. Portanto, uma vez que uma pessoa escolhe um lugar, ela deve permanecer nele até descer do ônibus.\nApesar de ser um veículo completamente autônomo, cada ônibus opera com um engenheiro a bordo, para lidar com problemas inesperados. Você é o engenheiro do ônibus 1C9C, e passa a maior parte do seu expediente lendo livros. O problema é que você detesta ficar ao sol. Portanto, você quer escolher um lugar pra sentar que minimize o total de luz solar que você vai receber ao longo do seu expediente de trabalho.\nA colônia é representada pelo plano cartesiano, onde o eixo X aponta para o leste e o eixo Y aponta para o norte. Os dias em Vênus são bem longos (mais longos até do que o ano!), então você pode assumir que o sol sempre vem da direção leste. Isto é, a luz solar sempre viaja para o oeste, na direção contrária ao eixo X.\nVeja a figura abaixo. Quanto mais sua janela estiver virada para o leste, mais luz solar você tem que aguentar. Mas se sua janela estiver virada para o oeste, você não recebe nenhum sol.\nFormalmente, suponha que o vetor (Dx,Dy) representa a direção para a qual a sua janela está virada. Note que você só recebe sol se Dx > 0. E seja θ o ângulo entre os vetores (Dx,Dy) e (1,0) (um vetor apontando diretamente para o sol). Se cos(θ) ≤ 0, você não recebe nenhum sol. Caso contrário, você recebe cos(θ) unidades de luz solar por segundo.\nA rota do ônibus consiste de uma sequência de estações ao redor da colônia. O ônibus começa o expediente na primeira estação, visita todas as estações em ordem, e então retorna à primeira.\nO trajeto entre duas estações consecutivas é sempre em linha reta, com velocidade constante de um metro por segundo. E apesar do ônibus ser redondo, ele tem um “lado da frente”: este lado está sempre virado para a direção que o ônibus se move, e o ônibus gira apropriadamente quando muda de direção nas estações.\nVocê pode ignorar o tempo que o ônibus gasta mudando de direção, coletando ou largando passa geiros.\nEntrada\nA primeira linha contém um único inteiro N, a quantidade de estações visitadas pela rota do ônibus.\nEm seguida há N linhas, cada linha contendo as coordenadas X e Y de uma estação, separadas por um espaço.\nAs estações são dadas na ordem em que são visitadas.\nQualquer estação pode ser visitada mais de uma vez na rota.\nQuaisquer duas estações consecutivas são distintas, assim como a última e a primeira estações.\nTodas as coordenadas são dadas em metros.\n2 ≤ N ≤ 100000.\nAs coordenadas de cada estação são inteiros no intervalo −10000 ≤ X,Y ≤ 10000.\nSaída\nA saída consiste de uma única linha que deve conter um número real, a quantidade mínima total de luz solar que você pode receber numa única jornada ao longo da rota do ônibus. Sua resposta deve ter exatamente duas casas decimais.",
    "samplesExamples": [
      [
        "3\n2 5\n17 5\n11 11",
        "6.00"
      ],
      [
        "4\n3 0\n3 6\n6 3\n0 3",
        "4.24"
      ],
      [
        "4\n3 2\n1 1\n-3 -1\n-1 0",
        "0.00"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "O",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Game Show!",
    "text": "A Sociedade de Bons Competidores (SBC) organiza shows televisivos (e agora também transmitidos online!) para os seus competidores filiados. A SBC usa um sistema de créditos, denominados sbecs, que podem ser usados para participar de suas competições ou podem ser trocados por prêmios no final de cada temporada. Eles iniciaram um novo tipo de jogo, e precisam fazer algumas simulações para evitar prejuízos muito grandes na premiação! Para participar deste novo jogo, o competidor precisa apostar 100 sbecs, que são transferidos para seu saldo no jogo, e uma sequência de caixas é posicionada. O jogo consiste de rodadas e o número máximo de rodadas é igual ao número de caixas. A cada rodada o jogador decide se abre a próxima caixa ou se encerra o jogo. Se ele encerrar, ele recebe seu saldo corrente de sbecs de volta. Se ele abrir a caixa, um número secreto, contido na caixa, é adicionado ao seu saldo e o jogo continua. Como o número secreto pode ser negativo, jogadores muito gananciosos podem acabar saindo no prejuízo! O jogo termina quando o jogador resolve encerrá-lo ou quando a última caixa é aberta.\nA SBC contratou você para testar o jogo. A partir do conteúdo das caixas, você deve decidir qual seria a maior premiação possível que um jogador poderia conseguir.\nEntrada\nA primeira linha da entrada contém um inteiro C, 1 ≤ C ≤ 100, o número de caixas do jogo.\nDepois, cada uma das C linhas seguintes descrevem, em ordem, o conteúdo das C caixas. Cada um delas contém um inteiro V , −1000 ≤ V ≤ 1000, correspondente ao conteúdo da caixa correspondente.\nSaída\nA saída consiste de uma única linha contendo um inteiro correspondente à maior premiação possível para aquela sequência de caixas.",
    "samplesExamples": [
      [
        "4\n-1\n-2\n-3\n-4",
        "100"
      ],
      [
        "5\n-10\n20\n-30\n40\n-50",
        "120"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ká entre Nós",
    "text": "Empates são sempre um problema em eleições ou em jogos. Recentemente, um novo jogo, chamado Ká entre Nós, foi inventado. O jogo é disputado por jogadores conectados numa rede social. Cada jogador tem um conjunto de amigos. A cada rodada há várias votações, mas um competidor somente pode receber votos de seus amigos. Ganha o jogador que receber o maior número de votos.\nO jogo ainda está na fase de projeto, mas os desenvolvedores depararam com um problema muito comum. Dado que o número de amigos de cada jogador é em geral pequeno, empates são muito comuns, o que tira a graça do jogo. Para resolver esse problema, os desenvolvedores decidiram adicionar um novo módulo ao jogo. Esse módulo define os amigos de cada jogador, e sempre que possível dará a cada jogador um número ímpar de amigos.\nO problema se mostrou mais complicado do que eles esperavam e agora estão tentando uma variação mais simples: dado um conjunto de jogadores, o módulo deverá obter uma partição dos jogadores em no máximo dois grupos, satisfazendo a restrição que cada jogador deve ter um númeroímpar de amigos no seu grupo. Acontece que nem sempre isso é possível. Sua tarefa é decidir se é ou não possível obter a partição.\nEntrada\nA primeira linha da entrada contém dois inteiros, P e F, respectivamente o número de jogadores e o número de amizades, onde 2 ≤ P ≤ 100 e 1 ≤ F ≤ P × (P − 1)/2. Cada uma das próximas F linhas contém dois inteiros, A e B, indicando que A e B são amigos, onde 1 ≤ A,B ≤ P e A (cid:54)= B.\nCada relação de amizade é dada no máximo uma vez, isto é, se uma linha contém os inteiros A e B, nenhuma outra linha contém tais inteiros.\nSaída\nA saída contém uma única linha, contendo um único caractere. Se for possível fazer a partição em dois grupos, escreva a letra maiúscula ‘Y’; caso contrário, escreva a letra maiúscula ‘N’.",
    "samplesExamples": [
      [
        "4 4\n4 2\n1 3\n2 3\n1 4",
        "Y"
      ],
      [
        "4 3\n4 2\n2 3\n1 2",
        "Y"
      ],
      [
        "5 5\n3 5\n3 1\n1 4\n2 5\n2 4",
        "N"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Números Multiplicados",
    "text": "Eugênio é um brilhante matemático que se diverte multiplicando números.\nCerta vez, ele encontrou M pedaços de papel, numerados de 1 a M, cada um com um vértice desenhado. Chamaremos tais vértices de M-vértices. Cada um desses vértices estava rotulado com um primo distinto. Além disso, os primos estavam ordenados: Se chamarmos o rótulo do vértice no i-ésimo pedaço de papel de pi, então pi < pj para todo par i < j.\nApós encontrar os pedaços de papel, Eugênio decidiu desenhar N outros vértices, que chamaremos de N-vértices, e adicionar arestas entre os M-vértices e os N-vértices. Ele tomou o cuidado de nunca ligar um M-vértice com um M-vértice, nem um N-vértice com um N-vértice, mas não se preocupou com o número de arestas desenhadas entre dois vértices. Assim, ele obteve um multigrafo bipartido.\nComo o principal interesse de Eugênio é multiplicar números, ele decidiu rotular cada N-vértice com a multiplicação de todos os M-vértices conectados a ele. Se um M-vértice estiver conectado a um N-vértice por várias arestas, o rótulo dele será multiplicado várias vezes (igual ao número de arestas que os conecta) no processo de formar o rótulo do N-vértice.\nCada N-vértice i acabou rotulado com um número ci. Formalmente, podemos escrever a seguinte fórmula para ci: ci = (cid:89) pj, (j,i)∈E onde E é o multiconjunto de arestas (cada elemento de E é um par da forma (m,n) com 1 ≤ m ≤ M e 1 ≤ n ≤ N). Depois de construir os rótulos dos N-vértices, Eugênio foi comprar um lanche, que consistiu de um toro e um café. Ao saborear o toro, Eugênio acidentalmente derramou o seu café, tornando os rótulos p1,...,pM dos M-vértices ilegíveis.\nVocê pode ajudá-lo a recuperar os números primos ordenados destruídos pelo café? Entrada\nA primeira linha contém três inteiros M, N e K, o número de M-vértices, o número de N-vértices e o número de arestas distintas. Tais valores satisfazem 1 ≤ M,N < 103 e 1 ≤ K < 104.\nA próxima linha contém N números ci, os rótulos dos N-vértices. Tais valores satisfazem 1 < ci < 1015.\nFinalmente, há K linhas, cada uma contendo três números m, n e d, representando que há d arestas entre o M-vértice m e o N-vértice n. Tais números satisfazem 1 ≤ m ≤ M, 1 ≤ n ≤ N e 1 ≤ d ≤ 50.\nÉ garantido que todos os vértices (tanto M-vértices quanto N-vértices) têm grau pelo menos um.\nEm outras palavras, todo vértice tem pelo menos uma aresta conectada a ele.\nSaída\nImprima uma única linha com M números ordenados, os primos rótulos dos M-vértices de índices 1,...,M que fizeram Eugênio perder o sono.",
    "samplesExamples": [
      [
        "4 3 4\n15 16 13\n2 1 1\n3 1 1\n1 2 4\n4 3 1",
        "2 3 5 13"
      ],
      [
        "4 5 7\n3 9 7 143 143\n1 1 1\n1 2 2\n2 3 1\n3 4 1\n3 5 1\n4 5 1\n4 4 1",
        "3 7 11 13"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "N",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fastminton",
    "text": "A Comissão RegionaL de Fastminton (CRLF) organiza torneiros anuais deste novo e inusitado esporte derivado do badminton. Neste ano, ocorrerá a terceira edição do grande torneio.\nO antigo programador da comissão (sobrinho da diretora) desenvolveu um sistema para capturar e armazenar o resultado de cada ponto de uma partida, cujo resultado é salvo para um arquivo. Com a saída do antigo programador, que deixou para trás algumas versões defeituosas de seus programas, a CRLF precisa de você para garantir que os registros das emocionantes jogadas não sejam perdidos, confiando-lhe a tarefa de escrever um programa para ler os resultados dos arquivos de registro.\nPara auxiliá-lo, a CRLF disponibilizou um resumo com as regras relevantes do Fastminton, que é, basicamente, uma versão mais curta (menor número de games) do badminton: • As partidas de Fastminton são jogadas sempre com dois jogadores (oponentes) em uma quadra separada ao meio por uma rede; • Os jogadores são identificados pela sua posição no placar (jogador da esquerda, jogador da direita); • Uma partida é composta por três games. Ganha quem alcançar dois games; • Ganha o game quem alcançar ao menos 5 pontos e tiver uma diferença de ao menos 2 pontos do oponente, ou o primeiro a chegar em 10 pontos; • O jogador da esquerda inicia sacando no primeiro game da partida; nos demais, o jogador que inicia sacando é o que ganhou o último game; • Cada jogada resulta em um ponto, de quem sacou ou de quem recebeu o saque. Quem ganhou o ponto irá sacar na próxima jogada.\nEntrada\nA entrada é composta por uma única linha contendo uma sequência de caracteres representando a sequência completa dos eventos de uma partida, podendo conter os caracteres S (ponto de quem sacou), R (ponto de quem recebeu o saque) ou Q (anúncio de placar). A entrada não contém anúncios de placar consecutivos.\nSaída\nO programa deverá imprimir uma linha contendo o placar atual para cada anúncio de placar (Q) encontrado.\nCaso a partida esteja em andamento, o anúncio deverá ser na forma “GL (PL) - GR (PR)”, onde GL e GR representam o número de games ganhos pelos jogadores da esquerda e da direita, e PL e PR são os pontos atuais dos jogadores da esquerda e da direita. Um asterisco (*) deverá ser adicionado no final do marcador de pontos do jogador que irá sacar na próxima jogada.\nCaso a partida já esteja concluída, o anúncio será na forma “GL - GR” com a palavra “(winner)” adicionada no final do marcador de games do jogador ganhador da partida.",
    "samplesExamples": [
      [
        "SRSSQSSSSQRRSS",
        "0 (1) - 0 (3*)\n0 (0) - 1 (2*)"
      ],
      [
        "SRSSQSSSSQRRSSQ",
        "0 (1) - 0 (3*)\n0 (0) - 1 (2*)\n0 - 2 (winner)"
      ],
      [
        "RSRSSRRRRRRRRRRSSSSRRSQ",
        "2 (winner) - 0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Concatenando Times",
    "text": "Pepito é um coach da Maratona que com frequência gosta de “concatenar” os nomes de dois times, tais como “AJI” e “Oxidados”, a fim de obter nomes para novos times, tal como “AJIOxidados”.\nDado que Pepito é coach de times de duas universidades onde ele leciona, ele teve uma ideia: ele vai considerar todas as possíveis concatenações de um nome de um time da universidade A, com um nome de um time da universidade B (sempre nesta ordem: primeiro o nome de um time da universidade A e depois o nome de um time da universidade B). Por exemplo, se os nomes dos times da universidade A são “Buen” e “Kilo”, e se os nomes dos times da universidade B são “Pan” e “Flauta”, as possíveis concatenações que ele considera são as cadeias “BuenPan”, “BuenFlauta”, “KiloPan” e “KiloFlauta”.\nEle diz que um time é peculiar se a remoção desse time faz com que o conjunto de concatenações perca todas as concatenações que usam o nome desse time.\nPode-se verificar que no exemplo acima todos os times são peculiares. Contudo, se considerarmos o caso em que os nomes dos times de A são “xx” e “xxy”, e os nomes dos times de B são “z”, “yz” e “xx”, então o time “xx” da universidade A não é peculiar, porque um dos nomes por ele gerado (“xx” + “yz” = “xxyz”) pode ser também gerado sem usar o time em questão (“xxy” + “z” = “xxyz”).\nPela mesma razão, “yz”, “xxy” e “z” não são peculiares. O único time peculiar neste exemplo é “xx” da universidade B, porque é utilizado para criar os nomes “xxxx” e “xxyxx”, e é absolutamente impossível criar qualquer um desses nomes sem usar “xx” da universidade B.\nDados os nomes dos times de ambas as universidades, sua tarefa é calcular quantos times peculiares existem em cada universidade.\nEntrada\nA primeira linha contém dois inteiros, M e N, separados por um espaço. O número de times da universidade A é M (1 ≤ M ≤ 105), e o número de times da universidade B é N (1 ≤ N ≤ 105).\nA segunda linha contém os nomes dos M times da universidade A, separados por um espaço em branco e a terceira linha contém os nomes dos N times da universidade B, separados por um espaço em branco. Todos os nomes consistem apenas de letras minúsculas do alfabeto latino. Times distintos de uma mesma universidade têm nomes distintos.\nA soma dos comprimentos dos nomes de todos os times é no máximo 106.\nSaída\nA saída deve conter apenas uma linha contendo dois inteiros: o número de times peculiares da universidade A e o número de times peculiares da universidade B, separados por um espaço em branco.",
    "samplesExamples": [
      [
        "2 2\nbuen kilo\npan flauta",
        "2 2"
      ],
      [
        "2 3\nxx xxy\nz yz xx",
        "0 1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Álbum de Figurinhas",
    "text": "O álbum de figurinhas da Subregional Nlogoniana do ICPC 2020 já está disponível na Nlogônia! Programadores competitivos de todo o país estão comprando álbuns e colecionando figurinhas para celebrar a competição.\nEste álbum é especial porque todas as figurinhas são iguais: elas contêm uma foto do troféu deste ano. Para completar o álbum, basta coletar figurinhas suficientes para preencher todos os espaços nele.\nVocê pode se perguntar: qual a graça de colecionar essas figurinhas? Para deixar as coisas interes santes, as figurinhas são vendidas em pacotes, cada um com um número aleatório de figurinhas. Os fãs celebram quando encontram muitas figurinhas em um pacote, zoam aqueles azarados que encontram poucas figurinhas, e se vangloriam por preencher seus álbuns com poucos pacotes.\nVocê acabou de adquirir o seu álbum e está pronto para começar a preenchê-lo! Mas antes de comprar os pacotes de figurinhas, você se perguntou: em média, quantos pacotes são necessários para completar um álbum? Entrada\nHá apenas uma linha de entrada contendo três inteiros, N, A e B, separados por um espaço, satisfazendo 1 ≤ N ≤ 106, 0 ≤ A ≤ B ≤ 106 e B > 0, onde: • N é o número de figurinhas necessárias para preencher o álbum; • A é o número mínimo de figurinhas em um pacote; • B é o número máximo de figurinhas em um pacote.\nO número de figurinhas em cada pacote é um inteiro uniformemente distribuído no intervalo fechado [A,B].\nSaída\nA saída consiste de apenas uma linha, que deve conter o número esperado de pacotes necessários para completar um álbum. O número será considerado correto se estiver dentro de um erro absoluto ou relativo de 10−5 da resposta correta.",
    "samplesExamples": [
      [
        "40 0 2",
        "40.33333"
      ],
      [
        "100 1 10",
        "18.72727"
      ],
      [
        "30 3 3",
        "10.00000"
      ],
      [
        "314 5 8",
        "48.74556"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Empresa de Festas",
    "text": "Yankovich trabalha como Engenheiro de Software numa empresa, chamada POI, que promove festas online. Para testar os seus sistemas, os empregados organizaram festas e convidaram colegas, mas com algumas restrições.\nA empresa tem uma estrutura hierárquica: Cada empregado, com exceção do dono da empresa, tem um gerente direto, e não há relações cíclicas de gerência. Devido ao processo de promoção da empresa, a idade de um empregado nunca é maior que a idade do seu gerente direto.\nSerão organizadas M festas. A j-ésima festa tem um anfitrião e um intervalo de idades [Lj,Rj].\nPara a j-ésima festa será convidado o maior conjunto de pessoas que satisfaça todas as restrições abaixo: • O anfitrião participa da festa. Por isso, é garantido que a idade do anfitrião da j-ésima festa está no intervalo [Lj,Rj].\n• Todo convidado precisa ter idade no intervalo [Lj,Rj].\n• Todo convidado (que não o anfitrião) precisa trabalhar diretamente com (ou seja, ser gerente ou subordinado de) algum outro empregado que participa da festa.\nYankovich está responsável pelo programa que fornece informações sobre as festas das quais o usuário participou. Como uma tarefa inicial, ele tem que calcular de quantas festas cada empregado participou. Como ele está atrasado para entregar tal tarefa, ele pediu sua ajuda para escrever tal programa.\nEntrada\nA entrada consiste de várias linhas. A primeira linha contém dois inteiros N e M (1 ≤ N,M ≤ 105) representando o número de empregados e o número de festas de teste, respectivamente.\nAs próximas N linhas contêm a estrutura hierárquica da empresa. A i-ésima dessas linhas contém dois inteiros Ai e Bi (1 ≤ Ai ≤ 105, 1 ≤ Bi ≤ N) representando a idade do i-ésimo empregado e seu gerente direto. Os empregados são numerados de 1 a N, com 1 representando o dono da empresa (ele é o único empregado com Bi = i). É garantido que Ai ≤ ABi para todo 1 ≤ i ≤ N.\nAs próximas M linhas contêm os dados das festas de teste. A j-ésima dessas linhas contém três inteiros Oj, Lj, Rj (1 ≤ Lj ≤ AOj ≤ Rj ≤ 105) representando o anfitrião da festa e os limites do intervalo de idades descrito no enunciado.\nSaída\nImprima uma única linha contendo N inteiros (separados por um único espaço). O i-ésimo desses números deve ser o número de festas de que o empregado i participou.",
    "samplesExamples": [
      [
        "10 3\n8 1\n3 5\n5 1\n2 3\n4 1\n3 3\n1 2\n7 1\n2 2\n3 2\n3 5 9\n5 3 8\n3 2 6",
        "2 1 3 1 1 2 0 2 0 1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Juntando Dados",
    "text": "Acre e Amanda são muito curiosos e estão sempre procurando padrões à sua volta. Eles rotineiramente coletam e analisam dados de várias fontes (tráfego na cidade, volume de chuvas, número de folhas que caem das árvores), na esperança de encontrar padrões interessantes.\nNa sua última expedição eles obtiveram um conjunto de dados bastante promissor: formava uma linha reta perfeita! Formalmente, era uma lista de N/2 pares de inteiros, possivelmente repetidos.\nQuando esses pares eram representados por pontos no plano cartesiano, todos os pontos eram per feitamente colineares! Maravilhados, Acre e Amanda armazenaram estes dados como uma tabela contendo os pares de inteiros.\nInfelizmente, enquanto Acre e Amanda saíram para coletar mais dados, seu filho pequeno entrou no escritório deles e bagunçou a tabela, trocando os valores de lugar. Agora só o que Acre e Amanda têm são os N valores da tabela, embaralhados. Eles querem tentar reconstruir a tabela original a partir deles.\nFormalmente, Acre e Amanda querem agrupar esses números em N/2 pares, onde cada par repre senta um ponto no plano cartesiano, de tal forma que todos esses pontos sejam colineares. A lista de inteiros pode ter valores repetidos, e cada valor deve ser utilizado exatamente tantas vezes quantas aparece na lista. O conjunto de dados resultante pode ter pontos repetidos.\nAcre e Amanda querem saber quantos conjuntos de dados diferentes podem ser formados com a lista de inteiros dada, já que podem haver vários. Dois conjuntos de dados são diferentes se e somente se existe um ponto que aparece mais vezes em um dos conjuntos do que no outro.\nEntrada\nA primeira linha contém um único inteiro N, o tamanho da lista de inteiros dada. N é sempre par, pois é o dobro da quantidade de pontos do conjunto de dados original. A segunda linha contém N inteiros, que representam a lista dos valores da tabela, embaralhados.\nOs inteiros são separados por um único espaço.\n4 ≤ N ≤ 200.\nCada número I da lista está no intervalo −10000 ≤ I ≤ 10000.\nSaída\nA saída deve consistir de uma única linha com um único inteiro, o número de diferentes maneiras de arranjar a lista de inteiros em pares que representem pontos colineares. Como esse número pode ser muito grande, sua resposta deverá ser calculada módulo 1000000007 (109 + 7).\nA resposta poderá ser zero para alguns casos.",
    "samplesExamples": [
      [
        "8\n1 2 3 5 20 18 16 12",
        "2"
      ],
      [
        "6\n1 2 3 4 5 20",
        "0"
      ],
      [
        "8\n1 2 5 5 5 5 8 9",
        "10"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Interatividade",
    "text": "Um dia, Alice desafiou Beto com o problema interativo de programação descrito a seguir.\n—————(cid:111)(cid:111)————— Você tem uma árvore (um grafo acíclico conexo). Cada nó da árvore tem exatamente um pai, com exceção do nó raiz, que não tem pai. Um nó que não é pai de nenhum outro nó é uma folha. Você conhece a estrutura da árvore, porque sabe qual é o pai de cada nó que não é a raiz.\nCada nó contém um valor inteiro. Um nó que não é folha contém a soma dos valores dos seus filhos diretos. Portanto, todos os valores da árvore são determinados pelos valores contidos nas folhas.\nA figura abaixo mostra um exemplo. As folhas estão marcadas como cinza, enquanto os outros nós são brancos. Cada nó mostra o valor contido nele.\nInicialmente, você não sabe o valor de nenhum nó da árvore, mas pode consultá-los um por um.\nSua tarefa é determinar o valor de cada nó da árvore, usando o mínimo de consultas possível.\n—————(cid:111)(cid:111)————— Beto resolveu este problema facilmente. Então, para dificultar as coisas, Alice perguntou para ele: “dada a estrutura da árvore, quantas formas diferentes de solucionar este problema existem?” Isto é, quantos conjuntos mínimos de consultas existem que lhe permitam determinar os valores armazenados em cada nó da árvore? (Dois conjuntos de consultas são considerados diferentes se e somente se existe um nó consultado em apenas um dos dois conjuntos.) Entrada\nA árvore tem N nós no total. Cada nó é identificado por um inteiro entre 1 e N, onde o nó 1 é a raiz.\nA entrada consiste de duas linhas. A primeira linha contém apenas o inteiro N.\nA segunda linha contém N −1 inteiros P1,P2,...,PN−1, separados por um espaço, onde Pi é o pai do nó i + 1, para i = 1,2,...,N − 1.\n2 ≤ N ≤ 105.\n1 ≤ Pi ≤ N, para i = 1,2,...,N − 1.\nSaída\nA saída consiste de uma única linha, que deve conter o número de soluções mínimas diferentes para o problema enfrentado por Beto. Como esse número pode ser muito grande, sua resposta deverá ser calculada módulo 1000000007 (109 + 7).",
    "samplesExamples": [
      [
        "3\n1 1",
        "3"
      ],
      [
        "4\n1 2 3",
        "4"
      ],
      [
        "5\n1 2 2 2",
        "7"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Hangar do SBC",
    "text": "Um pequeno avião de carga do Sistema Binário de Cargas (SBC) foi projetado para transportar produtos especiais e secretos. Esses produtos são agrupados em caixas com diversos pesos.\nO avião tem uma faixa de peso de segurança, dentro da qual a aeronave fica estável. Mais especifi camente, existe um intervalo tal que se o peso total das caixas transportadas ficar fora desse intervalo então não será possível garantir a estabilidade do voo.\nSabe-se que todas as caixas têm pesos distintos. Além disso, dadas duas caixas, a mais pesada pesa pelo menos o dobro da caixa mais leve.\nSua tarefa é determinar de quantas formas se pode escolher um número especificado de caixas para se transportar no avião sem desestabilizá-lo.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e K, que representam o número de caixas disponíveis e o número de caixas que devem ser embarcadas no avião, respectivamente.\nA segunda linha da entrada contém N inteiros, separados por um espaço em branco, que repre sentam os pesos das caixas.\nA terceira linha da entrada contém dois inteiros, A e B, que especificam o intervalo de segurança dos pesos, que é o intervalo (fechado) [A,B].\nConsidere todos os pesos informados na mesma unidade.\n• 1 ≤ N ≤ 50.\n• 1 ≤ K ≤ 50.\n• o peso P de cada caixa está no intervalo 1 ≤ P ≤ 1018.\n• 1 ≤ A ≤ B ≤ 2 × 1018.\nSaída\nA saída consiste de uma única linha, que contém o número de diferentes escolhas de caixas na quantidade especificada, sem por em risco o voo.",
    "samplesExamples": [
      [
        "3 2\n10 1 3\n4 13",
        "3"
      ],
      [
        "4 3\n20 10 50 1\n21 81",
        "4"
      ],
      [
        "6 3\n14 70 3 1 6 31\n10 74",
        "11"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lavaspar",
    "text": "Caça Palavras é um passatempo bastante conhecido, embora esteja perdendo um pouco do seu prestígio nos últimos anos. O objetivo deste jogo é encontrar palavras em uma matriz, onde cada célula dessa matriz contém uma letra.\nBibika e seu irmão estavam jogando Caça Palavras, porém em pouco tempo perderam o interesse, visto que encontrar todas as palavras estava ficando relativamente fácil. Como Bibika queria que seu irmão saísse um pouco do computador, ela pesquisou na internet jogos do mesmo estilo e acabou encontrando o Caça Lavaspar.\nCaça Lavaspar é um jogo que segue a mesma ideia do famoso Caça Palavras. Porém, ao invés de simplesmente ter que encontrar uma palavra na matriz, o objetivo é encontrar um anagrama qualquer da palavra, fazendo assim com que o jogo fique mais difícil e interessante. O anagrama pode ser encontrado em uma linha, coluna ou diagonal.\nUm anagrama de uma palavra é formado pelo rearranjo das letras da palavra. Às vezes, o anagrama não tem sentido, mas isto não importa. balo, loba e aolb são exemplos de anagramas da palavra bola.\nBibika percebeu ser possível que uma mesma célula da matriz fizesse parte de anagramas de diferentes palavras e então ela passou a chamar essas células de células especiais.\nAgora ela gostaria de saber, dada uma configuração de uma matriz e uma coleção de palavras, quantas células especiais existem?   A imagem acima ilustra o primeiro exemplo, onde a coleção de palavras consiste de três palavras: bola, casa e boi. Os retângulos de cada cor representam anagramas de palavras diferentes da entrada. As 3 células especiais estão pintadas de amarelo.\nEntrada\nA primeira linha possui dois inteiros L e C, que correspondem ao número de linhas e de colunas da matriz, respectivamente.\nSeguem então L linhas, cada uma contendo uma palavra com C letras.\nApós isso, a próxima linha contém um inteiro, N, que representa a quantidade de palavras na coleção de palavras a seguir.\nE então, por fim, temos mais N linhas, onde cada uma delas contém uma palavra da coleção.\nTodos os caracteres utilizados, tanto na matriz quanto na coleção de palavras, são letras maiúsculas do alfabeto inglês.\nÉ garantido que nenhum par de palavras da coleção é um anagrama uma da outra.\n• 2 ≤ L, C ≤ 40.\n• 2 ≤ N ≤ 20.\n• O número P de letras de cada uma das N palavras está no intervalo 2 ≤ P ≤ min(15,max(L,C)).\nSaída\nA saída deve consistir de uma única linha que contém o número de células especiais.",
    "samplesExamples": [
      [
        "4 5\nXBOIC\nDKIRA\nALBOA\nBHGES\n3\nBOLA\nCASA\nBOI",
        "3"
      ],
      [
        "3 3\nAAB\nABA\nBAA\n2\nABA\nBBB",
        "3"
      ],
      [
        "2 4\nAAAA\nAAAA\n2\nAAA\nBBB",
        "0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Metralhadora",
    "text": "Fulanito foi jogar um arcade das antigas. No jogo, ele pode colocar uma metralhadora em qualquer lugar da sua base, que consiste de todos os pontos (x,y) com coordenadas inteiras e x < 0. Há N inimigos no campo de batalha. O i-ésimo inimigo (1 ≤ i ≤ N) está na posição (xi,yi) com xi > 0.\nTodas as posições são dadas de antemão.\nUma metralhadora posicionada em (xm,ym) cobre um ângulo de visão para a direita centrado na reta y = ym, cujos limites são dados pelas retas y = ym ± x− 2xm. Quando colocada, ela atinge todos os inimigos na região delimitada por esse ângulo, incluindo os localizados nas retas-limite.\nO sistema de pontuação usado por esse jogo é desnecessariamente complicado; muitos acreditam que tal sistema foi um grande erro dos desenvolvedores (que, em resposta, afirmam com convicção que “não é um bug, é um recurso!”). Especificamente, a pontuação obtida por um dado posicionamento da metralhadora é calculada executando os seguintes passos: • Liste os índices (i entre 1 e N) de todos os inimigos que a metralhadora atinge.\n• Ordene os índices em ordem crescente, e chame os valores ordenados de i0 < i1 < ··· < ik−1.\n• Compute a pontuação usando a fórmula (cid:16)(cid:80)k j=− 01 ij · 5782344j(cid:17) mod (109 + 7), onde a mod b denota o resto da divisão de a por b.\n• Nota: Uma metralhadora que não atinge inimigos recebe uma pontuação exatamente igual a 0.\nPara melhorar nesse jogo, Fulanito te faz Q perguntas: cada consulta pede o placar que seria obtido se posicionássemos a metralhadora numa certa posição (xm,ym). Para tornar o problema mais qd ues ea pfi oa dd eo mr, o ses rv ua slo ar de os sd pe ar( axm ca, ly cm ul) an rã xo msã eo ymda ad to rs avd éir se dta am s fe ón rt me. ulA aso xin mvé =s −di 1ss −o, (cid:0)(s pão +d aa )d mos ov dal (o 1r 0e 9s +a 7e )(cid:1)b e ym = (p + b) mod (109 + 7), onde p é a resposta da consulta anterior (p = 0 ao processar a primeira consulta).\nNOTA: É garantido que a soma do número de inimigos atingidos em todas as consultas é no máximo 106.\nEntrada\nA entrada consiste de várias linhas. A primeira linha da entrada contém dois inteiros N, Q (1 ≤ N,Q ≤ 105), o número de inimigos e o número de consultas.\nAs próximas N linhas da entrada contém dois inteiros cada: xi e yi (1 ≤ xi,yi ≤ 109), as coorde nadas da posição do i-ésimo inimigo.\nAs próximas Q linhas contém dois inteiros cada: Os valores a e b (0 ≤ a,b < 109+7) que especificam cada consulta, como explicado no enunciado.\nSaída\nPara cada consulta, imprima um único inteiro contendo a resposta para a consulta.",
    "samplesExamples": [
      [
        "7 2\n2 8\n5 7\n1 6\n4 5\n1 3\n2 2\n4 1\n2 3\n373785639 373785644",
        "626214369\n981053491"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Cordilheiras",
    "text": "Famosa pelas suas cadeias de montanhas, a Nlogónia atrai milhões de turistas todos os anos. O governo dispõe de um orçamento dedicado à manutenção contínua dos percursos pedestres espalhados por todo o país e a maioria deles está repleta de miradouros panorâmicos, acessíveis através de passadiços e escadas de madeira.\nAtualmente em viagem pela Nlogônia e com esperança de voltar para casa com muitas fotos de tirar o fôlego, Lola e seu marido querem visitar o maior número possível de mirantes. Eles planejam percorrer uma trilha diferente a cada dia e explorar seus mirantes. No entanto, para não ficarem exaustos no final do dia, se a passagem de um miradouro para outro necessitar de subir mais de X metros, basta encerrar o dia e regressar ao hotel para descansar um pouco. Felizmente, todas as trilhas para caminhadas na Nlogônia estão equipadas com teleféricos modernos, para que o casal possa começar a caminhar em qualquer ponto de vista que desejar.\nIniciada a caminhada o casal só se dirige ao pico da montanha.\nPara não perder um dia, Lola só quer caminhar por trilhas onde possa chegar a um número razoável de mirantes. Dadas as altitudes dos mirantes panorâmicos de um percurso pedestre, deve-se determinar o número máximo de mirantes que o casal pode visitar.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 1000) e X (0 ≤ X ≤ 8848), indicando respectivamente o número de mirantes panorâmicos na trilha e o número máximo de metros que Lola e seu marido estão dispostos a percorrer. subir de um ponto de vista para o outro. A segunda linha contém N inteiros A1,A2,...,AN (1 ≤ Ai ≤ 8848 para i = 1,2,...,N), onde Ai é a altitude (em metros) do i-ésimo ponto de vista . Os pontos de vista são dados na ordem em que aparecem na trilha e suas altitudes não são decrescentes, ou seja, Ai ≤ Ai+1 para i = 1,2,...,N − 1.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de mirantes panorâmicos que podem ser visitados sem subir mais de X metros de um mirante a outro, e considerando que a jornada pode ser iniciada em qualquer mirante.",
    "samplesExamples": [
      [
        "9 2\n3 14 15 92 653 5897 5897 5898 5900",
        "4"
      ],
      [
        "9 0\n3 14 15 92 653 5897 5897 5898 5900",
        "2"
      ],
      [
        "9 8848\n3 14 15 92 653 5897 5897 5898 5900",
        "9"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Banco de Dados de Clientes",
    "text": "Hoje em dia existem bilhões de usuários de e-mail. Um fato pouco conhecido é que alguns provedores de e-mail oferecem muito mais do que o endereço de e-mail usual username@provider.com.\nAlguns provedores simplesmente ignoram os pontos nos nomes de usuário. Assim, se John possuir o nome de usuário johnsmith, ele poderá informar às pessoas que seu endereço de e-mail é johnsmith@provider.com, john.smith@provider.com ou john.smith@provider.com, entre outros. Os e-mails enviados para qualquer um desses endereços acabariam em sua caixa de correio.\nOutros provedores permitem anexar o caractere “+” seguido por qualquer combinação de letras e/ou dígitos após o nome de usuário. Com esse recurso, ao registrar o nome de usuário johnsmith, John também poderia usar johnsmith+friends@provider.com e johnsmith+2x3is6@provider.com.\nÀs vezes, os dois recursos estão disponíveis ao mesmo tempo e, nesses casos, john.smith+icpc@provider.com e john.smith+wants.2.eat.lemon.3.14@provider.com são endereços válidos que John poderia usar.\nIsto é bastante útil para os usuários, que podem gerenciar diferentes endereços para ajudar a organizar suas caixas de correio e filtrar facilmente as newsletters eventualmente enviadas após o registro em um novo site. Infelizmente, isso também abre espaço para abusos. Alguns sites dependem do fato de que cada endereço de e-mail identifica um único usuário. No entanto, um usuário mal-comportado pode facilmente criar várias contas aproveitando os vários endereços permitidos pelo provedor de e-mail.\nDepois de saber de tudo isso, seu chefe ficou muito preocupado. E se o número de usuários únicos informado aos acionistas não for preciso e, em vez disso, estiver inchado por contas duplicadas? Isso leva você à tarefa em questão: dada a lista de todos os endereços de e-mail do banco de dados de usuários da empresa, você deve determinar o número real de usuários únicos, assumindo que todos os provedores de e-mail tenham ambos os recursos descritos disponíveis.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000) representando o número de endereços de e-mail no banco de dados. Cada uma das próximas N linhas contém uma sequência de no máximo 100 caracteres representando um endereço de e-mail no banco de dados. Cada endereço de e-mail tem o formato localpart@provider onde localpart é uma lista não vazia de rótulos com um “.” (ponto) ou um “+” (sinal de mais) entre cada par de rótulos consecutivos, e provedor é uma lista não vazia de rótulos sempre com um “.” (ponto) entre cada par de rótulos consecutivos. Um rótulo é uma sequência não vazia de letras minúsculas e/ou dígitos. O caracter “+” (sinal de mais) aparece no máximo uma vez em cada endereço de e-mail.\nSaída\nProduza uma única linha com um número inteiro indicando o número de usuários únicos no banco de dados.",
    "samplesExamples": [
      [
        "2\ntwo.different.providers@now.here\ntwo.different.providers@nowhere",
        "2"
      ],
      [
        "2\n1.2.3@testing\ntesting@1.2.3",
        "2"
      ],
      [
        "7\nalice@e.mail\neve@another.mail\nbob@e.mail\njoe90@e.mail\nb.o.b@e.mail\nbob+new@e.mail\nbob@another.provider",
        "5"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Construindo um Campo",
    "text": "John é uma pessoa meticulosa. Na sua fazenda ele construiu um campo circular com algumas árvores plantadas bem na circunferência do campo. A Figura (a) abaixo mostra o campo com as árvores.\nAgora John quer usar uma corda longa e quatro árvores do campo para demarcar um retângulo usando as árvores como vértices e a corda como arestas. A figura (b) abaixo mostra dois retângulos que podem ser demarcados utilizando as árvores do talhão da figura (a).\nDada a descrição das posições das árvores no campo circular de John, você deve determinar se é possível demarcar um retângulo usando quatro das árvores como vértices e a corda como arestas.\nEntrada\nA primeira linha contém um inteiro N (4 ≤ N ≤ 105) indicando o número de árvores no talhão.\nAs árvores são representadas como pontos em uma circunferência. A segunda linha contém N inteiros L1,L2,...,LN (1 ≤ Li ≤ 106 para i = 1,2,...,N) indicando os comprimentos de arco entre cada par de árvores consecutivas. Os arcos são dados em sentido anti-horário. O comprimento total da circunferência não excede 109.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se for possível demarcar um retângulo usando as árvores fornecidas, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "8\n3 3 4 2 6 2 2 2",
        "Y"
      ],
      [
        "4\n14 16 15 15",
        "N"
      ],
      [
        "6\n3 7 7 3 10 10",
        "Y"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Dividindo Doces",
    "text": "Bob e Charlie são dois irmãos que gostam muito de potências de 2. A mãe deles decidiu dar-lhes N caixas de doces, cada uma contendo um número de barras de chocolate que é uma potência de 2.\nEles querem dividir as caixas entre eles, ou seja, para cada caixa, eles vão decidir quem fica com ela. Cada caixa deverá ser entregue a exatamente um irmão.\nAgora eles se perguntam: será possível que, para cada um dos dois irmãos, a quantidade total de barras de chocolate que ele recebe também seja uma potência de 2? Por exemplo, se N = 4 e as caixas contiverem 4, 4, 32 e 8 barras de chocolate, a resposta seria sim, pois uma solução possível é dar a terceira caixa para Bob (32 barras de chocolate), e as caixas restantes para Charlie (4 + 4 + 8 = 16 barras de chocolate no total).\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105), o número de caixas que os irmãos desejam dividir.\nA segunda linha contém N inteiros A1,A2,...,AN (0 ≤ Ai ≤ 105 para i = 1,2,...,N), indicando que a i-ésima caixa possui 2Ai barras de chocolate.\nSaída\nProduza uma única linha com a letra “Y” maiúscula se for possível dividir as caixas de forma que a quantidade total de doces recebidos por cada irmão seja uma potência de 2, e a letra “N” maiúscula caso contrário.",
    "samplesExamples": [
      [
        "4\n2 2 5 3",
        "Y"
      ],
      [
        "1\n42",
        "N"
      ],
      [
        "5\n3 1 4 1 5",
        "N"
      ],
      [
        "7\n0 0 1 2 3 4 5",
        "Y"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Jogo de caça-níqueis",
    "text": "Alice e Bob estão jogando o seguinte jogo. Inicialmente, cada um deles recebe N cartas, cada carta com um número inteiro escolhido aleatoriamente e uniformemente no intervalo [1,1018] escrito nela. Existem também N slots, numerados de 1 a N.\nAlice começa colocando suas cartas nos slots, de forma que exatamente uma carta seja colocada em cada slot. Ela pode escolher qualquer um dos N! opções de colocação que ela deseja. Depois disso, Bob olha os números colocados por Alice em cada slot e faz o mesmo com suas cartas. O jogo então termina, e para cada slot i a pessoa que colocou o maior número ganha i pontos (i = 1,2,...,N). Se ambos os números colocados forem iguais, os jogadores partilham os pontos desta slot, ou seja, cada jogador recebe i/2 pontos.\nComo exemplo de jogo, suponha que N = 3, Alice receba cartas com os números 10, 20 e 40, e Bob receba cartas com os números 10, 30 e 50. Alice pode escolher colocar os números 40, 20 e 10 nos slots. 1, 2 e 3 respectivamente. Depois de ver seus movimentos, Bob pode escolher colocar os números 30, 50 e 10 nos slots 1, 2 e 3, respectivamente. Nesse caso, Alice ganha 1 ponto para o slot 1, 0 pontos para o slot 2 e 3/2 = 1,5 pontos para o slot 3. Sua pontuação total é de 2,5 pontos.\nO objetivo do exemplo acima é ilustrar as regras do jogo. Alice e Bob não podem colocar suas cartas conforme descrito, porque ambos jogam de maneira ideal. Você pode se perguntar o que isso significa.\nPor sua vez, Bob tem informações completas sobre as cartas e decisões de Alice e, claro, conhece suas cartas. Ele joga de forma a maximizar sua pontuação total.\nPor outro lado, Alice não conhece as cartas de Bob quando chega a sua vez. Ela conhece a estratégia de Bob e sabe que suas cartas foram escolhidas de maneira aleatória e uniforme. Assim, ela joga para maximizar o valor esperado da sua pontuação total.\nDado N, você deve calcular o valor esperado da pontuação total de Alice no final do jogo, se os jogadores jogarem de forma otimizada conforme descrito.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro N (1 ≤ N ≤ 100), o número de slots do jogo.\nSaída\nProduza uma única linha com um número indicando o valor esperado da pontuação total de Alice no final do jogo, se os jogadores jogarem de forma otimizada conforme descrito. O resultado deve ser apresentado como um número racional com exatamente seis dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "1",
        "0.500000"
      ],
      [
        "2",
        "1.333333"
      ],
      [
        "99",
        "589.631287"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Registrador de teclas",
    "text": "Ultimamente você tem ficado muito curioso sobre sua velocidade de digitação e se perguntando quanto tempo leva para pressionar cada tecla do teclado, que possui teclas K.\nPara descobrir isso, você instalou um keylogger em seu próprio computador. Ele vem registrando o tempo delta entre cada par de pressionamentos de tecla. Depois de coletar dados por algumas semanas, você agora tem acesso a uma matriz bidimensional T com K linhas e K colunas. O elemento na i-ésima linha e j-ésima coluna é Ti,j, e representa quanto tempo leva, em média, para você pressionar a tecla j logo após ter pressionado a tecla i. Por exemplo, o elemento T3,5 representa quanto tempo leva, em média, para você pressionar a tecla 5 logo após ter pressionado a tecla 3. Coincidentemente, cada linha de T é ordenada de forma não decrescente.\nDado que a velocidade de digitação varia de acordo com a hora do dia e o seu humor, o seu keylogger também apresentou um erro de margem de latência L. Isso significa que, para cada par de teclas i e j do teclado, na verdade leva entre Ti ,j −L e Ti,j +L, inclusive, para você pressionar a tecla j logo após ter pressionado a tecla i.\nVocê se classificou para a competição regional do ICPC da América do Sul e foi solicitado que você atualizasse algumas de suas informações de contato no site do ICPC. O problema é que você tem estudado tanto que esqueceu sua senha. Tudo que você lembra é que sua senha tem comprimento N.\nFelizmente, seu keylogger também contém dados sobre a última vez que você digitou sua senha naquele site.\nEntão agora você tem um array P com N − 1 elementos. Cada elemento Pi representa o tempo delta entre cada pressionamento consecutivo de tecla de sua senha. Em outras palavras, P1 representa o tempo delta entre você pressionar as teclas do primeiro e do segundo caracteres da sua senha, P2 é o tempo delta entre você pressionar as teclas do segundo e terceiro caracteres da sua senha e assim por diante. Observe que a latência L não se aplica a P, porque cada Pi não é uma média, mas um único tempo delta, medido com precisão.\nVocê precisa recuperar sua senha o mais rápido possível. Seu plano agora é tentar todas as sequências de chaves que sejam compatíveis com as informações que você possui. Uma sequência S de comprimento N é compatível com L H, owT, ma e nd yP sui cf hea sc eh qup ea ni creo sfa a ro en ts he ec ru et ?ive chaves Si e Si+1 satisfazem que TSi,Si+ 1 − L ≤ Pi ≤ TSi,Si+1 + L.\nEntrada\nA primeira linha contém dois inteiros K (1 ≤ K ≤ 750) e L (0 ≤ L ≤ 109), indicando respectivamente quantas teclas existem no seu teclado e o erro da margem de latência dada pelo seu keylogger. As próximas K linhas contêm K inteiros cada, representando a matriz T. O j-ésimo inteiro na i-ésima linha é Ti,j (1 ≤ Ti,j ≤ 109 para i = 1,2,...,K e j = 1,2,...,K). Lembre-se de que Ti,j indica quanto tempo leva, em média, para você pressionar a tecla j logo após ter pressionado a tecla i, e que cada linha em T é ordenada de forma não decrescente (Ti,j ≤ Ti,j+1 para i = 1,2,...,K e j = 1,2,...,K − 1). A próxima linha contém um inteiro N (2 ≤ N ≤ 104), representando o comprimento da sua senha. A linha final contém N −1 inteiros P1,P2,...,PN−1 (1 ≤ Pi ≤ 109 para i = 1,2,...,N − 1), denotando o tempo delta entre cada pressionamento consecutivo de tecla da sua senha.\nSaída\nProduza uma única linha com um número inteiro indicando quantas sequências diferentes de chaves são compatíveis com as informações que você possui. Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "4 0\n1 1 3 5\n2 4 4 10\n1 1 1 8\n5 6 7 8\n5\n2 3 8 5",
        "1"
      ],
      [
        "3 3\n9 10 15\n9 13 16\n3 5 6\n3\n10 5",
        "0"
      ],
      [
        "5 1\n1 5 6 8 10\n1 2 4 5 5\n5 5 5 6 8\n3 3 3 4 5\n1 1 3 4 5\n4\n1 3 7",
        "4"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Cristhian Bonilha, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Donuts não inteiros",
    "text": "Neil é um advogado muito importante, com uma conta bancária muito importante. Como Neil é um advogado de sucesso com muitos clientes, ele deposita dinheiro em sua conta todas as manhãs.\nDepois de ir ao banco e depositar o dinheiro, Neil vai trabalhar. E aí reside o grande ponto fraco de Neil: uma loja de donuts. Veja bem, Neil é um viciado em donuts em recuperação e, embora não coma um donut há anos, ele não consegue deixar de se perguntar quantos donuts de US$ 1,00 ele poderia comprar com o dinheiro de sua conta se tivesse uma recaída.\nTer $ 5,00 em sua conta significa 5 donuts que Neil poderia ter, mas e quanto a $ 4,50? Bem, isso é mais de 4 donuts com certeza, mas definitivamente menos de 5. Como alguém compraria uma quantidade não inteira de donuts? Esse conceito confunde Neil, então toda vez que o saldo de sua conta não é um número inteiro, ele para para refletir sobre a natureza dos donuts não inteiros e acaba se atrasando para o trabalho.\nAgora Neil já se atrasou muitas vezes e está começando a temer que perderá o emprego. Ele quer saber quantas vezes se atrasará para o trabalho durante os próximos N dias, dado o saldo inicial de sua conta e a quantidade de dinheiro que depositará a cada dia. Por favor, responda isso para ele, ou então Neil começará a ponderar novamente.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000), o número de dias em que Neil está interessado. Cada uma das próximas N + 1 linhas contém uma string que representa uma quantia em dinheiro. A primeira string é o saldo inicial da conta de Neil, enquanto as N strings seguintes são os valores que Neil depositará em sua conta nos diferentes dias. Cada string tem o formato $X.Y onde X é uma substring de comprimento 1 ou 2 indicando todo o dinheiro no valor $X.Y , enquanto Y é uma substring de comprimento exatamente 2 denotando os centavos no valor $X.Y . Tanto X quanto Y são compostos de dígitos, pelo menos um deles contém um dígito diferente de zero e X não possui zeros à esquerda.\nSaída\nProduza uma única linha com um número inteiro indicando quantas vezes Neil se atrasará para o trabalho durante os N dias seguintes.",
    "samplesExamples": [
      [
        "1\n$1.57\n$3.14",
        "1"
      ],
      [
        "4\n$1.00\n$0.01\n$0.99\n$10.00\n$98.76",
        "2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "N",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Partições fascinantes",
    "text": "Uma submatriz de uma matriz é uma parte contígua da matriz. Uma partição de uma matriz em submatrizes é uma coleção de submatrizes que cobrem toda a matriz sem sobreposições (cada elemento da matriz pertence a exatamente uma submatriz). Por exemplo, se A = [3,1,4,1,5] é uma matriz, [3,1,4] e [1,5] formam uma partição de A em submatrizes, enquanto [3,4,5] não é um subarranjo de A.\nDado um array inteiro e uma partição do array em submatrizes não vazias, definimos o custo de cada submatriz como seu elemento máximo, e o custo de toda a partição como a soma dos custos das submatrizes.\nComo exemplo, considere a matriz [3,5,7,1,2,4]. A partição formada pelas submatrizes [3,5], [7] e [1,2,4] custou 5 + 7 + 4 = 16, enquanto a partição formada pelas submatrizes [3], [5,7,1 ] e [2,4] custou 3 + 7 + 4 = 14. Ambas as partições são formadas por k = 3 subarrays, mas possuem custos diferentes.\nOutras partições podem ter custos diferentes.\nDado um array A de N inteiros, e um inteiro k tal que 1 ≤ k ≤ N, considere o conjunto P(A,k) contendo todas as partições de A em k submatrizes não vazias. Você pode calcular o custo mínimo sobre P(A,k)? Você também pode calcular o custo máximo? Para cada k possível? Ok, vá em frente então.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 8000), o número de elementos na matriz A. A segunda linha contém N inteiros A1,A2,...,AN (1 ≤ Ai ≤ 109 para i = 1, 2,...,N) representando a matriz.\nSaída\nProduza N linhas, de modo que a k-ésima linha contenha dois inteiros indicando respectivamente os custos mínimo e máximo sobre P(A,k).",
    "samplesExamples": [
      [
        "6\n3 5 7 1 2 4",
        "7 7\n10 12\n12 16\n14 19\n17 21\n22 22"
      ],
      [
        "4\n1 1 1 1",
        "1 1\n2 2\n3 3\n4 4"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Crise no casamento",
    "text": "Um famoso jogador de futebol acabou de se casar e está dando uma festa para os convidados do casamento. Os convidados ficam sentados em mesas ao redor de um lago circular no jardim da villa do jogador. Cada mesa acomoda exatamente o mesmo número de convidados, e mesas consecutivas ao redor do lago ficam a uma unidade de distância.\nNo momento do tradicional brinde do padrinho, uma crise eclodiu: embora o número total de taças de champanhe nas mesas dos convidados seja exatamente o número de convidados, as taças podem ter sido distribuídas de forma desigual pelas mesas, com algumas mesas tendo mais taças do que convidados e algumas outras mesas com menos copos que os convidados.\nUm único garçom está disponível para organizar a distribuição dos copos, coletando os excedentes das mesas e entregando-os nas mesas que necessitam de copos. O custo de cada copo é a distância que o garçom carrega o copo até entregá-lo na mesa. O custo total da operação é a soma dos custos de todos os óculos. O garçom pode começar em qualquer mesa, mas o jogador é supersticioso e só permitirá que o garçom ande estritamente no sentido horário ou anti-horário ao fixar a distribuição dos copos. Ou seja, uma vez que o garçom inicia em uma direção (sentido horário ou anti-horário) ele não pode mudar de direção.\nGanhe uma camisa autografada do jogador de futebol ajudando-o a calcular o menor custo total possível para consertar a distribuição dos óculos.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) indicando o número de mesas ao redor da lagoa circular. A segunda linha contém N inteiros G1,G2,...,GN (0 ≤ Gi ≤ 1000 para i = 1,2,...,N), representando o número de copos nas diferentes tabelas. Esses números são dados no sentido horário.\nÉ garantido que N divide (cid:80)N i=1 Gi.\nSaída\nProduza uma única linha com um número inteiro indicando o menor custo total possível para fixar a distribuição dos óculos.",
    "samplesExamples": [
      [
        "4\n14 10 6 10",
        "8"
      ],
      [
        "6\n24 122 0 37 49 242",
        "454"
      ],
      [
        "6\n0 0 0 0 60 0",
        "150"
      ],
      [
        "1\n0",
        "0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Belas montanhas",
    "text": "Uma submatriz de uma matriz é uma parte contígua da matriz. Uma partição de uma matriz em submatrizes é uma coleção de submatrizes que cobrem toda a matriz sem sobreposições (cada elemento da matriz pertence a exatamente uma submatriz). Por exemplo, se A = [3,1,4,1,5] é uma matriz, [3,1,4] e [1,5] formam uma partição de A em submatrizes, enquanto [3,4,5] não é um subarranjo de A.\nEssas são definições padrão que você pode ter lido em outro lugar. Então, o que há de novo aqui? Bem, seguem mais algumas definições.\nDado um array A de inteiros, um subarranjo [Ai,Ai+1,...,Aj] de A é chamado de montanha se existe um índice k tal que i < k < j, o subarranjo de Ai a Ak é não -decrescente, e a submatriz de Ak a Aj não é crescente. Em palavras simples, os valores do subarray “sobem” até o índice k e depois “descem”, lembrando uma montanha. Observe que uma submatriz com menos de três elementos não pode ser uma montanha.\nUma matriz de inteiros é chamada de bela cadeia de montanhas se puder ser dividida em montanhas, cada uma delas tendo o mesmo número de elementos, exceto a última montanha, que pode ter menos elementos.\nPor exemplo, [5,10,4,1,3,2] é uma bela cadeia de montanhas porque pode ser dividida em [5,10,4] e [1,3,2], sendo ambas montanhas que possuem o mesmo número de elementos. Outro exemplo é a matriz [5,10,4,4,10,20,30,20,2,3,1], que também é uma bela cadeia de montanhas porque pode ser particionada em [5,10,4,4 ], [10,20,30,20] e [2,3,1].\nDado um array de inteiros positivos, onde alguns valores podem estar faltando, determine se é possível completar o array com inteiros positivos de forma que se torne uma bela cadeia de montanhas.\nEntrada\nA primeira linha contém um inteiro N (3 ≤ N ≤ 105) indicando o número de elementos do array.\nA segunda linha contém N inteiros A1,A2,...,AN (Ai = −1 ou 1 ≤ Ai ≤ 109 para i = 1,2,...,N), onde Ai = −1 indica que o i- o elemento da matriz precisa ser determinado, e um valor positivo é o i-ésimo elemento real da matriz.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se for possível completar o array com números inteiros positivos de forma que se torne uma bela cadeia de montanhas, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "6\n5 10 4 1 3 2",
        "Y"
      ],
      [
        "11\n5 10 4 -1 10 20 30 20 2 3 -1",
        "Y"
      ],
      [
        "12\n1 3 2 5 -1 8 9 -1 7 -1 4 5",
        "N"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "André Amaral de Sousa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Quase origami",
    "text": "Você tem uma folha de papel retangular de altura 1 e deseja localizar qualquer ponto na altura H medida a partir da borda inferior da folha. Como você não conhece os teoremas de Haga, planeja repetir o passo seguinte. Suponha que você já localizou um ponto PL na altura L na borda esquerda da folha e um ponto PR na altura R na borda direita da folha. Em seguida, você desenha uma linha do canto inferior esquerdo da folha até PR e outra linha do canto inferior direito da folha até PL. Se o ponto de cruzamento estiver na altura H, então está tudo pronto. Caso contrário, você traça uma linha horizontal que passa pelo ponto de cruzamento e dá outro passo.\nComo exemplo, considere o caso H = 1/3. Durante a primeira etapa, a única possibilidade é escolher os cantos superiores da folha (ou seja, L = R = 1). Então você desenha as duas diagonais da folha, e o ponto de cruzamento fica na altura 1/2. Como H (cid:54)= 1/2, você desenha uma linha horizontal que passa pelo ponto de cruzamento. Esta linha fornece dois novos pontos com altura conhecida 1/2 nas bordas da folha, um na borda esquerda e outro na borda direita. Para o segundo passo você pode escolher entre usar os pontos originais conhecidos na altura 1 ou os pontos que você acabou de localizar na altura 1/2. Ou seja, você pode escolher L = 1 ou L = 1/2 e, claro, R = 1 ou R = 1/2. É fácil ver que se você escolher L = R = 1/2, então o ponto de cruzamento estaria na altura 1/4. Porém, se você escolher L = 1/2 e R = 1, então o ponto de cruzamento estaria na altura desejada H = 1/3. Por simetria, o mesmo ocorre se escolher L = 1 e R = 1/2.\nDada uma altura racional H, deve-se determinar uma sequência mais curta de alturas nas bordas da folha que permita localizar um ponto na altura H.\nComo mostra o exemplo acima, apenas um ponto na altura 1/2 pode ser localizado em uma única etapa e, portanto, uma possível sequência mais curta para H = 1/3 é S = (1,1,1/2,1). As duas primeiras alturas devem ser escolhidas durante a primeira etapa, e as duas alturas restantes devem ser escolhidas durante a segunda etapa.\nEntrada\nA entrada consiste em uma única linha que contém dois inteiros M e N (1 ≤ M < N ≤ 100) tais que H = M/N é uma fração irredutível.\nSaída\nProduza uma única linha com o caracter “*” (asterisco) se um ponto na altura H não puder ser localizado por meio do procedimento descrito. Caso contrário, produza uma sequência mais curta de alturas S1,S2,...,SK que permita localizar um ponto na altura H, se forem escolhidas na ordem em que aparecem na sequência. A altura Si deve ser escrita na i-ésima linha usando dois inteiros Ai e Bi tais que Si = Ai/Bi é uma fração irredutível (i = 1,2,...,K). É garantido que quando um ponto na altura H pode ser localizado, ele pode ser localizado de forma ideal escolhendo apenas alturas racionais.",
    "samplesExamples": [
      [
        "1 3",
        "1 1\n1 1\n1 2\n1 1"
      ],
      [
        "1 3",
        "1 1\n1 1\n1 1\n1 2"
      ],
      [
        "3 4",
        "*"
      ],
      [
        "1 4",
        "1 1\n1 1\n1 2\n1 2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Excelentes Vistas",
    "text": "Shiny City é uma cidade linda, famosa por três coisas: o fato de ter apenas uma rua, o fato de todos os edifícios terem alturas diferentes e as vistas deslumbrantes do topo dos referidos edifícios.\nDesde o início da pandemia, a quantidade de turistas que visitam Shiny City diminuiu significativamente.\nVocê está determinado a escrever um blog incrível para atrair mais turistas e impedir a destruição financeira de sua cidade adorável, mas terrivelmente ineficiente. Infelizmente, ainda faltam algumas informações no blog.\nNa Cidade Brilhante existem N edifícios, e o i-ésimo edifício é identificado pela sua posição i. Ir do edifício i para o edifício j leva |i−j| minutos. Cada prédio tem uma altura diferente Hi, e quanto mais alto o prédio, melhor será a vista do seu topo.\nSe você estiver em um determinado prédio, pode valer a pena ir para outro prédio que tenha uma visão melhor. Por causa dos custos de transporte, nunca vale a pena ir a um prédio se houver um mais alto que você possa alcançar sem gastar mais tempo.\nFormalmente, podemos dizer que vale a pena ir do edifício i para outro edifício j se não existir k tal que |i − k| ≤ |i − j| e Hj < Hk. Observe que k pode ser igual a i.\nVocê quer escrever em seu blog, para cada prédio, quantos outros prédios valem a pena ir a partir dele. Por favor, reúna essas informações, caso contrário, Shiny City estará condenada para sempre.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105), o número de edifícios na Cidade Brilhante. A segunda linha contém N inteiros diferentes H1,H2,...,HN (1 ≤ Hi ≤ 109 para i = 1,2,...,N), onde Hi é a altura do edifício i.\nSaída\nProduza uma única linha com N inteiros, de modo que o i-ésimo deles represente o número de edifícios que vale a pena visitar a partir do edifício i.",
    "samplesExamples": [
      [
        "10\n23 20 7 30 43 70 5 42 67 10",
        "3 4 3 2 1 0 1 2 1 2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Alocador de trabalhos",
    "text": "O Infrastructure Consortium for Public Compute (ICPC) é uma rede de computadores administrada por voluntários de todo o mundo que compartilham recursos computacionais entre si. Os colaboradores podem conectar e desconectar suas máquinas da rede e também executar trabalhos de computação nas máquinas da rede. Com o ICPC, projetos importantes que, de outra forma, teriam custos de infraestrutura proibitivos (como a criação de juízes on-line para competições de programação) tornam-se empreendimentos viáveis.\nPor melhor que pareça no papel, por enquanto, o ICPC é apenas um sonho. Para fazê-lo funcionar, falta um software fundamental: o alocador de tarefas. É aqui que você entra: a comunidade conta com você para dar essa contribuição importante (mas voluntária, é claro).\nA rede é extremamente dinâmica: máquinas se conectam e desconectam o tempo todo. O alocador de tarefas precisa acompanhar as máquinas que estão conectadas no momento e quais recursos elas compartilham. Existem vários tipos de recursos, como núcleos de CPU, GPUs e discos SSD. Uma máquina pode compartilhar um ou mais recursos, possivelmente mais de um do mesmo tipo. Além disso, a qualquer momento, os usuários podem solicitar que as máquinas executem trabalhos de computação. Para isso, eles especificam uma lista de recursos que uma máquina precisa para executar seu trabalho, e o alocador de trabalhos deve determinar quantas das máquinas atualmente conectadas possuem todos os recursos necessários para executar o trabalho. Por exemplo, para um trabalho que precisa de um núcleo de CPU e duas GPUs, o alocador precisaria contar quantas máquinas possuem pelo menos um núcleo de CPU e duas ou mais GPUs.\nSua tarefa é simplesmente contar quantas máquinas conectadas satisfazem os requisitos de recursos de cada trabalho, já que outro voluntário assumiu a tarefa de implementar a atribuição real de trabalhos às máquinas.\nToda a comunidade ICPC depende de você. Você pode ajudar? Entrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 105) e K (1 ≤ K ≤ 8), indicando respectivamente o número de eventos de rede que devem ser processados ​​e o número de tipos de recursos que estão disponíveis no ICPC. Os eventos são descritos em ordem cronológica nas próximas N linhas, um evento por linha. Existem três tipos de eventos.\nSe o evento representar que uma nova máquina está sendo conectada à rede, a linha contém a letra maiúscula “C”, seguida de um inteiro R (1 ≤ R ≤ 8) indicando a quantidade de recursos que a máquina está compartilhando, seguido de R inteiros T1,T2,...,TR (1 ≤ Ti ≤ K para i = 1,2,...,R), descrevendo o tipo de cada um dos recursos compartilhados. Novas máquinas recebem identificadores inteiros sequenciais exclusivos implicitamente atribuídos pelo ICPC, começando em 1.\nQuando o evento representa que uma máquina está sendo desconectada da rede, a linha contém a letra “D” maiúscula, seguida de um número inteiro indicando o identificador da máquina. É garantido que este identificador corresponde a uma máquina conectada válida.\nPor fim, se o evento representa que um usuário deseja executar um job, a linha contém a letra maiúscula “J”, seguida de um inteiro R (1 ≤ R ≤ 8) indicando a quantidade de recursos que o job necessita, seguido de R inteiros T1,T2,...,TR (1 ≤ Ti ≤ K para i = 1,2,...,R), descrevendo o tipo de cada um dos recursos necessários. É garantido que a entrada contenha pelo menos um evento deste tipo.\nSaída\nProduza uma linha para cada evento do tipo “J”. A linha deve conter um número inteiro indicando a quantidade de máquinas que no momento do evento estão conectadas à rede e disponibilizando todos os recursos solicitados. Escreva os resultados em ordem cronológica, ou seja, usando a mesma ordem da entrada.",
    "samplesExamples": [
      [
        "3 2\nC 3 1 1 2\nJ 2 1 2\nJ 2 2 2",
        "1\n0"
      ],
      [
        "11 3\nC 2 1 2\nJ 1 3\nC 3 1 2 3\nJ 1 3\nJ 1 1\nD 2\nJ 1 3\nJ 2 1 2\nJ 2 1 1\nD 1\nJ 1 2",
        "0\n1\n2\n0\n1\n0\n0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Parede impenetrável",
    "text": "O presidente da Happyland precisa ser reeleito. Ela fará isso concentrando seus últimos esforços em uma das coisas que a população de Happyland mais ama: as crianças. Ela sabe que é um grande problema que as crianças continuem a fugir do orfanato nacional, por isso decidiu reconstruir o muro à volta para que o orfanato fique mais seguro e a população fique mais feliz.\nA área em torno da qual o muro deve ser construído é composta pelo orfanato, pelo portão do orfanato e por um conjunto de torres de observação, remanescentes dos dias de glória de Happyland.\nO presidente da Happyland determinou, em reunião com especialistas do orfanato, que uma parede segura deve ser um polígono tal que: 1. A casa seja estritamente cercada pela parede.\n2. O portão é um vértice da muralha e todos os outros vértices são torres de observação.\n3. Todos os ângulos internos dos vértices da parede que são torres de observação são estritamente inferiores a 180 graus (observe que isto não se aplica ao vértice do portão).\n4. Toda a parede é visível da casa. Isto significa que para cada ponto da parede, o segmento entre a casa e esse ponto não passa através da parede.\nUma configuração possível do objeto como na amostra de entrada 1. O ponto H representa a casa, o ponto G é o portão e todos os outros pontos são torres de observação.\nAs paredes representadas acima violam uma ou mais regras, portanto não são paredes válidas.\nAgora o presidente quer a sua ajuda para saber quantas paredes seguras distintas podem ser construídas. Duas paredes são distintas se e somente se houver uma torre de observação que seja o vértice de uma parede, mas não da outra.\nAs paredes representadas acima são todas as paredes distintas válidas para a amostra de entrada 1.\nEntrada\nA primeira linha contém dois inteiros Xh e Yh, as coordenadas da casa. A próxima linha contém dois inteiros Xg e Yg, as coordenadas da porta. A próxima linha contém um inteiro N (0 ≤ N ≤ 300), o número de torres de observação. Cada uma das próximas N linhas contém dois inteiros Xt e Yt, as coordenadas de uma torre. Todas as coordenadas mencionadas (X,Y) são distintas e tais que −109 ≤ X,Y ≤ 109.\nSaída\nProduza uma única linha com um número inteiro indicando o número de paredes distintas que seguem as restrições. Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "0 0\n-2 -1\n5\n2 1\n0 -4\n-1 2\n-4 0\n0 -2",
        "6"
      ],
      [
        "2 2\n2 0\n3\n-1 2\n4 7\n2 -2",
        "1"
      ],
      [
        "100 100\n-200 -120\n0",
        "0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Lobo Parado",
    "text": "Senoof adora linguagens de programação, e a única coisa que ele adora mais do que usá-las é criar novas. Sua última invenção é a Wolf Programming Language, uma linguagem muito simples que consiste em apenas dois tipos de instruções. Eles são numerados consecutivamente e escritos um abaixo do outro para formar um programa. A execução começa na instrução 1 e continua até que o programa trave.\nOs dois tipos de instruções são: • “K L1 L2 ··· LK” é um salto finito. Cada valor Li é um número de instrução no programa, enquanto K indica quantos deles são especificados. Quando um salto finito é executado, um dos valores Li é escolhido e a execução continua com a instrução Li. Mas isso não é tudo! O programa altera a instrução de salto finito para consumir o valor escolhido. Se um programa executa um salto finito sem valores disponíveis, ele fica preso e para.\n• “* L” é um salto infinito. Quando executado, o programa continua com a instrução L, deixando a instrução de salto infinito inalterada.\nEu sei, Senoof é maluco, mas não é tão difícil. A imagem abaixo mostra um exemplo, onde a instrução atual é indicada com um sinal (cid:46) e um valor consumido é indicado com um sinal (cid:116). O programa em (a) inicia a execução na instrução 1, que é um salto finito. Suponha que o segundo valor seja escolhido, ou seja, a execução continua com a instrução 2 e esse valor é consumido na instrução 1, o que resulta na situação mostrada em (b). Como a instrução 2 é um salto infinito para a instrução 3, a execução continua com esta instrução, sem consumir nenhum valor da instrução 2. Agora imagine que da instrução 3 a execução salte para a instrução 4, depois para a instrução 1 e novamente para a instrução 1, consumindo os valores correspondentes. A situação neste ponto é mostrada em (c). Como você pode ver, o programa trava e para porque não há valores disponíveis para salto.\nDepois de algumas brincadeiras, Senoof percebeu que programas escritos em Wolf podem ser executados para sempre, o que não implica que uma determinada instrução possa ser executada infinitamente muitas vezes. Ele gentilmente nos enviou o seguinte exemplo de um programa que pode ser executado para sempre, embora a instrução 1 possa ser executada no máximo duas vezes.\nDado um programa escrito em Wolf, você deve determinar o número máximo de vezes que a instrução 1 pode ser executada.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 100), o número de instruções que o programa possui.\nCada uma das próximas N linhas descreve uma instrução. Um salto finito é representado com um inteiro não negativo K seguido por K inteiros L1,L2,...,LK (1 ≤ Li ≤ N para i = 1,2,...,K). Por outro lado, um salto infinito é descrito com o caracter “*” (asterisco) seguido de um inteiro L (1 ≤ L ≤ N).\nÉ garantido que a quantidade total de instruções mencionadas nos saltos finitos seja no máximo 104.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de vezes que a instrução 1 pode ser executada, ou o caracter “*” (asterisco) se a instrução 1 puder ser executada infinitamente.",
    "samplesExamples": [
      [
        "4\n2 1 2\n* 3\n3 4 3 4\n2 1 1",
        "3"
      ],
      [
        "4\n2 1 2\n* 4\n3 4 3 4\n* 2",
        "2"
      ],
      [
        "4\n2 2 3\n2 3 4\n1 1\n1 1",
        "3"
      ],
      [
        "3\n* 3\n* 1\n* 2",
        "*"
      ],
      [
        "1\n0",
        "1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Teodoro Freund, Argentina"
    },
    "hasImages": true
  },
  {
    "name": "Agenda de Lola",
    "text": "Lola é uma garota enérgica e com muitos interesses, fazendo de cada dia um oceano de possibilidades para ela, cheio de atividades emocionantes das quais ela está mais do que disposta a participar. Infelizmente, muitas das atividades das quais Lola participa acontecem em espaços fechados, e por isso seus níveis de vitamina D estão ligeiramente abaixo do ideal. Para ajudar, um médico prescreveu um suplemento vitamínico que ela deveria tomar diariamente a cada X minutos.\nLola escreveu um aplicativo para acompanhar suas atividades. A principal característica do app é o agendamento de atividades. Cada atividade consiste em um título e seus horários de início e término. O aplicativo também permite a criação de lembretes únicos, compostos simplesmente por um título e o momento em que ela deve receber uma única notificação, e lembretes recorrentes, compostos por um título, o horário da primeira notificação e a frequência com que o lembrete deve ser repetido. Após comprar o suplemento, Lola deseja adicionar um lembrete recorrente ao aplicativo, que se repete a cada X minutos, para garantir que ela será avisada sempre que chegar a hora de tomar o suplemento. O ideal é que ela prefira não ter que tomar o suplemento enquanto participa de alguma atividade.\nCom uma agenda tão ocupada, ela está tendo dificuldade em encontrar o momento ideal para começar a tomá-lo.\nSua tarefa é ajudar Lola a escolher o horário T ideal após a compra do suplemento para tomá-lo pela primeira vez. Um horário T é considerado ideal se já passaram no máximo 8 horas desde o momento em que Lola comprou o suplemento, o número de vezes que ela precisa tomar o suplemento que entra em conflito com suas atividades é mínimo e não há outro horário antes do que T que resultaria no mesmo número de conflitos.\nPara maior clareza, suponha que Lola precise tomar o suplemento a cada 30 minutos, comprou-o em um determinado dia às 10h e tem uma única atividade agendada das 18h às 18h30 naquele dia. Caso ela opte por tomar o suplemento pela primeira vez imediatamente, ela tomaria às 10h, 10h30, ..., 17h30, 18h, 18h30, .... Assim, ela' teria dois conflitos com sua atividade (um às 18h e outro às 18h30).\nEmbora Lola não possa esperar o término de sua atividade para tomar o suplemento pela primeira vez (por causa do limite de 8 horas), ela pode reduzir o número de conflitos esperando 7 horas e 59 minutos. Dessa forma ela tomaria o suplemento às 17h59, 18h29, 18h59, ..., com um único conflito às 18h29.\nMuito melhor, não é? Porém, isso não é o ideal, pois existe um horário anterior que também produz um único conflito, que é esperar 1 minuto e tomar o suplemento pela primeira vez às 10h01, com um único conflito às 18h01. Como não é possível evitar totalmente os conflitos, o momento ideal, neste caso, é tomar o suplemento pela primeira vez 1 minuto após a compra.\nVocê receberá uma lista de atividades, exportada do aplicativo que Lola escreveu, contendo informações sobre todas as suas atividades a partir do momento em que ela comprou o suplemento. Lola já fez um pré-processamento dos dados e cada atividade é descrita pelo número de minutos desde o momento em que comprou o suplemento e sua duração em minutos.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 104) e X (1 ≤ X ≤ 720), indicando que Lola tem N atividades futuras exportadas de seu aplicativo e que ela deve tomar o suplemento a cada X minutos. Cada uma das N linhas seguintes descreve uma atividade com dois inteiros S e D (1 ≤ S,D ≤ 105), representando que a atividade começa S minutos após a compra do suplemento e que sua duração é de D minutos. As atividades não se sobrepõem, ou seja, dado qualquer par de atividades diferentes, uma delas termina estritamente antes do início da outra, ou vice-versa.\nSaída\nProduza uma única linha com dois inteiros T e C, indicando respectivamente o momento ideal para tomar o suplemento pela primeira vez, expresso em minutos desde a compra do suplemento, e o número de conflitos que a ingestão do suplemento neste momento irá gerar.",
    "samplesExamples": [
      [
        "1 30\n480 30",
        "1 1"
      ],
      [
        "5 30\n195 30\n120 45\n240 30\n30 60\n300 180",
        "451 1"
      ],
      [
        "4 720\n60 30\n150 75\n750 60\n1500 60",
        "0 0"
      ],
      [
        "2 720\n1 479\n482 298",
        "0 1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Posso adicionar uma carta?",
    "text": "Você tem uma string S de comprimento N e é solicitado que você execute uma sequência de atualizações Q de dois tipos em S: • Anexar um determinado caractere ao final de S.\n• Exclua o último caractere de S.\nInicialmente e após cada atualização, você deve calcular o número de strings distintas que ocorrem pelo menos duas vezes como substrings de S.\nPor exemplo, se S for inicialmente “ABABC”, a resposta será 3, já que “A”, “B” e “AB” ocorrem duas vezes como substrings de S. Se for solicitado que você acrescente o caractere “C”, S se tornará “ABABCC” e a resposta será 4, pois agora “C” também ocorre duas vezes. Se for solicitado que você acrescente “C” novamente, S será “ABABCCC” e a resposta será 5, já que “CC” ocorre duas vezes agora. Se você receber uma operação de exclusão agora, S se tornará “ABABCC” e a resposta será 4 novamente.\nEntrada\nA primeira linha contém uma string S de comprimento N (1 ≤ N ≤ 105), indicando o valor inicial da string. Cada caractere de S é uma letra maiúscula. A segunda linha contém uma string U de comprimento Q (1 ≤ Q ≤ 105), representando as atualizações a serem realizadas. Cada caractere de U é uma letra maiúscula indicando que tal letra deve ser anexada ou o caractere “-” (hífen) denotando uma operação de exclusão. As atualizações devem ser aplicadas na ordem em que aparecem em U. É garantido que as operações de exclusão não sejam aplicadas a strings vazias.\nSaída\nProduza Q+1 linhas, cada linha com um número inteiro indicando o número de strings distintas que ocorrem pelo menos duas vezes como substrings de S. A linha 1 refere-se ao valor inicial de S, enquanto a linha i + 1 refere-se ao valor de S após a aplicação o primeiro i atualiza (i = 1,2,...,Q).",
    "samplesExamples": [
      [
        "ABABC\nCC-",
        "3\n4\n5\n4"
      ],
      [
        "ABAB\nA--CC",
        "3\n5\n3\n1\n1\n2"
      ],
      [
        "HAVE\nFUN",
        "0\n0\n0\n0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Desvio",
    "text": "Na cidade de Nlogonia, o prefeito finalmente vai cumprir sua promessa de campanha e irá repavimentar alguns trechos de ruas. Contudo, enquanto um trecho estiver sendo repavimentado, os carros não poderão usá-lo e portanto um desvio deve ser utilizado.\nCada trecho de rua conecta duas esquinas na cidade, tem comprimento positivo e pode ser percor rido em ambas as direções.\nUm desvio é um caminho alternativo que pode servir como um substituto temporário para o trecho de rua em obras. Mais especificamente, se o trecho que conecta as esquinas U e V estiver interditado, o desvio deve ser uma sequência de trechos de ruas que começa em U, termina em V , e não usa o trecho que conecta U diretamente com V . O objetivo é encontrar o desvio mais curto para cada trecho, de forma a minimizar o impacto enquanto as obras estiverem sendo feitas.\nComo Integrante do Centro de Pavimentação e Carros, você deve ajudar o prefeito a calcular qual é o comprimento do desvio mais curto, para cada trecho.\nEntrada\nA primeira linha contém dois inteiros, N e M (1 ≤ N ≤ 300), que representam, respectivamente, o número de esquinas e o número de trechos de ruas. Cada uma das M linhas seguintes contém três inteiros: U, V , e L (1 ≤ U ≤ N, 1 ≤ V ≤ N, U ̸= V , 1 ≤ L ≤ 106), que representam um trecho de mão dupla de comprimento L que liga as esquinas U e V . Nenhum trecho de rua é representado mais de uma vez.\nSaída\nImprima M linhas, onde cada linha contém um inteiro. O i-ésimo inteiro deve ser o comprimento do desvio mais curto para o i-ésimo trecho, ou -1 se não for possível fazer um desvio. A ordem dos trechos na saída deve ser a mesma ordem fornecida na entrada.",
    "samplesExamples": [
      [
        "4 5\n1 2 4\n1 3 8\n2 3 4\n4 1 2\n3 4 3",
        "9\n5\n9\n11\n10"
      ],
      [
        "2 1\n1 2 1",
        "-1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Grande Tratado da Bytelândia",
    "text": "A Grande Guerra da Bytelândia chegou ao fim. Os reinos restantes agora estão discutindo o Tratado de Divisão, que dividirá todas as terras do mundo entre eles. Este tratado se refere não apenas ao mundo conhecido, mas também a quaisquer territórios ainda não descobertos ou habitados, incluindo terra ou mar. Podemos assumir que o mundo é um plano infinito.\nCada reino no continente da Bytelândia tem uma única capital, e o Tratado de Divisão será baseado em suas localizações: ele declara que cada pedaço de terra pertence ao reino cuja capital é a mais próxima em um voo de pássaro (ou em linha reta). Em outras palavras: onde quer que você esteja no mundo, se C é a capital mais próxima de você, você estará no território do reino de C. Se houver um empate entre as distâncias de duas ou mais capitais, esse lugar estará na fronteira entre seus reinos.\nSob este tratado, alguns reinos podem ficar cercados por outros, enquanto outros reinos podem ficar com território ilimitado. Por isso, alguns monarcas estão contestando o tratado. Para informar essa discussão, eles exigem sua ajuda. Dadas as coordenadas das localizações de cada capital no continente da Bytelândia, você deve descobrir quais reinos teriam territórios infinitos sob o Tratado de Divisão.\nEntrada\nA primeira linha da entrada contém um único inteiro N (2 ≤ N ≤ 105), o número de reinos.\nCada reino é identificado por um número inteiro único entre 1 e N. Cada uma das N linhas seguintes contém dois inteiros X e Y (0 ≤ X,Y ≤ 104), as coordenadas 2D da localização da capital de um reino. As capitais são dadas em ordem crescente de identificador do reino, não há duas capitais com a mesma localização, e você pode assumir que toda capital tem tamanho insignificante.\nSaída\nImprima uma única linha com uma lista de inteiros separados por espaço em ordem crescente: os identificadores dos reinos que teriam territórios infinitos sob o Tratado de Divisão descrito. É garantido que sempre haverá pelo menos um reino assim.",
    "samplesExamples": [
      [
        "4\n3 2\n1 5\n3 6\n3 5",
        "1 2 3 4"
      ],
      [
        "6\n2 1\n3 3\n1 4\n4 5\n6 3\n4 3",
        "1 3 4 5"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "k pra Mais, k pra Menos",
    "text": "A vida daquele que estuda ciência da computação nem sempre é tão fácil quanto parece. Alguns dias você pode estar implementando um algoritmo revolucionário, mas em outros você acaba relendo o mesmo livro pela décima vez. Mas a todo momento estamos buscando a mesma coisa: otimizar e automatizar tarefas. Neste caso, um professor está precisando da sua ajuda para orientar seus alunos para a próxima prova. Na opinião do professor, não é fácil decidir quanto tempo eles devem passar estudando tópicos téoricos e quanto tempo eles devem passar implementando algoritmos.\nEssa não é a primeira vez que o professor leciona essa matéria, então a quantidade de dados disponíveis é tão grande que ele foi capaz de criar dois polinômios para descrever o desempenho final de cada aluno. Se o aluno gastar x unidades do seu tempo estudando teoria, sua nota aumentará em t(x). Se o aluno gastar x unidades do seu tempo implementando algoritmos, sua nota aumentará em p(x). De tal modo que o aluno que gastar a mesma quantidade x de tempo em cada uma das áreas terá a nota total t(x) + p(x).\nAcontece que recentemente um dos estudantes vem se destacando de forma imprevisível. E ele não esconde sua técnica de ninguém: “eu estudo muito mais teoria do que prática!”. O professor em questão acha que isso é uma grande mentira e, para confirmar sua suspeita, ele decidiu estimar as notas dos alunos se eles sempre estudassem mais teoria do que prática (ou mais prática do que teoria).\nVocê pode computar o polinômio q(x) = t(x + K) + p(x − K)? Ele será capaz de descrever a nota de todos os alunos se eles mudarem sua estratégia de estudo.\nEntrada\nA entrada consiste em três linhas. Na primeira, estão dois inteiros: N, representando o grau dos polinômios t e p (1 ≤ N ≤ 105) e K (−105 ≤ K ≤ 105). Já a segunda linha contém os N + 1 coeficientes de t e a terceira linha contém os N + 1 coeficientes de p. Os coeficientes são dados em ordem crescente de grau, com o último coeficiente da linha correspondendo ao termo de grau N, sendo todos não negativos de valor no máximo 106.\nSaída\nSeu programa deve escrever N + 1 inteiros, os coeficientes do polinômio q(x) em ordem crescente de grau, módulo 998244353.",
    "samplesExamples": [
      [
        "1 2\n1 2\n0 1",
        "3 3"
      ],
      [
        "2 0\n1 2 3\n4 5 6",
        "5 7 9"
      ],
      [
        "2 -1\n3 3 3\n1 0 0",
        "4 998244350 3"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Férias Cansativas",
    "text": "William está planejando suas próximas férias. Um tema recorrente em todas as suas férias é a neces sidade de lidar com o cansaço. Alguns dias ele nem aproveita muito, pois depois de várias atividades o cansaço começa a ser maior do que ele consegue suportar.\nDesta vez, William teve uma ideia. Ele vai estimar o impacto de cada uma das atividades de turismo em sua disposição. Ele notou que algumas das atividades de férias, como esportes e caminhadas, são cansativas, consumindo sua disposição, enquanto outras atividades, como peças de teatro e musicais, são revigorantes, recuperando sua disposição.\nMais precisamente, William começa com D unidades de disposição e separa suas atividades em dois grupos: C atividades cansativas e R atividades revigorantes. Cada atividade cansativa requer uma certa quantidade de disposição e, portanto, consome tal quantidade, quando realizada. Cada atividade revigorante lhe fornece uma certa quantidade de disposição, quando realizada. Além disso, ele ordena as atividades de cada um dos grupos segundo suas preferências, pois há atividades que ele está mais ansioso para realizar. Note que atividades dos dois conjuntos podem ser intercaladas, mas William nunca fará uma atividade de um grupo sem ter feito todas as anteriores, pois isto violaria suas preferências.\nAo longo de suas férias, ao decidir qual atividade realizar em seguida, ele escolherá a primeira atividade cansativa ainda não realizada, se tiver disposição suficiente para fazê-la. Caso contrário, ele realizará a próxima atividade revigorante ainda não realizada, se ainda houver, recuperando uma certa quantidade de disposição. Naturalmente, caso não haja mais atividades cansativas remanescentes em algum momento, ele poderá simplesmente realizar todas as atividades revigorantes restantes.\nAgora, tendo em vista este processo, ele pediu sua ajuda para determinar quantas atividades (incluindo cansativas e revigorantes) ele conseguirá realizar.\nEntrada\nA primeira linha da entrada contém 3 inteiros, D, C e R, indicando respectivamente a quantidade de disposição inicial, o número de atividades cansativas e o número de atividades revigorantes (1 ≤ D ≤ 105, 1 ≤ C ≤ 104 e 1 ≤ R ≤ 104). Cada uma das C linhas seguintes contém um inteiro Ci (1 ≤ Ci ≤ 105 para 1 ≤ i ≤ C), indicando o consumo de disposição para uma atividade cansativa, em ordem de preferência. Finalmente, cada uma das R linhas seguintes contém um inteiro Ri (1 ≤ Ri ≤ 105 para 1 ≤ i ≤ R), indicando o retorno de disposição para uma atividade revigorante, em ordem de preferência.\nSaída\nImprima uma única linha contendo um único inteiro, o número total de atividades (incluindo cansativas e revigorantes) que William conseguirá realizar.",
    "samplesExamples": [
      [
        "40 3 3\n30\n20\n10\n5\n5\n5",
        "5"
      ],
      [
        "40 2 2\n60\n80\n5\n10",
        "2"
      ],
      [
        "100 3 1\n60\n60\n50\n10",
        "2"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Caminhada na Montanha",
    "text": "Finalmente acabaram as provas e é chegada a hora de dar uma pausa na trabalheira da faculdade para umas merecidas férias. Com suas malas arrumadas, você partiu em uma aventura para explorar uma belíssima montanha da sua região – um passeio que você tem sonhado fazer há anos e que finalmente se torna realidade.\nAlém de bela, a majestosa montanha é gigantesca e oferece diversas trilhas a seus visitantes.\nContando com N marcos, cada um unicamente identificado por um número entre 1 e N a montanha possui N − 1 caminhos entre os marcos. Essas passagens garantem uma travessia tranquila de um marco a outro, de tal forma que toda a montanha está conectada.\nA cada marco i está associado um valor vi; esse número reflete o número de curtidas que uma foto tirada nele terá na sua rede social favorita. Quase explodindo de entusiasmo, você decidiu adicionar uma nova camada à sua jornada por meio do “desafio do hype”, permitindo que seus seguidores vivenciem sua aventura na mesma ordem que você. Nesse desafio, seu objetivo é, no mínimo, incrível: tirar e postar fotos de tal maneira que cada nova foto postada terá mais curtidas que a anterior.\nAs regras do desafio essencialmente ditam o desenrolar da sua jornada da seguinte maneira: 1. Sua trilha começa no marco de índice 1.\n2. Seguindo apenas os caminhos já disponíveis entre os marcos, você se move apenas em frente, não podendo passar por um marco mais de uma vez.\n3. A cada marco visitado, você pode tirar uma foto e imediatamente postar em sua rede social, ou não tirar nenhuma foto.\nSendo uma pessoa muito sábia, você já reparou que há muitas possíveis rotas e resultados para o desafio. Especificamente, para cada marco i, você gostaria de determinar o maior número de fotos que podem ser postadas se você iniciar sua jornada no marco 1 e encerrar no marco i (sem necessariamente tirar uma foto no marco i). Lembre-se, uma foto só pode ser postada se ela tiver mais curtidas que a foto anterior! Entrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 105), que representa o número de marcos na montanha. A segunda linha contém N − 1 inteiros p2,p3,...,pN (1 ≤ pi ≤ N), onde pi indica que existe um caminho entre os marcos i e pi. A terceira linha contém N inteiros v1,v2,...,vN (1 ≤ vi ≤ 109), onde vi representa o número de curtidas da foto do i-ésimo marco.\nSaída\nImprima uma única linha com N − 1 inteiros, onde o i-ésimo inteiro representa o maior número de fotos que você pode postar se você iniciar sua caminhada no marco 1 e terminar no marco (i+1).",
    "samplesExamples": [
      [
        "5\n1 1 3 3\n5 7 7 6 8",
        "2 2 2 3"
      ],
      [
        "5\n3 1 3 1\n5 4 7 6 5",
        "2 2 2 1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Baralho Embaralhado",
    "text": "Um embaralhamento justo é uma forma de rearranjar N cartas de um baralho disposto horizontalmente da esquerda para a direita. Nesse embaralhamento, as cartas são inicialmente dividas em duas partes contíguas de tamanhos possivelmente diferentes em que uma delas pode ter até mesmo zero cartas! Denotemos por L e R as partes da esquerda e direita, respectivamente. As cartas de L são, então, combinadas com as cartas de R, de tal forma que a ordem relativa entre as cartas de cada partição seja mantida.\nVocê é apresentado à uma disposição final das cartas e deve descobrir qual a quantidade mínima de embaralhamentos justos que devem ser realizados no baralho inicial para que ele chegue a este estado.\nInicialmente, as cartas do baralho podem ser vistas como a sequencia 1 2 ... N.\nPor exemplo, começando com a sequência 1 2 3 4 5 e realizando um embaralhamento justo com L = 1 2 e R = 3 4 5, podemos obter as seguintes permutações: • 1 3 2 4 5 • 1 3 4 2 5 • 3 4 5 1 2 • 1 2 3 4 5 • etc Cada uma das permutações acima representa um possível resultado do embaralhamento justo. Note que 1 3 2 5 4 não é uma embaralhamento possível pois as ordens relativas das cartas 4 e 5 de R não é preservada.\nAssuma que o resultado do primeiro embaralhamento é 1 3 2 4 5. Se fizermos um segundo embaralhamento justo nele, podemos particionar o baralho em L = 1 3 2 4, R = 5, e combinar ambas para obter a permutação 1 3 2 5 4.\nEntrada\nA primeira linha contém um inteiro N(1 ≤ N ≤ 106), o número de cartas no baralho. A segunda linha contém uma permutação de números inteiros de 1 a N descrevendo a disposição final das cartas.\nSaída\nImprima um único inteiro K, que representa o menor número de embaralhamentos justos ne cessários para obter a permutação dada.",
    "samplesExamples": [
      [
        "5\n3 4 5 1 2",
        "1"
      ],
      [
        "10\n1 6 5 2 10 3 4 8 7 9",
        "3"
      ],
      [
        "5\n5 4 2 3 1",
        "2"
      ],
      [
        "8\n1 6 2 3 7 8 4 5",
        "1"
      ],
      [
        "5\n1 2 3 4 5",
        "0"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Altura Mínima",
    "text": "Carlitos é um entusiasta de aventuras com um amor insaciável por parques de diversões. Apesar da sua paixão vibrante, Carlitos enfrenta um desafio único: a sua estatura limitada. Enquanto planeja ansiosamente sua aventura de fim de semana, ele percebe que suas limitações verticais podem atrapa lhar sua experiência no parque de diversões. Não se trata apenas de escolher um parque; trata-se de encontrar um onde ele possa aproveitar a emoção dos brinquedos.\nImagine o caleidoscópio de cores, as risadas jubilosas e a adrenalina dos passeios. Carlitos sempre foi atraído pela energia dos parques de diversões. Com o fim de semana se aproximando, ele se debruça sobre os folhetos do parque, estudando os requisitos de altura de cada passeio. O objetivo dele é maximizar sua diversão, e é aí que você entra.\nSua tarefa é ajudar Carlitos a determinar o número de passeios que ele pode desfrutar em um parque específico. Considerando sua altura e os requisitos mínimos de altura de cada passeio, oriente o a aproveitar ao máximo sua aventura no parque de diversões.\nEntrada\nA primeira linha contém dois números inteiros, N e H (1 ≤ N ≤ 6 e 90 ≤ H ≤ 200), que represen tam a quantidade de brinquedos em um parque e a altura de Carlitos em centímetros, respectivamente.\nNa segunda linha da entrada, serão fornecidas as alturas mínimas A1,...,AN (90 ≤ Ai ≤ 200) de cada um dos brinquedos do parque.\nSaída\nSeu programa deve imprimir uma única linha contendo a quantidade de brinquedos nos quais Carlitos pode ir, ou seja, a quantidade de brinquedos para os quais a altura de Carlitos é pelo menos tão grande quanto a altura mínima necessária.",
    "samplesExamples": [
      [
        "1 100\n100",
        "1"
      ],
      [
        "6 120\n200 90 100 123 120 169",
        "3"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Extraindo Pólen",
    "text": "É chegada a primavera, dando início a mais uma temporada de trabalho intenso na Sociedade das aBelhas de Chapecó (SBC)! No jardim da SBC, N lindas flores floresceram, cada uma com uma certa quantidade de grãos de pólen, que serão coletados pelas árduas trabalhadoras da sociedade. Para manter o ambiente de trabalho seguro, a SBC tem regras muito estritas para a coleta do pólen, sendo elas: 1. Quando uma abelha visita uma flor, ela deve coletar uma quantidade de pólen igual à soma dos dígitos do total de pólen atualmente naquela flor. Por exemplo, se uma flor tem 123 grãos de pólen, a abelha que a visitar deve coletar 1+2+3 = 6 grãos, deixando a flor com 123−6 = 117 grãos. Se a flor tem 201 grãos, a abelha coletará 2 + 0 + 1 = 3 grãos, deixando a flor com 201 − 3 = 198 grãos de pólen.\n2. Todas as abelhas devem formar uma fila no início do dia; aquela que estiver na primera posição da mesma deve coletar pólen de alguma flor com o maior total de pólen. Se a abelha visitar um flor com 0 grãos, ela coleta zero grãos de pólen. Após coletar o pólen de uma flor, a abelha encerra seu turno de trabalho e volta para a colmeia.\nA abelha Gertrude achou essas regras muito estranhas e procurou a sua ajuda para saber quanto pólen ela irá coletar no seu turno. Gertrude tem uma visão incrível e descobriu que atualmente está na K-ésima posição da fila.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 106) e K (1 ≤ K ≤ 109), que representam o número de flores e a posição de Gertrude na fila, respectivamente. A segunda linha contém N inteiros, onde o i-ésimo inteiro Fi (1 ≤ Fi ≤ 106 para 1 ≤ i ≤ N) denota a quantidade inicial de pólen da i-ésima flor.\nSaída\nImprima um único inteiro Q, que representa a quantidade de pólen que será coletada por Gertrude.\n  Explicação do exemplo 1: A primeira abelha coletará o pólen da primeira flor, deixando-a com 22 − (2 + 2) = 18 grãos restantes. A segunda abelha também coletará da primeira flor, deixando-a com 18 − (1 + 8) = 9 grãos restante. Por fim, Gertrude, a terceira abelha da fila, irá coletar pólen da segunda flor, coletando um total de 1 + 5 = 6 grãos, que será a resposta para este caso de teste.",
    "samplesExamples": [
      [
        "5 3\n22 15 7 2 1",
        "6"
      ],
      [
        "3 10\n21 21 21",
        "0"
      ],
      [
        "3 9\n21 21 21",
        "9"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Vôlei",
    "text": "Está tudo pronto para a grande final do super voleibol nos Jogos Olímpicos, e a tensão é tamanha que pode ser cortada com uma faca! Ricardão, o treinador de um dos times finalistas, está cuida dosamente posicionando seus jogadores para ter uma vantagem estratégica. Porém, ainda resta uma preocupação crescente: a de que algumas regiões da quadra não estejam cobertas por seus jogadores, o que necessitaria de pulos laterais muito longos e cansativos para que um jogador chegasse na bola antes que ela atingisse o chão.\nVamos ajudar Ricardão nessa partida decisiva! Dados uma quadra e o posicionamento dos joga dores, o treinador gostaria de saber qual o maior pulo que algum jogador deve fazer para interceptar um ataque adversário, garantindo assim que nenhum ponto da quadra fique vulnerável. Times profis sionais de super vôlei são muito bons, podendo facilmente determinar qual é o jogador mais próximo de onde a bola vai cair; apenas esse jogador tentará pular até lá, enquanto todos os outros ficarão imóveis.\nA quadra é um retângulo R de lados paralelos aos eixos do plano e definido por seus quatro vértices; por outro lado, os jogadores são modelados como um conjunto de N pontos dentro de R. Sua tarefa é determinar qual a menor distância d tal que, para qualquer ponto da quadra, exista pelo menos um jogador a distância no máximo d daquele ponto. Lembre-se: a borda da quadra também faz parte da quadra e deve ser coberta! Entrada\nAs primeiras quatro linhas definem os quatro vértices de R; ou seja, a i-ésima dessas linhas possui dois inteiros xi e yi (−105 ≤ xi,yi ≤ 105), que representam as coordenadas do i-ésimo vértice de R.\nA quinta linha contém um único inteiro N (1 ≤ N ≤ 105), que representa o número de jogadores.\nAs N linhas seguintes representam os jogadores, com a i-ésima linha tendo dois inteiros xi e yi (−105 ≤ xi,yi ≤ 105) que nos dão as coordenadas do i-ésimo jogador. É garantido que todo jogador está dentro da quadra.\nSaída\nImprima um único número d, que representa o pulo máximo que deve ser dado por algum jogador para que o time cubra toda a quadra. A saída será considerada correta se estiver com erro absoluto ou relativo de no máximo 10−5 da resposta correta.",
    "samplesExamples": [
      [
        "-1 -1\n1 -1\n1 1\n-1 1\n1\n0 0",
        "1.41421356237"
      ],
      [
        "1 -1\n-1 3\n1 3\n-1 -1\n3\n0 0\n1 3\n-1 3",
        "1.666666666667"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Investigando Zeros e Uns",
    "text": "Você se encontra em um misterioso mundo binário, onde um vetor de N dígitos binários aguarda pelo seu exame minucioso. Cada dígito é zero ou um, criando um padrão único em toda a paisagem. Sua missão é descobrir os padrões ocultos deste reino binário, desvendando o significado de subvetores com um número ímpar de uns.\nO vetor de dígitos é denotado como b1,b2,...,bN. Sua tarefa é embarcar em uma jornada para descobrir os subvetores enigmáticos – segmentos de dígitos consecutivos – e determinar a contagem de subvetores que abrigam um número ímpar de uns.\nAo percorrer essa paisagem binária, lembre-se de que um subvetor é definido por seus dígitos iniciais e finais. Por exemplo, na sequência [b1,b2,b3], os subvetores incluem [b1], [b2], [b3], [b1,b2], [b2,b3], e [b1,b2,b3].\nSua missão é projetar um algoritmo que determine o número total de subvetores contendo um número ímpar de uns nesta sequência binária. Não se esqueça de que a resposta pode não caber em um número inteiro de 32 bits.\nEntrada\nA primeira linha da entrada contém o inteiro N (1 ≤ N ≤ 105), representando o comprimento da sequência binária.\nA segunda linha contém os N dígitos binários b1,b2,...,bN (bi ∈ {0,1}), representando os elemen tos da sequência.\nSaída\nSeu programa deve imprimir uma linha contendo a quantidade de subvetores contendo uma quan tidade ímpar de uns.",
    "samplesExamples": [
      [
        "3\n0 1 0",
        "4"
      ],
      [
        "10\n1 0 0 1 1 0 1 1 1 0",
        "30"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Honroso Trabalhador",
    "text": "Rafael vive em uma sociedade igualitária ideal: todos os trabalhos oferecem um salário diário igual e você só precisa trabalhar em um emprego que seja de seu interesse. Infelizmente, nem essa utopia estava preparada para o fato de que Rafael não tem nenhuma habilidade.\nPara compensar essa situação, Rafael irá trabalhar apenas em empreitadas, onde empregadores em potencial não terão tempo de reparar no quão pouco qualificado Rafael é para o trabalho. Mesmo assim, dada sua desqualificação para esses trabalhos, ele precisa comprar cartas de recomendação falsas para ser empregado.\nRafael tem N trabalhos à sua disposição nos próximos dias. O i-ésimo trabalho começa no dia ℓi, termina no final do dia ri e paga exatamente S moedas de ouro por dia trabalhado. Rafael é realmente ruim de serviço, e não consegue trabalhar em dois empregos ao mesmo tempo; além disso, ele pode começar no emprego i apenas no dia ℓi mas, uma vez empregado, ele pode se demitir no final de cada dia, manténdo o dinheiro dos dias trabalhados (inclusive o último), sendo assim capaz de começar outro trabalho a partir do dia seguinte (mas não no mesmo dia de sua demissão). Rafael também sabe que ele precisa de ci moedas de ouro para comprar a carta de recomendação falsa para o trabalho i.\nCiente de suas inabilidades e da necessidade das cartas falsas, Rafael reservou um dinheiro e é sempre capaz de comprar quantas cartas forem necessárias, mesmo antes de começar em qualquer um dos N trabalhos.\nDadas as descrições dos trabalhos disponíveis, qual o lucro máximo que Rafael pode conseguir, levando em conta os custos para a compra das cartas falsas? Entrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 106) e S (1 ≤ S ≤ 109), que representam o número de trabalhos disponíveis e o quanto cada um deles paga por dia trabalhado.\nCada uma das N linhas seguintes contém três inteiros: ℓi, ri e ci (1 ≤ ℓi ≤ ri ≤ 109, 1 ≤ ci ≤ 109), que representam a data de início, a data de fim, e o custo de se comprar uma carta de recomendação falsa para o trabalho i, respectivamente.\nSaída\nImprima um único inteiro que corresponde ao lucro máximo de Rafael após o fim de todos os trabalhos.\n  Explicação do exemplo 1: O ideal é começar o segundo trabalho e depois passar para o terceiro, totalizando 14×3−4−1 = 37 moedas de ouro.\n    Explicação do exemplo 3: Mesmo que ele tenha que tirar dinheiro de sua reserva para comprar a carta de recomendação falsa, ele ainda pode obter algum lucro.\n  Explicação do exemplo 4: Não vale a pena gastar dinheiro com uma carta de recomendação falsa para este trabalho.",
    "samplesExamples": [
      [
        "3 3\n1 5 10\n2 10 4\n5 15 1",
        "37"
      ],
      [
        "3 5\n1 1 3\n2 3 4\n3 3 1",
        "8"
      ],
      [
        "1 1000\n1 1 654",
        "346"
      ],
      [
        "1 5\n1 3 20",
        "0"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lexicograficamente Agradável",
    "text": "Na pitoresca vila da Lexiconia, viviam dois amigos, Lily e Ethan. Um dia, uma misteriosa carta chegou na casa dos amigos, fechada com uma encantadora insignia. Dentro do envelope, eles encontraram uma charada complexa demais até mesmo para as mentes mais sábias da vila.\nNessa charada, foram dados um inteiro K e uma string S contendo apenas letras minúsculas, que pode ser alterada de acordo com uma curiosa regra. A cada momento, os aldeões tem a liberdade de escolher umíndice i e, magicamente, os caracteres Si e Si+K trocam de posição. A charada é resolvida quando a string lexicograficamente mínima, usando apenas operações que respeitem a regra imposta pela charada, for encontrada.\nA vila ficou muito curiosa e empolgada com a charada. Lily e Ethan, sempre vorazes por aventura, decidiram mergulhar de cabeça nesse desafio. Porém, à medida que os dois observavam a string, eles notaram que, no caminho para o sucesso, haviam inúmeras trocas possíves.\nCom a string da charada vívida em suas mentes, os amigos se perguntaram: como navegar nesse gi gantesco mar de possibilidades e determinar a string lexicograficamente mínima? Cada troca realizada parecia como folhear um livro mágico, que revelaria novos segredos e mistérios.\nO tempo passou e até agora Lily e Ethan não terminaram de resolver essa charada. Será que você consegue ajudá-los? Entrada\nA primeira linha da entrada contém a string S (1 ≤ |S| ≤ 105). A segunda linha da entrada contém o inteiro K (1 ≤ K < |S|).\nSaída\nImprima uma única linha contendo a string lexicograficamente mínima possível de ser feita utili zando essas operações.",
    "samplesExamples": [
      [
        "zaaab\n4",
        "baaaz"
      ],
      [
        "njoab\n2",
        "banjo"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Malha Áerea",
    "text": "No reino de Quadradônia, o monarca quer rever todas as tarifas áereas. Para isso, pediu ao seu contador uma tabela com as propostas de novos preços.\nTodavia, o monarca estudou no Instituto de Computação e Programação de Chapecó (ICPC) e tem conhecimento suficiente para exigir coerência na tabela. A tabela é coerente se nenhuma rota com escalas é mais barata do que o voo direto.\nVerificada a coerência da tabela, o monarca gostaria de diminuir o número de voos diretos, sem contudo aumentar os custos das viagens.\nSeu problema é verificar a coerência da tabela e, sendo esta coerente, informar ao monarca quantas voos diretos podem ser eliminados sem encarecer o custo de qualquer viagem.\nEntrada\nA primeira linha contém N (1 ≤ N ≤ 100), que é o número de cidades da Quadradônia servidas por voos. Existem então mais N linhas, L1,L2,...,LN. A linha Li contém N inteiros, Ci1,Ci2,...,CiN, onde Cij é o custo do voo direto entre as cidades i e j. O custo de ida e de volta entre duas cidades é sempre igual, ou seja, Cij = Cji, para todos os pares {i,j} tais que 1 ≤ i ≤ N e 1 ≤ j ≤ N. Quando i = j, Cij = 0. Quando i ̸= j, 1 ≤ Cij ≤ 103.\nSaída\nImprima uma linha contendo um inteiro. Se a tabela for incoerente, o inteiro deve ser igual a -1. Se a tabela for coerente, o inteiro deve ser igual ao maior número de voos diretos que podem ser removidos sem aumento nos custos das viagens para os passageiros.",
    "samplesExamples": [
      [
        "3\n0 1 2\n1 0 1\n2 1 0",
        "1"
      ],
      [
        "3\n0 2 2\n2 0 2\n2 2 0",
        "0"
      ],
      [
        "3\n0 2 9\n2 0 2\n9 2 0",
        "-1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Calzone italiano e canto de massas",
    "text": "O restaurante italiano Calzone & Pasta Corner desenhou seu cardápio tendo seus pratos em uma grade bidimensional R × C, mantendo os pratos que combinam bem próximos uns dos outros. Para comer, você escolhe uma célula inicial e, em seguida, move-se repetidamente para cima, para baixo, para a esquerda ou para a direita para qualquer uma das quatro células adjacentes, pegando todos os pratos pelos quais você passa. É permitido entrar em células já visitadas, mas você não receberá o mesmo prato novamente.\nUm dia, Pierre, um cliente estrangeiro, apareceu com muita fome e com uma etiqueta muito rígida. Ele tem uma ordem bem específica em que os pratos devem ser consumidos. Por exemplo, um aperitivo, depois uma entrada, depois um prato principal, depois uma salada, etc. Então ele atribuiu um número inteiro distinto de 1 a R × C para cada prato na grade do menu, indicando a ordem em que comeria o todo cardápio. Agora ele quer escolher e comer os pratos seguindo seu pedido. Como as regras do restaurante podem impedi-lo de escolher todo o cardápio, ele pode pular algumas etapas do pedido. Você pode ajudá-lo a escolher uma refeição com tantos pratos quanto possível? Entrada\nA primeira linha contém dois inteiros R e C (1 ≤ R,C ≤ 100), indicando que a grade do menu possui R linhas e C colunas. As próximas R linhas contêm C inteiros cada, representando a grade do menu. Cada um desses números é um número inteiro distinto de 1 a R ×C atribuído por Pierre ao prato correspondente na grade do menu.\nSaída\nProduza uma única linha com um número inteiro indicando a quantidade máxima de pratos que Pierre pode comer.",
    "samplesExamples": [
      [
        "1 5\n5 3 2 1 4",
        "5"
      ],
      [
        "1 5\n1 5 4 3 2",
        "4"
      ],
      [
        "3 3\n4 1 3\n8 5 9\n7 2 6",
        "6"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Viagens Diárias",
    "text": "Bella é uma garota simples com uma vida simples: acorda, vai trabalhar, trabalha, vai para casa, descansa, dorme e repete.\nBella viaja de ônibus e chove muito em sua cidade, então às vezes ela precisa de um guarda-chuva. No entanto, a previsão do tempo local não é confiável, então Bella não pode ter certeza se vai chover ou não até pouco antes de começar a viagem. Para evitar ser pega desprevenida, Bella criou um sistema.\nEla possui um ou mais guarda-chuvas, guardando-os em casa ou no local de trabalho. Antes de qualquer viagem (de casa para o trabalho, ou vice-versa), Bella olha para fora para decidir se leva guarda-chuva naquela viagem: • se estiver chovendo, ela traz guarda-chuva; • caso contrário, se não houver guarda-chuvas no seu destino (seja no trabalho ou em casa), ela ainda traz um guarda-chuva, por precaução; • caso contrário, ela não traz guarda-chuva.\nA segunda regra acima tem como objetivo evitar uma situação em que Bella precise de um guarda-chuva, mas não tenha nenhum em sua localização atual (uma lembrança ruim sobre a qual ela falará para qualquer um que perguntar). Isso garante que Bella nunca pegará chuva e ficará doente.\nAgora precisamos que você simule o método de Bella por um determinado período. A simulação começa com Bella em casa. Todos os dias ela faz duas viagens de ônibus: de ida e volta do trabalho. Dado o número inicial de guarda-chuvas em sua casa e local de trabalho, e os boletins meteorológicos durante N dias consecutivos, descubra se Bella trouxe ou não um guarda-chuva em cada uma de suas 2N viagens de ônibus.\nEntrada\nA primeira linha contém três inteiros N (1 ≤ N ≤ 104), H (1 ≤ H ≤ 100) e W (0 ≤ W ≤ 100), indicando respectivamente a duração do período de simulação em dias, e os números iniciais de guarda-chuvas na casa e no local de trabalho de Bella. Para i = 1,2,...,N, a i-ésima das próximas N linhas contém dois caracteres representando se choveu em cada viagem do i-ésimo dia. O primeiro caractere refere-se à primeira viagem do dia (de casa para o trabalho), enquanto o segundo caractere refere-se à segunda viagem do dia (do trabalho para casa). Cada caractere é a letra maiúscula “Y” se choveu, e a letra maiúscula “N” caso contrário.\nSaída\nSaída de N linhas. Para i = 1,2,...,N, a i-ésima linha deve conter dois caracteres indicando se Bella trouxe guarda-chuva em cada viagem do i-ésimo dia. O primeiro caractere refere-se à primeira viagem enquanto o segundo caractere refere-se à segunda viagem. Cada caractere deve ter a letra “Y” maiúscula se Bella trouxe um guarda-chuva, e a letra “N” maiúscula caso contrário.",
    "samplesExamples": [
      [
        "5 2 1\nY N\nN N\nY N\nN Y\nY Y",
        "Y N\nN N\nY Y\nN Y\nY Y"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Dinheiro investido",
    "text": "Hoje em dia suas habilidades de programação são incríveis e você recebe regularmente muito dinheiro pelo seu trabalho.\nInfelizmente, suas habilidades financeiras não evoluíram da mesma forma. Assim, cada vez que você ganha algum dinheiro, basta investi-lo em um banco em um depósito a prazo de 30 dias com cláusula de renovação automática. Isso significa que 30 dias depois de você investir o dinheiro, ele será investido por mais 30 dias, repetidamente, até que você informe ao banco que deseja interromper a renovação e receber seu dinheiro de volta. Os depósitos a prazo não podem ser criados nem renovados durante finais de semana; se o período de 30 dias terminar num fim de semana, a renovação ocorre na segunda-feira imediatamente seguinte.\nComo o banco detém quase todo o seu dinheiro, você deve esperar até a renovação mais próxima sempre que quiser comprar algo que não seja comida diária. Hoje você decidiu comprar um novo smartphone para substituir seu aparelho de seis meses. Dadas as datas em que você criou cada depósito a prazo, você deve determinar o número mínimo de dias que deve esperar para receber algum dinheiro do banco.\nPor exemplo, suponha que hoje seja sábado e que você criou cinco depósitos a prazo: um depósito a prazo na segunda-feira passada, outro depósito a prazo na terça-feira passada, outro depósito a prazo na quarta-feira passada e dois depósitos a prazo ontem. O primeiro depósito (segunda-feira) seria renovado na quarta-feira, após 25 dias a partir de hoje. O segundo depósito a prazo (terça-feira) seria renovado na quinta-feira, após 26 dias a partir de hoje. O terceiro depósito a prazo (quarta-feira) seria renovado em uma sexta-feira após 27 dias a partir de hoje. Por fim, os dois últimos depósitos a prazo (sexta-feira) seriam renovados na segunda-feira após 30 dias de hoje, pois a renovação no domingo não é permitida. Assim, neste caso, você deve esperar 25 dias para retirar algum dinheiro do banco.\nEntrada\nA primeira linha contém uma string T e um inteiro N (1 ≤ N ≤ 105), indicando respectivamente o dia da semana de hoje e a quantidade de depósitos a prazo. A string é “Seg”, “Ter”, “Qua”, “Qui”, “Sex”, “Sábado” ou “Dom”, representando respectivamente que hoje é segunda, terça, quarta, quinta, sexta, sábado, ou domingo. A segunda linha contém N inteiros D1,D2,...,DN (0 ≤ Di ≤ 109 para i = 1,2,...,N), indicando o número de dias decorridos desde a criação de cada depósito a prazo. É garantido que os depósitos a prazo não foram criados nos finais de semana.\nSaída\nProduza uma única linha com um número inteiro indicando o número mínimo de dias que você deve esperar para receber algum dinheiro do banco.",
    "samplesExamples": [
      [
        "Sat 5\n5 4 3 1 1",
        "25"
      ],
      [
        "Sat 5\n3 1 4 1 5",
        "25"
      ],
      [
        "Thu 1\n0",
        "32"
      ],
      [
        "Thu 1\n30",
        "0"
      ],
      [
        "Fri 1\n31",
        "31"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Decifrando WordWhiz",
    "text": "WordWhiz é um popular jogo de quebra-cabeças de palavras que desafia os jogadores a adivinhar uma palavra secreta com um número limitado de tentativas. O jogo usa um dicionário contendo N palavras. Cada palavra neste dicionário consiste em cinco letras minúsculas distintas.\nO jogo começa com o jogador sendo apresentado a uma grade vazia, composta por várias linhas. Cada linha permite uma única estimativa. A tarefa do jogador é preencher as linhas com palavras contidas no dicionário até que a palavra secreta seja encontrada ou o jogador tenha usado todas as linhas disponíveis.\nDepois que o jogador envia um palpite, o jogo fornece feedback colorindo as células onde o palpite foi escrito. O feedback consiste em três cores: • Cinza (“X”): A letra da célula não faz parte da palavra secreta.\n• Amarelo (“!”): A letra da célula faz parte da palavra secreta, mas está na posição errada.\n• Verde (“*”): A letra da célula faz parte da palavra secreta e está na posição correta.\nPara ilustrar, vamos considerar o cenário em que a palavra secreta é “hotel” e o jogador envia “explosão” como palpite. Neste caso, a primeira, terceira e quarta células ficariam cinza porque “b”, “a” e “s” não estão presentes na palavra secreta “hotel”. A segunda e a quinta células, entretanto, ficariam amarelas. Isso indica que “l” e “t” fazem parte da palavra secreta, mas aparecem em posições erradas: “l” deveria estar na quinta posição em vez da segunda, enquanto “t” deveria estar na terceira posição em vez da quinta. . Esse feedback seria representado por “X!XX!”.\nAgora, se o jogador enviar “coração” como palpite, a terceira e quarta células ainda ficarão cinza, porque “a” e “r” não estão em “hotel”. A segunda e a quinta células ficariam novamente amarelas, porque mais uma vez “t” está na quinta posição (em vez da terceira), e desta vez “e” está na segunda posição quando deveria estar na quarta. Porém, para esse palpite a primeira célula ficaria verde, indicando que “h” é a primeira letra tanto do palpite “coração” quanto da palavra secreta “hotel”. Esse feedback seria representado por “*!XX!”.\nFinalmente, se o jogador enviar “hotel” como palpite, todas as células ficarão verdes, pois esta é a palavra secreta. Este feedback seria representado por “*****”.\nOs feedbacks acima podem ser vistos na imagem a seguir.\nHá algum tempo, sua empresa adicionou um player WordWhiz em seu site e agora quer aprimorar o jogo adicionando funcionalidades para exibir sessões anteriores do jogo. No entanto, apenas o feedback de cada palpite foi armazenado, e não as palavras enviadas. Isto significa que pode não ser possível recuperar com precisão os palpites apresentados em cada sessão e, antes de investir mais esforços, a empresa pretende analisar as sessões de jogo gravadas.\nDado um dicionário de palavras de cinco letras, a palavra secreta (incluída no dicionário) e o feedback para uma sessão de jogo, sua tarefa é determinar quantas palavras do dicionário poderiam ter sido enviadas em cada palpite.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000) indicando o número de palavras do dicionário.\nCada uma das próximas N linhas contém uma string que representa uma palavra no dicionário. Todas as strings são diferentes e cada uma delas consiste em cinco letras minúsculas diferentes. A primeira string é a palavra secreta da sessão de jogo.\nA próxima linha contém um inteiro G (1 ≤ G ≤ 10) indicando o número de palpites durante a sessão de jogo.\nCada uma das próximas linhas G contém uma sequência de cinco caracteres que representa o feedback de uma estimativa. A string de feedback contém apenas os caracteres “X”, “!” e “*”, indicando respectivamente as cores cinza, amarelo e verde.\nÉ garantido que a entrada descreve uma sessão de jogo válida.\nSaída\nProduza G linhas, de modo que o i-ésimo contenha um número inteiro indicando quantas palavras do dicionário poderiam ter sido enviadas no i-ésimo palpite.\n  Explicação da amostra 1: A única possibilidade é que o jogador tenha enviado palpites conforme descrito no enunciado.\n  Explicação da amostra 2: O feedback quando “mesa” ou “bordo” é enviado como uma estimativa é “X!X**” (porque a palavra secreta é “escala”). Isto significa que para esta sessão de jogo, o jogador poderia ter enviado qualquer uma destas palavras para cada tentativa.",
    "samplesExamples": [
      [
        "6\nhotel\nweary\nheart\nblast\npilot\nvague\n3\nX!XX!\n*!XX!\n*****",
        "1\n1\n1"
      ],
      [
        "3\nscale\ntable\nmaple\n5\nX!X**\nX!X**\nX!X**\nX!X**\nX!X**",
        "2\n2\n2\n2\n2"
      ],
      [
        "4\nscale\ntable\nmaple\nsmile\n4\nX!X**\n*XX**\nX!X**\n*****",
        "2\n1\n2\n1"
      ],
      [
        "5\nlatin\nmrica\nthink\nsolve\ndebug\n1\n*****",
        "1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "GPS em uma Terra Plana",
    "text": "No dia em que os alienígenas finalmente atacaram a humanidade, ninguém poderia ter previsto a arma de sua escolha. Sem armas nucleares, meteoros, lasers ou monstros gigantes. Em vez disso, o nosso planeta foi subjugado pelo poder da física! Especificamente, os alienígenas transformaram a Terra numa superfície bidimensional e plana, neutralizando para sempre a nossa capacidade de viajar pelo espaço. Embora frustrada, a humanidade sobreviveu e retomamos nossas vidas da melhor maneira que pudemos. Esta nova existência bidimensional requer muitos ajustes, incluindo a utilização de GPS (Sistema de Posicionamento Global).\nO GPS normalmente funciona usando ondas de rádio para medir as distâncias euclidianas do usuário a vários pontos de referência (satélites), e usando essas distâncias para calcular as coordenadas do usuário. Contudo, a Terra agora plana tem duas peculiaridades às quais precisamos de nos adaptar: • Sem satélites em órbita, precisamos de utilizar torres de rádio. Cada torre de rádio agora tem cobertura de todo o planeta devido à superfície plana.\n• As ondas de rádio, que se propagam de forma diferente num mundo bidimensional, requerem uma mudança da distância euclidiana para a distância de Manhattan para cálculos precisos. Dados quaisquer dois pontos (X1,Y1) e (X2,Y2), a distância de Manhattan entre eles é definida como |X1 − X2| + |Y1 − Y2|.\nSua tarefa é escrever software para esses cálculos GPS adaptados. Dada uma lista de localizações de N torres de rádio de referência e suas respectivas distâncias de Manhattan até o usuário do GPS, seu algoritmo deve fornecer uma lista de possíveis localizações do usuário. Essas localizações de usuários potenciais são limitadas àquelas que estão exatamente na distância medida de Manhattan de cada torre de rádio de referência. O GPS ainda está em fase inicial de testes, portanto a verdadeira localização do usuário é limitada a coordenadas inteiras.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) indicando o número de torres de rádio de referência.\nCada uma das próximas N linhas descreve uma torre com três inteiros X, Y (−104 ≤ X,Y ≤ 104) e D (0 ≤ D ≤ 4 × 104), representando que uma torre com coordenadas (X,Y ) é na distância D de Manhattan do usuário do GPS. Não existem duas torres com a mesma localização. É garantido que os dados de entrada são confiáveis, identificando um conjunto finito não vazio de localizações possíveis para um usuário com coordenadas inteiras.\nSaída\nProduza várias linhas. Cada linha deve conter um par diferente de inteiros Xu e Yu indicando que (Xu,Yu) é uma localização do usuário compatível com os dados de entrada. As linhas devem ser ordenadas por valor Xu não decrescente, desempate aumentando o valor Yu.",
    "samplesExamples": [
      [
        "2\n1 1 5\n7 0 4",
        "4 -1\n5 2"
      ],
      [
        "2\n1 1 5\n5 5 3",
        "2 5\n3 4\n4 3\n5 2"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Mário da Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Apaixonado pela ordem",
    "text": "Nloglonia está hospedando um festival de cinema que dura N dias. Existem K filmes distintos e, em cada um dos N dias, um deles será exibido. Cada um dos filmes disponíveis pode ser exibido em vários dias ou não ser exibido durante o festival.\nA programação do festival é dada como um array inteiro V de tamanho N, com 1 ≤ Vi ≤ K, indicando qual filme será exibido em cada dia. Bob deseja assistir a todos os filmes K e acredita firmemente que a ordem em que os assiste afetará significativamente sua experiência. Então agora ele se pergunta: é verdade que, para cada pedido de filmes, ele poderia escolher K dias para visitar o festival e assistir a esses filmes nessa ordem? Mais formalmente, é verdade que toda permutação de 1,2,...,K é uma subsequência de V ? Se este não for o caso, Bob também quer que você encontre alguma permutação (qualquer uma) que não seja.\nEntrada\nA primeira linha contém dois inteiros N e K (1 ≤ N,K ≤ 300), indicando respectivamente o número de dias que dura o festival de cinema e o número de filmes disponíveis para exibição.\nA segunda linha contém N inteiros V1,V2,...,VN (1 ≤ Vi ≤ K para i = 1,2,...,N), indicando que o filme Vi será exibido no dia i.\nSaída\nProduza uma única linha com K inteiros mostrando uma permutação de 1,2,...,K que não é uma subsequência de V . Se cada permutação for uma subsequência de V , produza o caractere “*” (asterisco).",
    "samplesExamples": [
      [
        "9 3\n1 2 3 1 2 3 1 2 3",
        "*"
      ],
      [
        "11 4\n1 2 3 4 2 3 3 2 4 1 4",
        "3 4 1 2"
      ],
      [
        "11 4\n1 2 3 4 2 3 3 2 4 1 4",
        "4 1 2 3"
      ],
      [
        "5 6\n6 5 4 3 2",
        "6 5 4 3 2 1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Para frente e para trás",
    "text": "Um sistema planetário distante tem um único sol e N − 1 planetas. Cada planeta é identificado por um número inteiro distinto de 2 a N. No planeta b, os números são representados na base b.\nUm número palindrômico é um número que permanece o mesmo quando seus dígitos são escritos para frente e para trás. Neste contexto, os zeros à esquerda não são considerados ao determinar se um número é palindrômico.\nO mesmo número pode ser palindrômico na base de um planeta, mas não em outro. Por exemplo, na base 10, o número 33 é palindrômico. Também é palindrômico na base 2 e na base 32, mas não em bases como 3 ou 33, pois 3310 = 1000012 = 10203 = 1132 = 1033.\nOs habitantes deste sistema planetário têm um gosto peculiar por números palindrômicos e querem saber quais planetas tornam o número N um número palindrômico quando representado em sua base. Sua tarefa é ajudá-los neste desafio cósmico.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro N (2 ≤ N ≤ 1012) indicando o número a ser verificado quanto à representação palindrômica. N é dado na base 10.\nSaída\nProduza uma única linha com uma lista crescente de inteiros no intervalo [2,N], indicando os planetas nos quais N é um número palindrômico quando expresso na base do identificador do planeta. Saída\nesses números inteiros na base 10. Se N não for palindrômico em nenhum dos planetas, produza o caractere “*” (asterisco).",
    "samplesExamples": [
      [
        "33",
        "2 10 32"
      ],
      [
        "3",
        "2"
      ],
      [
        "2",
        "*"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Corrida de Doces",
    "text": "É hora do rush! Você encerrou o dia de trabalho e precisa comprar doces para todos os membros da sua família antes que o shopping feche.\nExclusividade e uniformidade são características muito valorizadas pela sua família e para impressioná-los você elaborou um plano. Todos os doces dados a cada membro da família deverão ser de uma única marca, e nenhum outro membro da família deverá receber doces dessa mesma marca. Além disso, você não quer admitir que ama alguns mais do que outros, então deseja que todos recebam o mesmo número de doces.\nO shopping possui uma loja que vende doces de K marcas diferentes. Coincidentemente, sua família consiste exatamente em K membros. Isso pode parecer muito fácil, mas é claro que há um problema.\nA loja expõe seus doces alinhados em uma única prateleira. Você não tem tempo para selecionar os doces individualmente; em vez disso, você deseja comprar um grupo de doces contíguos para concluir sua tarefa com eficiência. Isso significa que ao comprar qualquer par de doces, você também deve comprar todos os doces localizados entre eles na prateleira.\nQual é o número máximo de doces que você pode comprar? Entrada\nA primeira linha contém dois inteiros N e K (1 ≤ N,K ≤ 4 × 105), indicando respectivamente a quantidade de doces na prateleira e a quantidade de membros da família. As marcas de doces são identificadas por números inteiros distintos de 1 a K.\nA segunda linha contém N inteiros C1,C2,...,CN (1 ≤ Ci ≤ K para i = 1,2,...,N), denotando a marca de cada doce na prateleira, da esquerda para a direita. ordem certa.\nSaída\nProduza uma única linha com um número inteiro indicando a quantidade máxima de doces que você pode comprar para sua família. Lembre-se de que nenhum membro da família pode receber duas marcas de doces diferentes e nenhuma marca de doces pode ser comprada para dois membros da família diferentes. Além disso, cada membro da família deve receber a mesma quantidade de doces, e os doces devem ser adquiridos em blocos contíguos na prateleira.\n  Explicação da amostra 1: Tanto comprar do primeiro ao quarto doce quanto do terceiro ao sexto permite adquirir dois doces de cada marca.\n  Explicação da amostra 2: Nenhum bloco contíguo de balas tem o mesmo número de balas para as marcas 1, 2 e 3.\n  Explicação da amostra 3: Embora a loja seja conhecida por vender doces de K marcas diferentes, algumas marcas podem estar em falta.",
    "samplesExamples": [
      [
        "6 2\n2 2 1 1 2 2",
        "4"
      ],
      [
        "7 3\n2 1 2 1 2 2 3",
        "0"
      ],
      [
        "3 4\n3 4 2",
        "0"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Rafael Grandsire & Pedro Paniago, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Jogo de quadro negro",
    "text": "Carlinhos e Equalizador estão jogando. O jogo começa com 3N elementos, que são números inteiros, escritos num quadro negro. Então, para N rodadas, as duas etapas seguintes são repetidas.\n1. Carlinhos, o primeiro jogador, seleciona um elemento não escolhido e marca-o com um círculo vermelho.\n2. Equalizador, o segundo jogador, escolhe dois elementos não escolhidos, marca um deles com um quadrado azul e apaga o outro do quadro negro.\nAo final dessas rodadas, o quadro negro contém N elementos marcados em vermelho e N elementos marcados em azul, sem nenhum movimento restante. O jogo termina com um vencedor claro: se a soma dos elementos marcados em vermelho for diferente da soma dos elementos marcados em azul, Carlinhos sai vitorioso; caso contrário, o Equalizer vence.\nA figura abaixo mostra o único resultado possível para a primeira amostra. Neste caso o Equalizer ganha com certeza, não importa como joguem ambas as somas serão iguais a 25.\nCarlinhos, sentindo que o jogo está desequilibrado, busca saber se consegue garantir a vitória quando os dois jogadores jogam de maneira ideal. Você pode ajudá-lo nesta tarefa? Entrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000).\nA segunda linha contém 3N inteiros B1,B2,...,B3N (−105 ≤ Bi ≤ 105 para i = 1,2,...,3N), representando os números inicialmente escritos na lousa.\nSaída\nProduza uma única linha com a letra “Y” maiúscula se Carlinhos conseguir vencer o jogo e a letra “N” maiúscula caso contrário, assumindo que ambos os jogadores joguem de forma otimizada.\n    Explicação da amostra 2: Carlinhos vence independentemente de como jogue, pois todos os subconjuntos possuem somas distintas.\n  Explicação da amostra 3: Carlinhos pode ganhar escolhendo o número 2. Observe que ele teria perdido se escolhesse o 3.",
    "samplesExamples": [
      [
        "5\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5",
        "N"
      ],
      [
        "2\n1 2 4 8 16 32",
        "Y"
      ],
      [
        "1\n2 3 3",
        "Y"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Analisando Contratos",
    "text": "O Doutor Kruskal está iniciando um negócio de comércio de tibério. Eles têm N possíveis fornecedores de tibério e muitos clientes interessados ​​em receber tibério para administrar suas próprias indústrias.\nOs dias corridos são numerados cronologicamente usando números inteiros positivos, e cada fornecedor é identificado por um número inteiro distinto de 1 a N. O fornecedor i pode fornecer tibério em qualquer dia a partir do dia Si, mas não nos dias estritamente anteriores a Si. Eles cobram um preço de dólares Pi por dia por esse serviço. Como Kruskal é muito inteligente, a lista de fornecedores contém apenas os melhores fornecedores da cidade. Além disso, acontece que Si < Si+1 e Pi > Pi+1 para i = 1,2,...,N − 1.\nO sistema de Kruskal mantém um banco de dados de clientes disponíveis. Inicialmente, este banco de dados está vazio e não contém clientes. Os clientes chegarão um por um, e cada um deles será imediatamente adicionado ao banco de dados na chegada. O j-ésimo cliente tem interesse em receber tibério em qualquer dia até o dia Ej inclusive. Para cada dia que receberem tibério, sua indústria gerará Rj dólares de receita bruta. Assim, se Kruskal combinar o fornecedor i com o cliente j, o lucro final de toda esta operação após deduzir o custo do tibério será (Rj −Pi)×(Ej −Si +1), onde Si ≤ Ej, caso contrário nenhum tibério poderia ser oferecido.\nA qualquer momento, o sistema de Kruskal pode calcular rapidamente, para qualquer fornecedor i específico, o cliente ideal dentre os do banco de dados, de modo que o lucro da operação ao combinar o fornecedor e o cliente seja maximizado, e pode reportar esse lucro máximo. Pode acontecer que um lucro positivo para um fornecedor não possa ser alcançado com nenhum dos clientes disponíveis; nesse caso, o sistema informa um lucro zero.\nObserve que quando o sistema de Kruskal é solicitado a calcular o lucro máximo para um determinado fornecedor, esse fornecedor é correspondido com no máximo um dos clientes disponíveis e, nesse caso, tal correspondência não tem nenhum efeito nas operações futuras. Isto significa que tanto o fornecedor como o cliente podem ser considerados novamente para futuras correspondências.\nSua tarefa é implementar o sistema de Kruskal.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 2 × 105) indicando o número de fornecedores.\nA i-ésima das próximas N linhas descreve o fornecedor i com dois inteiros Si e Pi (1 ≤ Si,Pi ≤ 109), denotando respectivamente o dia de início e o preço por dia para o fornecedor. É garantido que Si < Si+1 e Pi > Pi+1 para i = 1,2,...,N − 1.\nA próxima linha contém um inteiro Q (1 ≤ Q ≤ 2×105) representando o número de operações que devem ser processadas. As operações são descritas nas próximas Q linhas, na ordem em que são executadas no sistema, uma operação por linha. Existem dois tipos de operações.\nCaso a operação adicione um cliente ao banco de dados, a linha contém a letra minúscula “c”, seguida de dois inteiros E e R (1 ≤ E,R ≤ 109), indicando respectivamente o dia de término e a receita bruta por dia do cliente.\nCaso a operação solicite o cálculo do lucro máximo de um fornecedor, a linha contém a letra minúscula “s”, seguida de um inteiro I (1 ≤ I ≤ N) que identifica o fornecedor. É garantido que a entrada contenha pelo menos uma operação deste tipo.\nSaída\nProduza uma linha para cada operação do tipo “s”. A linha deve conter um número inteiro indicando o lucro máximo possível ao combinar um cliente disponível com o fornecedor determinado. Escreva os resultados das operações na ordem em que aparecem na entrada.",
    "samplesExamples": [
      [
        "4\n2 8\n4 5\n7 3\n9 2\n11\ns 1\nc 10 10\ns 1\ns 2\ns 3\ns 4\nc 7 26\ns 2\ns 4\ns 3\ns 1",
        "0\n18\n35\n28\n16\n84\n16\n28\n108"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Agustín Santiago Gutiérrez, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Lucros Elevados",
    "text": "Marina, influenciadora digital que adora viajar pelo mundo, está embarcando em um tour promocional de uma marca de roupas femininas chamada W2M (From Woman to Woman Marina). A jornada de Marina a leva por N cidades da América Latina, cada uma com seu charme único, e identificadas com um número inteiro distinto de 1 a N, chamado de índice de popularidade.\nPara facilitar as viagens de Marina, a W2M forneceu-lhe transferências N − 1, conectando pares de cidades de forma a garantir acessibilidade a todas as N cidades. Marina pode percorrer essas conexões quantas vezes quiser.\nA missão de Marina é apresentar os vestidos da marca em cada uma das N cidades, com um twist diferente.\nCada vez que visita uma cidade pela primeira vez, ela deve selecionar um vestido que nunca usou antes e capturar a essência da cidade em uma postagem nas redes sociais. Cada nova foto que ela compartilha atrai seguidores, criando expectativa para a próxima. O valor de antecipação para a primeira foto é 1 e aumenta em 1 para cada foto subsequente.\nMarina pode revisitar qualquer cidade quantas vezes desejar, mas uma nova foto só deverá ser postada na sua primeira visita a uma cidade. Seu objetivo é maximizar o lucro do passeio, que é calculado como a soma do valor de antecipação de cada foto multiplicado pelo índice de popularidade da cidade onde a foto foi tirada. Mais precisamente, seja pi o índice de popularidade da cidade onde a i-ésima foto foi tirada. Com essas informações, o lucro pode ser calculado comoAgora Marina busca sua ajuda. Dado que o passeio deve começar na cidade p1 = R, sua tarefa é ajudar Marina a determinar o lucro máximo que ela pode obter planejando estrategicamente a ordem de suas visitas à cidade.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 3 × 105) e R (1 ≤ R ≤ N), indicando respectivamente o número de cidades e a cidade inicial do passeio.\nCada uma das próximas N − 1 linhas contém dois inteiros U e V (1 ≤ U,V ≤ N e U (cid:54)= V ), indicando que há uma transferência entre as cidades U e V . É garantido que é possível chegar a todas as cidades utilizando os transfers.\nSaída\nProduza uma única linha com um número inteiro indicando o lucro máximo que Marina pode obter em seu tour promocional.",
    "samplesExamples": [
      [
        "7 3\n3 5\n3 7\n5 1\n5 4\n7 2\n7 6",
        "121"
      ],
      [
        "1 1",
        "1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Jornada do Ladrão",
    "text": "Monopolis é um país bonito e rico. Entre as suas características impressionantes está o traçado do país, onde N cidades estão interligadas por N − 1 estradas de igual comprimento, permitindo viajar entre duas cidades quaisquer.\nOutra característica única do Monopolis é que cada cidade possui um único banco com uma quantia diferente de dinheiro. Assim, é possível atribuir um número distinto de 1 a N a cada cidade, representando a sua classificação de riqueza em relação às outras cidades, sendo que a cidade 1 tem menos dinheiro e a cidade N tem mais.\nRob está planejando uma “viagem de negócios” para Monopolis. O negócio de Rob é, na verdade, roubar. Roubando bancos, para ser mais preciso. Rob é um ladrão ambicioso e segue um modus operandi particular: ele só tem como alvo bancos com mais dinheiro do que aquele que acabou de roubar. Assim, após roubar em uma cidade i, ele se muda para a cidade mais próxima com mais dinheiro. Se houver várias cidades com mais dinheiro do que i na mesma distância, ele seleciona aquela com menos dinheiro. Se não existe cidade mais rica que eu, ele permanece na mesma cidade e reflete sobre suas ações.\nEmbora Rob esteja muito determinado em seu modus operandi, ele ainda está planejando sua viagem de negócios para Monopolis e então pede sua ajuda. Rob quer saber para cada cidade i qual seria a próxima cidade a visitar caso seu primeiro assalto seja na cidade i.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) representando o número de cidades em Monopolis. Cada cidade é identificada por um número inteiro distinto de 1 a N, em ordem crescente de riqueza.\nCada uma das próximas N − 1 linhas contém dois inteiros U e V (1 ≤ U,V ≤ N e U (cid:54)= V ), indicando que existe uma estrada de mão dupla entre as cidades U e V . É garantido que existe um caminho entre cada par de cidades utilizando as estradas fornecidas.\nSaída\nProduza uma única linha com N inteiros, de modo que o i-ésimo deles indique a próxima cidade que Rob visitaria caso seu primeiro assalto fosse na cidade i.",
    "samplesExamples": [
      [
        "6\n1 6\n2 5\n4 5\n3 5\n5 6",
        "6 5 5 5 6 6"
      ],
      [
        "5\n5 1\n1 3\n3 2\n2 4",
        "3 3 4 5 5"
      ],
      [
        "1",
        "1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Inversões",
    "text": "Todos os anos, matemáticos e cientistas da computação de todo o mundo se reúnem para o prestigiado Inversion Counting Puzzle Contest (ICPC). Para o próximo ICPC, os organizadores prepararam o seguinte desafio: dada uma string S composta por letras minúsculas, contar o número de inversões nela. Uma inversão é um par de índices i < j tais que Si (a letra na posição i) vem depois de Sj no alfabeto.\nNo entanto, no mês passado, um grupo de pesquisadores notáveis ​​desenvolveu um algoritmo sofisticado que pode contar as inversões em uma string de forma extremamente rápida. Embora esta tenha sido uma excelente notícia para o avanço da ciência, tem sido um pesadelo para o pessoal do ICPC, uma vez que o desafio planeado está agora obsoleto.\nEsse problema chegou ao responsável pela definição de problemas, que então apresentou uma ideia inteligente. Em vez de simplesmente receber uma string S, eles deveriam pedir aos participantes que repetissem essa string N vezes antes de contar as inversões. Se os juízes definirem N como grande o suficiente, em algum momento o algoritmo proposto pelos pesquisadores começará a ser muito lento. Felizes com a ideia, a equipe do ICPC prosseguiu com a organização do próximo concurso.\nInfelizmente, agora os jurados não sabem mais as respostas dos arquivos de entrada e, portanto, não podem julgar as submissões! O ICPC acaba de começar e os participantes estão prestes a começar a enviar as suas soluções. Por favor, ajude os juízes calculando as respostas, para que o ICPC possa funcionar sem problemas.\nEntrada\nA primeira linha contém uma string S (1 ≤ |S| ≤ 105), que é composta por letras minúsculas.\nA segunda linha contém um inteiro N (1 ≤ N ≤ 1012) indicando quantas vezes a string S deve ser repetida.\nSaída\nProduza uma única linha com um número inteiro indicando o número de inversões na string SN (S repetido N vezes). Como esse número pode ser muito grande, produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "ba\n1",
        "1"
      ],
      [
        "ab\n3",
        "3"
      ],
      [
        "zkba\n1",
        "6"
      ],
      [
        "cab\n7",
        "77"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Saúde em perigo",
    "text": "No deserto congelado, um urso polar vive em uma vasta geleira, representada como um plano 2D. As coordenadas da toca do urso são (0,0). Para ser saudável, cada vez que o urso acorda em sua toca, ele caminha para qualquer ponto a uma distância exatamente D da toca (medida pela distância euclidiana).\nCom o urso enfrentando os desafios de um clima em mudança, uma equipe de cientistas e matemáticos dedicados decidiu ajudar. Eles receberam um relatório detalhado repleto de previsões sobre o impacto iminente do aquecimento global na geleira nos próximos dias. O relatório contém as previsões em ordem cronológica, e cada uma delas é representada por uma linha infinita que corresponde a um evento de derretimento. Depois que cada previsão se concretizar, a linha que a representa não poderá mais ser cruzada pelo urso.\nInicialmente, a geleira é considerada infinitamente grande em todas as direções e o urso pode vagar livremente. No entanto, como equipa de cientistas e matemáticos, vocês compreendem o dilema do urso: de acordo com as previsões, o glaciar poderá eventualmente encolher de tal forma que o urso já não poderá ser saudável. Sua tarefa é calcular o primeiro momento em que isso acontecerá, ou seja, quando nenhum ponto exatamente D da toca puder ser alcançado pelo urso.\nA figura abaixo representa a primeira amostra. A circunferência contém os pontos a uma distância exatamente D da toca. Quando apenas as três primeiras previsões são consideradas (linhas sólidas), o urso ainda pode atingir pontos na circunferência. Uma vez considerada também a quarta previsão (linha tracejada), nenhum ponto da circunferência pode ser alcançado a partir da toca.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 2 × 105) e um número racional D com no máximo cinco dígitos após a vírgula (1 ≤ D ≤ 106). O valor N indica o número de previsões, enquanto D representa a distância da toca.\nCada uma das próximas N linhas descreve uma previsão com quatro inteiros X1, Y1, X2 e Y2 (−106 ≤ X1,Y1,X2,Y2 ≤ 106 e (X1,Y1) (cid:54)= (X2,Y2)) , que definem uma reta infinita no plano que passa por (X1,Y1) e (X2,Y2). Cada previsão indica que a linha correspondente não pode mais ser cruzada pelo urso. As previsões são dadas em ordem cronológica e são identificadas por números inteiros distintos de 1 a N, de acordo com essa ordem. É garantido que nenhuma previsão define uma linha que passa pela toca.\nSaída\nProduza uma única linha com um número inteiro identificando a previsão mais antiga que indica que nenhum ponto exatamente à distância D da toca pode ser alcançado pelo urso. Se esta situação nunca ocorrer, imprima o caractere “*” (asterisco). É garantido que variações no valor de D dentro de um intervalo de ±10−5 do valor dado na entrada não alteram a saída.",
    "samplesExamples": [
      [
        "5 4.321\n-2 -1 3 -2\n1 6 3 -2\n1 6 -2 -1\n-3 4 3 3\n-2 1 5 4",
        "4"
      ],
      [
        "5 2\n1 0 1 1\n-1 0 -1 -1\n3 1 1 3\n1 3 3 1\n0 4 4 0",
        "*"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Victor de Sousa Lamarca, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Latam++",
    "text": "O mundo ainda não possui linguagens de programação suficientes. Para ajudar nisso, o Comitê Interno para a Perfeição do C (ICPC) está planejando construir uma nova linguagem de programação: Latam++.\nNa América Latina++, um nome de variável consiste exclusivamente em uma ou mais letras minúsculas do alfabeto inglês. Uma expressão válida é uma string “bem formada”, expressando como combinar variáveis ​​usando os quatro operadores binários aritméticos “+”, “-”, “*” e “/”, possivelmente com parênteses.\nFormalmente, expressões válidas são exatamente aquelas strings que podem ser produzidas pelas regras a seguir.\n• Um nome de variável é uma expressão válida.\n• Colocar qualquer expressão válida entre parênteses produz outra expressão válida.\n• Se A e B são expressões válidas, então a concatenação AcB é uma expressão válida, onde c é qualquer um dos quatro operadores binários aritméticos “+”, “-”, “*” e “/”.\nPortanto, todas as expressões a seguir são válidas: • a+b • a+b*(c+b) • átomos+boots*(charly+bob) • (((a)))*(bbasdsaqwe/a/a/a ) Pelo contrário, as seguintes expressões não são válidas: • a+ • a+b(c+b) • átomos+boots*((charly+bob) • ((()))*(bbasdsaqwe/a/a/a ) A linguagem está longe de estar completa e provavelmente serão necessárias décadas de debates do ICPC até que a primeira versão do Latam++ seja lançada. Enquanto isso, focaremos apenas em um recurso específico e muito especial de seu compilador, chamado Automatic Valid Substring Expression Counting (. AVSEC).\nAVSEC é um recurso extremamente útil, onde o compilador informa o número total de substrings de uma determinada string que são expressões válidas. Sua tarefa é implementar o AVSEC.\nPara fins de contagem, duas substrings são consideradas diferentes se começarem ou terminarem em índices diferentes, mesmo que as strings correspondentes sejam idênticas (ou seja, tenham a mesma sequência de caracteres).\nEntrada\nA entrada consiste em uma única linha que contém uma string S (1 ≤ |S| ≤ 2 × 105), que é composta por letras minúsculas, parênteses de abertura ou fechamento e os quatro caracteres “+”, “-”, “ *\" e \"/\".\nSaída\nProduza uma única linha com um número inteiro indicando o número de substrings de S que são expressões válidas.\n  Explicação da amostra 1: As sete substrings são “a”, “a+b”, “b” (terceiro caractere), “(c+b)”, “c”, “c+b” e “b” ( sétimo personagem).",
    "samplesExamples": [
      [
        "a+b(c+b)",
        "7"
      ],
      [
        "aa",
        "3"
      ],
      [
        "a-a",
        "3"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Agustín Santiago Gutiérrez, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Ponto de encontro",
    "text": "Seu amigo Pedro sempre fica muito animado com atividades em grupo. Em sua excitação, ele corre tão rápido até o ponto de encontro que se cansa antes de chegar. Um dia, você decidiu coletar dados sobre esse fenômeno e, surpreendentemente, percebeu que ele se cansa consistentemente exatamente no meio do percurso. Em outras palavras, ele fica cansado quando percorre metade da distância que ia percorrer.\nSua cidade possui N cruzamentos identificados por números inteiros distintos de 1 a N, e M estradas de mão dupla.\nCada estrada tem um comprimento e liga um par específico de encruzilhadas, de forma que haja um caminho na cidade entre cada par de encruzilhadas. A distância entre duas encruzilhadas é o comprimento de um caminho mínimo entre essas encruzilhadas.\nPedro mora no cruzamento P, e seu grupo de amigos decidiu se encontrar no cruzamento G ainda hoje. Depois de pensar um pouco, você traçou o seguinte plano para que Pedro chegue na hora certa.\nVocê lhe dirá um ponto de encontro enganoso para que ele se canse exatamente em G. Para que esse plano funcione, o cruzamento G deve pertencer a todos os caminhos que Pedro poderia seguir ao ir de P ao ponto de encontro enganoso, e para cada um desses caminhos , Pedro deve se cansar exatamente no G. Felizmente, você sabe que Pedro é um bom planejador e nunca faria um caminho mais longo do que o necessário.\nAgora você se pergunta: que encruzilhada funcionaria como esse ponto de encontro enganoso? Entrada\nA primeira linha contém dois inteiros N (2 ≤ N ≤ 105) e M (1 ≤ M ≤ 105), indicando respectivamente o número de cruzamentos e o número de estradas da cidade. Cada encruzilhada é identificada por um número inteiro distinto de 1 a N.\nA segunda linha contém dois inteiros P e G (1 ≤ P,G ≤ N e P (cid:54)= G), denotando respectivamente o cruzamento onde Pedro mora e o ponto de encontro correto.\nCada uma das próximas M linhas descreve uma estrada com três inteiros U, V e D (1 ≤ U,V ≤ N, U (cid:54)= V e 1 ≤ D ≤ 109), representando que existe uma via de mão dupla. estrada de comprimento D entre os cruzamentos U e V .\nÉ garantido que existe um caminho entre cada par de cruzamentos usando as estradas fornecidas, e que existe no máximo uma estrada entre cada par de cruzamentos.\nSaída\nProduza uma única linha com uma lista crescente de números inteiros indicando os cruzamentos que funcionariam para o seu plano. Se nenhuma encruzilhada funcionar, digite o caractere “*” (asterisco).",
    "samplesExamples": [
      [
        "4 5\n1 3\n1 3 1\n2 1 3\n2 4 3\n4 3 1\n3 2 1",
        "2 4"
      ],
      [
        "4 5\n1 3\n1 3 1\n2 1 2\n2 4 3\n4 3 1\n3 2 1",
        "4"
      ],
      [
        "3 2\n1 2\n1 2 100000\n2 3 99999",
        "*"
      ],
      [
        "4 4\n4 3\n3 4 1\n4 1 1\n1 2 1\n2 3 1",
        "*"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Daniel Bossle, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Fechem as Portas!",
    "text": "Madame Beauvoir possui uma mansão onde ela recebe todos os seus descendentes (netos e bisnetos) durante as férias. Sua mansão possui exatamente N quartos (cada quarto é numerado de 1 a N), onde N é também a quantidade de netos e bisnetos (cada descendente é também numerado de 1 a N).\nComo toda criança, os descendentes de Mme. Beauvoir são bastante travessos. Todo dia é a mesma confusão: eles acordam de manhã cedo antes dela e se encontram no grande jardim. Cada descendente, um de cada vez, entra na mansão e troca o estado das portas dos quartos cujos números são múltiplos do seu identificador. Trocar o estado de uma porta significa fechar uma porta que estava aberta ou abrir uma porta que estava fechada. Por exemplo, o descendente cujo identificador é igual a 15 vai trocar o estado das portas 15, 30, 45, etc.\nConsiderando que todas as portas estão inicialmente fechadas (todos os descendentes fecham as portas antes de descer para o jardim) e que cada descendente entra exatamente uma vez na mansão (a confusão é tão grande que não sabemos em que ordem), quais portas estarão abertas após a entrada de todos os descendentes na mansão? Entrada\nA única linha da entrada contém apenas um inteiro N (1 ≤ N ≤ 25 × 106), indicando o número de portas e descendentes.\nSaída\nSeu programa deve produzir uma única linha, contendo uma sequ¨ência crescente de números cor respondente aos identificadores dos quartos cujas portas estarão abertas após a entrada de todos os descendentes na mansão.",
    "samplesExamples": [
      [
        "1",
        "1"
      ],
      [
        "2",
        "1"
      ],
      [
        "3",
        "1"
      ],
      [
        "4",
        "1 4"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Esquerda, Volver!",
    "text": "Este ano o sargento está tendo mais trabalho do que de costume para treinar os recrutas. Um deles é muito atrapalhado, e de vez em quando faz tudo errado – por exemplo, ao invés de virar à direita quando comandado, vira à esquerda, causando grande confusão no batalhão.\nO sargento tem fama de durão e não vai deixar o recruta em paz enquanto este não aprender a executar corretamente os comandos. No sábado à tarde, enquanto todos os outros recrutas estão de folga, ele obrigou o recruta a fazer um treinamento extra. Com o recruta marchando parado no mesmo lugar, o sargento emitiu uma série de comandos “esquerda volver!” e “direita volver!”. A cada comando, o recruta deve girar sobre o mesmo ponto e dar um quarto de volta na direção correspondente ao comando. Por exemplo, se o recruta está inicialmente com o rosto voltado para a direção norte, após um comando de “esquerda volver!” ele deve ficar com o rosto voltado para a direção oeste. Se o recruta está inicialmente com o rosto voltado para o leste, após um comando “direita, volver!” ele deve ter o rosto voltado para o sul.\nNo entanto, durante o treinamento, em que o recruta tinha inicialmente o rosto voltado para o norte, o sargento emitiu uma série tão extensa de comandos, e tão rapidamente, que até ele ficou confuso, e não sabe mais para qual direção o recruta deve ter seu rosto voltado após executar todos os comandos. Você pode ajudar o sargento? Entrada\nA primeira linha da entrada contém um inteiro N que indica o número de comandos emitidos pelo sargento (1 ≤ N ≤ 1.000). A segunda linha contém N caracteres, descrevendo a série de comandos emitidos pelo sargento. Cada comando é representado por uma letra: ‘E’ (para “esquerda, volver!”) e ‘D’ (para “direita, volver!”).\nSaída\nSeu programa deve produzir uma única linha, indicando a direção para a qual o recruta deve ter sua face voltada após executar a série de comandos, considerando que no início o recruta tem a face voltada para o norte. A linha deve conter uma letra entre ‘N’, ‘L’, ‘S’ e ‘O’, representando respectivamente as direções norte, leste, sul e oeste.",
    "samplesExamples": [
      [
        "3\nDDE",
        "L"
      ],
      [
        "2\nEE",
        "S"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Mário",
    "text": "Mário é dono de uma empresa de guarda-volumes, a Armários a Custos Moderados (ACM). Mário conquistou sua clientela graças à rapidez no processo de armazenar os volumes. Para isso, ele tem duas técnicas: • Todos os armários estão dispostos numa fila e são numerados com inteiros positivos a partir de 1. Isso permite a Mário economizar tempo na hora de procurar um armário; • Todos os armários têm rodinhas, o que lhe dá grande flexibilidade na hora de rearranjar seus armários (naturalmente, quando Mário troca dois armários de posição, ele também troca suas numerações, para que eles continuem numerados sequ¨encialmente a partir de 1).\nPara alugar armários para um novo cliente, Mário gosta de utilizar armários contíguos, pois no início da locação um novo cliente em geral faz muitas requisições para acessar o conteúdo armazenado, e o fato de os armários estarem contíguos facilita o acesso para o cliente e para Mário.\nDesde que Mário tenha armários livres em quantidade suficiente, ele sempre pode conseguir isso.\nPor exemplo, se a requisição de um novo cliente necessita de quatro armários, mas apenas os armários de número 1, 3, 5, 6, 8 estiverem disponíveis, Mário pode trocar os armários 5 e 2 e os armários 6 e 4 de posição: assim, ele pode alugar o intervalo de armários de 1 até 4.\nNo entanto, para minimizar o tempo de atendimento a um novo cliente, Mário quer fazer o menor número de trocas possível para armazenar cada volume. No exemplo acima, ele poderia simplesmente trocar os armários 1 e 4 de posição, e alugar o intervalo de 3 até 6.\nMário está muito ocupado com seus clientes e pediu que você fizesse um programa para determinar o número mínimo de trocas necessário para satisfazer o pedido de locação de um novo cliente.\nEntrada\nA primeira linha da entrada contém dois números inteiros N e L (1 ≤ N ≤ L ≤ 105), indicando quantos armários são necessários para acomodar o pedido de locação do novo cliente e quantos armários estão disponíveis, respectivamente. A segunda linha contém L inteiros distintos Xi (1 ≤ X1 < X2 < ... < XL ≤ 109), em ordem crescente, indicando as posições dos armários disponíveis.\nSaída\nSeu programa deve produzir uma única linha, contendo um único número inteiro, indicando o número mínimo de trocas que Mário precisa efetuar para satifazer o pedido do novo cliente (ou seja, ter N armários consecutivos disponíveis).",
    "samplesExamples": [
      [
        "5 6\n1 3 4 5 6 8",
        "1"
      ],
      [
        "5 5\n1 3 5 6 8",
        "2"
      ],
      [
        "5 6\n1 4 5 6 7 8",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Dona Minhoca",
    "text": "Dona Minhoca fica furiosa quando ouve as pessoas dizerem que minhocas são bichos palíndromes, nos quais não é possível distinguir a cabeça do rabo. Que infâmia! Dona Minhoca vive em uma linda caverna, composta de salões e túneis. Cada túnel liga dois salões distintos e pode ser usado nas duas direções. Um “ciclo” na caverna é uma sequência de salões s1,s2,...,sn,sn+1 = s1, tais que si (cid:54)= si+1 e (si,si+1) é um túnel, para 1 ≤ i ≤ n. A caverna de Dona Minhoca pode conter ciclos, mas cada salão faz parte de no máximo um ciclo da caverna. Os túneis e salões são estreitos, de forma que se uma parte do corpo de Dona Minhoca ocupa um túnel ou salão, não há espaço para Dona Minhoca entrar novamente por esse túnel ou salão.\nAlguns salões da caverna têm acesso a partir da superfície. Dona Minhoca tem um mapa que descreve a caverna, informando para cada túnel o seu comprimento e quais dois salões o túnel liga.\nDona Minhoca também é vaidosa e conhece o seu próprio comprimento.\nDona Minhoca quer saber, para os salões que têm acesso à superfície, se é possível entrar na caverna pelo salão, percorrer a menor distância possível dentro da caverna, e sair novamente pelo mesmo salão que entrou, sempre andando para a frente, sem nunca dar marcha-a-ré. Você pode ajudá-la? Entrada\nA primeira linha contém dois inteiros S (2 ≤ S ≤ 104) e T (1 ≤ T ≤ 2S) representando respectivamente o número de salões e o número de túneis da caverna. Os salões são identificados por inteiros de 1 a S.\nCada uma das T linhas seguintes descreve um túnel e contém três inteiros A, B e C (1 ≤ A < B ≤ S;1 ≤ C ≤ 100), onde A e B representam os salões ligados pelo túnel, e C representa o comprimento do túnel. Um salão é ligado por túneis a no máximo outros 100 salões e cada dois salões são ligados por no máximo um túnel. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 100), que indica o número de consultas. Cada uma das Q linhas seguintes descreve uma consulta, e contém dois inteiros X (1 ≤ X ≤ S) e M (1 ≤ M ≤ 105), que indicam respectivamente o salão pelo qual Dona Minhoca quer entrar e o comprimento de Dona Minhoca.\nSaída\nPara cada consulta da entrada seu programa deve produzir apenas uma linha, contendo apenas um número inteiro, o comprimento do percurso mínimo que Dona Minhoca deve percorrer dentro da caverna para entrar e sair pelo salão indicado na consulta, sem dar marcha-a-ré. Se não for possível para Dona Minhoca entrar e sair sem dar marcha-a-ré, a linha deve conter o valor −1.\nExemplos",
    "samplesExamples": [
      [
        "4 4\n1 2 12\n2 3 10\n3 4 8\n2 4 5\n3\n1 23\n4 10\n1 24",
        "47\n23\n-1"
      ],
      [
        "8 9\n1 2 1\n2 3 1\n3 4 1\n2 5 10\n5 6 25\n2 6 20\n3 7 9\n7 8 3\n3 8 4\n4\n1 10\n4 60\n8 5\n7 55",
        "20\n-1\n16\n71"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Letras",
    "text": "Os parques na Cidade da Lógica são reticulados de N × N quadrados (2 ≤ N ≤ 100), onde cada quadrado contém uma das 10 primeiras letras ASCII, abcdefghijABCDEFGHIJ, em caixa minúscula ou maiúscula. As pessoas na Cidade da Lógica têm orgulho de seguir apenas caminhos consistentes quando cruzam os parques. Por exemplo, se eles passam por um c minúsculo, eles não vão se permitir, mais adiante, passar por um C maiúsculo. Para definir isso mais precisamente, um caminho consistente é uma sequência de quadrados satisfazendo: quadrados consecutivos na sequência são adjacentes ortogonalmente; nenhuma letra ocorre na sequência tanto minúscula quanto maiúscula. Quer dizer, ou a letra não está na sequência, ou ela ocorre apenas em caixa minúscula, ou somente em caixa maiúscula.\nDdaAaA D.....\nCBAcca C.....\neEaeeE e.....\nbBbabB b.bab.\nDbDdDc DbD.D.\nfFaAaC ....aC Você deve escrever um programa para ajudar as pessoas da Cidade da Lógica a computar o com primento do menor caminho consistente entre o quadrado de coordenadas (1,1), no canto superior esquerdo, e o quadrado de coordenadas (N,N), no canto inferior direito. Por exemplo, para o parque acima, o menor caminho consistente tem comprimento 13.\nEntrada\nA primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100), o tamanho do parque. As N linhas seguintes contêm, cada uma, uma sequência de N letras, definindo o parque.\nSaída\nSeu programa deve imprimir uma linha contendo um inteiro, o comprimento de um caminho consistente mínimo. Se não houver um caminho consistente, imprima -1.\nExemplos",
    "samplesExamples": [
      [
        "6\nDdaAaA\nCBAcca\neEaeeE\nbBbabB\nDbDdDc\nfFaAaC",
        "13"
      ],
      [
        "7\naAaaaaa\naAaaaAa\naAaaaAA\naaAaAaa\nAaAaaAa\naaAAaAa\naaaaaAa",
        "-1"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Pizza do Vô Pepe",
    "text": "Vovô Pepe é famoso por suas pizzas. Elas são deliciosas, e têm o formato de um círculo perfeito.\nVovô preparou uma pizza especial para o jantar de hoje à noite, e colocou um certo número de azeitonas distribuídas aleatoriamente, mas colocadas exatamente na borda da pizza.\nSua tarefa é determinar, conhecendo a circunferência da pizza, a quantidade de azeitonas e a posição de cada azeitona, se é possível dividir a pizza em setores circulares de mesmo tamanho, de tal forma que cada pedaço de pizza contenha exatamente uma azeitona.\nA figura abaixo mostra (a) uma pizza de circunferência 12 com 3 azeitonas e uma possível divisão em pedaços iguais; e (b) uma pizza de circunferência 12 com 4 azeitonas que não pode ser dividida em pedaços iguais como descrito acima. Apesar de deliciosas, as azeitonas são muito pequenas, e suas dimensões podem ser desconsideradas no cálculo da divisão.\nEntrada\nA primeira linha contém dois inteiros C (3 ≤ C ≤ 105) e N (3 ≤ N ≤ 104,N ≤ C) representando respectivamente a circunferência da pizza e o número de azeitonas. O inteiro C é múltiplo de N. A segunda linha contém N inteiros distintos Xi (0 ≤ X1 < X2 < ... < XN < C), em ordem crescente, descrevendo as posições das azeitonas, dadas pelo comprimento do arco circular no sentido horário, a partir de um ponto fixo da circunferência.\nSaída\nSeu programa deve produzir apenas uma linha, com apenas uma letra, que deve ser S se é possível dividir a pizza como descrito acima, ou N caso contrário.\nExemplos",
    "samplesExamples": [
      [
        "12 3\n2 8 11",
        "S"
      ],
      [
        "12 4\n4 5 7 11",
        "N"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Teletransporte",
    "text": "A Confederação Galática instalou um novo sistema de teletransporte em suas naves espaciais. Cada nave recebeu uma cabine de teletransporte, na qual há um painel com quatro botões. Cada botão é rotulado com uma letra diferente A, B, C ou D e com um número que indica a nave destino para a qual o usuário será transportado, instantaneamente, se o respectivo botão for pressionado (como todos sabem, as naves da Confederação são identificadas por inteiros de 1 a N).\nPara usar o sistema, o usuário deve adquirir um bilhete para cada viagem que deseja realizar (uma viagem corresponde a pressionar um botão). Note que como o número botões no painel é pequeno comparado com o número de naves da Confederação, pode ser necessário que o usuário tenha que comprar um bilhete múltiplo de L viagens para ir de uma dada nave S para uma outra nave T.\nPor exemplo, para as naves da figura abaixo, se o usuário está na cabine de teletransporte da nave 3 e pressiona o botão B ele é transportado para a nave 2. Se ele tem um bilhete múltiplo e pressiona novamente o botão B ele é então transportado para a nave 1.\nSua tarefa neste problema é, dados a nave de partida S, a nave de chegada T e o número de viagens L do bilhete, determinar quantas sequências distintas de L botões levam o usuário da nave S para a nave T. Por exemplo, para as naves da figura acima, existem quatro sequências distintas de L = 2 botões que levam um usuário da nave S = 3 para a nave T = 1: CD, DA, AB, e BB.\nEntrada\nA primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 100) e L (0 ≤ L < 230), indicando respectivamente o número de naves e o número de viagens do bilhete. A segunda linha da entrada contém dois inteiros S e T (1 ≤ S,T ≤ N), indicando respectivamente a nave de partida e a nave de chegada. Cada uma das N linhas seguintes descreve o painel da cabine de teletransporte de uma nave.\nA i-ésima dessas linhas, 1 ≤ i ≤ N, contém quatro inteiros A, B, C e D (1 ≤ A,B,C,D ≤ N), que representam os números escritos nos quatro botões da cabine de teletransporte da nave de número i.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, que deve ser igual a r módulo 104, onde r é o número de sequências distintas de L botões que levam o usuário da nave S para a nave T.\nExemplos",
    "samplesExamples": [
      [
        "2 20\n1 1\n2 2 2 2\n1 1 1 1",
        "7776"
      ],
      [
        "2 29\n1 1\n2 2 2 2\n1 1 1 1",
        "0"
      ],
      [
        "2 0\n1 1\n2 2 2 2\n1 1 1 1",
        "1"
      ],
      [
        "2 0\n1 2\n2 2 2 2\n1 1 1 1",
        "0"
      ],
      [
        "3 2\n3 1\n1 2 2 2\n2 1 3 2\n2 2 3 1",
        "4"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Confederação",
    "text": "A Confederação Galática resolveu fazer uma reforma administrativa, para melhor distribuir os recursos de sua frota. Para isso, ela dividiu todo o espaço em regiões. Para definir as regiões, inicial mente um conjunto de planos infinitos foi especificado, e as regiões foram definidas pelos cortes desses planos. Note que algumas regiões são ilimitadas, mas que também podem existir regiões limitadas.\nO conjunto de planos foi escolhido de tal maneira que nenhum dos planos intercepta a órbita de um planeta, e portanto cada planeta transita por apenas uma região durante sua órbita (ou seja, um planeta dentro de uma região nunca cruzará um plano para outra região).\nSua tarefa consiste em determinar, dadas as equações dos planos e as posições dos planetas, quantos planetas existem na região com o maior número de planetas (em outras palavras, qual o número máximo de planetas dentro de uma região).\nEntrada\nA primeira linha da entrada contém dois inteiros M (1 ≤ M ≤ 500) e N (1 ≤ N ≤ 10000), indicando respectivamente o número de planos e número de planetas. As M linhas seguintes contêm cada uma quatro inteiros A,B,C e D (−10000 ≤ A,B,C,D ≤ 10000), os coeficientes e o termo livre da equação Ax+By+Cz = D que define cada um dos planos. A seguir, cada uma das N linhas seguintes contém três inteiros X,Y e Z (−10000 ≤ X,Y,Z ≤ 10000), indicando a posição (X,Y,Z) de um planeta.\nSaída\nSeu programa deve produzir uma única linha contendo apenas um número inteiro, o número de planetas na região que contém o maior número de planetas.\nExemplos",
    "samplesExamples": [
      [
        "2 5\n1 0 0 1\n2 0 0 8\n0 1 0\n2 2 2\n3 3 3\n5 5 5\n2 18 4",
        "3"
      ],
      [
        "4 8\n0 0 1 1\n1 0 1 2\n-1 1 1 3\n-1 -1 1 3\n0 0 5\n0 0 4\n0 0 -2\n1 0 5\n40 19 104\n13 26 84\n89 -45 18\n3 1 0",
        "5"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Baralho Embaralhado",
    "text": "Um baralho contém um número par 2n de cartas a1,a2,...,a2n, todas distintas (a1 < a2 < ··· < a2n). O baralho encontra-se perfeitamente ordenado, ou seja, a primeira carta é a1, a segunda carta é a2, e assim por diante, até a última carta, que é a2n.\nUm croupier então executa repetidamente um procedimento de embaralhar, que consiste de dois passos: 1. o baralho é dividido ao meio; 2. as cartas das duas metades são então intercaladas, de maneira que se a sequência de cartas do baralho no início do passo 1 é x1,x2,...,x2n, então ao final do passo 2 a sequência de cartas se torna xn+1,x1,xn+2,x2,...,x2n,xn.\nDado o número de cartas do baralho, escreva um programa que determine quantas vezes o procedi mento de embaralhar descrito acima deve ser repetido de forma que o baralho volte a ficar ordenado.\nEntrada\nA única linha da entrada contém um inteiro par P (2 ≤ P ≤ 2 × 105), indicando o número de cartas do baralho (note que o valor P corresponde ao valor 2n na descrição acima).\nSaída\nSeu programa deve produzir uma única linha contendo um único inteiro, o número mínimo de vezes que o processo de embaralhamento deve ser repetido para que o baralho fique novamente ordenado.\nExemplos",
    "samplesExamples": [
      [
        "4",
        "4"
      ],
      [
        "6",
        "3"
      ],
      [
        "2",
        "2"
      ],
      [
        "100002",
        "100002"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Volta",
    "text": "No automobilismo é bastante comum que o líder de uma prova, em determinado momento, ultra passe o último colocado. O líder, neste momento, está uma volta à frente do último colocado, que se torna, assim, um retardatário. Neste problema, dados os tempos que o piloto mais rápido e o piloto mais lento levam para completar uma volta, você deve determinar em que volta o último colocado se tornará um retardatário, ou seja, será ultrapassado pelo líder. Você deve considerar que, inicialmente, eles estão lado a lado, na linha de partida do circuito, ambos no início da volta de número 1 (a primeira volta da corrida); e que uma nova volta se inicia sempre depois que o líder cruza a linha de partida.\nEntrada\nA única linha da entrada contém dois números inteiros X e Y (1 ≤ X < Y ≤ 10000), os tem pos, em segundos, que o piloto mais rápido e o piloto mais lento levam para completar uma volta, respectivamente.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro: a volta em que o piloto mais lento se tornará um retardatário.\nExemplos",
    "samplesExamples": [
      [
        "1 10",
        "2"
      ],
      [
        "4 8",
        "2"
      ],
      [
        "5 7",
        "4"
      ],
      [
        "6875 7109",
        "31"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ecologia",
    "text": "O reino da Poliminogônia passou recentemente uma lei ecológica que obriga todas as fazendas a preservar o máximo de árvores possível em uma porcentagem fixa da área da fazenda. Além disso, para que os animais silvestres possam se movimentar livremente, a área preservada deve ser conexa.\nAs fazendas na Poliminogônia são sempre um reticulado de N ×N quadrados de um hectare cada. A figura ao lado ilustra uma fazenda com N = 5. A área preservada deve cobrir exatamente M quadrados. No exemplo da figura, M = 6. Ela deve ser conexa ortogonalmente; quer dizer, tem que ser possível se movimentar entre quaisquer dois quadrados preservados apenas com movimentos ortogonais entre quadrados preservados. A área não preservada, entretanto, pode ser desconexa. Os fazendeiros sabem o número de árvores que há dentro de cada quadrado e você deve escrever um programa que calcule o número máximo possível de árvores que podem ser preservadas com uma área de M quadrados. No exemplo, é possível preservar 377 árvores! Entrada\nA primeira linha da entrada contém dois inteiros N e M (2 ≤ N ≤ 50, 1 ≤ M ≤ 10). As N linhas seguintes contêm, cada uma, N inteiros de valor entre 1 e 1000, representando o número de árvores dentro de cada quadrado da fazenda.\nSaída\nSeu programa deve imprimir uma linha contendo um número inteiro, o número máximo de árvores que podem ser preservadas, com as restrições dadas.\nExemplos\nEntrada\nSaída\n5 6 377",
    "samplesExamples": [
      [
        "5 6\n31 12 7 1 14\n23 98 3 87 1\n5 31 8 2 99\n12 3 42 17 88\n120 2 7 5 7",
        "377"
      ],
      [
        "4 8\n1 1 1 1\n9 9 9 1\n9 1 9 1\n9 9 9 1",
        "72"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Corte",
    "text": "Todo polígono convexo, com 2N vértices, pode ser decomposto em N − 1 quadriláteros, fazendo se N − 2 cortes em linha reta entre certos pares de vértices. A figura abaixo ilustra três diferentes decomposições do mesmo polígono com N = 5. O peso da decomposição é a soma dos comprimentos de seus N − 2 cortes. Seu programa deve computar o peso de uma decomposição de peso mínimo! Entrada\nA primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100). As 2N linhas seguintes contém cada uma dois números reais X e Y (0 ≤ X,Y ≤ 10000), com precisão de 4 casas decimais: as coordenadas dos 2N pontos, em sentido anti-horário, do polígono convexo.\nSaída\nSeu programa deve imprimir uma linha contendo um número real, com precisão de 4 casas decimais.\nO número deve ser o peso de uma decomposição de peso mínimo do polígono dado.\nExemplos",
    "samplesExamples": [
      [
        "4\n5715.7584 3278.6962\n3870.5535 4086.7950\n3823.2104 4080.7543\n3574.4323 170.2905\n4521.4796 144.9156\n4984.6486 306.2896\n5063.1061 347.1661\n6099.9959 2095.9358",
        "4519.6176"
      ],
      [
        "2\n6044.4737 2567.9978\n5752.5635 3226.5140\n5148.8242 3802.9292\n4598.8042 4036.8000",
        "0.0000"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "RSA",
    "text": "O algoritmo RSA é um dos algoritmos de criptografia mais utilizados e é considerado uma das alternativas mais seguras existentes. Seu funcionamento básico é descrito a seguir.\nDois números primos ímpares p e q são escolhidos e calcula-se n = pq. A seguir é calculada a função totiente φ(n) = (p − 1)(q − 1) e um inteiro e satisfazendo 1 < e < φ(n) é escolhido de forma que mdc(φ(n),e) = 1. Finalmente é calculado o inteiro d, o inverso multiplicativo de e módulo φ(n), ou seja, o inteiro d satisfazendo de = 1 (mod φ(n)).\nAssim obtemos a chave pública, formada pelo par de inteiros n e e, e a chave secreta, formada pelos inteiros n e d.\nPara criptografar uma mensagem m, com 0 < m < n, calcula-se c = me (mod n), e c é a mensagem criptografada. Para descriptografá-la, ou seja, para recuperar a mensagem original, basta calcular m = cd (mod n). Note que, para isso, a chave secreta deve ser conhecida, não sendo suficiente o conhecimento da chave pública. Note ainda que a expressão x = 1 (mod y) usada acima equivale a dizer que y é o menor natural tal que o resto da divisão de x por y é 1.\nNeste problema você deve escrever um programa para quebrar a criptografia RSA.\nEntrada\nA única linha da entrada contém três inteiros N, E, e C, onde 15 ≤ N ≤ 109, 1 ≤ E < N e 1 ≤ C < N, de forma que N e E constituem a chave pública do algoritmo RSA descrita acima e C é uma mensagem criptografada com essa chave pública.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro M, 1 ≤ M < N, a mensagem original.\nExemplos",
    "samplesExamples": [
      [
        "1073 71 436",
        "726"
      ],
      [
        "91 43 19",
        "33"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Handebol",
    "text": "Frustrado e desanimado com os resultados de sua equipe de futebol, o Super Brasileiro Clube (SBC) resolveu investir na equipe de handebol. Para melhor avaliar os atletas, os técnicos identificaram que seria útil analisar a regularidade dos jogadores. Especificamente, eles estão interessados em saber quantos jogadores fizeram gols em todas as partidas.\nComo o volume de dados é muito grande, eles gostariam de ter um programa de computador para realizar essa contagem.\nEntrada\nA primeira linha da entrada contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ 100), indicando respectivamente o número de jogadores e o número de partidas. Cada uma das N linhas seguintes descreve o desempenho de um jogador: a i-ésima linha contém M inteiros Xj (0 ≤ Xj ≤ 100, para 1 ≤ j ≤ M), informando o número de gols do i-ésimo jogador em cada partida.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o número de jogadores que fizeram gols em todas as partidas.\nExemplos",
    "samplesExamples": [
      [
        "5 3\n0 0 0\n1 0 5\n0 0 0\n0 1 2\n1 1 0",
        "0"
      ],
      [
        "12 5\n4 4 2 3 7\n0 0 0 1 0\n7 4 7 0 6\n1 2 3 3 2\n0 0 0 0 0\n4 0 9 10 10\n0 1 0 0 0\n1 2 0 2 3\n10 10 10 1 0\n0 3 3 3 4\n10 10 0 10 10\n1 1 2 0 9",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "O retorno do Rei",
    "text": "O prolífico autor Stephen King estava registrando as notas de seus alunos de literatura em uma calculadora on-line de média geral. Ao terminar, percebeu que sua tecla de retorno estava quebrada, então em vez de inserir as notas de um aluno em uma linha separada cada, ele as inseriu em uma única linha sem qualquer separação.\nComo o Sr. King não tem as habilidades necessárias para consertar sua chave de retorno imediatamente, ele precisa que você calcule a média das notas do aluno a partir da entrada não separada.\nCada nota é um número inteiro entre 1 e 10. Todas as notas foram inseridas escritas na base 10 sem zeros à esquerda. Por exemplo, se as notas do aluno do Sr. King fossem 3, 10, 1 e 10, elas seriam inseridas como “310110”.\nEntrada\nA entrada consiste em uma única linha que contém uma string não vazia S de no máximo 100 dígitos de base 10.\nExiste uma maneira única de particionar S em uma lista de substrings de forma que cada substring represente um número inteiro entre 1 e 10 na base 10 sem zeros à esquerda.\nSaída\nProduza uma linha com um número racional representando a média das notas do aluno cujas notas o Sr. King inseriu como S. O resultado deve ser exibido como um número racional com exatamente dois dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "310110",
        "6.00"
      ],
      [
        "10910",
        "9.67"
      ],
      [
        "222222223",
        "2.11"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "As duas torres",
    "text": "Duas torres de altura H são uma expressão matemática da forma 222...2 com o número dois aparecendo exatamente H vezes. O valor de duas torres é o valor da expressão correspondente. Por exemplo, o valor das duas torres de altura 1 é 2, o valor das duas torres de altura 2 é 22 = 4 e o valor das duas torres de altura 4 é 2222 = 65536.\nO valor das duas torres de altura 5 é portanto 265536 e não há espaço suficiente nesta folha de papel para escrevê-lo por extenso.\nDado que os valores de duas torres podem crescer muito, gostaríamos de saber se você pode nos ajudar a determinar o restante desses valores quando dividido por 3.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro H representando a altura das duas torres que queremos considerar (1 ≤ H ≤ 10100).\nSaída\nProduza uma linha com um número inteiro representando o restante da divisão do valor das duas torres de altura H por 3.",
    "samplesExamples": [
      [
        "1",
        "2"
      ],
      [
        "2",
        "1"
      ],
      [
        "99999999999999999999",
        "1"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "A sociedade do Anel",
    "text": "Box é um esporte muito violento. Para compensar, existe um código de conduta para manter o cavalheirismo e o companheirismo no topo do ringue em jogos amistosos. Uma das regras mais conhecidas deste código de conduta é evitar bater no adversário abaixo da cintura ou acima do pescoço.\nDadas as alturas da cintura e do pescoço de um oponente, e as alturas de uma série de socos, calcule quantos desses socos são justos de acordo com a regra acima.\nEntrada\nA primeira linha contém três inteiros W, N e P, representando respectivamente a altura da cintura do oponente, a altura do pescoço e o número de socos desferidos (1 ≤ W < N ≤ 200 e 1 ≤ P ≤ 100) . A segunda linha contém P inteiros H1,H2,...,HP (1 ≤ Hi ≤ 200 para i = 1,2,...,P) indicando as alturas dos punções. Todas as alturas são fornecidas em centímetros.\nSaída\nProduza uma linha com um número inteiro representando o número de golpes justos, de acordo com o código de conduta.",
    "samplesExamples": [
      [
        "80 150 3\n10 100 160",
        "1"
      ],
      [
        "80 150 3\n80 100 150",
        "3"
      ],
      [
        "2 199 5\n2 1 200 199 1",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Dividindo os nomes",
    "text": "A Rainha da Nlogônia decidiu mudar a capital do reino para uma nova cidade chamada Sortonia. O projeto da cidade é uma grade N × N composta por N avenidas na direção Norte-Sul e N ruas na direção Leste-Oeste. Assim, cada avenida cruza todas as ruas, e não há duas ruas ou duas avenidas que se cruzam.\nComo a cidade está quase terminada, chegou a hora de dar nomes às suas ruas e avenidas. O povo da Nlogónia já votou nos nomes 2×N que pretende usar, mas ainda não foi decidido quais deles serão usados ​​nas ruas e quais nas avenidas. A questão não é tão simples, porque em cada cruzamento deveria haver uma placa identificando a rua e a avenida que ali se cruzam, e a Rainha ordenou expressamente que as letras destas placas fossem escritas em ouro incrustado de rubis.\nSendo o Contador Oficial que Conta o Dinheiro (ACM), é sua tarefa encontrar uma forma de minimizar o número total de letras escritas nas placas dos cruzamentos, por motivos óbvios. Felizmente, você pensou em uma maneira muito inteligente de conseguir isso, que é usar abreviações para os nomes das ruas e avenidas nas placas. A abreviatura do nome de uma avenida (respectivamente uma rua) é o prefixo mais curto do seu nome que não é um prefixo do nome de qualquer outra avenida (respectivamente rua). É claro que a abreviatura a ser usada para cada nome depende de como o conjunto de 2 × N nomes é dividido em dois conjuntos disjuntos de N nomes a serem usados ​​para ruas e avenidas.\nPor exemplo, considere o caso com N = 2 onde os quatro nomes escolhidos são “GAUSS”, “GALOIS”, “ERDOS” e “EULER”. Se às ruas fossem atribuídos os nomes “GAUSS” e “GALOIS”, enquanto às avenidas fossem atribuídos os nomes “ERDOS” e “EULER”, então as abreviaturas seriam “GAU” para “GAUSS”, “GAL” para “GALOIS” , “ER” para “ERDOS” e “EU” para “EULER”. Com esta divisão, o número total de letras a serem escritas nos sinais seria 20, pois as quatro intersecções seriam rotuladas por “GAU|ER”, “GAU|EU”, “GAL|ER” e “GAL|EU” .\nPorém, no exemplo acima seria mais conveniente atribuir às ruas os nomes “GAUSS” e “ERDOS”, deixando “GALOIS” e “EULER” para as avenidas. Então, as abreviaturas seriam “G” para “GAUSS”, “E” para “ERDOS”, “G” para “GALOIS” e “E” para “EULER”, e o número total de letras a serem escritas nos sinais seria apenas 8 (já que as interseções seriam rotuladas por “G|G”, “G|E”, “E|G” e “E|E”).\nFelizmente, o conjunto de nomes que foi escolhido é tal que nenhum nome nele contido é um prefixo de algum outro nome no conjunto, garantindo assim que o esquema que você propõe será sempre viável. Você consegue calcular o número mínimo de letras a serem escritas nos sinais se dividir os nomes de maneira ideal? Entrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 100) representando tanto o número de ruas quanto o número de avenidas em Sortonia. Cada uma das próximas 2 × N linhas contém uma sequência não vazia de no máximo 18 letras maiúsculas, indicando um dos nomes que foram escolhidos. Você pode assumir que nenhuma das strings fornecidas é um prefixo de outra string na entrada.\nSaída\nProduza uma linha com um número inteiro representando o número total mínimo de letras a serem escritas nas placas, quando a divisão dos nomes de ruas e avenidas for escolhida de forma otimizada.",
    "samplesExamples": [
      [
        "2\nGAUSS\nGALOIS\nERDOS\nEULER",
        "8"
      ],
      [
        "4\nAA\nAB\nAC\nAD\nBA\nBB\nBC\nBD",
        "56"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Leopoldo Taravilse, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Colisão de galáxias",
    "text": "Espera-se que a galáxia de Andrômeda colida com a nossa Via Láctea em cerca de 3,8 bilhões de anos. A colisão será provavelmente uma fusão das duas galáxias, sem que duas estrelas realmente colidam. Isso ocorre porque a distância entre as estrelas em ambas as galáxias é muito grande. O professor Andrew está construindo um modelo computacional para prever os possíveis resultados da colisão e precisa da sua ajuda! É dado um conjunto de pontos no plano bidimensional, representando estrelas em uma determinada região das galáxias já fundidas. Ele não sabe quais estrelas vieram originalmente de qual galáxia; mas ele sabe que, para esta região, se duas estrelas vieram da mesma galáxia, então a distância entre elas é superior a 5 anos-luz. Como todas as estrelas desta região vêm de Andrômeda ou da Via Láctea, o professor também sabe que o conjunto de pontos dado pode ser separado em dois subconjuntos disjuntos, um compreendendo estrelas de Andrômeda e outro estrelas da Via Láctea, ambos subconjuntos com a propriedade de que a distância mínima entre dois pontos no subconjunto é maior que 5 anos-luz. Ele chama isso de uma boa separação, mas a má notícia é que pode haver muitas separações boas diferentes. Entretanto, entre todas as boas separações possíveis, há um número mínimo de estrelas que um subconjunto deve conter, e esse é o número que seu programa deve calcular.\nPor exemplo, a imagem ilustra um determinado conjunto de seis pontos. O professor Andrew não consegue dizer quais estrelas vieram de Andrômeda, mas observe que existem quatro boas separações possíveis: {{1,2,4,5},{3,6}}; {{1,2,3,4},{5,6}}; {{1,4,5},{2,3,6}}; {{1,3,4},{2,5,6}}. Portanto, pelo menos duas estrelas devem ter vindo de Andrômeda, já que este é o número mínimo de pontos que um subconjunto pode ter numa boa separação.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 5×104) representando o número de pontos do conjunto.\nCada uma das próximas N linhas descreve um ponto diferente com dois inteiros X e Y (1 ≤ X,Y ≤ 5 × 105), indicando suas coordenadas, em anos-luz. Não existem pontos coincidentes e o conjunto admite pelo menos uma boa separação.\nSaída\nProduza uma linha com um número inteiro representando o número mínimo de pontos que um subconjunto pode ter em uma boa separação.",
    "samplesExamples": [
      [
        "6\n1 3\n9 1\n11 7\n5 7\n13 5\n4 4",
        "2"
      ],
      [
        "2\n10 10\n50 30",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Guilherme Albuquerque Pinto, Universidade Federal de Juiz de Fora"
    },
    "hasImages": true
  },
  {
    "name": "Cavaleiros da Távola Redonda",
    "text": "Todo mês o Rei Arthur celebra uma reunião do Conselho Superior. Os cavaleiros K que participam dessas reuniões são conhecidos como Os Cavaleiros da Távola Redonda, provavelmente porque se sentam em uma enorme mesa redonda de carvalho com assentos K e um grande trono com uma espada e uma pedra esculpida nas costas.\nPara a reunião de hoje, cada cavaleiro recebeu um número entre 1 e K que indica o assento que deverá ocupar durante a reunião. Os assentos são numerados no sentido horário de 1 a K, sendo o assento numerado 1 o primeiro à esquerda do grande trono. Obviamente, o próprio rei não recebeu um número porque ele está sentado no trono. O escudeiro do Rei Arthur garantiu que não houvesse dois cavaleiros com o mesmo número, então não haveria problemas.\nComo sempre, o rei foi o primeiro a entrar na sala do conselho hoje. De acordo com as regras do protocolo, ele sentou-se em seu trono e se preparou para receber os K cavaleiros que deveriam entrar e sentar-se um por um. Após a chegada dos primeiros cavaleiros D, o rei notou que alguns deles poderiam ter se sentado em lugares errados, pois estavam distraídos conversando sobre quem venceria o próximo torneio. Que bagunça! O escudeiro do Rei Arthur interveio prontamente e deu instruções aos cavaleiros K − D restantes. Cada um deles deve entrar na sala do conselho e tentar sentar-se em seu lugar de direito; se seu assento já estiver ocupado, o cavaleiro deve andar ao redor da mesa no sentido horário e sentar-se no primeiro assento desocupado que encontrar. Assim, a distribuição final dos cavaleiros ao redor da mesa depende da ordem em que eles entram na sala.\nO Rei Arthur está agora interessado em saber o número de distribuições distintas dos cavaleiros K ao redor da mesa, dados os assentos ocupados pelos primeiros cavaleiros D. Duas distribuições são consideradas distintas se houver pelo menos um cavaleiro sentado em assentos diferentes em ambas as distribuições.\nComo Conselheiro Real em Combinatória e outras Matemáticas (ou Royal ACM), a tarefa é atribuída a você. Você precisa fornecer uma resposta dentro de cinco horas, sob o risco de perder o favor do rei. Se apresse! Entrada\nA primeira linha contém dois inteiros K (1 ≤ K ≤ 106) e D (1 ≤ D ≤ 105), representando respectivamente o número de cavaleiros e o número de cavaleiros distraídos. Cada uma das próximas D linhas descreve um cavaleiro distraído diferente com dois inteiros A e B (1 ≤ A,B ≤ K), indicando que o cavaleiro ao qual foi atribuído o assento A realmente sentou-se no assento B. É garantido que não há dois cavaleiros sentados no mesmo assento.\nSaída\nProduza uma linha com um número inteiro representando o número de distribuições distintas dos K ​​cavaleiros ao redor da mesa. Este número pode ser bastante grande, então produza o restante dividindo-o por 109 + 7.",
    "samplesExamples": [
      [
        "3 1\n1 2",
        "2"
      ],
      [
        "5 4\n5 5\n1 2\n2 3\n3 4",
        "1"
      ],
      [
        "8 3\n3 3\n4 8\n2 4",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Jorge Enrique Moreira Broche, Universidad Central “Marta Abreu” de Las Villas"
    },
    "hasImages": false
  },
  {
    "name": "Cercar os vegetais",
    "text": "Aos 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas trabalhando como exemplos para protocolos de rede, livros teóricos de jogos e diversos outros textos, eles estavam cansados. Para permanecerem ativos, eles decidiram se dedicar à jardinagem.\nAlice e Bob plantaram várias hortaliças em um campo enorme. Depois de terminarem, perceberam que suas plantas precisavam de proteção contra animais selvagens, então decidiram construir uma cerca ao redor delas.\nO campo é representado como o plano XY, e cada planta vegetal como um ponto diferente nele. Uma cerca é representada como um polígono no plano. No entanto, nem todo polígono é uma cerca válida. A cerca precisa ser um único polígono simples com cada um dos lados paralelo a um dos eixos. Claro, o polígono deve conter todos os pontos que representam as plantas vegetais. Uma cerca muito próxima das plantas ou de si mesma pode dificultar a caminhada, portanto, cada lado do polígono precisa estar a pelo menos 1 milímetro de distância de todas as plantas e de todos os lados não adjacentes.\nDentre todas as cercas válidas, Alice e Bob decidiram construir aquela com perímetro mínimo, para economizar material de vedação. Se houver várias cercas válidas com perímetro mínimo, pretendem construir uma com área mínima entre elas, para poupar tempo na rega do jardim.\nNas fotos a seguir, várias cercas diferentes são mostradas em um campo com quatro hortaliças representadas como círculos.\nFelizmente, o histórico de participação de Alice e Bob em projetos científicos rigorosos os tornou muito minuciosos com seus registros: eles sabem a localização exata de suas plantas com precisão milimétrica.\nUsando esses dados, ajude-os a calcular o perímetro e a área de uma cerca ideal.\nEntrada\nA primeira linha contém um inteiro V (1 ≤ V ≤ 105) representando o número de hortaliças no campo de Alice e Bob. Cada uma das próximas V linhas descreve uma planta vegetal diferente com dois inteiros X e Y (1 ≤ X,Y ≤ 108), indicando as coordenadas da planta, em milímetros. Não existem duas fábricas no mesmo local.\nSaída\nProduza uma linha com dois inteiros P e A representando respectivamente o perímetro em milímetros e a área em milímetros quadrados da cerca que Alice e Bob desejam construir.",
    "samplesExamples": [
      [
        "4\n1 1\n3 5\n5 3\n5 5",
        "24 21"
      ],
      [
        "4\n1 1\n1 100000000\n100000000 1\n100000000 100000000",
        "400000004 10000000200000001"
      ],
      [
        "5\n50000000 1\n50000000 99999999\n1 50000000\n99999999 50000000\n50000001 50000001",
        "400000000 399999997"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": true
  },
  {
    "name": "Contando subrestrições",
    "text": "Substrings são strings formadas pela escolha de um subconjunto de caracteres contíguos de uma string. Isto é bem conhecido. Um pouco mais obscura é a definição de subrestrições. Uma substring é uma substring que atende aos seguintes requisitos adicionais: 1. Não é vazia e é composta inteiramente de dígitos de base 10.\n2. Interpretado na base 10 (permitindo zeros extras à esquerda), o número inteiro resultante é um múltiplo de 3.\nPor exemplo, a string “130a303” contém 9 substrings: o substring “3” três vezes, os substrings “30” e “0” duas vezes cada, e os substrings “303” e “03” uma vez cada. A substring “30a3” não é uma substring porque não é composta inteiramente de dígitos de base 10, enquanto a substring “13” não é uma substring porque 13 não é um múltiplo de 3.\nObserve que duas subestruturas são consideradas diferentes se tiverem comprimentos diferentes ou começarem em uma posição diferente, mesmo que os caracteres selecionados sejam iguais.\nDada uma string, você deverá contar o número de substrings que ela contém.\nEntrada\nA entrada consiste em uma única linha que contém uma string S não vazia de no máximo 106 caracteres.\nCada caractere de S é um dígito ou uma letra minúscula.\nSaída\nProduza uma linha com um número inteiro representando o número de subrestrições contidas em S.",
    "samplesExamples": [
      [
        "130a303",
        "9"
      ],
      [
        "0000000000",
        "55"
      ],
      [
        "icpc2014regional",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Pedras pretas e brancas",
    "text": "Shagga e Dolf gostam de jogar com pedras, cada uma delas preta ou branca. No início do jogo, Dolf organiza todas as pedras em uma única linha, da esquerda para a direita. Então, o objetivo de Shagga é reordenar as pedras de modo que todas as pedras pretas fiquem à esquerda de todas as pedras brancas. Para fazer isso, ele pode escolher qualquer par de pedras de cores diferentes e trocar suas posições, pagando moedas A para Dolf no processo. No entanto, se as duas pedras cujas posições ele está trocando forem adjacentes, Dolf deve reembolsá-lo em moedas B, o que significa que a operação custará efetivamente a Shagga apenas moedas A - B.\nShagga não é muito inteligente, então ele ainda não percebeu que só perderá moedas enquanto joga este jogo. No entanto, ele está ciente das suas limitações, por isso sabe que se jogasse de forma otimizada perderia menos moedas do que está perdendo agora, com sua estratégia de escolher aleatoriamente as pedras que troca em cada movimento. Portanto, ele quer saber a quantidade mínima de moedas que terá que pagar a Dolf para chegar ao arranjo de pedras desejado, e está ameaçando dar comida às cabras se você não o ajudar.\nEntrada\nA primeira linha contém dois inteiros A e B (0 ≤ B < A ≤ 106), representando respectivamente o custo da troca de duas pedras e o valor do reembolso na troca de pedras adjacentes. A segunda linha contém uma string não vazia S com no máximo 5.000 caracteres. O i-ésimo caractere de S indica a cor da i-ésima pedra, da esquerda para a direita, na disposição inicial das pedras. O caractere é a letra maiúscula “B” ou a letra maiúscula “W”, indicando respectivamente uma pedra preta ou branca.\nSaída\nProduza uma linha com um número inteiro representando o número mínimo de moedas que Shagga terá que pagar a Dolf para organizar as pedras de forma que todas as pretas fiquem à esquerda de todas as brancas.",
    "samplesExamples": [
      [
        "2 1\nBWWB",
        "2"
      ],
      [
        "5 3\nWBWWBWBWBWBBBWWBBB",
        "27"
      ],
      [
        "1000000 0\nW",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Fidel I. Schaposnik Massolo, Universidad Nacional de La Plata"
    },
    "hasImages": false
  },
  {
    "name": "Máquina de verificação automatizada",
    "text": "A Internet Computer Parts Company (ICPC) é uma loja on-line que vende peças de computador. Pares de conectores elétricos em linha estão entre as peças mais populares vendidas pela ICPC. Porém, também são uma das peças que mais são devolvidas por clientes insatisfeitos, pois devido a erros na embalagem os conectores enviados aos clientes podem não ser compatíveis.\nUm conector em linha é composto por cinco pontos de conexão, rotulados de 1 a 5. Cada ponto de conexão de um conector pode ser um plugue ou uma tomada. Dizemos que dois conectores são compatíveis se, para cada etiqueta, um ponto de conexão for um plugue e o outro ponto de conexão for uma tomada (em outras palavras, dois conectores são compatíveis se, para cada ponto de conexão com a mesma etiqueta, um plugue e um tomada se encontram quando os dois conectores estão conectados).\nA figura abaixo mostra exemplos de dois conectores compatíveis e dois conectores não compatíveis.\nA ICPC está lançando uma Máquina de Verificação Automatizada (ACM) de última geração, com um verificador óptico, que verificará se os dois conectores embalados para um cliente são realmente compatíveis. O hardware complexo e caro do ACM está pronto, mas eles precisam da sua ajuda para finalizar o software.\nDadas as descrições de um par de conectores em linha, sua tarefa é determinar se os conectores são compatíveis.\nEntrada\nA primeira linha contém cinco inteiros Xi (0 ≤ Xi ≤ 1 para i = 1,2,...,5), representando os pontos de conexão do primeiro conector do par. A segunda linha contém cinco inteiros Yi (0 ≤ Yi ≤ 1 para i = 1,2,...,5), representando os pontos de conexão do segundo conector. Na entrada, 0 representa uma tomada e 1 representa um plugue.\nSaída\nProduza uma linha com um caractere que representa se os conectores são compatíveis ou não. Se forem compatíveis escreva a letra “Y” maiúscula; caso contrário, escreva a letra maiúscula “N”.",
    "samplesExamples": [
      [
        "1 1 0 1 0\n0 0 1 0 1",
        "Y"
      ],
      [
        "1 0 0 1 0\n1 0 1 1 0",
        "N"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Ricardo Anido, Universidade Estadual de Campinas"
    },
    "hasImages": true
  },
  {
    "name": "Distribuição uniforme",
    "text": "Endre tem muitas sobrinhas e sobrinhos. Uma vez por ano, ele leva alguns deles em uma viagem a um arquipélago onde uma empresa de barcos opera serviços bidirecionais entre alguns pares de ilhas. Como Endre e as crianças podem voar e retornar diretamente de ou para qualquer uma das ilhas, qualquer viagem pode ser descrita como uma sequência não vazia i1,i2,...,in de ilhas, tal que cada par de ilhas consecutivas ij e ij +1 tem um serviço de barco entre eles. A primeira e a última ilhas de uma viagem podem ou não ser a mesma ilha, e as ilhas podem ser visitadas mais de uma vez durante a viagem.\nCada ilha do arquipélago produz uma variedade peculiar de doces e saúda seus visitantes dando a cada grupo que chega um número fixo de doces. Endre também não gosta de doces, mas as crianças comem todos quase instantaneamente. Para evitar brigas, cada vez que o grupo chega a uma ilha e recebe doces, ele os distribui uniformemente entre as crianças.\nVocê pode estar se perguntando como Endre sempre consegue distribuir uniformemente os doces que recebe em cada ilha. Bem, a resposta é realmente muito simples. Todos os anos, a agência de viagens envia-lhe previamente o plano de viagem (a sequência i1,i2,...,in). Como ele deseja viajar com o maior número possível de sobrinhos e sobrinhas, ele calcula o número máximo k de crianças que pode levar na viagem sem violar a regra sobre a distribuição uniforme de doces. Observe que cada plano de viagem determina exclusivamente o número de crianças a serem levadas.\nIsso vem acontecendo há anos, e cada vez Endre acaba levando um número diferente de crianças na viagem. Ele gostaria de saber quantos números diferentes de crianças ele pode levar em uma viagem, ou seja, o número de inteiros k tais que existe um plano de viagem para o qual ele acaba levando k crianças na viagem.\nNeste momento Endre está muito ocupado preparando a viagem deste ano. Você pode ajudá-lo com a resposta? Entrada\nA primeira linha contém dois inteiros I e S (1 ≤ I,S ≤ 104), representando respectivamente o número de ilhas e o número de serviços de barco entre elas. As ilhas são identificadas com inteiros distintos de 1 a I. A segunda linha contém os inteiros I C1,C2,...,CI, onde Ci indica a quantidade de doces que o grupo recebe ao chegar na ilha i (1 ≤ Ci ≤ 105 para i = 1,2,...,I). Cada uma das próximas S linhas descreve um serviço de barco diferente com dois inteiros A e B (1 ≤ A < B ≤ I), representando que é possível viajar da ilha A para a ilha B e da ilha B para a ilha A. Não há dois os serviços de barco permitem viajar entre o mesmo par de ilhas.\nSaída\nProduza uma linha com um inteiro representando o número de inteiros k tal que haja um plano de viagem para o qual Endre acaba levando k crianças na viagem.",
    "samplesExamples": [
      [
        "2 1\n1 9\n1 2",
        "2"
      ],
      [
        "4 2\n1 2 3 4\n1 3\n1 2",
        "4"
      ],
      [
        "4 3\n30 42 105 70\n2 4\n1 2\n2 3",
        "11"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Bruno Junqueira Adami, Universidade de São Paulo"
    },
    "hasImages": false
  },
  {
    "name": "Viagem pelo reino",
    "text": "O reino da Quadradonia é dividido em províncias formando um padrão semelhante a uma grade de linhas R e colunas C. Diz a lenda que muitas coisas maravilhosas aguardam descobertas em algumas das províncias, embora não esteja claro se você pode realmente encontrar a forma sólida e indescritível das histórias de água chamadas de “gelo”, ou se são apenas dragões.\nVocê está planejando uma viagem pelo reino para descobrir, mas as estradas são perigosas, então você precisa ter muito cuidado. Para ir de uma província a outra, você gostaria de usar o conveniente sistema de transporte escoltado administrado pela Companhia Interprovincial de Comunicação e Peregrinação (ICPC). Em cada província, o ICPC fornece uma carruagem fortemente vigiada para viajar para qualquer outra província num rectângulo que a contém, à mesma taxa fixa (que pode, no entanto, variar de uma província para outra).\nMais formalmente, na província da i-ésima linha e da j-ésima coluna você pode alugar uma carruagem escoltada por um custo de Vij, permitindo que você viaje com segurança para qualquer província no máximo Rij linhas longe da linha i, e no máximo Colunas Cij distantes da coluna j (ou seja, tendo número de linha i(cid:48) e número de coluna j(cid:48) com |i − i(cid:48)| ≤ Rij e |j − j(cid:48 )| ≤ Cij).\nNa sua viagem você deseja visitar N províncias p1,p2,...,pN, nessa ordem. Vaguear em busca de aventuras é um negócio caro e seu orçamento é limitado, então você gostaria de gastar o mínimo possível em transporte. Portanto, você gostaria de calcular o custo mínimo de cada trecho da sua viagem, ou seja, o custo mínimo das carruagens que você tem que alugar para ir da província pk à província pk+1, para k = 1,2,.. .,N − 1.\nEntrada\nA primeira linha contém três inteiros R, C e N, representando respectivamente o número de linhas, o número de colunas e o número de províncias que se pretende visitar (1 ≤ R,C ≤ 500 e 2 ≤ N ≤ 5).\nAs linhas são numeradas de 1 a R e as colunas são numeradas de 1 a C. As próximas 3×R linhas descrevem o sistema de transporte escoltado do ICPC por meio de três grupos de R linhas cada, com cada linha contendo C inteiros. Na i-ésima linha do primeiro grupo, o j-ésimo número representa o custo Vij de alugar uma carruagem na província na linha i e na coluna j, enquanto os números correspondentes no segundo e terceiro grupo representam respectivamente Rij e Cij ( 1 ≤ Vij ≤ 1000, 0 ≤ Rij ≤ R e 0 ≤ Cij ≤ C, para i = 1,2,...,R e j = 1,2,...,C). As próximas N linhas descrevem as províncias p1,p2,...,pN que você deseja visitar, na mesma ordem em que deseja visitá-las. A k-ésima dessas linhas descreve a província pk com dois inteiros Ik e Jk, indicando que pk está na linha Ik e na coluna Jk (1 ≤ Ik ≤ R e 1 ≤ Jk ≤ C para k = 1,2,... ,N).\nSaída\nProduza uma linha com N − 1 inteiros representando o custo mínimo de cada trecho da sua viagem, ou o valor −1 se for impossível viajar usando o sistema de transporte escoltado do ICPC para esse trecho. Mais precisamente, para k = 1,2,...,N − 1, o k-ésimo número deve ser o custo mínimo das carruagens que você deve alugar para ir da província pk à província pk+1 usando o sistema de transporte escoltado do ICPC , ou o valor −1 se for impossível viajar da província pk para a província pk+1 com este sistema.",
    "samplesExamples": [
      [
        "3 4 5\n1 2 1 1\n1 5 3 4\n1 1 6 3\n1 2 3 3\n3 3 1 2\n0 0 0 1\n1 4 0 1\n2 3 0 1\n4 1 3 1\n1 1\n3 4\n1 1\n2 2\n2 2",
        "3 -1 1 0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Fidel I. Schaposnik Massolo, Universidad Nacional de La Plata"
    },
    "hasImages": false
  },
  {
    "name": "Alpinista intrépido",
    "text": "Quem adivinharia? Você escalou a montanha mais alta da sua cidade. Você está tão animado com isso que precisa contar para todos os seus amigos, e decidiu começar com aqueles que estão tentando estar exatamente onde você está neste exato momento.\nA montanha tem N pontos de referência, e um deles é o topo da montanha, onde você está agora.\nCada um dos seus amigos que está subindo a montanha está em algum outro ponto de referência e você deseja visitar todos eles. Existem trilhas que conectam pares de pontos de referência de tal forma que existe exatamente uma rota (ou seja, uma sequência de trilhas consecutivas) que desce do topo da montanha até cada outro ponto de referência. Para visitar dois amigos em dois pontos de referência diferentes, talvez seja necessário descer algumas trilhas, subir outras e descer outras novamente. Descer a montanha é “fácil”, então você não consome energia ao descer pelas trilhas. Mas cada vez que você sobe uma pista, você consome uma certa quantidade de energia. Depois de visitar todos os seus amigos, você pode simplesmente sentar e descansar.\nPor exemplo, considere a montanha da figura abaixo, que possui N = 6 pontos de referência. Se seus amigos estão nos pontos de referência 5 e 2, você pode visitar ambos se seguir a sequência de pontos de referência 1 ↓ 2 ↑ 1 ↓ 3 ↓ 5, onde a ↓ b significa que você percorre uma trilha do ponto de referência a até o ponto de referência b, e a ↑ b significa que você sobe uma trilha do ponto de referência a ao ponto de referência b. Outra sequência possível é 1 ↓ 3 ↓ 5 ↑ 3 ↑ 1 ↓ 2.\nDadas as trilhas entre os pontos de referência, a energia necessária para escalá-los e os pontos de referência onde seus amigos estão, calcule a quantidade total mínima de energia necessária para visitar todos os seus amigos do topo da montanha.\nEntrada\nA primeira linha contém dois inteiros N e F (1 ≤ F < N ≤ 105), representando respectivamente o número de pontos de referência e o número de seus amigos que estão escalando a montanha. Os marcos são identificados com números inteiros distintos de 1 a N, sendo 1 o topo da montanha, onde você está inicialmente.\nCada uma das próximas N − 1 linhas descreve uma trilha diferente com três inteiros A, B e C, indicando que há uma trilha de A a B que desce e requer uma quantidade C de energia para ser escalada (1 ≤ A ≤ N , 2 ≤ B ≤ N, A (cid:54)= B e 1 ≤ C ≤ 100). A próxima linha contém F inteiros diferentes L1,L2,...,LF (2 ≤ Li ≤ N para i = 1,2,...,F) representando os pontos de referência onde seus amigos estão. Você pode presumir que os caminhos entre os pontos de referência são tais que existe exatamente uma rota que desce do topo da montanha até cada outro ponto de referência.\nSaída\nProduza uma linha com um número inteiro representando a quantidade total mínima de energia necessária para visitar todos os seus amigos começando do topo da montanha.",
    "samplesExamples": [
      [
        "6 2\n1 2 2\n2 4 2\n1 3 3\n3 6 3\n3 5 1\n5 2",
        "2"
      ],
      [
        "4 2\n1 2 2\n1 3 1\n3 4 2\n2 4",
        "2"
      ],
      [
        "4 2\n1 4 1\n1 3 1\n4 2 2\n2 4",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Cristhian Bonilha, Universidade Tecnológica Federal do Paraná"
    },
    "hasImages": true
  },
  {
    "name": "Ajude cupido",
    "text": "O trabalho do Cupido está ficando mais difícil, então ele está adotando novas tecnologias para ajudá-lo em sua difícil tarefa de combinar pessoas em casais felizes. Ele nomeou os melhores programadores de sua equipe para um novo projeto chamado Advanced Couples Matching (ACM). Para este projeto, os programadores precisam produzir um algoritmo que pegue um conjunto de um número par de N pessoas solitárias e os combine em N/2 pares, de modo que cada pessoa esteja em exatamente um casal.\nInfelizmente, os dados disponíveis sobre cada pessoa são limitados. Neste mundo moderno, utilizar género, etnia, idade ou nacionalidade como critérios para formar casais não é uma opção sensata, pelo que os programadores só podem utilizar dados sobre a ligação à Internet de cada candidato. Eles decidiram focar esta etapa nos fusos horários.\nPessoas que vivem em fusos horários mais próximos têm maior probabilidade de encontrar tempo para interagir umas com as outras. Assim, os programadores decidiram criar casais de forma a minimizar a diferença horária total.\nCada fuso horário é identificado por um número inteiro entre −11 e 12, inclusive, representando sua diferença em horas de um fuso horário específico denominado Tempo Universal Coordenado (ou UTC). A diferença horária de duas pessoas que vivem em fusos horários representada pelos inteiros i e j é o mínimo entre |i − j| e 24 − |i − j|. Dada uma partição de um conjunto de um número par N de candidatos em N/2 pares, sua diferença temporal total é a soma da diferença temporal de cada casal.\nVocê é solicitado a escrever um programa que receba como entrada os fusos horários de um conjunto de N candidatos.\nA saída do programa deve ser a diferença de tempo total mínima entre todas as partições possíveis do conjunto em pares.\nEntrada\nA primeira linha contém um inteiro par N (2 ≤ N ≤ 1000) representando o número de candidatos a serem acoplados. A segunda linha contém N inteiros T1,T2,...,TN (−11 ≤ Ti ≤ 12 para i = 1,2,...,N) indicando os fusos horários dos candidatos.\nSaída\nProduza uma linha com um número inteiro representando a diferença de tempo total mínima entre todas as partições possíveis do conjunto de candidatos em pares.",
    "samplesExamples": [
      [
        "6\n-3 -10 -5 11 4 4",
        "5"
      ],
      [
        "2\n-6 6",
        "12"
      ],
      [
        "8\n0 0 0 0 0 0 0 0",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Cachorro-quente",
    "text": "Em 2018 foi alcançado um novo recorde mundial na famosa Competição de Cachorros-Quentes do Nathan: o campeão, Joey Chestnut, devorou 74 cachorros-quentes em dez minutos, superando o incrível recorde de 72 sanduíches devorados pelo mesmo Chestnut em 2017.\nO restaurante Nathan’s Famous Corporation, localizado no Brooklyn, NY, é o responsável pela competição. Eles produzem deliciosos cachorros-quentes, mundialmente famosos, mas quando o as sunto é matemática eles não são tão bons. Eles desejam ser listados no Livro de Recordes do Guinness, mas para isso devem preencher um formulário descrevendo os fatos básicos da competição. Em par ticular, eles devem informar o número médio de cachorros-quentes consumidos pelos participantes durante a competição.\nVocê pode ajudá-los? Eles prometeram pagá-lo com um dos seus saborosos cachorros-quentes. Da dos o número total de cachorros-quentes consumidos e o número total de participantes na competição, você deve escrever um programa para determinar o número médio de cachorros-quentes consumidos pelos participantes.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros H e P (1 ≤ H,P ≤ 1000) indicando respectivamente o número total de cachorros-quentes consumidos e o número total de participantes na competição.\nSaída\nSeu programa deve produzir uma única linha com um número racional representando o número médio de cachorros-quentes consumidos pelos participantes. O resultado deve ser escrito como um número racional com exatamente dois dígitos após o ponto decimal, arredondado se necessário.",
    "samplesExamples": [
      [
        "10 90",
        "0.11"
      ],
      [
        "840 11",
        "76.36"
      ],
      [
        "1 50",
        "0.02"
      ],
      [
        "34 1000",
        "0.03"
      ],
      [
        "35 1000",
        "0.04"
      ],
      [
        "36 1000",
        "0.04"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de boca",
    "text": "Um jogo infantil, muito popular, é o 21 de boca. O jogo é jogado da seguinte forma: o primeiro jogador diz um número, n0, que pode ser 1 ou 2. O segundo jogador pode então dizer um número n1 tal que n1 ∈ {n0 +1,n0 +2}. E assim por diante, os jogadores se alternam, dizendo sempre um número que é um ou dois maior do que o anterior. O jogador que disser 21 ganha o jogo. Por exemplo, a sequência de números poderia ser: 1,3,5,6,7,9,11,12,14,15,16,18,19,21. Neste jogo, o primeiro jogador sempre perde, se o segundo souber jogar bem.\nA cada nova geração as crianças ficam mais espertas. Atualmente, apesar de acharem o 21 de boca um jogo interessante, muitas crianças não se sentem desafiadas o bastante e por isso resolveram generalizar o jogo, criando assim o N de boca. Dado um inteiro N, no lugar do 21, o primeiro jogador pode escolher 1 ou 2. A partir daí os jogadores se alternam, adicionando 1 ou 2 ao número anterior, até que um deles diga o número N e ganhe o jogo. Sabendo que ambos os jogadores são excelentes e sabem jogar muito bem, seu problema é determinar qual o inteiro inicial que o primeiro jogador deve escolher para ganhar o jogo.\nEntrada\nA entrada consiste de uma única linha que contém o inteiro N (3 ≤ N ≤ 10100) escolhido para a partida atual do N de boca.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número, em {1,2}, que o primeiro jogador deve escolher, para ganhar o jogo. Se não for possível, então o inteiro deve ser zero.",
    "samplesExamples": [
      [
        "7",
        "1"
      ],
      [
        "9",
        "0"
      ],
      [
        "12341234123412341234123412341234",
        "2"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Desvendando Monty Hall",
    "text": "No palco de um programa de auditório há três portas fechadas: porta 1, porta 2 e porta 3. Atrás de uma dessas portas há um carro, atrás de cada uma das outras duas portas há um bode. A produção do programa sorteia aleatoriamente a porta onde vai estar o carro, sem trapaça. Somente o apresentador do programa sabe onde está o carro. Ele pede para o jogador escolher uma das portas. Veja que agora, como só há um carro, atrás de pelo menos uma entre as duas portas que o jogador não escolheu, tem que haver um bode! Portanto, o apresentador sempre pode fazer o seguinte: entre as duas portas que o jogador não escolheu, ele abre uma que tenha um bode, de modo que o jogador e os espectadores possam ver o bode. O apresentador, agora, pergunta ao jogador: “você quer trocar sua porta pela outra porta que ainda está fechada?”. É vantajoso trocar ou não? O jogador quer ficar com a porta que tem o carro, claro! Paulinho viu uma demonstração rigorosa de que a probabilidade de o carro estar atrás da porta que o jogador escolheu inicialmente é 1/3 e a probabilidade de o carro estar atrás da outra porta, que ainda está fechada e que o jogador não escolheu inicialmente, é 2/3 e, portanto, a troca é vantajosa.\nPaulinho não se conforma, sua intuição lhe diz que tanto faz, que a probabilidade é 1/2 para ambas as portas ainda fechadas...\nNeste problema, para acabar com a dúvida do Paulinho, vamos simular esse jogo milhares de vezes e contar quantas vezes o jogador ganhou o carro. Vamos supor que: • O jogador sempre escolhe inicialmente a porta 1; • O jogador sempre troca de porta, depois que o apresentador revela um bode abrindo uma das duas portas que não foram escolhidas inicialmente.\nNessas condições, em um jogo, dado o número da porta que contém o carro, veja que podemos saber exatamente se o jogador vai ganhar ou não o carro.\nEntrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104), indicando o número de jogos na simulação. Cada uma das N linhas seguintes contém um inteiro: 1, 2 ou 3; representando o número da porta que contém o carro naquele jogo.\nSaída\nSeu programa deve produzir uma única linha, contendo um inteiro representando o número de vezes que o jogador ganhou o carro nessa simulação, supondo que ele sempre escolhe inicialmente a porta 1 e sempre troca de porta depois que o apresentador revela um bode abrindo uma das duas portas que não foram escolhidas inicialmente.",
    "samplesExamples": [
      [
        "5\n1\n3\n2\n2\n1",
        "3"
      ],
      [
        "1\n1",
        "0"
      ],
      [
        "15\n3\n2\n3\n1\n1\n3\n3\n2\n2\n1\n2\n3\n2\n1\n1",
        "10"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Gasolina",
    "text": "Terminada a greve dos caminhoneiros, você e os demais especialistas em logística da Nlogônia agora têm a tarefa de planejar o reabastecimento dos postos da cidade. Para isso, foram coletadas informações sobre os estoques das R refinarias e sobre as demandas dos P postos de gasolina. Além disso, há restrições contratuais que fazem com que algumas refinarias não possam atender alguns postos; quando uma refinaria pode fornecer a um posto, sabe-se o menor tempo de percurso para transportar o combustível de um lugar ao outro.\nA tarefa dos especialistas é minimizar o tempo de abastecimento de todos os postos, satisfazendo completamente suas demandas. As refinarias têm uma quantidade suficientemente grande de ca minhões, de modo que é possível supor que cada caminhão precisará fazer no máximo uma viagem, de uma refinaria para um posto de gasolina. A capacidade de cada caminhão é maior do que a demanda de qualquer posto, mas pode ser necessário usar mais de uma refinaria para atender a demanda de um posto.\nSeu programa deve encontrar o tempo mínimo no qual é possível abastecer totalmente todos os postos, respeitando os estoques das refinarias.\nEntrada\nA primeira linha da entrada contém três inteiros, P, R e C, respectivamente o número de postos, o número de refinarias e o número de pares de refinaria e posto cujo tempo de percurso será dado (1 ≤ P,R ≤ 1000 e 1 ≤ C ≤ 20000). A segunda linha contém P inteiros Di (1 ≤ Di ≤ 104), representando as demandas, em litros de gasolina, dos postos i = 1,2,...,P, nessa ordem. A terceira linha contém R inteiros Ei (1 ≤ Ei ≤ 104), representando os estoques, em litros de gasolina, das refinarias i = 1,2,...,R, nessa ordem. Finalmente, as últimas C linhas descrevem tempos de percurso, em minutos, entre postos e refinarias. Cada uma dessas linhas contém três inteiros, I, J e T (1 ≤ I ≤ P e 1 ≤ J ≤ R e 1 ≤ T ≤ 106), onde I é a identificação de um posto, J é a identificação de uma refinaria e T é o tempo do percurso de um caminhão da refinaria J ao posto I. Não haverá pares (J,I) repetidos.\nNem todos os pares são informados; caso um par não seja informado, há restrições contratuais que impedem a refinaria de atender o posto.\nSaída\nImprima um inteiro T que indica o tempo mínimo em minutos para que todas os postos sejam completamente abastecidos. Caso isso não seja possível, imprima −1.",
    "samplesExamples": [
      [
        "3 2 5\n20 10 10\n30 20\n1 1 2\n2 1 1\n2 2 3\n3 1 4\n3 2 5",
        "4"
      ],
      [
        "3 2 5\n20 10 10\n25 30\n1 1 3\n2 1 1\n2 2 4\n3 1 2\n3 2 5",
        "5"
      ],
      [
        "4 3 9\n10 10 10 20\n10 15 30\n1 1 1\n1 2 1\n2 1 3\n2 2 2\n3 1 10\n3 2 10\n4 1 1\n4 2 2\n4 3 30",
        "-1"
      ],
      [
        "1 2 2\n40\n30 10\n1 1 100\n1 2 200",
        "200"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Kepler",
    "text": "Neste estranho sistema planetário, N planetas se guem órbitas circulares ao redor de uma estrela que está nas coordenadas (0,0) do sistema. A es trela está estritamente contida no interior de to dos os círculos que definem as órbitas, mas o cen tro dessas órbitas não está necessariamente nas coordenadas (0,0). As órbitas circulares estão em posição geral: se duas órbitas se interceptam, então elas se interceptam em dois pontos distin tos; além disso, três órbitas não se interceptam em um ponto comum.\nO cientista João Kepler está interessado em tes tar uma nova teoria e, para isso, pediu sua ajuda para computar o número de pontos de interseção entre as órbitas, caso esse número seja menor que ou igual a 2N. Caso contrário, precisamos ape nas saber que o número é maior do que 2N.\nEntrada\nA primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 150000), representando o número de órbitas. Cada uma das N linhas seguintes contém três números reais, com exatamente 3 dígitos decimais, X, Y (−25.0 ≤ X,Y ≤ 25.0) e R (1.0 ≤ R ≤ 200000.0), definindo as coordenadas do centro e o raio das órbitas.\nSaída\nImprima uma linha contendo um inteiro, representando o número de pontos de interseção entre as órbitas, se esse número for menor ou igual a 2N. Caso contrário, imprima “greater”.",
    "samplesExamples": [
      [
        "6\n0.000 1.000 4.000\n0.000 0.000 10.500\n4.000 0.000 6.000\n1.000 1.000 1.750\n-1.000 -1.000 8.000\n2.000 -2.000 4.000",
        "10"
      ],
      [
        "4\n-1.000 -1.000 3.000\n1.000 -1.000 3.001\n-3.004 3.003 5.002\n1.000 1.000 3.005",
        "greater"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Festival",
    "text": "Festivais de música deveriam ser pura diversão, porém alguns deles se tornam tão grandes a ponto de causar dor de cabeça para os frequentadores. O problema é que são tantas atrações boas tocando em tantos palcos que a simples tarefa de escolher quais shows assistir se torna complexa.\nPara ajudar frequentadores de tais festivais, Fulano decidiu criar um aplicativo que, após avaliar as músicas ouvidas em seus serviços de streaming favoritos, sugere quais shows assistir de modo que não exista outra combinação de shows melhor de acordo com os critérios descritos a seguir: • Para aproveitar a experiência ao máximo é importante assistir cada um dos shows escolhidos por completo; • Ir no festival e não ver um dos palcos está fora de cogitação; • Para garantir que a seleção dos artistas seja compatível com o usuário, contou-se quantas músicas de cada artista o usuário conhece por já ter ouvido-as nos serviços de streaming. O total de músicas conhecidas dos artistas escolhidos deve ser o maior possível.\nInfelizmente a versão beta do aplicativo recebeu várias críticas, pois os usuários conseguiram pensar em seleções melhores que aquelas sugeridas. Sua tarefa nesse problema é ajudar Fulano e escrever um programa que, dadas as descrições dos shows acontecendo em cada palco, calcula a lista ideal para o usuário.\nO tempo de deslocamento entre os palcos é ignorado; portanto, desde que não haja interseção entre os horários de quaisquer dois shows escolhidos considera-se que é possível assistir a todos por completo. Em particular, se um show acaba exatamente quando um outro começa, é possível assistir a ambos.\nEntrada\nA primeira linha contém um número inteiro 1 ≤ N ≤ 10 representando o número de palcos. As N linhas seguintes descrevem os shows acontecendo em cada palco. A i-ésima delas é composta por um inteiro Mi ≥ 1, representando o número de shows marcados para o i-ésimo palco seguido por Mi descrições de shows. Cada descrição de show contém 3 inteiros ij, fj e oj (1 ≤ ij < fj ≤ 86400 e 1 ≤ oj ≤ 1000), representando respectivamente os horários de início e fim do show e o número de músicas do cantor se apresentando que foram previamente ouvidas pelo usuário. A soma dos Mi não excederá 1000.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o total de músicas previamente ouvidas dos artistas escolhidos, ou −1 caso não haja solução válida.",
    "samplesExamples": [
      [
        "3\n4 1 10 100 20 30 90 40 50 95 80 100 90\n1 40 50 13\n2 9 29 231 30 40 525",
        "859"
      ],
      [
        "3\n2 13 17 99 18 19 99\n2 13 14 99 15 20 99\n2 13 15 99 18 20 99",
        "-1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Cortador de Pizza",
    "text": "Vô Giuseppe ganhou de presente um cortador profissional de pizza, daqueles do tipo carretilha e, para comemorar, assou uma pizza retangular gigante para seus netos! Ele sempre dividiu suas pizzas em pedaços fazendo cortes ao longo de linhas contínuas, não necessariamente retilíneas, de dois tipos: algumas começam na borda esquerda da pizza, seguem monotonicamente para a direita e terminam na borda direita; outras começam na borda inferior, seguem monotonicamente para cima e terminam na borda superior. Mas Vô Giuseppe sempre seguia uma propriedade: dois cortes do mesmo tipo nunca podiam se interceptar. Veja um exemplo com 4 cortes, dois de cada tipo, na parte esquerda da figura, que dividem a pizza em 9 pedaços.\nAcontece que Vô Giuseppe simplesmente ama geometria, topologia, combinatória e coisas assim; por isso, resolveu mostrar para as crianças que poderia obter mais pedaços, com o mesmo número de cortes, se cruzamentos de cortes de mesmo tipo fossem permitidos. A parte direita da figura mostra, por exemplo, que se os dois cortes do tipo dos que vão da esquerda para a direita puderem se interceptar, a pizza será dividida em 10 pedaços.\nVô Giuseppe descartou a propriedade, mas não vai fazer cortes aleatórios. Além de serem de um dos dois tipos, eles vão obedecer às seguintes restrições: • Dois cortes têm no máximo um ponto de interseção e, se tiverem, é porque os cortes se cruzam naquele ponto; • Três cortes não se interceptam num mesmo ponto; • Dois cortes não se interceptam na borda da pizza; • Um corte não intercepta um canto da pizza.\nDados os pontos de começo e término de cada corte, seu programa deve computar o número de pedaços resultantes dos cortes do Vô Giuseppe.\nEntrada\nA primeira linha da entrada contém dois inteiros X e Y , (1 ≤ X,Y ≤ 109), representando as coor denadas (X,Y ) do canto superior direito da pizza. O canto inferior esquerdo tem sempre coordenadas (0,0). A segunda linha contém dois inteiros H e V , (1 ≤ H,V ≤ 105), indicando, respectivamente, o número de cortes que vão da esquerda para a direita, e o número de cortes que vão de baixo para cima.\nCada uma das H linhas seguintes contém dois inteiros Y1 e Y2 definindo as ordenadas de encontro dos lados verticais da pizza com um corte que vai do lado esquerdo, na ordenada Y1, para o lado direito, na ordenada Y2. Cada uma das V linhas seguintes contém dois inteiros X1 e X2 definindo as abscissas de encontro dos lados horizontais da pizza com um corte que vai do lado inferior, na abscissa X1, para o lado superior, na abscissa X2.\nSaída\nImprima uma linha contendo um inteiro representando o número de pedaços resultantes.",
    "samplesExamples": [
      [
        "3 4\n3 2\n1 2\n2 1\n3 3\n1 1\n2 2",
        "13"
      ],
      [
        "5 5\n3 3\n2 1\n3 2\n1 3\n3 4\n4 3\n2 2",
        "19"
      ],
      [
        "10000 10000\n1 2\n321 3455\n10 2347\n543 8765",
        "6"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Bolinhas de Gude",
    "text": "Usar bolinhas de gude como moeda não deu muito certo em Cubicônia. Na tentativa de se redimir com seus amigos, depois de roubar suas bolinhas de gude, o imperador decidiu convidar todos para uma noite de jogos em seu palácio.\nNaturalmente, os jogos utilizam bolinhas de gude, afinal agora o imperador precisa encontrar alguma utilidade para tantas bolinhas. N bolinhas de gude são espalhadas em um grande tabuleiro cujas linhas são numeradas de 0 a L e as colunas numeradas de 0 a C. Os jogadores alternam turnos e em cada turno o jogador da vez deve escolher uma das bolinhas de gude e movê-la. O primeiro jogador que mover uma bolinha para a posição (0,0) é o vencedor. Para que o jogo seja interessante, os movimentos são limitados; do contrário, o primeiro jogador sempre moveria a bolinha para a posição (0,0) e venceria. Um movimento consiste em escolher um inteiro u maior que 0 e uma bolinha, cuja localização denotaremos por (l,c), e movê-la para uma das seguintes posições, desde que a mesma não saia do tabuleiro: • (l − u,c); • (l,c − u); ou • (l − u,c − u).\nNote que mais de uma bolinha de gude pode ocupar a mesma posição no tabuleiro.\nComo o imperador não gosta de perder você deve ajudá-lo a determinar em quais partidas ele deve participar. Como é de se esperar, sempre que joga o imperador fica com o primeiro turno. Assumindo que todos jogam de forma ótima, seu programa deve analisar a distribuição inicial das bolinhas de gude no tabuleiro e informar se é possível ou não que o imperador vença caso ele jogue.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes contém dois inteiros li e ci indicando em qual linha e coluna a i-ésima bolinha de gude se encontra no tabuleiro (1 ≤ li,ci ≤ 100).\nSaída\nSeu programa deve produzir uma única linha contendo o caractere Y caso seja possível para o imperador ganhar o jogo ou N caso contrário.",
    "samplesExamples": [
      [
        "2\n1 3\n2 3",
        "Y"
      ],
      [
        "1\n1 2",
        "N"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Aventurando-se no Slackline",
    "text": "Beltrano recentemente se interessou por slackline. Slackline é um esporte de equilíbrio sobre uma fita elástica esticada entre dois pontos fixos, o que permite ao praticante andar e fazer manobras em cima da fita. Durante as férias tudo que Beltrano quer fazer é praticar, e para isso ele foi para a fazenda de um amigo, onde há uma plantação de eucaliptos.\nA plantação é muito bem organizada. Os eucaliptos estão dispostos em N fileiras com M árvores em cada. Há um espaço de um metro entre cada fileira e as árvores nas diferentes fileiras estão todas perfeitamente alinhadas com um espaço de um metro entre elas.\nBeltrano vai montar o slackline usando duas árvores. Ao montar o slackline Beltrano não gosta que a distância entre as duas árvores seja muito pequena, já que as melhores manobras exigem que a fita tenha pelo menos L metros. Também não é possível esticar demais a fita já que ela tem um comprimento máximo de R metros. Note que ao esticar a fita entre as duas árvores escolhidas não pode haver nenhuma outra árvore na linha formada, caso contrário não seria possível utilizar a fita toda para as manobras.\nBeltrano gostaria de saber de quantas formas diferentes é possível montar o slackline usando as árvores da fazenda. Duas formas são consideradas diferentes se pelo menos uma das árvores onde a fita foi amarrada é diferente.\nEntrada\nA entrada consiste de uma única linha que contém quatro inteiros, N,M,L,R, representando respectivamente o número de linhas e colunas da plantação e os comprimentos mínimo e máximo do slackline (1 ≤ N,M ≤ 105; 1 ≤ L ≤ R ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando de quantas formas diferentes o slackline pode ser montado. Como o resultado pode ser grande, a resposta deve ser esse número módulo 109 + 7.",
    "samplesExamples": [
      [
        "2 2 1 1",
        "4"
      ],
      [
        "2 3 1 4",
        "13"
      ],
      [
        "3 4 1 4",
        "49"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Enigma",
    "text": "Dada uma configuração inicial, a máquina de criptografia alemã Enigma, da Segunda Guerra Mundial, substituía cada letra digitada no teclado por alguma outra letra. A substituição era bastante complexa, mas a máquina tinha uma vulnerabilidade: uma letra nunca seria substituída por ela mesma! Essa vulnerabilidade foi explorada por Alan Turing, que trabalhou na criptoanálise da Enigma durante a guerra. O objetivo era encontrar a configuração inicial da máquina usando a suposição de que a mensagem continha uma certa expressão usual da comunicação, como por exemplo a palavra ARMADA.\nEssas expressões eram chamadas de cribs. Se a mensagem cifrada era, por exemplo, FDMLCRDMRALF, o trabalho de testar as possíveis configurações da máquina era simplificado porque a palavra ARMADA, se estivesse nessa mensagem cifrada, só poderia estar em duas posições, ilustradas na tabela abaixo com uma seta. As demais cinco posições não poderiam corresponder ao crib ARMADA porque ao menos uma letra do crib, sublinhada na tabela abaixo, casa com sua correspondente na mensagem cifrada; como a Enigma nunca substituiria uma letra por ela própria, essas cinco posições poderiam ser descartadas nos testes.\n  Neste problema, dada uma mensagem cifrada e um crib, seu programa deve computar o número de posições possíveis para o crib na mensagem cifrada.\nEntrada\nA primeira linha da entrada contém a mensagem cifrada, que é uma sequência de pelo menos uma letra e no máximo 104 letras. A segunda linha da entrada contém o crib, que é uma sequência de pelo menos uma letra e no máximo o mesmo número de letras da mensagem. Apenas as 26 letras maiúsculas, sem acentuação, aparecem na mensagem e no crib.\nSaída\nImprima uma linha contendo um inteiro, indicando o número de posições possíveis para o crib na mensagem cifrada.",
    "samplesExamples": [
      [
        "FDMLCRDMRALF\nARMADA",
        "2"
      ],
      [
        "AAAAABABABABABABABABA\nABA",
        "7"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Juntando Capitais",
    "text": "Um reino longínquo possui N cidades, dentre as quais K são capitais. O rei Richard quer construir linhas de transmissão, cada uma delas ligando duas cidades. É preciso haver um caminho, ou seja, uma sequência de linhas de transmissão, entre qualquer par de capitais.\nCada linha de transmissão possui um custo associado, que é a distância euclidiana entre as cidades que a linha de transmissão conecta. Como o rei é avarento, ele deseja que as linhas de transmissão sejam criadas de modo que o custo total (soma dos custos das linhas) seja o menor possível.\nA figura, na parte A, mostra um exemplo de reino com N = 10 cidades, sendo K = 4 capitais.\nO engenheiro chefe apresentou ao rei a solução mostrada na parte B, que minimiza de fato o custo total. Mas o rei não gostou de ver uma capital possuindo mais de uma linha de transmissão. Ele, então, determinou uma nova restrição: uma capital só pode estar ligada a uma outra cidade. Desse jeito, depois de trabalhar muito, o engenheiro chefe apresentou a nova solução, ilustrada na parte C da figura. Só que ele não tem certeza se essa solução é ótima e precisa da sua ajuda! Dadas as coordenadas das cidades, seu programa deve computar o custo total mínimo possível para construir linhas de transmissão de modo que todo par de capitais esteja ligado por um caminho e toda capital esteja ligada a apenas uma cidade.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e K, 4 ≤ N ≤ 100 e 3 ≤ K < min(10,N), indicando respectivamente o número de cidades e o número de capitais. As N linhas seguintes contêm, cada uma, dois inteiros X e Y , −1000 ≤ X,Y ≤ 1000, representando as coordenadas de uma cidade.\nAs K primeiras cidades são as capitais. Não há duas cidades com as mesmas coordenadas.\nSaída\nImprima uma linha contendo um número real, com 5 casas decimais, indicando o custo total mínimo para construir as linhas de transmissão, de acordo com as restrições acima.",
    "samplesExamples": [
      [
        "6 4\n-20 10\n-20 -10\n20 10\n20 -10\n-10 0\n10 0",
        "76.56854"
      ],
      [
        "22 9\n-3 -25\n0 -6\n-1 -9\n2 -21\n-5 -19\n0 -23\n-2 24\n-4 37\n-3 33\n-3 -12\n2 39\n3 -49\n-3 -26\n2 24\n5 3\n-4 -9\n-2 -9\n-4 8\n3 -33\n-2 31\n-1 -13\n0 2",
        "95.09318"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Interruptores",
    "text": "No painel de controle de um grande anfiteatro existem N interruptores, numerados de 1 a N, que controlam as M lâmpadas do local, numeradas de 1 a M. Note que o número de interruptores e lâmpadas não é necessariamente o mesmo e isso acontece porque cada interruptor está associado a um conjunto de lâmpadas e não apenas a uma lâmpada. Quando um interruptor é acionado, o estado de cada uma das lâmpadas associadas a ele é invertido. Quer dizer, aquelas apagadas acendem e as acesas se apagam.\nAlgumas lâmpadas estão acesas inicialmente e o zelador do anfiteatro precisa apagar todas as lâmpadas. Ele começou tentando acionar interruptores aleatoriamente mas, como não estava conse guindo apagar todas as lâmpadas ao mesmo tempo, decidiu seguir uma seguinte estratégia fixa. Ele vai acionar os interruptores na sequência 1,2,3,...,N,1,2,3,... ou seja, toda vez após acionar o interruptor de número N, ele recomeça a sequência a partir do interruptor 1. Ele pretende acionar interruptores, seguindo essa estratégia, até que todas as lâmpadas estejam apagadas ao mesmo tempo (momento em que ele para de acionar os interruptores). Será que essa estratégia vai funcionar? Neste problema, dadas as lâmpadas acesas inicialmente e dados os conjuntos de lâmpadas que estão associados a cada interruptor, seu programa deve computar o número de vezes que o zelador vai acionar os interruptores. Caso a estratégia do zelador nunca apague todas as lâmpadas ao mesmo tempo, seu programa deve imprimir −1.\nEntrada\nA primeira linha contém dois inteiros N e M (1 ≤ N,M ≤ 1000) representando, respectivamente, o número de interruptores e o número de lâmpadas. A segunda linha contém um inteiro L (1 ≤ L ≤ M) seguido por L inteiros distintos Xi (1 ≤ Xi ≤ M), representando as lâmpadas acesas inicialmente.\nCada uma das N linhas seguintes contém um inteiro Ki (1 ≤ Ki ≤ M) seguido por Ki inteiros distintos Yi (1 ≤ Yi ≤ M), representando as lâmpadas associadas ao interruptor i (1 ≤ i ≤ N).\nSaída\nSe programa deve produzir uma única linha contendo um inteiro representando o número de vezes que o zelador vai acionar os interruptores, seguindo a estratégia descrita, até todas as lâmpadas estarem apagadas ao mesmo tempo. Caso isso nunca vá acontecer, imprima −1.",
    "samplesExamples": [
      [
        "6 3\n2 1 3\n3 1 2 3\n2 1 3\n2 1 2\n2 2 3\n1 2\n3 1 2 3",
        "5"
      ],
      [
        "3 3\n2 2 3\n1 3\n2 1 2\n1 2",
        "-1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hipótese Policial",
    "text": "O sistema de transporte público da Nlogônia conta com uma rede expressa conectando os principais pontos turísticos do país. São usados N −1 trens-bala para conectar N atrações de modo que a partir de um dos pontos turísticos é possível alcançar qualquer outro ponto usando apenas essa rede expressa.\nComo em qualquer lugar do mundo, é comum que haja pichações nas estações de trem. O que chamou a atenção da polícia do país é o fato de que em cada uma das estações é possível encontrar exatamente uma letra pichada com um estilo específico. A hipótese é de que criminosos podem estar alterando as pichações como meio de comunicação e portanto decidiu-se criar um sistema capaz de monitorar as pichações e suas alterações.\nDado um padrão P, a descrição das conexões entre as estações e as letras suspeitas em cada uma das estações, sua tarefa é escrever um programa capaz de lidar com as seguintes operações: • 1 u v: imprime quantas ocorrências do padrão P existem no caminho de u até v se olharmos para os caracteres associados a vértices consecutivos do caminho; • 2 u x: Altera a letra suspeita na estação u para x.\nEntrada\nA primeira linha contém dois inteiros N e Q (1 ≤ N,Q ≤ 105), representando o número de estações e a quantidade de operações que devem ser processadas. A segunda linha contém o padrão P monitorado (1 ≤ |P| ≤ 100). A terceira linha contém uma string S com N caracteres representando as letras inicialmente associadas a cada uma das estações. Cada uma das N − 1 linhas seguintes contém dois inteiros u e v indicando que existe um trem-bala entre as estações u e v. As Q linhas seguintes descrevem as operações que devem ser processadas conforme descrito acima.\nSaída\nSeu programa deve imprimir uma linha para cada operação do tipo 1 contendo um inteiro que representa o número de ocorrências do padrão P no caminho analisado.",
    "samplesExamples": [
      [
        "4 4\nxtc\nxtzy\n1 2\n2 3\n3 4\n1 1 3\n2 3 c\n1 1 3\n1 3 1",
        "0\n1\n0"
      ],
      [
        "6 7\nlol\ndlorlx\n1 2\n1 3\n3 4\n3 5\n5 6\n1 2 6\n2 3 l\n2 6 l\n2 5 o\n1 2 6\n2 1 o\n1 6 2",
        "0\n1\n2"
      ],
      [
        "5 2\naba\nababa\n1 2\n2 3\n3 4\n4 5\n1 1 5\n1 5 1",
        "2\n2"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Linhas de Metrô",
    "text": "O sistema de metrô de uma grande cidade é formado por um conjunto de estações e por túneis que ligam alguns pares de estações. O sistema foi desenhado de forma que existe exatamente uma sequência de túneis ligando qualquer par de estações. As estações nas quais apenas um túnel chega são chamadas de terminais. Há várias linhas de trens que fazem viagens de ida e volta entre duas estações terminais, transitando pelo caminho único entre elas. A população está reclamando das linhas atuais e, por isso, o prefeito ordenou uma reformulação total das linhas. Como o sistema possui muitas estações, nós precisamos ajudar os engenheiros que estão tentando decidir quais pares de terminais passarão a definir uma linha.\nA figura ilustra um sistema onde as estações terminais são mostradas como círculos preenchidos e as não-terminais são mostradas como círculos vazios. Na parte esquerda, veja que se o par (A,B) definir uma linha e o par (C,D) definir outra, elas não terão qualquer estação em comum. Mas, na parte direita, podemos ver que se os pares (E,F) e (G,H) definirem duas linhas, elas terão duas estações em comum.\nDada a descrição do sistema de túneis e uma sequência de Q consultas constituídas de dois pares de terminais, seu programa deve computar, para cada consulta, quantas estações em comum as linhas definidas pelos dois pares teriam.\nEntrada\nA primeira linha da entrada contém dois inteiros N (5 ≤ N ≤ 105) e Q (1 ≤ Q ≤ 20000), repre sentando respectivamente o número de estações e o número de consultas. As estações são numeradas de 1 até N. Cada uma das N −1 linhas seguintes contém dois inteiros distintos U e V , 1 ≤ U,V ≤ N, indicando que existe um túnel entre as estações U e V . Cada uma das Q linhas seguintes contém quatro inteiros distintos A, B, C e D (1 ≤ A,B,C,D ≤ N), representando uma consulta: as duas linhas de trem são definidas pelos pares (A,B) e (C,D).\nSaída\nPara cada consulta, seu programa deve imprimir uma linha contendo um inteiro representando quantas estações em comum teriam as duas linhas de trem definidas pela consulta.",
    "samplesExamples": [
      [
        "10 4\n1 4\n4 5\n3 4\n3 2\n7 3\n6 7\n7 8\n10 8\n8 9\n6 10 2 5\n1 9 5 10\n9 10 2 1\n5 10 2 9",
        "0\n4\n0\n3"
      ],
      [
        "5 1\n1 5\n2 5\n5 3\n5 4\n1 2 3 4",
        "1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Modificando SAT",
    "text": "O problema da Satisfatibilidade Booleana (conhecido como SAT) consiste em decidir, dada uma fórmula booleana na forma normal conjuntiva, se existe alguma atribuição de valores “verdadeiro” ou “falso” a suas variáveis de forma que a fórmula inteira seja verdadeira.\nNa forma normal conjuntiva, a fórmula é dada em um formato bem específico. Em primeiro lugar, as únicas operações lógicas utilizadas são o “E”, o “OU” e a negação, denotados por ∧,∨ e ¬, respectivamente. Uma fórmula é formada através da operação “E” de diferentes partes, chamadas cláusulas, C1,...,Cm. Desta forma, uma fórmula ϕ terá o seguinte formato: ϕ = C1 ∧ ··· ∧ Cm.\nAlém disso, cada uma das cláusulas também possui um formato específico. Em particular, cada uma das cláusulas é composta pelo “OU” de literais, que são variáveis ou negações de variáveis, cercada por parênteses. Assim, (x1 ∨ ¬x2) é uma cláusula válida, enquanto (x1 ∧ ¬x2) não o seria, por usar o operador “E”. Um exemplo completo de fórmula seria: ϕ = (x1 ∨ x2 ∨ x3) ∧ (¬x1) ∧ (x1 ∨ ¬x2 ∨ x3) ∧ (x2 ∨ ¬x3).\nUma variação do problema SAT é conhecida como k-SAT, onde cada cláusula possui no máximo k literais. A fórmula acima seria um exemplo de instância do problema 3-SAT, mas não de 2-SAT.\nNote que, em todos estes problemas, para uma fórmula ser verdadeira, cada uma das cláusulas deve ser verdadeira e, portanto, pelo menos um dos literais (da forma xi ou ¬xi) de cada cláusula deve ser verdadeiro.\nUma atribuição é um modo de definir as variáveis como verdadeiras ou falsas. Neste problema estamos interessados em numa variação do problema 3-SAT, no qual uma atribuição válida deve ter exatamente 1 ou exatamente 3 literais verdadeiros em cada cláusula. Dada uma fórmula, sua tarefa é decidir se existe uma atribuição válida, levando em conta tal restrição extra. Caso haja uma atribuição válida, você deve imprimir a lexicograficamente máxima. A ordem lexicográfica é definida do seguinte modo: dadas duas atribuições diferentes, podemos compará-las olhando para a variável de menor índice que difere nas duas atribuições; das duas, a maior atribuição é a que dá valor verdadeiro para tal variável.\nEntrada\nA primeira linha da entrada contém dois inteiros M e N (1 ≤ M,N ≤ 2000), descrevendo o número de cláusulas e variáveis, respectivamente. Em seguida, serão fornecidas M linhas, cada uma descrevendo uma cláusula (veja o exemplo para detalhes do formato). Cláusulas consecutivas são separadas pela string “ and”. Cada cláusula contém no máximo 3 literais. As variáveis são denotadas por “x” seguido de um número entre 1 e N. Não haverá dois espaços consecutivos, nem haverá espaço no final das linhas.\nO primeiro exemplo descreve a fórmula ϕ acima.\nSaída\nSeu programa deve imprimir uma única linha contendo N caracteres correspondentes a atribuição válida lexicograficamente máxima, ou impossible caso não haja atribuição válida. O i-ésimo caractere deve ser T se a variável é verdadeira na atribuição e F caso contrário.",
    "samplesExamples": [
      [
        "4 3\n(x1 or x2 or x3) and\n(not x1) and\n(x1 or not x2 or x3) and\n(x2 or not x3)",
        "impossible"
      ],
      [
        "5 6\n(not x1) and\n(x1 or x2 or x4) and\n(x1 or x3 or x5) and\n(not x2 or x3 or x5) and\n(x2 or x3 or not x4)",
        "FTTFFT"
      ],
      [
        "1 1\n(x1 or x1 or not x1)",
        "F"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ajude Cupido",
    "text": "O trabalho do Cupido está ficando mais difícil, então ele está adotando novas tecnologias para ajudá-lo em sua difícil tarefa de combinar pessoas em casais felizes. Ele nomeou os melhores programadores de sua equipe para um novo projeto chamado Advanced Couples Matching (ACM). Para este projeto, os programadores precisam produzir um algoritmo que pegue um conjunto de um número par de N pessoas solitárias e os combine em N/2 pares, de modo que cada pessoa esteja em exatamente um casal.\nInfelizmente, os dados disponíveis sobre cada pessoa são limitados. Neste mundo moderno, utilizar género, etnia, idade ou nacionalidade como critérios para formar casais não é uma opção sensata, pelo que os programadores só podem utilizar dados sobre a ligação à Internet de cada candidato. Eles decidiram focar esta etapa nos fusos horários.\nPessoas que vivem em fusos horários mais próximos têm maior probabilidade de encontrar tempo para interagir umas com as outras. Assim, os programadores decidiram criar casais de forma a minimizar a diferença horária total.\nCada fuso horário é identificado por um número inteiro entre −11 e 12, inclusive, representando sua diferença em horas de um fuso horário específico denominado Tempo Universal Coordenado (ou UTC). A diferença horária de duas pessoas que vivem em fusos horários representada pelos inteiros i e j é o mínimo entre |i − j| e 24 − |i − j|. Dada uma partição de um conjunto de um número par N de candidatos em N/2 pares, sua diferença temporal total é a soma da diferença temporal de cada casal.\nVocê é solicitado a escrever um programa que receba como entrada os fusos horários de um conjunto de N candidatos.\nA saída do programa deve ser a diferença de tempo total mínima entre todas as partições possíveis do conjunto em pares.\nEntrada\nA primeira linha contém um inteiro par N (2 ≤ N ≤ 1000) representando o número de candidatos a serem acoplados. A segunda linha contém N inteiros T1,T2,...,TN (−11 ≤ Ti ≤ 12 para i = 1,2,...,N) indicando os fusos horários dos candidatos.\nSaída\nProduza uma única linha com um número inteiro a diferença de tempo total mínima entre todas as partições possíveis do conjunto de candidatos em pares.",
    "samplesExamples": [
      [
        "6\n-3 -10 -5 11 4 4",
        "5"
      ],
      [
        "2\n-6 6",
        "12"
      ],
      [
        "8\n0 0 0 0 0 0 0 0",
        "0"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Braile",
    "text": "O sistema Braille, desenhado por Louis Braille em 1825, revolucionou a comunicação escrita para pessoas cegas e com deficiência visual. Braille, um francês cego, desenvolveu uma linguagem tátil onde cada elemento é representado por uma célula com seis posições de pontos, dispostos em três linhas e duas colunas.\nCada posição de ponto pode ser elevada ou não, permitindo 64 configurações diferentes que podem ser sentidas por dedos treinados. A figura abaixo mostra a representação em Braille dos dígitos decimais (um ponto preto indica uma posição em relevo).\nPara desenvolver um novo sistema de software para ajudar os professores a lidar com alunos cegos ou com deficiência visual, é necessário um módulo tradutor de Braille. Dada uma mensagem em braille, composta apenas por dígitos braille, sua tarefa é traduzir a mensagem. Você pode ajudar? Entrada\nA primeira linha contém um inteiro D indicando o número de dígitos da mensagem braille (1 ≤ D ≤ 100). As próximas três linhas contêm uma mensagem composta por células D Braille que seu programa deve traduzir. As células Braille são separadas por espaços simples. Em cada célula Braille, uma posição elevada é indicada pelo caractere “*” (asterisco), enquanto uma posição não elevada é indicada pelo caractere “.” (ponto).\nSaída\nPara cada caso de teste imprima apenas os dígitos da tradução correspondente, no mesmo formato da entrada (veja os exemplos para maiores esclarecimentos).",
    "samplesExamples": [
      [
        "3\n** ** *.\n.* ** **\n.. .. ..",
        "478"
      ],
      [
        "10\n.* *. ** ** *. ** ** *. *. .*\n*. ** ** *. .* .* .. *. .. **\n.. .. .. .. .. .. .. .. .. ..",
        "9876543210"
      ],
      [
        "3\n.* .* .*\n** ** **\n.. .. ..",
        "000"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Vinícius Santos, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Horas e Minutos",
    "text": "Heidi tem um relógio analógico discreto em formato de círculo, como o da figura. Dois ponteiros giram em torno do centro do círculo, indicando horas e minutos. O relógio possui 60 marcas colocadas em seu perímetro, sendo a distância entre marcas consecutivas constante.\nO ponteiro dos minutos se move da marca atual para a próxima exatamente uma vez a cada minuto. O ponteiro das horas se move da marca atual para a próxima exatamente uma vez a cada 12 minutos, portanto avança cinco marcas a cada hora.\nConsideramos que ambas as mãos se movem de forma discreta e instantânea, o que significa que estão sempre posicionadas exatamente sobre uma das marcas e nunca entre as marcas.\nÀ meia-noite, ambos os ponteiros atingem simultaneamente a marca superior, que indica zero horas e zero minutos. Após exatamente 12 horas ou 720 minutos, ambos os ponteiros alcançam novamente a mesma posição, e esse processo é repetido indefinidamente. Observe que quando o ponteiro dos minutos se move, o ponteiro das horas pode não se mover; entretanto, quando o ponteiro das horas se move, o ponteiro dos minutos também se move.\nHeidi gosta de geometria e de medir o ângulo mínimo entre os dois ponteiros do relógio em diferentes horários do dia. Ela tem anotado algumas medidas, mas depois de vários anos e de uma longa lista, percebeu que alguns ângulos se repetiam enquanto outros nunca apareciam. Por exemplo, a lista de Heidi indica que tanto às três como às nove horas o ângulo mínimo entre os dois ponteiros é de 90 graus, enquanto um ângulo de 65 graus não aparece na lista. Heidi decidiu verificar, para qualquer número inteiro A entre 0 e 180, se existe pelo menos uma hora do dia tal que o ângulo mínimo entre os dois ponteiros do relógio seja exatamente A graus. Ajude-a com um programa que responda a esta pergunta.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro A representando o ângulo a ser verificado (0 ≤ A ≤ 180).\nSaída\nPara cada caso de teste imprima uma linha contendo um caractere. Se existir pelo menos uma hora do dia em que o ângulo mínimo entre os dois ponteiros do relógio seja exatamente A graus, escreva a letra maiúscula “Y”. Caso contrário, escreva a letra maiúscula “N”.",
    "samplesExamples": [
      [
        "90",
        "Y"
      ],
      [
        "65",
        "N"
      ],
      [
        "66",
        "Y"
      ],
      [
        "67",
        "N"
      ],
      [
        "0",
        "Y"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": true
  },
  {
    "name": "Banco de Dados de Clientes",
    "text": "Hoje em dia existem bilhões de usuários de e-mail. Um fato pouco conhecido é que alguns provedores de e-mail oferecem muito mais do que o endereço de e-mail usual username@provider.com.\nAlguns provedores simplesmente ignoram os pontos nos nomes de usuário. Assim, se John possuir o nome de usuário johnsmith, ele poderá informar às pessoas que seu endereço de e-mail é johnsmith@provider.com, john.smith@provider.com ou john.smith@provider.com, entre outros. Os e-mails enviados para qualquer um desses endereços acabariam em sua caixa de correio.\nOutros provedores permitem anexar o caractere “+” seguido por qualquer combinação de letras e/ou dígitos após o nome de usuário. Com esse recurso, ao registrar o nome de usuário johnsmith, John também poderia usar johnsmith+friends@provider.com e johnsmith+2x3is6@provider.com.\nÀs vezes, os dois recursos estão disponíveis ao mesmo tempo e, nesses casos, john.smith+icpc@provider.com e john.smith+wants.2.eat.lemon.3.14@provider.com são endereços válidos que John poderia usar.\nIsto é bastante útil para os usuários, que podem gerenciar diferentes endereços para ajudar a organizar suas caixas de correio e filtrar facilmente as newsletters eventualmente enviadas após o registro em um novo site. Infelizmente, isso também abre espaço para abusos. Alguns sites dependem do fato de que cada endereço de e-mail identifica um único usuário. No entanto, um usuário mal-comportado pode facilmente criar várias contas aproveitando os vários endereços permitidos pelo provedor de e-mail.\nDepois de saber de tudo isso, seu chefe ficou muito preocupado. E se o número de usuários únicos informado aos acionistas não for preciso e, em vez disso, estiver inchado por contas duplicadas? Isso leva você à tarefa em questão: dada a lista de todos os endereços de e-mail do banco de dados de usuários da empresa, você deve determinar o número real de usuários únicos, assumindo que todos os provedores de e-mail tenham ambos os recursos descritos disponíveis.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000) representando o número de endereços de e-mail no banco de dados. Cada uma das próximas N linhas contém uma sequência de no máximo 100 caracteres representando um endereço de e-mail no banco de dados. Cada endereço de e-mail tem o formato localpart@provider onde localpart é uma lista não vazia de rótulos com um “.” (ponto) ou um “+” (sinal de mais) entre cada par de rótulos consecutivos, e provedor é uma lista não vazia de rótulos sempre com um “.” (ponto) entre cada par de rótulos consecutivos. Um rótulo é uma sequência não vazia de letras minúsculas e/ou dígitos. O caracter “+” (sinal de mais) aparece no máximo uma vez em cada endereço de e-mail.\nSaída\nProduza uma única linha com um número inteiro indicando o número de usuários únicos no banco de dados.",
    "samplesExamples": [
      [
        "2\ntwo.different.providers@now.here\ntwo.different.providers@nowhere",
        "2"
      ],
      [
        "2\n1.2.3@testing\ntesting@1.2.3",
        "2"
      ],
      [
        "7\nalice@e.mail\neve@another.mail\nbob@e.mail\njoe90@e.mail\nb.o.b@e.mail\nbob+new@e.mail\nbob@another.provider",
        "5"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Colhendo Frutas Rubro-Negras",
    "text": "É hora da colheita no pomar de árvores rubro-negras do Fazendeiro Fred! Mas como já está velho demais para subir em árvores, Fred trouxe todos os netos ao pomar para uma competição de coleta de frutas: quem colher mais frutas ganhará potes de geléia rubro-preta! As árvores rubro-negras são especiais porque a mesma árvore dá dois tipos diferentes de frutos: o fruto vermelho e o fruto preto. Isso coloca um problema ao fazendeiro Fred: como classificar as crianças que coletaram as mesmas quantidades de frutas diferentes? Por exemplo, se Abby escolhesse duas frutas vermelhas e três pretas, e Bruce escolhesse três frutas vermelhas e duas pretas, quem deveria ter uma classificação mais elevada na competição? Quanto deve valer cada fruta? Para resolver este problema, o fazendeiro Fred decidiu que cada fruta vermelha valeria r pontos, e cada fruta preta valeria b pontos, ambos r e b inteiros positivos. Em seguida, ele classificaria as crianças de acordo com o número total de pontos que cada uma tem, os empates seriam desfeitos arbitrariamente.\nTudo o que resta fazer agora é escolher os valores de r e b. Mas o agricultor Fred ficou curioso e agora quer saber de quantas maneiras diferentes pode classificar os seus netos de acordo com os critérios descritos. Duas classificações são consideradas diferentes se, e somente se, houver alguma criança que ocupe posições diferentes nelas.\nEntrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 1000) representando o número de netos do Fazendeiro Fred. Cada uma das próximas N linhas descreve os frutos colhidos por um neto com dois inteiros R e B (0 ≤ R,B ≤ 104), indicando respectivamente as quantidades de frutos vermelhos e pretos que a criança colheu.\nSaída\nProduza uma única linha com um número inteiro indicando o número de diferentes classificações possíveis. Imprima a resposta módulo 109 + 7.",
    "samplesExamples": [
      [
        "3\n0 2\n1 2\n2 1",
        "3"
      ],
      [
        "4\n1 0\n1 3\n2 2\n1 3",
        "6"
      ],
      [
        "4\n0 0\n3 1\n0 0\n0 0",
        "6"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Mario Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "KryptoLocker comeu meu dever de casa",
    "text": "O computador do seu amigo foi infectado pelo KryptoLocker ontem à noite. KryptoLocker é um ransomware que criptografa os dados do usuário, tornando-os inutilizáveis ​​até que um resgate seja pago à pessoa por trás do ataque.\nFelizmente, seu amigo percebeu que algo estranho estava acontecendo e conseguiu interromper o processo malicioso antes que todos os dados fossem perdidos. Infelizmente isso não aconteceu a tempo de salvar o dever de casa que acabara de terminar.\n“O cachorro comeu meu dever de casa” nunca funcionou como desculpa para a maioria dos professores e provavelmente as coisas não serão diferentes com “KryptoLocker criptografou meu dever de casa”.\nMas nem toda esperança está perdida. Para este dever de casa, cada aluno recebeu uma matriz de números inteiros v1 ≤ v2 ≤ ··· ≤ vN. Em seguida, cada aluno teve que gerar uma lista de 2N números, contendo as somas dos elementos em cada subsequência possível do array. O KryptoLocker corrompeu apenas a primeira linha do arquivo que contém a resposta do seu amigo e esta foi a linha onde o array foi escrito. Portanto, todas as somas ainda são conhecidas e isso deve ser suficiente para recuperar o array.\nVocê pode ajudar seu amigo a salvar o dever de casa? Entrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 18) indicando o número de elementos do array atribuído ao seu amigo. Cada uma das próximas 2N linhas contém um inteiro S (−109 ≤ S ≤ 109) representando a soma dos elementos em uma subsequência do array. As somas de todas as subsequências possíveis aparecem na entrada, sem nenhuma ordem específica. Existe pelo menos uma matriz cujas somas são os valores fornecidos.\nSaída\nProduza cada array diferente que possa ter sido atribuído ao seu amigo, um array por linha, com as linhas ordenadas lexicograficamente. Duas matrizes são consideradas diferentes se, e somente se, contiverem elementos diferentes em pelo menos uma posição.",
    "samplesExamples": [
      [
        "3\n9\n8\n7\n0\n15\n16\n17\n24",
        "7 8 9"
      ],
      [
        "2\n1\n0\n-1\n0",
        "-1 1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Animais Fantásticos",
    "text": "O excêntrico magizoologista Newt Scamander veio recentemente à Nlogônia para estudar as criaturas fantásticas que habitam este próspero reino. Mas antes que pudesse começar a explorar a área, um acidente atrapalhou seus planos: sua mala se abriu e sua coleção de feras fantásticas escapou do objeto mágico.\nOs habitantes da Nlogônia adoram zoológicos e, por isso, há muitos deles no reino. Acontece que as feras compartilham a paixão dos Nlogonianos por zoológicos e desde o acidente eles têm visitado vários zoológicos.\nBestas se libertando e causando problemas não são novidade para Newt, então ele colocou rastreadores nas feras desde o incidente anterior. Assim, a qualquer momento ele sabe a posição exata de cada uma das feras. Depois de observar os movimentos dos animais por algum tempo, ele percebeu que eles seguem um padrão peculiar: se um animal está atualmente em um determinado zoológico, após uma unidade de tempo ele permanecerá naquele zoológico ou se mudará para outro zoológico que dependa do zoológico. zoológico atual. Todos os animais que se mudam para outro zoológico fazem isso instantânea e simultaneamente.\nCom esta informação Newt conjecturou que talvez não seja tão difícil recuperar as criaturas.\nEle acredita que eventualmente todos eles poderão se encontrar no mesmo zoológico ao mesmo tempo, então ele só precisa esperar no lugar certo e capturar todas as feras fantásticas de uma vez. Dadas as informações que Newt tem até agora, você pode ajudá-lo a determinar onde e quando esperar pelas feras? Se houver várias possibilidades, ele quer pegar as feras o mais cedo possível.\nEntrada\nA primeira linha contém dois inteiros B (1 ≤ B ≤ 10) e Z (1 ≤ Z ≤ 100), indicando respectivamente o número de feras fantásticas e o número de zoológicos. Os zoológicos são identificados por números inteiros distintos de 1 a Z. Cada uma das próximas B linhas descreve as descobertas de Newt em um animal diferente com Z + 1 inteiros P0,P1,...,PZ (1 ≤ Pi ≤ Z para i = 0,1 ,...,Z); o valor P0 é o zoológico onde o animal está inicialmente, enquanto para i = 1,2,...,Z o valor Pi é o zoológico onde o animal estaria após uma unidade de tempo se estivesse atualmente no zoológico i.\nSaída\nProduza uma única linha com dois inteiros, P e T, indicando que todas as feras se encontrarão pela primeira vez no zoológico P após T unidades de tempo, ou o caractere “*” (asterisco) se as feras nunca estiverem todas no mesmo zoológico.",
    "samplesExamples": [
      [
        "2 4\n3 4 1 2 3\n2 1 1 4 3",
        "1 2"
      ],
      [
        "2 4\n3 4 1 2 3\n4 1 1 4 3",
        "*"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Viagens baratas",
    "text": "A Nlogónia tem um novo esquema de transporte público. Quando inicia a primeira viagem de um passageiro, inicia-se também um intervalo de 120 minutos de forma que são aplicados descontos a algumas das viagens que o passageiro inicia antes do final do intervalo. O desconto para a segunda viagem é de 50% do custo normal, enquanto o desconto para cada uma das restantes viagens até à sexta viagem (ou seja, mais quatro viagens) é de 75% do custo normal. Terminado o intervalo de 120 minutos, uma nova viagem inicia um novo intervalo com o mesmo tipo de descontos.\nÁstor é um estudante de intercâmbio que acaba de chegar à Nlogônia. Ele quer gastar o mínimo de dinheiro possível para fazer uma sequência de viagens. A primeira viagem da sequência pode ser iniciada a qualquer momento.\nCada viagem, exceto a primeira, não pode ser iniciada antes do término da viagem anterior na sequência, embora possa ser adiada o quanto for necessário. Dada a duração e o custo normal de cada viagem da sequência, você pode dizer ao Ástor qual o custo mínimo que ele deve arcar para completar todas as viagens da sequência? Entrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 104) representando o número de viagens na sequência.\nCada uma das próximas N linhas descreve uma viagem com dois inteiros D e C (1 ≤ D,C ≤ 1000), indicando respectivamente a duração (em minutos) e o custo normal da viagem.\nSaída\nProduza uma única linha com um número que representa o custo mínimo necessário para concluir todas as viagens na ordem em que aparecem na entrada. O resultado deve ser apresentado como um número racional com exatamente dois dígitos após a vírgula, arredondado se necessário.",
    "samplesExamples": [
      [
        "2\n120 10\n10 30",
        "40.00"
      ],
      [
        "3\n110 10\n10 30\n1000 101",
        "90.50"
      ],
      [
        "7\n10 1\n10 2\n10 4\n10 4\n10 4\n10 4\n10 1",
        "7.00"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Construindo um Campo",
    "text": "John é uma pessoa meticulosa. Na sua fazenda ele construiu um campo circular com algumas árvores plantadas bem na circunferência do campo. A Figura (a) abaixo mostra o campo com as árvores.\nAgora John quer usar uma corda longa e quatro árvores do campo para demarcar um retângulo usando as árvores como vértices e a corda como arestas. A figura (b) abaixo mostra dois retângulos que podem ser demarcados utilizando as árvores do talhão da figura (a).\nDada a descrição das posições das árvores no campo circular de John, você deve determinar se é possível demarcar um retângulo usando quatro das árvores como vértices e a corda como arestas.\nEntrada\nA primeira linha contém um inteiro N (4 ≤ N ≤ 105) indicando o número de árvores no talhão.\nAs árvores são representadas como pontos em uma circunferência. A segunda linha contém N inteiros L1,L2,...,LN (1 ≤ Li ≤ 106 para i = 1,2,...,N) indicando os comprimentos de arco entre cada par de árvores consecutivas. Os arcos são dados em sentido anti-horário. O comprimento total da circunferência não excede 109.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se for possível demarcar um retângulo usando as árvores fornecidas, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "8\n3 3 4 2 6 2 2 2",
        "Y"
      ],
      [
        "4\n14 16 15 15",
        "N"
      ],
      [
        "6\n3 7 7 3 10 10",
        "Y"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Uma pizza simétrica",
    "text": "Bob tem uma mania de simetria. Tudo na sua vida deve ser simétrico: a sua casa, as suas roupas, o seu carro, até a sua comida. E a pizza não é exceção. Para ele comer uma pizza, todos os recheios, como tomate, azeitona, calabresa ou manjericão, devem estar dispostos com algum grau de simetria rotacional.\nEsta noite Bob pediu pizza. Como sempre, quando chegou, pediu ao entregador que demonstrasse que a pizza atendia às suas exigências de simetria rotacional. O motorista demonstrou então a simetria, conforme foi treinado para fazer, utilizando o seguinte procedimento: • tirar foto da pizza com o celular; • gire a pizza em R graus em torno de seu centro; • tire outra foto; • mostre ao Bob as duas imagens lado a lado, para que ele veja que a pizza parece idêntica em ambas.\nSatisfeito, Bob pagou a pizza e levou-a para a cozinha. Para testar seu novo cortador de pizza a laser, ele decidiu cortar a pizza em tantas fatias quanto possível. Claro que Bob quer cortar as fatias de forma que todas fiquem exatamente iguais, de acordo com outra de suas manias. Agora, dado o ângulo R da demonstração de simetria, Bob quer saber a quantidade máxima de fatias iguais em que ele pode cortar a pizza.\nEntrada\nA entrada consiste em uma única linha que contém um número racional R (0 < R < 360) indicando o ângulo de demonstração da simetria rotacional. Este número tem exatamente dois dígitos após a vírgula.\nSaída\nProduza uma única linha com um número inteiro representando a quantidade máxima de fatias iguais em que Bob pode cortar a pizza, com base nas informações fornecidas.",
    "samplesExamples": [
      [
        "45.00",
        "8"
      ],
      [
        "180.00",
        "2"
      ],
      [
        "240.00",
        "3"
      ],
      [
        "35.00",
        "72"
      ],
      [
        "2.50",
        "144"
      ],
      [
        "11.34",
        "2000"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Mario Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Fuja, Polígono!",
    "text": "Um polígono convexo de aparência suspeita quer escapar de sua posição atual transladando-se ao longo de alguma direção reta. Três linhas retas muito diligentes querem travá-lo, colocando-se ao longo de três lados distintos do polígono. Então, se o triplo de retas definir um triângulo e o polígono estiver dentro desse triângulo, ele ficará trancado. Caso contrário, ele escapará.\nA figura (a) acima ilustra um triplo que irá travar o polígono. Para (b), as retas não definem um triângulo pois duas delas são paralelas, e assim o polígono escapará. Em (c), o polígono fica fora do triângulo definido pelo triplo e escapará facilmente.\nDado um polígono, você deve calcular o número de triplas distintas de linhas que podem bloquear o polígono.\nEntrada\nA primeira linha contém um inteiro N (3 ≤ N ≤ 105) representando o número de vértices do polígono. Cada uma das próximas N linhas descreve um vértice com dois inteiros X e Y (−108 ≤ X,Y ≤ 108) indicando as coordenadas do vértice no plano XY. Os vértices são dados em sentido anti-horário e definem um polígono convexo simples. Não existem três vértices colineares.\nSaída\nProduza uma única linha com um número inteiro indicando o número de triplos distintos de linhas que podem bloquear o polígono fornecido.",
    "samplesExamples": [
      [
        "4\n0 0\n10 0\n10 10\n0 5",
        "1"
      ],
      [
        "8\n0 32\n-12 15\n-10 -10\n0 -12\n10 -12\n22 0\n25 10\n18 20",
        "18"
      ],
      [
        "3\n10 -10\n0 10\n-10 -10",
        "1"
      ],
      [
        "6\n-100000000 131\n-50000067 -100000000\n50000014 -100000000\n100000000 -109\n70000173 100000000\n-90000011 100000000",
        "6"
      ],
      [
        "4\n0 0\n10 0\n10 10\n0 10",
        "0"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Guilherme A. Pinto, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Eleição ameaçada",
    "text": "As eleições nlogonianas estão chegando em breve e há muitos candidatos concorrendo à presidência de uma das maiores nações do planeta.\nO sistema de votação utilizado na Nlogónia é bastante fora do comum. Cada pessoa vota fazendo uma lista de todos os candidatos, em ordem de preferência do eleitor. Isso significa que o primeiro candidato da lista é aquele cujas propostas mais agradam ao eleitor, e o último candidato da lista é aquele cujas propostas menos agradam ao eleitor.\nSuponha que haja exatamente cinco eleitores 1, 2, 3, 4 e 5, exatamente cinco candidatos A, B, C, D e E, e os eleitores votaram conforme mostrado na tabela a seguir: Para determinar o vencedor, a Comissão Eleitoral primeiro faz um sorteio, denominado Ordenação Eleitoral, que contém todos os candidatos em uma determinada ordem. Em seguida, cada candidato é avaliado seguindo o Ordenamento Eleitoral, até que um deles seja eleito Presidente. Para que isso aconteça, o atual candidato avaliado deve ser o candidato preferido ainda em disputa por mais da metade dos eleitores.\nPara tornar o sistema eleitoral mais claro, continuando o exemplo acima, suponhamos que o resultado do Ordenamento Eleitoral seja C, D, A, E e B. Para determinar o vencedor a Comissão Eleitoral executaria os seguintes passos: • O primeiro candidato avaliado é C. Como este candidato é o candidato preferido de apenas dois dos cinco eleitores (1 e 3), então C é eliminado.\n• O próximo candidato avaliado é D, que é o candidato preferido ainda em disputa por apenas dois eleitores (1 e 5). Assim, o candidato D também é eliminado.\n• O Candidato A é avaliado em seguida. Dado que este candidato é o candidato preferido ainda em disputa por três dos cinco eleitores (1, 4 e 5), o candidato A é eleito Presidente e a votação termina.\nUm dos candidatos conseguiu corromper alguns membros da Comissão Eleitoral e agora pode decidir qual será o resultado do Ordenamento Eleitoral. Além disso, graças a diversas análises de redes sociais, o candidato conhece a lista em que cada eleitor irá votar. A única coisa que o candidato precisa para vencer a eleição agora é descobrir uma ordem eleitoral adequada. Como não é uma tarefa fácil, alguém da equipe de candidatos contratou você anonimamente para encontrar uma encomenda que faça o candidato vencer.\nCorra, pois o sorteio ocorrerá nas próximas horas.\nEntrada\nA primeira linha contém dois inteiros C e V (1 ≤ C,V ≤ 100, com V ímpar), representando respectivamente o número de candidatos e o número de eleitores. Os candidatos são identificados por sequências distintas e não vazias de no máximo 10 letras maiúsculas. Cada uma das próximas V linhas descreve o voto de um eleitor, ou seja, a linha contém a lista dos candidatos em ordem de preferência do eleitor. Todas as listas contêm os mesmos candidatos, embora os candidatos possam aparecer em ordem diferente. Após as votações há uma última linha que contém uma string W, indicando o candidato que deve vencer.\nSaída\nProduza uma única linha com a Ordem Eleitoral que faz o candidato W vencer a eleição, ou o caracter “*” (asterisco) se não for possível W vencer. Se existir mais de uma ordem eleitoral possível, produza a menor lexicograficamente.",
    "samplesExamples": [
      [
        "5 5\nC D A B E\nB C E D A\nC E B A D\nA C B D E\nD A C E B\nA",
        "C B D A E"
      ],
      [
        "3 5\nKATE BOB ED\nBOB ED KATE\nED BOB KATE\nBOB ED KATE\nKATE BOB ED\nKATE",
        "*"
      ],
      [
        "3 5\nKATE BOB ED\nBOB ED KATE\nED BOB KATE\nBOB ED KATE\nKATE BOB ED\nED",
        "BOB ED KATE"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Edwin Ninõ Velasquez, Colômbia"
    },
    "hasImages": true
  },
  {
    "name": "Cores de tinta",
    "text": "Stick Man deixou a árvore genealógica e saiu em aventuras. Em sua jornada ele encontrou uma árvore estranha com a raiz no ar e galhos voltados para o chão. Ele decidiu pintar alguns galhos das árvores para se lembrar de casa. Para isso ele quer que os galhos pintados com a mesma cor estejam todos conectados e formem um boneco de pau. Um stick man é um grupo de seis ramos (p,q) (q,r) (q,s) (q,t) (s,u) e (s,v), conforme mostrado na figura (a) abaixo. A figura (b) mostra uma árvore com um homem de pau pintado e a figura (c) mostra a mesma árvore com dois homens de pau pintados.\nStick Man gostaria de pintar o maior número possível de homens-pau na árvore, de modo que cada galho faça parte de no máximo um único homem-pau. Você pode ajudá-lo a descobrir quantas cores de tinta ele precisa comprar? Entrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) indicando o número de nós na árvore. Os nós são identificados por inteiros distintos de 1 a N, onde o nó 1 é a raiz da árvore. A segunda linha contém N − 1 inteiros P2,P3,...,PN (1 ≤ Pi ≤ N para i = 2,3,...,N), onde o valor Pi representa que existe um ramo (Pi, i), ou seja, do nó Pi ao nó i.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de stick men que podem ser pintados simultaneamente na árvore.",
    "samplesExamples": [
      [
        "14\n1 1 2 2 2 2 5 5 5 6 6 9 9",
        "2"
      ],
      [
        "13\n13 7 5 1 5 2 5 7 4 2 2 4",
        "2"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Desativação de Rodovias",
    "text": "O governo da Nlogónia está ansioso por reduzir a dívida pública. Uma das medidas prestes a ocorrer é o descomissionamento de algumas rodovias, pois a maioria delas acarreta alto custo de manutenção. Cada rodovia conecta duas cidades diferentes e pode ser percorrida em ambas as direções. Utilizando as rodovias existentes é possível chegar a qualquer cidade a partir de qualquer outra cidade.\nO governo promete que o impacto do desmantelamento será mínimo nas vidas dos Nlogonianos.\nEm particular, garantem que após o desmantelamento, para cada cidade, a distância mínima necessária para viajar dessa cidade até à capital do país permanecerá a mesma que é agora, quando todas as autoestradas puderem ser utilizadas.\nO Departamento de Estradas da Nlogônia acredita que os estagiários não estão lá apenas para tomar café ou fazer tarefas, mas devem fazer um trabalho significativo e é por isso que lhe é atribuída a seguinte tarefa.\nDada a extensão e o custo de manutenção de cada rodovia, você deve decidir quais rodovias serão mantidas ativas e quais serão desativadas. Como você pode imaginar, a soma dos custos de manutenção das demais rodovias deve ser mínima.\nEntrada\nA primeira linha contém dois inteiros N (2 ≤ N ≤ 104) e M (1 ≤ M ≤ 105), indicando respectivamente o número de cidades e o número de rodovias. As cidades são identificadas por números inteiros distintos de 1 a N, onde a cidade 1 é a capital da Nlogônia. Cada uma das M linhas seguintes descreve uma rodovia com quatro inteiros A, B, L e C (1 ≤ A,B ≤ N, A (cid:54)= B e 1 ≤ L,C ≤ 109), indicando que existe uma rodovia entre as cidades A e B que tem comprimento L e custo de manutenção C. Usando as rodovias existentes é possível chegar a qualquer cidade a partir de qualquer outra cidade.\nSaída\nProduza uma única linha com um número inteiro indicando a soma mínima possível de custos de manutenção para que um conjunto de rodovias seja mantido ativo. Este conjunto de autoestradas deve garantir que, para cada cidade, a distância mínima necessária para viajar dessa cidade até à capital da Nlogónia permanece a mesma, utilizando apenas essas autoestradas.",
    "samplesExamples": [
      [
        "3 4\n2 3 2 4\n2 3 2 2\n1 2 5 1\n1 3 1 4",
        "6"
      ],
      [
        "2 2\n1 2 10 5\n2 1 6 11",
        "11"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Procurando o fator de risco",
    "text": "Para testar um novo algoritmo criptográfico, os engenheiros que trabalham para um grande banco de investimento precisam calcular um valor que chamaram de Fator de Risco do algoritmo. Informalmente, o Fator de Risco é a quantidade de números menores ou iguais a um determinado valor N, que não são múltiplos de números primos maiores que um determinado valor K.\nMais formalmente, dados os valores N e K, o Fator de Risco é o número de elementos do seguinte conjunto: {x tal que 2 ≤ x ≤ N e para cada divisor primo p de x, p ≤ K} Os engenheiros precisam calcular o Fator de Risco para diferentes valores de N e K e preparamos um conjunto de perguntas para você responder. Você pode ajuda-los? Entrada\nA primeira linha contém um inteiro Q (1 ≤ Q ≤ 5 × 104) representando o número de consultas que os engenheiros prepararam para você. Cada uma das Q linhas a seguir descreve uma consulta com dois inteiros N e K (2 ≤ N,K ≤ 105).\nSaída\nSaída Q linhas, cada linha com um número inteiro indicando o Fator de Risco para a consulta correspondente da entrada.",
    "samplesExamples": [
      [
        "4\n10 3\n10 4\n15 3\n5 20",
        "6\n6\n7\n4"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Juan Pablo Marín Rosas, México"
    },
    "hasImages": false
  },
  {
    "name": "Monte Maratona",
    "text": "Mount Marathon é um jogo de paciência jogado com um baralho normal de 52 cartas. Para iniciar o jogo o jogador embaralha o baralho e coloca N cartas viradas para cima na mesa, formando uma linha reta de N pilhas, cada pilha contendo uma única carta. Nenhuma outra carta é usada durante o resto do jogo. Em seguida, o jogador move repetidamente uma pilha para cima de outra pilha até que não haja mais movimentos disponíveis. O objetivo do jogo é terminar com o número mínimo de pilhas. Ao mover uma pilha p para cima de outra pilha q, as seguintes condições devem ser atendidas: • A pilha p deve ser uma pilha de cartas únicas.\n• O valor da única carta da pilha p deve ser maior ou igual ao valor da carta que está no topo da pilha q.\n• A pilha q deve ser a próxima pilha imediatamente à direita da pilha p.\nA Figura (a) abaixo mostra uma configuração com seis cartas no início do jogo. O jogador pode mover a quinta pilha para o topo da sexta pilha e depois a segunda pilha para o topo da terceira pilha; como não há mais movimentos disponíveis, o jogo terminaria com quatro pilhas restantes, como pode ser visto na figura (b). Porém, neste caso é possível terminar o jogo apenas com as três pilhas que aparecem na figura (c).\nDadas as pilhas iniciais, você deve determinar o número mínimo de pilhas que é possível obter no final do jogo.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 52) representando o número de cartas no jogo.\nA segunda linha contém N inteiros C1,C2,...,CN (1 ≤ Ci ≤ 13 para i = 1,2,...,N) indicando os valores das cartas nas pilhas iniciais, da esquerda para a direita. Cada valor de carta aparece no máximo quatro vezes.\nSaída\nProduza uma única linha com um número inteiro indicando o número mínimo de pilhas que é possível obter ao final do jogo.",
    "samplesExamples": [
      [
        "6\n5 8 6 6 10 4",
        "3"
      ],
      [
        "1\n13",
        "1"
      ],
      [
        "5\n2 4 6 8 10",
        "5"
      ],
      [
        "11\n13 1 1 1 13 7 8 10 4 2 1",
        "4"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Inés Kereki, Uruguai"
    },
    "hasImages": true
  },
  {
    "name": "Deslocando Partículas",
    "text": "Um quadrado possui seus vértices nas coordenadas (0,0),(0,2N),(2N,2N),(2N,0). Cada vértice possui um atrator. Uma partícula é posicionada inicialmente na posição (2N−1,2N−1). Cada atrator pode ser ativado individualmente, qualquer quantidade de vezes. Quando um atrator na posição (i,j) é ativado, se a partícula encontra-se na posição (p,q), ela desloca-se para o ponto médio entre (i,j) e (p,q).\nDados N e um ponto (x,y), determine o menor número de ativações necessárias para que a partícula seja posicionada na posição (x,y).\nEntrada\nA entrada consiste de uma única linha contendo três inteiros N, x e y, satisfazendo 1 ≤ N ≤ 20 e 0 < x,y < 2N.\nSaída\nImprima uma única linha, contendo o menor número de ativações necessárias.",
    "samplesExamples": [
      [
        "1 1 1",
        "0"
      ],
      [
        "4 12 4",
        "1"
      ],
      [
        "4 3 1",
        "3"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Geometria Triangular",
    "text": "Todo polígono pode ser construído juntando-se triângulos. Em particular, podemos fazer isso ite rativamente: começamos com um triângulo, adicionamos um segundo triângulo identificando um de seus lados a um dos lados do triângulo inicial, adicionamos um terceiro triângulo identificando um de seus lados a um dos lados livres de um dos triângulos originais e assim por diante. Consideraremos apenas polígonos que podem ser construídos dessa maneira, onde cada triângulo adicionado toca (e é identificado com) exatamente um lado de um triângulo posicionado anteriormente.\nDado um polígono P, seja T o conjunto de triângulos que foi utilizado para formá-lo. Os lados de cada triângulo são segmentos de reta. Seja L o conjunto de segmentos que são lados de algum triângulo em T. Note que cada elemento de L é um lado de um ou dois elementos de T.\nUma vez que tenhamos um polígono posicionado no plano, em alguns casos podemos remover alguns dos triângulos que o compõem, sem alterar o conjunto L. Queremos remover triângulos de forma que o conjunto L seja mantido e que a área total dos triângulos remanescentes seja mínima.\nEquivalentemente, queremos selecionar um subconjunto S de triângulos de T de forma que: 1. Todo elemento de L seja o lado de pelo menos um triângulo em S; e 2. A soma das áreas dos elementos de S seja a menor possível.\nEntrada\nA primeira linha da entrada contém um inteiro N, 1 ≤ N ≤ 105 correspondendo ao número de triângulos na triangulação de P. Cada uma das N linhas seguintes contém 6 números, x1,y1,x2,y2,x3 e y3, indicando a existência de um triângulo de coordenadas (x1,y1),(x2,y2) e (x3,y3).Os triângulos são dados em ordem arbitrária. Todas as coordenadas serão números inteiros de valor absoluto no máximo 106.\nSaída\nVocê deve imprimir a área mínima possível respeitando as condições do problema, com exatamente uma casa decimal.\nNa figura acima as triangulações T1 = {a,b,c,d} e T2 = {a,b,c} representam, respectivamente, o primeiro e o segundo exemplo. Note como S1 = {a,c,d} é um subconjunto válido para o primeiro caso.\nO triângulo b é deixado de fora, mas todos os seus lados estão presentes nos triângulos selecionados.",
    "samplesExamples": [
      [
        "4\n0 0 0 10 10 0\n10 10 0 10 10 0\n10 10 0 10 0 20\n10 10 20 0 10 0",
        "150.0"
      ],
      [
        "3\n0 0 0 10 10 0\n10 10 0 10 10 0\n10 10 20 0 10 0",
        "150.0"
      ],
      [
        "1\n0 0 1 0 0 1",
        "0.5"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Kalel, o Sapo Saltador",
    "text": "Kalel é um sapo que gosta de pular sobre pedras.\nHá N pedras em uma linha, numeradas de 1 a N da esquerda para a direita. Kalel começa na pedra 1 e gostaria de chegar na pedra N.\nEm cada movimento, Kalel pode escolher um dentre M tipos de pulo. O j-ésimo pulo permite que ele pule da pedra x até a pedra x + dj, e custa pj pontos de energia. Pode acontecer de pj ser igual a 0 para alguns valores de j. Você pode assumir que Kalel nunca fica sem energia.\nDados N e K, calcule de quantas maneiras diferentes Kalel consegue chegar na pedra N gastando no máximo K pontos de energia no total. Duas maneiras são consideradas diferentes caso a sequência de escolha de pulos seja diferente. Como este número pode ser muito grande, estamos interessados apenas no resto da divisão do mesmo por 109 (um bilhão).\nEntrada\nA primeira linha contém três inteiros, N, M e K (1 ≤ N ≤ 109, 1 ≤ M ≤ 105, 0 ≤ K ≤ 400). As próximas M linhas contêm dois inteiros cada, os números dj e pj (1 ≤ dj ≤ 10, 0 ≤ pj ≤ K).\nSaída\nImprima uma única linha, contendo o número de maneiras diferentes de chegar na pedra N gas tando no máximo K pontos de energia, módulo 109 (um bilhão).",
    "samplesExamples": [
      [
        "5 3 10\n1 3\n2 0\n3 1",
        "6"
      ],
      [
        "100000 3 10\n1 9\n2 0\n7 3",
        "85449877"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Números Virados",
    "text": "Você acaba de ganhar um baralho com N cartas. Cada uma dessas cartas tem dois números escritos: um no lado da frente, e outro no lado de trás.\nSeu amigo te desafiou para um jogo. Ele embaralhou as cartas do baralho e as colocou numa mesa.\nAs cartas estão dispostas em uma linha, uma ao lado da outra, todas com a face da frente virada para cima.\nDa esquerda para a direita, você sabe que o número escrito na face da frente da i-ésima carta é Ai, e que o número escrito na face de trás da i-ésima carta é Bi.\nO jogo é dividido em duas partes.\nNa primeira parte, você deve escolher K cartas do baralho. Para escolher uma carta você deve selecionar ou a carta mais à esquerda ou a carta mais à direita da mesa e pegá-la para si.\nEm seguida você deve escolher L das cartas que você pegou e virá-las.\nA sua pontuação será igual à soma do número na face da frente de todas as K cartas escolhidas, mais a soma do número na face de trás de todas as L cartas viradas.\nO desafio? Conseguir a maior pontuação possível, é claro! Entrada\nA primeira linha contém um inteiro N(1 ≤ N ≤ 105). A segunda linha contém N inteiros A1, A2, ..., AN, (1 ≤ Ai ≤ 109). A terceira linha contém N inteiros B1, B2, ..., BN, (1 ≤ Bi ≤ 109). A quarta linha contém dois inteiros K e L (1 ≤ L ≤ K ≤ N).\nSaída\nImprima uma linha contendo um inteiro, representando a maior pontuação possível.",
    "samplesExamples": [
      [
        "5\n9 7 2 2 9\n5 2 2 3 1\n2 1",
        "23"
      ],
      [
        "5\n9 7 2 2 9\n5 9 2 3 1\n2 1",
        "25"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "N",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Forca Multidimensional",
    "text": "O Jogo da Forca Multidimensional tem regras muito peculiares. De certa forma, é como se você estivesse jogando várias partidas do tradicional Jogo da Forca ao mesmo tempo, com a diferença que as palavras não precisam existir no dicionário. Se você nunca jogou o Jogo da Forca, não se preocupe: toda a informação que você precisa estará abaixo.\nNa versão multidimensional do jogo, existem várias palavras no tabuleiro, inicialmente desconhe cidas, todas de mesmo comprimento. Em cada momento do jogo, você conhece alguns caracteres de certas posições das palavras (a maneira como estes caracteres foram descobertos não é importante para este problema). Em determinado momento, quando resta apenas um caractere desconhecido em cada palavra do tabuleiro, o jogo parte para a fase de tudo ou nada. Neste momento, você deve escolher uma palavra que maximize o número de compatibilidades com as palavras do tabuleiro. Para uma escolha de palavra P, dizemos que ela é compatível com uma palavra T do tabuleiro se todas as letras conhecidas de T ocorrem exatamente nas mesmas posições em P.\nDadas as informações conhecidas sobre as palavras do tabuleiro, você deve determinar qual palavra escolher para o tudo ou nada, que maximiza o número de compatibilidades. Se houver mais de uma solução, imprima a menor lexicograficamente. Dizemos que uma palavra P é lexicograficamente menor que uma palavra Q se Pi < Qi onde Pi é o i-ésimo caractere de P, Qi é o i-ésimo caractere de Q e i é o menor índice tal que Pi (cid:54)= Qi.\nEntrada\nA primeira linha da entrada contém dois inteiros N e C satisfazendo 1 ≤ N ≤ 104 e 1 ≤ C ≤ 12, indicando número de palavras no tabuleiro e comprimento das palavras que ele contém. Em seguida, N linhas descrevem, cada uma, uma palavra de comprimento C composta apenas de caracteres de “a” a “z” exceto por uma das posições, que conterá um caracter “*”, indicando que o caractere daquela posição ainda é desconhecido.\nSaída\nVocê deve imprimir uma única linha, contendo, respectivamente, uma palavra T, de comprimento C, e um inteiro M, onde M é o maior número de compatibilidades que uma palavra pode ter com as palavras da entrada e T é a palavra lexicograficamente menor dentre aquelas com compatibilidade M.",
    "samplesExamples": [
      [
        "5 4\nrat*\nru*d\nrot*\nr*ta\nr*ta",
        "rata 3"
      ],
      [
        "5 4\nbon*\nfon*\nn*no\n*eto\n*ano",
        "nano 2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Brincando com Pedras",
    "text": "Alice e Bob irão jogar um jogo com 3 pilhas de pedras. As jogadas são feitas alternadamente, e cada jogador deve escolher uma pilha que ainda tenha pedras e retirar um número positivo de pedras dela.\nVence quem remover a última pedra da última pilha que ainda tenha pedras. Alice faz a primeira jogada.\nA i-ésima pilha terá um número de pedras aleatório e uniformemente distribuído no intervalo [Li,Ri]. Qual é a probabilidade de Alice ganhar assumindo que ambos jogam de maneira ótima? Entrada\nA entrada consiste de uma linha com 6 inteiros, L1,R1,L2,R2,L3,R3, nessa ordem. Para cada i, 1 ≤ Li ≤ Ri ≤ 109.\nSaída\nImprima um inteiro representando a probabilidade de Alice ganhar módulo 109 + 7.\nÉ possível mostrar que a resposta pode ser expressa como uma fração irredutível p, tal que p e q q são inteiros e q (cid:54)≡ 0 (mod 109 + 7), ou seja, estamos interessados no inteiro p × q−1 (mod 109 + 7).",
    "samplesExamples": [
      [
        "3 3 4 4 5 5",
        "1"
      ],
      [
        "4 4 8 8 12 12",
        "0"
      ],
      [
        "1 10 1 10 1 10",
        "580000005"
      ],
      [
        "5 15 2 9 35 42",
        "1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Achando os Monótonos Não-Triviais Maximais",
    "text": "Neste problemas iremos lidar com sequências de caracteres, muitas vezes chamadas de strings. Uma sequência é não-trivial se ela possui ao menos dois elementos.\nDada uma sequência s, dizemos que um trecho si,...,sj é monótono se todos seus caracteres são iguais, e dizemos que ela é maximal se este trecho não pode ser estendido à esquerda e nem à direita sem perder a monotonicidade.\nDada uma sequência composta apenas por caracteres “a” e “b”, determine quantos caracteres “a” ocorrem em trechos monótonos maximais não-triviais.\nEntrada\nA entrada é composta por duas linhas. A primeira linha contém um único inteiro N, satisfazendo 1 ≤ N ≤ 105. A segunda linha contém uma string, com exatamente N caracteres, composta apenas pelos caracteres “a” e “b”.\nSaída\nA saída é composta por uma única linha contendo um inteiro correspondente à quantidade total de vezes que o caractere “a” ocorre em trechos monótonos maximais não-triviais.",
    "samplesExamples": [
      [
        "7\nabababa",
        "0"
      ],
      [
        "7\nbababab",
        "0"
      ],
      [
        "10\naababaaabb",
        "5"
      ],
      [
        "10\nbbaababaaa",
        "5"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Estourando Balões",
    "text": "Após a cerimônia de encerramento da Maratona um número enorme de balões soltos estão flutuando no espaço do salão. O dono do salão está bravo porque no dia seguinte ocorre outro evento importante e os balões precisam ser removidos. Felizmente este ano Carlinhos veio preparado com seu arco e flecha para estourar os balões.\nFelizmente também, devido ao fluxo do ar condicionado, os balões estão todos em um mesmo plano vertical (isto é, um plano paralelo a uma das paredes), embora em alturas e posições distintas.\nCarlinhos vai atirar a partir do lado esquerdo do salão, a uma altura de sua escolha, em direção ao lado direito do salão. Cada flecha se move da esquerda para a direita, na altura em que foi lançada, no mesmo plano vertical dos balões. Ao encontrar um balão, este estoura e a flecha continua seu movimento para a direita, com a altura diminuída de 1. Ou seja, se a flecha estava a uma altura H, após atingir um balão ela continua na altura H − 1.\nCarlinhos quer estourar todos os balões atirando o menor número possível de flechas. Você pode ajudá-lo? Entrada\nA primeira linha da entrada contém um inteiro N, o número de balões (1 ≤ N ≤ 5 × 105). Como todos os balões estão num mesmo plano vertical, vamos definir que a altura de um balão é dada em relação ao eixo y e a posição de um balão é dada em relação ao eixo x desse plano. Os balões são numerados de 1 a N. Os números dos balões indicam as suas posições, da esquerda (balão número 1) para a direita (balão número N), independentemente das suas alturas. A posição do balão número i é diferente da posição do balão número i + 1, para todo i. A segunda linha contém N inteiros Hi, onde Hi indica a altura em que o balão número i está (1 ≤ Hi ≤ 106 para 1 ≤ i ≤ N).\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o menor número de flechas que Carlinhos precisa atirar para estourar todos os balões.",
    "samplesExamples": [
      [
        "5\n3 2 1 5 4",
        "2"
      ],
      [
        "4\n1 2 3 4",
        "4"
      ],
      [
        "6\n5 3 2 4 6 1",
        "3"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogando 23",
    "text": "Vinte e três é um jogo de cartas simples, jogado por crianças. Como o nome sugere, ele é uma variação do jogo vinte e um (blackjack em inglês), que é um dos jogos mais jogados em cassinos e sites de jogos.\nO jogo utiliza um baralho de 52 cartas, com quatro naipes, cada naipe com 13 cartas (ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, valete, dama e rei). Os naipes das cartas não são relevantes. As cartas com figuras (valete, dama e rei) valem dez pontos, as cartas com números valem o seu número em pontos (por exemplo, a carta 4 vale quatro pontos) e o ás vale um ponto.\nGanha o jogo o jogador que tiver o maior número de pontos, desde que não exceda 23. Se um jogador tem um número de pontos maior do que 23 dizemos que o jogador estourou.\nAs regras do jogo são simples: a cada partida, inicialmente o baralho é embaralhado, as cartas são colocadas em um monte e cada jogador recebe duas cartas do monte. Todas as cartas são distribuídas com a face para cima (todos os jogadores vêem as cartas de todos os jogadores). O passo seguinte, chamado de rodada, é repetido enquanto houver jogadores ativos: uma carta é retirada do monte e colocada na mesa com a face para cima. Essa carta, denominada carta comum, vale para todos os jogadores. Se um jogador estourar, ele sai do jogo. Vence a partida o jogador que numa determinada rodada somar 23 (somando suas duas cartas iniciais mais as cartas comuns), ou se o jogador for o único jogador ativo ao final da rodada. Note que pode haver mais de um vencedor (cujas cartas somam 23) e que pode não haver vencedor em uma partida.\nJoão e Maria estão jogando vinte e três. Os dois são os únicos jogadores, nenhum dos dois estourou e nenhum dos dois tem 23 pontos. Além disso, a pontuação dos jogadores é tal que a próxima carta comum pode fazer com que a partida termine.\nDadas as cartas iniciais de João e Maria e as cartas comuns, determine qual é o valor da carta de menor valor que deve ser retirada do monte na próxima rodada para que Maria vença a partida.\nEntrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 8), o número de rodadas do jogo até o momento. Cada carta é descrita por um inteiro I (1 ≤ I ≤ 13). Note que as cartas com figuras (valete, dama e rei) são representadas na entrada pelos valores 11, 12 e 13 e não por quantos pontos elas valem. A segunda linha contém dois inteiros, descrevendo as duas cartas iniciais de João. A terceira linha contém dois inteiros, descrevendo as duas cartas iniciais de Maria. A quarta e última linha contém N inteiros, descrevendo as cartas comuns, na ordem em que são retiradas do monte.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o valor da carta de menor valor que deve ser retirada do monte na próxima rodada para Maria vencer a partida, ou -1 se não for possível Maria vencer a partida nessa próxima rodada.",
    "samplesExamples": [
      [
        "1\n10 5\n9 10\n1",
        "3"
      ],
      [
        "1\n10 5\n8 7\n2",
        "6"
      ],
      [
        "1\n9 10\n10 5\n1",
        "4"
      ],
      [
        "2\n8 4\n4 1\n4 4",
        "5"
      ],
      [
        "8\n2 1\n1 1\n1 2 2 2 3 3 3 3",
        "-1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Interceptando Informações",
    "text": "A Spies Breaching Computers (SBC), uma agência privada de espiões digitais, está desenvolvendo um novo dispositivo para interceptação de informações que, através de ondas eletromagnéticas, permite a espionagem mesmo sem contato físico com o alvo.\nO dispositivo tenta coletar informações de um byte por vez, isto é, uma sequência de 8 bits onde cada um deles, naturalmente, pode ter valor 0 ou 1. Em determinadas situações, devido a interferências de outros dispositivos, a leitura não pode ser feita com sucesso. Neste caso, o dispositivo retorna o valor 9 para o bit correspondente, informando que não foi possível efetuar a leitura.\nDe forma a automatizar o reconhecimento das informações lidas, foi feita uma solicitação de um programa que, a partir das informações lidas pelo dispositivo, informe se todos os bits foram lidos com sucesso ou não. Sua tarefa é escrever este programa.\nEntrada\nA entrada consiste de uma única linha, contendo 8 números inteiros N1,N2,N3,N4,N5,N6,N7 e N8, indicando os valores lidos pelo dispositivo (Ni é 0, 1 ou 9 para 1 ≤ i ≤ 8).\nSaída\nImprima uma única linha contendo a letra maiúscula “S” caso todos os bits sejam lidos com sucesso; caso contrário imprima uma única linha contendo a letra maiúscula “F”, correspondendo a uma falha.",
    "samplesExamples": [
      [
        "0 0 1 1 0 1 0 1",
        "S"
      ],
      [
        "0 0 1 9 0 1 0 1",
        "F"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Habilitando a Movimentação",
    "text": "O presidente da Nlogônia decidiu, por decreto, que todas as ruas da Nlogônia deveriam ser de mão única. Devido a certo desconhecimento de ciência básica, não houve um planejamento adequado para as mudanças. Depois que o novo sistema entrou em vigor, as pessoas não eram capazes de ir trabalhar, ou não conseguiam voltar para casa do trabalho, por exemplo. Como resultado, houve caos e rebeliões em muitas cidades.\nO presidente sofreu impeachment e a nova administração do país contratou uma equipe de cientistas para resolver o problema. Por sua vez, essa equipe contratou você, especialista em complexidade de algoritmos, para ajudá-los no cálculo eficiente de soluções.\nAssim, para cada cidade, você recebe os pontos de referência da cidade e as ruas de mão única, cada uma conectando dois pontos de referência. Sua tarefa é determinar o número mínimo de pontes de mão única que devem ser construídas para ter conectividade total na cidade. Cada ponte também deve conectar dois pontos de referência.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e M (1 ≤ N ≤ 104,1 ≤ M ≤ 106), onde N é o número de pontos de referência e M é o número de ruas. Cada uma das próximas M linhas contém dois inteiros, R e S, 1 ≤ R,S ≤ N, R (cid:54)= S, que corresponde a uma rua que liga R a S, tal que todos os veículos daquela rua se deslocam de R em direção a S.\nSaída\nSeu programa deve imprimir uma única linha contendo o número mínimo de pontes necessárias para deixar os habitantes felizes.",
    "samplesExamples": [
      [
        "7 7\n1 2\n2 3\n3 1\n6 1\n6 4\n4 5\n7 6",
        "2"
      ],
      [
        "7 7\n2 1\n3 2\n1 3\n1 6\n4 6\n5 4\n6 7",
        "2"
      ],
      [
        "2 1\n1 2",
        "1"
      ],
      [
        "3 3\n1 2\n2 3\n3 1",
        "0"
      ],
      [
        "2 0",
        "2"
      ],
      [
        "6 4\n1 2\n1 3\n4 6\n5 6",
        "3"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Listando Caminhos Tediosos",
    "text": "Uma árvore é um grafo conexo (existe um caminho entre quaisquer dois de seus vértices), não direci onado (as arestas do grafo não possuem orientação), e acíclico (não possui ciclos).\nUma árvore colorida é aquela em que cada um de seus vértices tem uma determinada cor.\nUm caminho tedioso é um caminho na árvore tal que tanto o vértice inicial quanto o vértice final tem a mesma cor, e não existe vértice ou aresta que apareça mais de uma vez no caminho. Note que as cores dos vértices intermediários do caminho, caso existam, não são relevantes.\nDada uma árvore colorida, com N vértices, sua tarefa é calcular, para cada aresta da árvore, a quantidade de caminhos tediosos que passam por aquela aresta.\nEntrada\nA primeira linha contém o número de vértices N (1 ≤ N ≤ 105). A segunda linha contém N inteiros C1,...,CN, onde Ci (1 ≤ Ci ≤ N) representa a cor do vértice i. Nas próximas N − 1 linhas temos dois inteiros cada, u e v, representando uma aresta (1 ≤ u,v ≤ N e u (cid:54)= v). É garantido que o grafo dado será uma árvore.\nSaída\nImprima N −1 inteiros, representando o número de caminhos tediosos que passam por cada aresta, seguindo a mesma ordem em que as arestas aparecem na entrada.",
    "samplesExamples": [
      [
        "6\n1 1 1 2 2 1\n1 2\n2 3\n4 6\n2 4\n1 5",
        "4 3 3 4 1"
      ],
      [
        "12\n1 2 3 1 2 2 1 3 2 3 1 2\n1 2\n2 3\n2 4\n4 5\n4 6\n1 7\n7 8\n7 9\n9 10\n6 11\n6 12",
        "10 2 10 4 9 9 2 6 2 3 4"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Maratona de Amarelinha",
    "text": "Nesta data, 8 de outubro de 2022, ocorre o mais aclamado evento por estudantes de computação de todo o país. Não, não estamos falando da maratona de programação.\nEstamos falando, é claro, da Amarelinha! Para quem não conhece, a Amarelinha é uma competição anual tradicionalmente organizada como evento paralelo da maratona de programação. Transmitida ao vivo para espectadores de todos os continentes, essa variante exótica do popular jogo infantil ocorre em um campo infinito, em formato de espiral, dividido em casas sequencialmente numeradas a partir de zero, conforme a ilustração abaixo.\nNeste ano, a Amarelinha atraiu um número recorde de N participantes, numerados sequencialmente de 1 a N. Sabe-se que o i-ésimo participante inicia na casa de número Ai.\nA Amarelinha consiste de Q rodadas. Na q-ésima rodada, o Carlão, fenomenal organizador da Amarelinha praticamente desde a sua concepção, informará dois números inteiros aos participantes: cq e dq. Essa é uma ordem para que todos os participantes de número i tal que i e cq compartilhem um fator inteiro comum maior que 1 retrocedam dq posições nas casas da Amarelinha, uma por uma, sem nunca retroceder além da casa 0. (Se um participante eventualmente retornar à casa 0, ele deve permanecer lá, ignorando quaisquer comandos adicionais de retrocesso, para não acabar saindo do campo.) Assumindo que todos os participantes executaram as instruções perfeitamente (nenhum deles gos taria de decepcionar o Carlão), a sua tarefa é determinar, para cada um dos participantes, o número da rodada em que ele retorna à casa 0 (ou indicar que isso nunca acontece).\nEntrada\nA primeira linha da entrada contém os inteiros N e Q (1 ≤ N,Q ≤ 105). A segunda linha contém N inteiros, respectivamente, A1, A2, ···, AN (1 ≤ Ai ≤ 109). Cada uma das próximas Q linhas contém dois inteiros, cq e dq (1 ≤ cq ≤ 105, 1 ≤ dq ≤ 109).\nSaída\nA saída deverá conter exatamente N linhas. A i-ésima linha deverá conter um único inteiro, indicando o número da rodada em que o i-ésimo participante retorna à casa 0 (ou, se isso nunca acontece, o valor −1).",
    "samplesExamples": [
      [
        "7 6\n10 20 30 40 50 60 70\n2 25\n3 36\n100 42\n5 10\n7 70\n1 1000",
        "-1\n1\n2\n3\n4\n2\n5"
      ],
      [
        "6 4\n100 100 100 100 100 100\n2 50\n3 50\n5 99\n5 1",
        "-1\n-1\n-1\n-1\n4\n2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Donuts não inteiros",
    "text": "Neil é um advogado muito importante, com uma conta bancária muito importante. Como Neil é um advogado de sucesso com muitos clientes, ele deposita dinheiro em sua conta todas as manhãs.\nDepois de ir ao banco e depositar o dinheiro, Neil vai trabalhar. E aí reside o grande ponto fraco de Neil: uma loja de donuts. Veja bem, Neil é um viciado em donuts em recuperação e, embora não coma um donut há anos, ele não consegue deixar de se perguntar quantos donuts de US$ 1,00 ele poderia comprar com o dinheiro de sua conta se tivesse uma recaída.\nTer $ 5,00 em sua conta significa 5 donuts que Neil poderia ter, mas e quanto a $ 4,50? Bem, isso é mais de 4 donuts com certeza, mas definitivamente menos de 5. Como alguém compraria uma quantidade não inteira de donuts? Esse conceito confunde Neil, então toda vez que o saldo de sua conta não é um número inteiro, ele para para refletir sobre a natureza dos donuts não inteiros e acaba se atrasando para o trabalho.\nAgora Neil já se atrasou muitas vezes e está começando a temer que perderá o emprego. Ele quer saber quantas vezes se atrasará para o trabalho durante os próximos N dias, dado o saldo inicial de sua conta e a quantidade de dinheiro que depositará a cada dia. Por favor, responda isso para ele, ou então Neil começará a ponderar novamente.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000), o número de dias em que Neil está interessado. Cada uma das próximas N + 1 linhas contém uma string que representa uma quantia em dinheiro. A primeira string é o saldo inicial da conta de Neil, enquanto as N strings seguintes são os valores que Neil depositará em sua conta nos diferentes dias. Cada string tem o formato $X.Y onde X é uma substring de comprimento 1 ou 2 indicando todo o dinheiro no valor $X.Y , enquanto Y é uma substring de comprimento exatamente 2 denotando os centavos no valor $X.Y . Tanto X quanto Y são compostos de dígitos, pelo menos um deles contém um dígito diferente de zero e X não possui zeros à esquerda.\nSaída\nProduza uma única linha com um número inteiro indicando quantas vezes Neil se atrasará para o trabalho durante os N dias seguintes.",
    "samplesExamples": [
      [
        "1\n$1.57\n$3.14",
        "1"
      ],
      [
        "4\n$1.00\n$0.01\n$0.99\n$10.00\n$98.76",
        "2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Dinheiro investido",
    "text": "Hoje em dia suas habilidades de programação são incríveis e você recebe regularmente muito dinheiro pelo seu trabalho.\nInfelizmente, suas habilidades financeiras não evoluíram da mesma forma. Assim, cada vez que você ganha algum dinheiro, basta investi-lo em um banco em um depósito a prazo de 30 dias com cláusula de renovação automática. Isso significa que 30 dias depois de você investir o dinheiro, ele será investido por mais 30 dias, repetidamente, até que você informe ao banco que deseja interromper a renovação e receber seu dinheiro de volta. Os depósitos a prazo não podem ser criados nem renovados durante finais de semana; se o período de 30 dias terminar num fim de semana, a renovação ocorre na segunda-feira imediatamente seguinte.\nComo o banco detém quase todo o seu dinheiro, você deve esperar até a renovação mais próxima sempre que quiser comprar algo que não seja comida diária. Hoje você decidiu comprar um novo smartphone para substituir seu aparelho de seis meses. Dadas as datas em que você criou cada depósito a prazo, você deve determinar o número mínimo de dias que deve esperar para receber algum dinheiro do banco.\nPor exemplo, suponha que hoje seja sábado e que você criou cinco depósitos a prazo: um depósito a prazo na segunda-feira passada, outro depósito a prazo na terça-feira passada, outro depósito a prazo na quarta-feira passada e dois depósitos a prazo ontem. O primeiro depósito (segunda-feira) seria renovado na quarta-feira, após 25 dias a partir de hoje. O segundo depósito a prazo (terça-feira) seria renovado na quinta-feira, após 26 dias a partir de hoje. O terceiro depósito a prazo (quarta-feira) seria renovado em uma sexta-feira após 27 dias a partir de hoje. Por fim, os dois últimos depósitos a prazo (sexta-feira) seriam renovados na segunda-feira após 30 dias de hoje, pois a renovação no domingo não é permitida. Assim, neste caso, você deve esperar 25 dias para retirar algum dinheiro do banco.\nEntrada\nA primeira linha contém uma string T e um inteiro N (1 ≤ N ≤ 105), indicando respectivamente o dia da semana de hoje e a quantidade de depósitos a prazo. A string é “Seg”, “Ter”, “Qua”, “Qui”, “Sex”, “Sábado” ou “Dom”, representando respectivamente que hoje é segunda, terça, quarta, quinta, sexta, sábado, ou domingo. A segunda linha contém N inteiros D1,D2,...,DN (0 ≤ Di ≤ 109 para i = 1,2,...,N), indicando o número de dias decorridos desde a criação de cada depósito a prazo. É garantido que os depósitos a prazo não foram criados nos finais de semana.\nSaída\nProduza uma única linha com um número inteiro indicando o número mínimo de dias que você deve esperar para receber algum dinheiro do banco.",
    "samplesExamples": [
      [
        "Sat 5\n5 4 3 1 1",
        "25"
      ],
      [
        "Sat 5\n3 1 4 1 5",
        "25"
      ],
      [
        "Thu 1\n0",
        "32"
      ],
      [
        "Thu 1\n30",
        "0"
      ],
      [
        "Fri 1\n31",
        "31"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Quase origami",
    "text": "Você tem uma folha de papel retangular de altura 1 e deseja localizar qualquer ponto na altura H medida a partir da borda inferior da folha. Como você não conhece os teoremas de Haga, planeja repetir o passo seguinte. Suponha que você já localizou um ponto PL na altura L na borda esquerda da folha e um ponto PR na altura R na borda direita da folha. Em seguida, você desenha uma linha do canto inferior esquerdo da folha até PR e outra linha do canto inferior direito da folha até PL. Se o ponto de cruzamento estiver na altura H, então está tudo pronto. Caso contrário, você traça uma linha horizontal que passa pelo ponto de cruzamento e dá outro passo.\nComo exemplo, considere o caso H = 1/3. Durante a primeira etapa, a única possibilidade é escolher os cantos superiores da folha (ou seja, L = R = 1). Então você desenha as duas diagonais da folha, e o ponto de cruzamento fica na altura 1/2. Como H (cid:54)= 1/2, você desenha uma linha horizontal que passa pelo ponto de cruzamento. Esta linha fornece dois novos pontos com altura conhecida 1/2 nas bordas da folha, um na borda esquerda e outro na borda direita. Para o segundo passo você pode escolher entre usar os pontos originais conhecidos na altura 1 ou os pontos que você acabou de localizar na altura 1/2. Ou seja, você pode escolher L = 1 ou L = 1/2 e, claro, R = 1 ou R = 1/2. É fácil ver que se você escolher L = R = 1/2, então o ponto de cruzamento estaria na altura 1/4. Porém, se você escolher L = 1/2 e R = 1, então o ponto de cruzamento estaria na altura desejada H = 1/3. Por simetria, o mesmo ocorre se escolher L = 1 e R = 1/2.\nDada uma altura racional H, deve-se determinar uma sequência mais curta de alturas nas bordas da folha que permita localizar um ponto na altura H.\nComo mostra o exemplo acima, apenas um ponto na altura 1/2 pode ser localizado em uma única etapa e, portanto, uma possível sequência mais curta para H = 1/3 é S = (1,1,1/2,1). As duas primeiras alturas devem ser escolhidas durante a primeira etapa, e as duas alturas restantes devem ser escolhidas durante a segunda etapa.\nEntrada\nA entrada consiste em uma única linha que contém dois inteiros M e N (1 ≤ M < N ≤ 100) tais que H = M/N é uma fração irredutível.\nSaída\nProduza uma única linha com o caracter “*” (asterisco) se um ponto na altura H não puder ser localizado por meio do procedimento descrito. Caso contrário, produza uma sequência mais curta de alturas S1,S2,...,SK que permita localizar um ponto na altura H, se forem escolhidas na ordem em que aparecem na sequência. A altura Si deve ser escrita na i-ésima linha usando dois inteiros Ai e Bi tais que Si = Ai/Bi é uma fração irredutível (i = 1,2,...,K). É garantido que quando um ponto na altura H pode ser localizado, ele pode ser localizado de forma ideal escolhendo apenas alturas racionais.",
    "samplesExamples": [
      [
        "1 3",
        "1 1\n1 1\n1 2\n1 1"
      ],
      [
        "1 3",
        "1 1\n1 1\n1 1\n1 2"
      ],
      [
        "3 4",
        "*"
      ],
      [
        "1 4",
        "1 1\n1 1\n1 2\n1 2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Viagens Diárias",
    "text": "Bella é uma garota simples com uma vida simples: acorda, vai trabalhar, trabalha, vai para casa, descansa, dorme e repete. Bella viaja de ônibus e chove muito em sua cidade, então às vezes ela precisa de um guarda-chuva. No entanto, a previsão do tempo local não é confiável, então Bella não pode ter certeza se vai chover ou não até pouco antes de começar a viagem. Para evitar ser pega desprevenida, Bella criou um sistema.\nEla possui um ou mais guarda-chuvas, guardando-os em casa ou no local de trabalho. Antes de qualquer viagem (de casa para o trabalho, ou vice-versa), Bella olha para fora para decidir se leva guarda-chuva naquela viagem: • se estiver chovendo, ela traz guarda-chuva; • caso contrário, se não houver guarda-chuvas no seu destino (seja no trabalho ou em casa), ela ainda traz um guarda-chuva, por precaução; • caso contrário, ela não traz guarda-chuva.\nA segunda regra acima tem como objetivo evitar uma situação em que Bella precise de um guarda-chuva, mas não tenha nenhum em sua localização atual (uma lembrança ruim sobre a qual ela falará para qualquer um que perguntar). Isso garante que Bella nunca pegará chuva e ficará doente.\nAgora precisamos que você simule o método de Bella por um determinado período. A simulação começa com Bella em casa. Todos os dias ela faz duas viagens de ônibus: de ida e volta do trabalho. Dado o número inicial de guarda-chuvas em sua casa e local de trabalho, e os boletins meteorológicos durante N dias consecutivos, descubra se Bella trouxe ou não um guarda-chuva em cada uma de suas 2N viagens de ônibus.\nEntrada\nA primeira linha contém três inteiros N (1 ≤ N ≤ 104), H (1 ≤ H ≤ 100) e W (0 ≤ W ≤ 100), indicando respectivamente a duração do período de simulação em dias, e os números iniciais de guarda-chuvas na casa e no local de trabalho de Bella. Para i = 1,2,...,N, a i-ésima das próximas N linhas contém dois caracteres representando se choveu em cada viagem do i-ésimo dia. O primeiro caractere refere-se à primeira viagem do dia (de casa para o trabalho), enquanto o segundo caractere refere-se à segunda viagem do dia (do trabalho para casa). Cada caractere é a letra maiúscula “Y” se choveu, e a letra maiúscula “N” caso contrário.\nSaída\nSaída de N linhas. Para i = 1,2,...,N, a i-ésima linha deve conter dois caracteres indicando se Bella trouxe guarda-chuva em cada viagem do i-ésimo dia. O primeiro caractere refere-se à primeira viagem enquanto o segundo caractere refere-se à segunda viagem. Cada caractere deve ter a letra “Y” maiúscula se Bella trouxe um guarda-chuva, e a letra “N” maiúscula caso contrário.",
    "samplesExamples": [
      [
        "5 2 1\nY N\nN N\nY N\nN Y\nY Y",
        "Y N\nN N\nY Y\nN Y\nY Y"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Detector de Ondas Gravitacionais",
    "text": "Byteland é um planeta muito inóspito, por isso seus habitantes estudam a galáxia em busca de um planeta melhor para onde se mudar. Neste mundo, a astronomia é uma questão de sobrevivência. O Presidente da Byteland acaba de aprovar uma proposta do Ministro da Ciência para construir um novo Detector de Ondas Gravitacionais (GWD). Seu projeto consiste em três estações científicas a serem construídas em algum lugar da capital do planeta (que pode ser tratada como um plano bidimensional). Suas localizações devem ser distintas e colineares, e uma das estações deve estar exatamente no meio das outras duas.\nEste GWD consumirá enormes quantidades de energia, pelo que o Ministro da Ciência deve escolher a localização das estações tendo isto em mente. Ela estudou a rede eléctrica da capital e aprendeu o seguinte: • A cidade tem duas grandes centrais eléctricas. Cada um tem sua própria área de influência que pode ser vista como um polígono convexo não vazio sem três vértices consecutivos alinhados. Dentro da sua área de influência, cada grande central eléctrica pode fornecer tanta energia quanto a GWD necessitar.\n• Em toda a cidade, existem N centrais elétricas menores, e cada uma delas pode fornecer a energia necessária apenas às suas imediações.\n• As áreas de influência das duas principais centrais eléctricas não se cruzam em lado nenhum, nem mesmo nas fronteiras. Não existem duas centrais eléctricas menores na mesma localização, mas uma central eléctrica menor pode estar dentro da área de influência de uma central eléctrica importante.\nCom este conhecimento em mente, o Ministro da Ciência decidiu adoptar as seguintes restrições adicionais na localização das estações GWD: • A primeira estação será construída dentro da área de influência da primeira grande central eléctrica.\n• A segunda central será construída dentro da área de influência da segunda grande central eléctrica.\n• A terceira estação será construída no local de uma central eléctrica menor.\nQualquer uma das três estações GWD pode ser a do meio da linha. Você pode tratar cada estação GWD e cada usina secundária como um ponto de tamanho insignificante. A área de influência de cada grande central eléctrica inclui a sua fronteira.\nO próximo passo do Ministro da Ciência é escolher qual usina menor irá abrigar a terceira estação GWD. Dadas as áreas de influência das duas principais usinas de energia e a localização de todas as usinas menores, você deve descobrir quais são as candidatas adequadas.\nA figura acima mostra um exemplo de layout de rede elétrica, bem como algumas configurações possíveis para o GWD. Também mostra duas usinas de energia menores que não podem ser usadas para o GWD.\nEntrada\nA primeira linha contém um inteiro M1 (3 ≤ M1 ≤ 105) indicando o número de vértices da área de influência da primeira grande usina. Cada uma das próximas linhas M1 contém dois inteiros X1 e Y1 (−108 ≤ X1,Y1 ≤ 108), representando as coordenadas de um desses vértices. Os vértices são dados em sentido anti-horário.\nA próxima linha contém um inteiro M2 (3 ≤ M2 ≤ 105) indicando o número de vértices da área de influência da segunda maior usina. Cada uma das próximas linhas M2 contém dois inteiros X2 e Y2 (−108 ≤ X2,Y2 ≤ 108), representando as coordenadas de um desses vértices. Os vértices são dados em sentido anti-horário.\nA próxima linha contém um inteiro N (1 ≤ N ≤ 5 × 105) indicando o número de usinas menores. Cada uma das próximas N linhas contém dois inteiros X e Y (−108 ≤ X,Y ≤ 108), representando as coordenadas de uma das usinas menores. As usinas menores são identificadas por números inteiros distintos de 1 a N, de acordo com a ordem em que aparecem na entrada.\nSaída\nProduza uma única linha com uma string de comprimento N de modo que seu i-ésimo caractere seja a letra maiúscula “Y” se a usina secundária i for uma candidata adequada, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "3\n2 5\n4 5\n2 7\n3\n8 8\n10 6\n10 8\n10\n5 7\n5 8\n6 6\n7 7\n9 4\n13 9\n15 8\n15 10\n15 12\n18 9",
        "YNYNNNYYNY"
      ],
      [
        "4\n1 3\n2 4\n1 5\n0 4\n4\n3 1\n2 1\n2 0\n3 0\n7\n1 2\n6 -5\n2 2\n-3 9\n2 -3\n-1 7\n1 3",
        "YNYNYYN"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Bom padeiro",
    "text": "Flora adora fazer bolos e, no K-ésimo aniversário de sua empresa, ela prometeu trazer um presente especial: um bolo, com K combinações diferentes de coberturas para você escolher! Infelizmente, ela não tem muito tempo, então precisa simplificar um pouco as coisas.\nUm bolo pode ser descrito como uma grade 100 × 100 de pedaços quadrados de bolo. Uma coleção de peças é conectada se, para cada par de peças da coleção, elas estiverem conectadas direta (compartilham um lado) ou indiretamente (existe uma sequência de peças tal que você pode passar de uma peça para outra através de conexões diretamente conectadas). peças). A figura abaixo representa duas coleções de peças (apenas uma parte relevante da grade é mostrada). Uma coleção está conectada, enquanto a outra não.\nNão conectada Flora possui uma máquina que aceita uma coleção conectada de pedaços de bolo e coloca uma determinada cobertura em cada um desses pedaços. Uma cobertura diferente é aplicada cada vez que a máquina funciona.\nDepois de usar a máquina um determinado número de vezes, cada peça terá uma combinação (possivelmente vazia) de coberturas. Duas peças são consideradas de tipos diferentes se tiverem uma combinação diferente de coberturas. Flora quer saber o número mínimo de vezes que ela precisa usar a máquina para conseguir exatamente K diferentes tipos de pedaços de bolo e uma maneira possível de escolher uma coleção conectada de pedaços de bolo para cada vez que usar a máquina.\nEntrada\nA entrada consiste em uma única linha que contém um inteiro K (1 ≤ K ≤ 4000) indicando a quantidade de diferentes tipos de pedaços que o bolo deve ter.\nSaída\nA primeira linha deve conter um inteiro T indicando o número mínimo de vezes que Flora deverá utilizar a máquina. Cada uma das próximas linhas T descreve uma coleção conectada de pedaços de bolo para colocar na máquina as sucessivas vezes que Flora irá usá-la; a linha deve conter um inteiro positivo N seguido por N pares diferentes de inteiros X1,Y1,X2,Y2,...,XN,YN (1 ≤ Xi,Yi ≤ 100 para i = 1,2,...,N ), indicando que a coleção é composta pelas peças com coordenadas (X1,Y1),(X2,Y2),...,(XN,YN). É garantido que existe pelo menos uma solução. As coordenadas (1,1) identificam o pedaço quadrado em qualquer canto do bolo.\n    A imagem abaixo explica a primeira amostra (apenas uma parte relevante da grelha é mostrada). Para obter exatamente K = 6 combinações de coberturas, Flora tem que usar a máquina no mínimo T = 3 vezes. Na foto, a primeira cobertura aplicada pela máquina é representada como um abacaxi ((cid:63)), a segunda como uma cereja ( ) e a terceira como um mirtilo (•). As listas de peças com cada combinação de coberturas são as seguintes: 1. Somente cobertura 1 ((cid:63)): (2,3); 2. Somente cobertura 2 ( ): (3,2); 3. Somente superando 3 (•): (4,4); 4. Coberturas 2 ( ) e 3 (•): (4,3); 5. Todas as três coberturas: (3,3); 6. Sem coberturas: resto das peças.",
    "samplesExamples": [
      [
        "6",
        "3\n2 2 3 3 3\n3 3 2 3 3 4 3\n3 3 3 4 3 4 4"
      ],
      [
        "2",
        "1\n3 100 99 99 99 99 100"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Árvore Favorita",
    "text": "Depois de aprender sobre o isomorfismo das árvores, Telio não pôde deixar de se perguntar em quantas árvores a sua árvore favorita está escondida.\nDadas duas árvores, T1 e T2, você pode ajudá-lo a determinar se existe uma subárvore de T1 isomórfica a T2? Duas árvores são isomórficas se for possível rotular seus vértices de forma que se tornem exatamente a mesma árvore. Por exemplo, uma árvore com arestas {(1,2),(2,3)} é isomórfica a uma árvore com arestas {(1,3),(3,2)}.\nA figura abaixo corresponde à primeira amostra, com a árvore T1 à esquerda e a árvore T2 à direita. A subárvore de T1 formada por todos os seus vértices, exceto o vértice 5, é isomórfica a T2.\nEntrada\nExistem dois grupos de linhas, cada grupo descrevendo uma árvore. O primeiro grupo descreve a árvore T1, enquanto o segundo grupo descreve a árvore T2.\nDentro de cada grupo que descreve uma árvore, a primeira linha contém um inteiro N (1 ≤ N ≤ 100) representando o número de vértices da árvore. Os vértices são identificados por inteiros distintos de 1 a N. Cada uma das próximas N − 1 linhas contém dois inteiros U e V (1 ≤ U,V ≤ N e U (cid:54)= V ), indicando que a árvore tem o borda (U,V).\nÉ garantido que a entrada descreve duas árvores válidas.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se houver uma subárvore de T1 que seja isomórfica a T2, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "5\n1 3\n4 5\n3 2\n3 4\n4\n2 4\n2 1\n3 2",
        "Y"
      ],
      [
        "4\n2 3\n2 1\n2 4\n4\n1 2\n2 3\n3 4",
        "N"
      ],
      [
        "1\n1",
        "Y"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Cidade Dobrável",
    "text": "O quarto de Joe está tão sujo que os germes desenvolveram a civilização! Eles têm comunidades e cidades por toda parte, e o quarto é o seu mundo: os sapatos de Joe são cavernas gigantes, seu aquário é um oceano, suas caixas de pizza mofadas são selvas, etc.\nUma das maiores metrópoles de germes, Long City, foi construída sobre uma longa tira de papel deixada no chão. É um layout de cidade estranho, então os habitantes decidiram usar o tridimensional: eles vão dobrar a tira várias vezes e transformá-la em uma pilha! Dessa forma, o transporte pela cidade será muito mais fácil, subindo e descendo pelas camadas.\nEspecificamente, os germes repetirão o seguinte procedimento N vezes: • encontrarão o meio exato da faixa atual; • em seguida, dobre o lado esquerdo sobre o lado direito ou vice-versa.\nO resultado será uma pilha de 2N camadas de papel.\nAmelia é uma ameba poderosa e rica que habita Long City e, como todo mundo, está ansiosa para dobrar. No entanto, ela tem uma preferência particular: depois de concluído o processo de dobragem, ela gostaria que a sua casa acabasse na H-ésima camada do solo, porque H é o seu número da sorte. Para conseguir isso, Amelia pode influenciar o processo de dobragem: em cada uma das N etapas, ela pode decidir se dobra o lado esquerdo sobre o lado direito ou vice-versa.\nAgora ela precisa da sua ajuda para decidir a sequência exata de dobras a realizar. De acordo com Amelia, se você dividisse Long City em 2N seções de igual comprimento, a casa dela estaria na P-ésima seção da esquerda para a direita. Dados N, P e H, encontre a resposta que ela deseja.\nA figura abaixo ilustra a primeira amostra. A casa de Amélia fica no quarto trecho da faixa e após as três dobras mostradas ela termina na sétima camada do solo.\nEntrada\nA entrada consiste em uma única linha que contém três inteiros N (1 ≤ N ≤ 60), P e H (1 ≤ P,H ≤ 2N), indicando respectivamente o número de dobras, a posição inicial da casa de Amélia na faixa, e a altura final desejada na pilha.\nSaída\nProduza uma única linha com uma string de comprimento N de modo que seu i-ésimo caractere indique como realizar a i-ésima dobra. A letra maiúscula “L” significa dobrar o lado esquerdo em cima do lado direito, enquanto a letra maiúscula “R” significa dobrar o lado direito em cima do lado esquerdo. É garantido que existe uma solução única.",
    "samplesExamples": [
      [
        "3 4 7",
        "LRL"
      ],
      [
        "4 16 16",
        "LLLR"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Jogo de tabuleiro",
    "text": "Danilo adora jogos de tabuleiro. Todo fim de semana ele encontra seus amigos para brincar. No entanto, depois de anos jogando os mesmos jogos de tabuleiro clássicos, ele se cansou deles e decidiu criar seu próprio jogo.\nO jogo de Danilo começa com fichas T no tabuleiro, que podem ser vistas como pontos no plano bidimensional. Existem jogadores P que realizam um único turno cada. Por sua vez, cada jogador escolhe uma carta de um baralho. A carta descreve uma linha reta e o jogador recebe todas as fichas localizadas estritamente abaixo desta linha. As fichas recebidas por um jogador não retornam ao tabuleiro. Observe que um token localizado em (X,Y) está estritamente abaixo de uma linha y = Ax + B se e somente se Y < AX + B.\nDada a lista de cartas, sua tarefa é descobrir quais fichas cada jogador recebe.\nEntrada\nA primeira linha contém um inteiro T (1 ≤ T ≤ 105) indicando a quantidade de fichas no tabuleiro. Os tokens são identificados por inteiros distintos de 1 a T. Para i = 1,2,...,T, a i-ésima das próximas T linhas contém dois inteiros Xi e Yi (−109 ≤ Xi,Yi ≤ 109), denotando as coordenadas do token. Não existem dois tokens com a mesma localização.\nA próxima linha contém um inteiro P (1 ≤ P ≤ 105) representando o número de jogadores no jogo. Os jogadores são identificados por números inteiros distintos de 1 a P, de acordo com a ordem em que se revezam. Para i = 1,2,...,P, a i-ésima das próximas P linhas contém dois inteiros Ai e Bi (−109 ≤ Ai,Bi ≤ 109), indicando que a linha da carta escolhida pelo jogador i é y = Aix+Bi.\nSaída\nLinhas P de saída. Para i = 1,2,...,P, a i-ésima linha deve conter um inteiro Ki indicando o número de fichas que o jogador i recebe, seguido por inteiros Ki identificando essas fichas em ordem crescente.",
    "samplesExamples": [
      [
        "5\n0 0\n5 0\n4 3\n2 4\n2 -1\n3\n-1 5\n0 2\n1 1",
        "2 1 5\n1 2\n1 3"
      ],
      [
        "2\n0 0\n1 1\n2\n0 1\n0 1",
        "1 1\n0"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Pedindo dinheiro",
    "text": "A Comissão Internacional para a Prevenção de Contras está a estudar os possíveis efeitos de um esquema de pirâmide numa cidade. O esquema é o seguinte: alguém pede $ 1 a uma pessoa e diz-lhe para pedir $ 1 a duas outras pessoas cada e diz a cada uma delas para pedir dinheiro a outras duas pessoas, tal como estão a fazer. Desta forma, a vítima pensa que vai ganhar $1. Como existe um número finito de pessoas no mundo, nem todos conseguem ganhar dinheiro desta forma, isso é uma trapaça.\nAs N pessoas da cidade são suscetíveis ao golpe, ou seja, estão dispostas a dar US$ 1 e depois pedir dinheiro a outras duas pessoas. Porém, eles estão dispostos a participar apenas uma vez, ou seja, se voltarem a pedir dinheiro, não o darão nem pedirão a ninguém. Quando alguém pede dinheiro, ela o dá imediatamente, mas pode levar algum tempo antes de pedir às outras duas pessoas. O golpe começa com alguém de fora da cidade pedindo dinheiro a alguém da cidade. Isso desencadeia uma sequência de pedidos de dinheiro dentro da cidade.\nPor exemplo, na imagem abaixo representamos uma cidade com cinco habitantes. Uma seta de A para B indica que A pediria o dinheiro a B.\nNeste exemplo, B pode perder dinheiro. Podemos verificar isso com o seguinte cenário.\n1. Alguém de fora da cidade pede dinheiro a A.\n2. A pede dinheiro a B.\n3. A pede dinheiro a C.\n4. C pede dinheiro a D.\n5. B pede dinheiro a C.\n6. B pede dinheiro a D.\nObserve que quando B pede dinheiro a C e D, eles não o darão a B, pois já deram dinheiro a outra pessoa.\nPara cada pessoa na cidade você sabe a quem vai pedir dinheiro. Sua tarefa é determinar quem na cidade pode perder dinheiro.\nEntrada\nA primeira linha contém um inteiro N (3 ≤ N ≤ 1000) indicando a quantidade de pessoas na cidade. Cada pessoa é identificada por um número inteiro distinto de 1 a N. Para i = 1,2,...,N, a i-ésima das próximas N linhas contém dois inteiros Xi e Yi (1 ≤ Xi,Yi ≤ N, Xi,Yi (cid:54)= i e Xi (cid:54)= Yi), representando aquela pessoa que eu pediria dinheiro para a pessoa Xi e para a pessoa Yi.\nSaída\nProduza uma única linha com uma string de comprimento N de modo que seu i-ésimo caractere seja a letra maiúscula “Y” se a pessoa i puder perder dinheiro, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "5\n2 3\n3 4\n4 5\n5 1\n1 2",
        "YYYYY"
      ],
      [
        "4\n2 3\n3 4\n2 4\n2 3",
        "NYYY"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Quadrados Vazios",
    "text": "Martín tem um tabuleiro de 1 × N casas. Ele também tem N peças de 1 × 1,1 × 2,...,1 × N quadrados, uma de cada tipo. Ele colocou uma das peças no tabuleiro. Seu amigo, Nico, quer colocar algumas das peças restantes de forma que o maior número possível de quadrados sejam cobertos. Quantos quadrados permanecerão vazios se ele tiver sucesso? As peças colocadas no tabuleiro não podem se sobrepor. Além disso, cada peça colocada deve estar localizada completamente dentro do tabuleiro e deve cobrir quadrados inteiros.\nEntrada\nA entrada consiste em uma única linha que contém três inteiros N (1 ≤ N ≤ 1000), K (1 ≤ K ≤ N) e E (0 ≤ E ≤ N − K), indicando que o tabuleiro possui 1 × N quadrados, e uma peça de 1 × K quadrados é colocada deixando E quadrados vazios à sua esquerda.\nSaída\nProduza uma única linha com um número inteiro indicando o número de quadrados que permanecerão vazios se Nico cobrir o maior número possível de quadrados com as peças restantes.",
    "samplesExamples": [
      [
        "6 2 2",
        "3"
      ],
      [
        "1000 1 1",
        "1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Participando de uma maratona",
    "text": "Existem corredores R prestes a participar de uma maratona. Johnny, que está organizando a maratona, sabe que se um corredor começar a correr no tempo T com velocidade constante S, então no tempo t (para t ≥ T) o corredor estará na posição (t−T)×S na pista . Antes do tempo T, considera-se que o corredor não está na pista.\nÉ claro que um evento desse tipo precisa ter ótimas fotos tiradas. P fotos serão tiradas no total.\nCada foto será tirada em um horário específico e conterá um segmento da pista cuidadosamente escolhido. Se não houver corredores naquele segmento naquele momento, a foto será considerada lixo.\nJohnny, sabendo de tudo isso, ficou triste com a quantidade de fotos inúteis que viriam de seu evento, então decidiu resolver o problema por conta própria e participar da maratona junto com os demais corredores.\nJohnny está considerando como ele pode correr, então ele fará perguntas Q no seguinte formato: se Johnny começar a correr em um determinado momento com uma certa velocidade constante, quantas fotos de lixo ainda serão tiradas em seu evento? Entrada\nA primeira linha contém um inteiro R (1 ≤ R ≤ 1000) indicando o número de corredores. Cada uma das próximas R linhas descreve um corredor com dois inteiros T (0 ≤ T ≤ 109) e S (1 ≤ S ≤ 109), representando respectivamente o tempo de partida e a velocidade do corredor.\nA próxima linha contém um inteiro P (1 ≤ P ≤ 106) denotando o número de fotos. Cada uma das próximas P linhas descreve uma foto com três inteiros U (0 ≤ U ≤ 109), A e B (0 ≤ A ≤ B ≤ 109), especificando que a foto será tirada no tempo U e cobrirá o segmento [ A,B] da pista.\nA próxima linha contém um inteiro Q (1 ≤ Q ≤ 1000) indicando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta com dois inteiros T(cid:48) (0 ≤ T(cid:48) ≤ 109) e S(cid:48) (1 ≤ S(cid:48) ≤ 109), representando respectivamente um possível horário de início e velocidade para Johnny.\nSaída\nLinhas Q de saída, cada linha com um número inteiro indicando o número de fotos inúteis para a consulta correspondente da entrada.",
    "samplesExamples": [
      [
        "3\n0 1\n2 2\n4 2\n3\n1 2 4\n5 8 16\n3 1 8\n3\n3 1\n1 3\n0 2",
        "2\n1\n0"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Calzone italiano e canto de massas",
    "text": "O restaurante italiano Calzone & Pasta Corner desenhou seu cardápio tendo seus pratos em uma grade bidimensional R×C, mantendo os pratos que combinam bem próximos uns dos outros. Para comer, você escolhe uma célula inicial e, em seguida, move-se repetidamente para cima, para baixo, para a esquerda ou para a direita para qualquer uma das quatro células adjacentes, pegando todos os pratos pelos quais você passa. É permitido entrar em células já visitadas, mas você não receberá o mesmo prato novamente.\nUm dia, Pierre, um cliente estrangeiro, apareceu com muita fome e com uma etiqueta muito rígida. Ele tem uma ordem bem específica em que os pratos devem ser consumidos. Por exemplo, um aperitivo, depois uma entrada, depois um prato principal, depois uma salada, etc. Então ele atribuiu um número inteiro distinto de 1 a R × C para cada prato na grade do menu, indicando a ordem em que comeria o todo cardápio. Agora ele quer escolher e comer os pratos seguindo seu pedido. Como as regras do restaurante podem impedi-lo de escolher todo o cardápio, ele pode pular algumas etapas do pedido. Você pode ajudá-lo a escolher uma refeição com tantos pratos quanto possível? Entrada\nA primeira linha contém dois inteiros R e C (1 ≤ R,C ≤ 100), indicando que a grade do menu possui R linhas e C colunas. As próximas R linhas contêm C inteiros cada, representando a grade do menu. Cada um desses números é um número inteiro distinto de 1 a R × C atribuído por Pierre ao prato correspondente na grade do menu.\nSaída\nProduza uma única linha com um número inteiro indicando a quantidade máxima de pratos que Pierre pode comer.",
    "samplesExamples": [
      [
        "1 5\n5 3 2 1 4",
        "5"
      ],
      [
        "1 5\n1 5 4 3 2",
        "4"
      ],
      [
        "3 3\n4 1 3\n8 5 9\n7 2 6",
        "6"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Corrida de cavalos",
    "text": "A empresa Exponential Horse Racing vem construindo estádios cada vez maiores, permitindo que muito mais cavalos do que o normal participem da mesma corrida. E, para facilitar o preenchimento dessas vagas, combina raças de diferentes níveis. Ou seja, cavalos que são conhecidos por serem muito piores que os outros podem correr juntos e os espectadores podem apostar em cada uma das pequenas corridas que estão acontecendo. Isso também permite que cavalos que estão entre níveis corram em ambos os níveis ao mesmo tempo.\nPaul é responsável por anotar o vencedor de cada pequena corrida. Para acelerar esse trabalho, em vez de anotar o nome completo do cavalo vencedor, Paulo anota apenas a sua colocação na corrida completa.\nComo exemplo, suponha que os cavalos “a”, “b”, “c”, “d” e “e” participaram de uma corrida completa e chegaram à linha de chegada na ordem “e”, “c”, “ a”, “b” e “d”. Portanto, uma pequena corrida com cavalos “c” e “b” foi vencida por “c”, e então Paulo anotava que o vencedor da pequena corrida era o segundo cavalo, porque “c” conseguiu essa colocação na corrida completa.\nUm dia você recebeu as anotações de Paul, mas não tinha os resultados completos da corrida em mãos. Tudo o que você sabe é que não houve empate na corrida completa e que todos os cavalos chegaram à linha de chegada. Você consegue descobrir os resultados completos da corrida tendo apenas a descrição de cada pequena corrida? Entrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 300) indicando o número de cavalos na corrida completa. A segunda linha contém N strings diferentes representando os nomes dos cavalos.\nCada string tem comprimento de até três e é composta por letras minúsculas. A terceira linha contém um inteiro R (1 ≤ R ≤ 105) denotando o número de corridas pequenas. Para i = 1,2,...,R, a i-ésima das próximas R linhas descreve uma pequena corrida com dois inteiros Mi (2 ≤ Mi ≤ N) e Wi (1 ≤ Wi ≤ N), seguidos por Mi sequências diferentes, indicando respectivamente o número de cavalos na pequena corrida, o vencedor de acordo com as notas de Paul e os nomes dos cavalos participantes.\nÉ garantido que (cid:80) i Mi ≤ 105.\nSaída\nProduza uma única linha com N strings indicando os nomes dos cavalos em uma ordem válida, que representa um possível resultado da corrida completa. É garantido que existe pelo menos uma solução. Se houver várias soluções, produza qualquer uma delas.",
    "samplesExamples": [
      [
        "5\na b c d e\n3\n4 2 a b c d\n2 4 b d\n2 2 c b",
        "e c a b d"
      ],
      [
        "2\naaa b\n3\n2 1 aaa b\n2 1 b aaa\n2 1 aaa b",
        "b aaa"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Impressão preguiçosa",
    "text": "Vinícius tem uma máquina de escrever interessante. A máquina aceita instruções que consistem em uma string não vazia s e um número inteiro positivo n. Para cada instrução, a máquina imprime n caracteres: o i-ésimo caractere impresso (baseado em 0) é igual a sr, onde r é o restante após dividir i pelo comprimento de s e sr denota o r-ésimo (baseado em 0) personagem de S. Por exemplo, com a sequência de instruções: 1. s = “ab”, n = 4 2. s = “cd”, n = 3 3. s = “xx”, n = 2 a máquina imprimirá “ababcdcxx”.\nVinícius é preguiçoso, então ele só dá cordas de comprimento máximo D para a máquina em cada instrução. Como ele é muito preguiçoso, ele também deseja usar o mínimo de instruções possível. Dada uma string T e o inteiro D, ajude Vinícius a encontrar o número mínimo de instruções que ele precisa para imprimir T usando a máquina.\nEntrada\nA entrada consiste em uma única linha que contém uma string T de letras minúsculas seguida do inteiro D (1 ≤ D ≤ |T| ≤ 2 × 105), conforme descrito na instrução.\nSaída\nProduza uma única linha com um número inteiro indicando o número mínimo de instruções que Vinícius necessita.",
    "samplesExamples": [
      [
        "ababcdcxx 2",
        "3"
      ],
      [
        "aaabbcd 1",
        "4"
      ],
      [
        "abcabca 3",
        "1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Labirinto em Bolt",
    "text": "Usain tem uma loja online especializada na venda de quebra-cabeças 3D feitos em impressoras 3D. Um dos quebra-cabeças mais vendidos atualmente é o Maze in Bolt. Este puzzle é composto por duas partes: uma peça em forma de parafuso com um labirinto em relevo gravado e uma porca. A parte interna da porca pode conter pontas. Essas pontas fazem a porca deslizar apenas pelos corredores do labirinto.\nInicialmente, as duas partes do quebra-cabeça são separadas. O desafio é deslizar a porca por todo o labirinto até atingir a cabeça do parafuso. A porca pode ser movida no sentido horário, anti-horário, para baixo (em direção à cabeça do parafuso) e para cima (longe da cabeça). Cada um desses movimentos só é possível quando cada ponta da parte interna da porca não estiver impedida de deslizar para a nova posição devido a alguma parede do labirinto. Além dos movimentos mencionados, outro é permitido: quando o parafuso e a porca são separados, a porca pode ser virada. A ilustração abaixo mostra ambas as partes do quebra-cabeça, bem como todos os movimentos permitidos.\n(Um cliente fez um pedido de uma grande quantidade do Maze in Bolt. Cada quebra-cabeça é desenhado pelo próprio Usain de forma aleatória e única, mas, devido ao tamanho do pedido e ao prazo apertado, ele acredita que não conseguirá para verificar se os quebra-cabeças criados têm solução ou não. Usain pediu sua ajuda para desenvolver um algoritmo que verifique rapidamente qualquer par de porca e parafuso. Para fazer isso, a parte interna da porca será modelada como uma corda circular binária. . Em relação ao parafuso, cada linha do labirinto será modelada da mesma forma.\nEntrada\nA primeira linha contém dois inteiros R (1 ≤ R ≤ 1000) e C (3 ≤ C ≤ 100), indicando respectivamente o número de linhas e colunas do labirinto. A segunda linha contém uma corda circular S de comprimento C, representando a parte interna da porca. Cada caractere de S é “1” se a porca tiver uma ponta na posição correspondente, enquanto um espaço vazio é indicado pelo caractere “0”. Cada uma das próximas R linhas contém uma sequência circular que descreve uma linha do labirinto. Neste caso, cada caractere da string será “1” se o labirinto possuir uma parede na posição correspondente, enquanto um espaço vazio é indicado pelo caractere “0”. As linhas são dadas de cima (a ponta do parafuso) para baixo (a cabeça).\nSaída\nProduza uma única linha com a letra maiúscula “Y” se o quebra-cabeça tiver uma solução, e a letra maiúscula “N” caso contrário.\n          A imagem abaixo explica a primeira amostra. As imagens à esquerda representam visualizações 3D de diferentes fases do jogo. No meio, as imagens são versões 2D achatadas das visualizações 3D correspondentes. Finalmente, as imagens à direita representam as fases do jogo de acordo com o modelo descrito (embora por uma questão de clareza, cada carácter “1” tenha sido substituído por um determinado símbolo, e cada carácter “0” seja mostrado como um espaço vazio ).\nPode-se observar nas três imagens superiores que a porca (possuindo três pinos) e o parafuso começam separados. O segundo grupo de três imagens mostra a situação do jogo depois que a porca foi movida quatro fileiras para baixo (em direção à cabeça do parafuso). Em seguida, a porca é girada uma posição, movida para baixo mais duas linhas, girada quatro posições na direção oposta e, finalmente, movida para baixo três linhas, o que resolve o quebra-cabeça. Observe que neste caso a porca não foi virada nem movida para cima (para longe da cabeça do parafuso).",
    "samplesExamples": [
      [
        "8 13\n0110010000000\n1100101110100\n1001101000100\n1100101110100\n1000100010000\n1010111011001\n0000001010000\n1001101111101\n0001001100100",
        "Y"
      ],
      [
        "1 3\n100\n101",
        "Y"
      ],
      [
        "2 3\n100\n101\n010",
        "N"
      ],
      [
        "4 6\n001000\n011111\n010001\n010100\n110111",
        "Y"
      ],
      [
        "1 6\n001011\n001011",
        "Y"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Dividindo o Reino",
    "text": "O reino da Nlogônia historicamente tem sido um lugar rico e tranquilo. Entretanto, as atuais cir cunstâncias podem dar fim a esta era de paz e prosperidade: o rei é pai de gêmeos, então ambos são herdeiros do trono.\nOs gêmeos não se dão muito bem e são ciumentos e competitivos um com o outro. Devido a este fato, tê-los governando o reino cooperativamente não é realmente uma opção. O reino terá de ser dividido em dois principados independentes, de forma que cada um seja dado a um príncipe. Além disso, a divisão precisa ser totalmente justa, para evitar conflitos entre os irmão invejosos.\nO reino consiste em N cidades e M estradas conectando pares de cidades. Os Nlogonianos são particularmente orgulhosos de suas estradas. Cada estrada tem um valor positivo associado a ela, representando sua beleza.\nO reino será dividido da seguinte maneira: primeiro, as cidades serão particionadas em dois conjun tos de forma que cada cidade está em exatamente um conjunto. Então, cada principado será composto pelas cidades em um dos conjuntos e pelas estradas conectando as cidades naquele conjunto. Estra das que conectam cidades de diferentes principados serão destruídas, uma vez que os príncipes não estão interessados em fazer negócios ou colaborações entre os principados, e manter estradas apenas aumentaria a chance de guerras.\nA beleza de um principado é definida como a maior beleza dentre todas as estradas daquele principado, ou 0 (zero) se o principado não possui estradas. Por motivos óbvios, o rei gostaria que a beleza de ambos os principados fosse igual.\nAjude o rei a determinar todos os possíveis valores de beleza dos possíveis principados resultantes, dado que a divisão é feita de maneira que os principados sejam igualmente belos.\nEntrada\nA primeira linha contém dois inteiros N, M (1 ≤ N,M ≤ 5 × 105), representando o número de cidades e o número de estradas respectivamente.\nCada uma das M linhas seguintes contém três inteiros xi,yi,bi (1 ≤ xi < yi ≤ N, 1 ≤ bi ≤ 109), representando que existe uma estrada que conecta as cidades xi e yi e possui beleza bi. Não existem estradas entre um mesmo par de cidades.\nSaída\nSe não for possível dividir o reino de maneira que ambos os principados tenham a mesma beleza, imprima uma linha com a string “IMPOSSIBLE”. Caso contrário, imprima todos os possíveis valores resultantes da divisão do reino em principados de mesma beleza. Os valores devem ser impressos em ordem crescente, um por linha.",
    "samplesExamples": [
      [
        "9 7\n1 2 3\n2 3 3\n3 4 3\n1 3 2\n2 4 2\n6 7 1\n8 9 1",
        "2\n3"
      ],
      [
        "4 4\n1 2 5\n2 3 6\n1 3 7\n3 4 7",
        "IMPOSSIBLE"
      ],
      [
        "2 1\n1 2 10",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Garantindo o Treino",
    "text": "Juan decidiu começar a se exercitar e está começando a preparar uma sessão de treinamento.\nEle sabe que em alguns dias pode não querer fazer todos os exercícios de sua sessão. Ele então decidiu criar algumas regras para evitar pular a sessão inteira e acabar não se exercitando, mas de forma que ainda possa evitar alguns exercícios de vez em quando.\nAs regras são: • Haverá dois tipos de exercícios: A e B.\n• Após terminar um exercício do tipo B ele fará o próximo exercício, se houver algum. Caso contrário, a sessão termina.\n• Após terminar um exercício do tipo A, há duas possibilidades: ele pode iniciar o exercício seguinte ou pulá-lo, executando o exercício imediatamente posterior.\n• O último exercício da sessão será sempre do tipo B.\nAssim, podem existir diferentes maneiras de se completar a sessão de exercícios. Por exemplo, se os tipos dos exercícios são BAAB, existem 3 maneiras de se completar a sessão: fazendo todos os exercícios, pulando o terceiro ou pulando o último.\nJuan quer preparar sua sessão de exercícios de maneira que existam exatamente N maneiras diferentes de completá-la. Você pode ajudá-lo? Entrada\nA entrada é composta por uma única linha contendo um inteiro N (2 ≤ N ≤ 1015), representando o número de maneiras que a sessão de exercícios pode ser completada.\nSaída\nImprima uma linha, formada pelos caracteres ‘A’ e ‘B’, representando os tipos dos exercícios na sessão. Se houver múltiplas respostas, imprima aquela que é lexicograficamente menor. Se não houver sessões válidas, imprima uma linha contendo a string “IMPOSSIBLE” (sem aspas).",
    "samplesExamples": [
      [
        "2",
        "AB"
      ],
      [
        "4",
        "ABAB"
      ],
      [
        "7",
        "IMPOSSIBLE"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Katmandu",
    "text": "Finalmente a pandemia está melhorando e você finalmente pode fazer a coisa com a qual esteve sonhando nos últimos anos: comer no seu restaurante favorito. Acontece que esse restaurante fica em Katmandu, mas tudo bem, é só você ir de avião.\nO problema é que viajar de avião quase sempre te deixa muito cansado. Você se considera descan sado se você consegue dormir por T minutos sem interrupção, ou seja, você nunca está acordado de um certo momento t até t + T. Além disso você dorme com muita facilidade: você consegue dormir no começo de qualquer minuto e acordar ao fim de qualquer minuto.\nClaro que se você dormir demais você vai acabar perdendo todas as refeições que servem no vôo! Isso é completamente inaceitável: nenhuma oportunidade de comer de graça pode passar em branco.\nFelizmente, a companhia áerea te mandou o cronograma completo do vôo: a duração do vôo, D minutos, o número de refeições que serão servidas, M, e o tempo a partir do início do vôo em que essas refeições serão servidas, yi. Você precisa estar acordado no início do minuto em que a refeição será servida para comê-la, caso contrário você não será servido. Como você está sempre com fome, a refeição será devorada instantaneamente.\nAgora você quer saber, para ter o vôo perfeito, você consegue ficar descansado e ainda assim comer todas as refeições durante o vôo? Entrada\nA primeira linha da entrada contém três inteiros, T, D, M (1 ≤ T,D ≤ 105, 0 ≤ M ≤ 1000), que representam, respectivamente, o número de minutos consecutivos que você precisa dormir para ficar descansado, a duração do vôo e o número de refeições que serão servidas durante o vôo.\nCada uma das M linhas seguintes contém um inteiro yi (0 ≤ yi ≤ D). Esses inteiros representam os tempos nos quais cada refeição será servida, e são dados em ordem cronológica.\nSaída\nImprima uma única linha contendo um único caractere. Se você consegue descansar durante o vôo e ainda assim comer todas as refeições, imprima ‘Y’; caso contrário, imprima ‘N’.",
    "samplesExamples": [
      [
        "3 10 3\n2\n4\n7",
        "Y"
      ],
      [
        "4 10 3\n2\n4\n7",
        "N"
      ],
      [
        "5 5 0",
        "Y"
      ],
      [
        "4 8 2\n5\n7",
        "Y"
      ],
      [
        "4 8 2\n3\n4",
        "Y"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Na Trave!",
    "text": "Vini é um pintor de carros muito dedicado. Desde que ele aprendeu como pintar carros, o seu sonho tem sido participar da Internacional Competição de Pintores de Carros (ICPC).\nTodo ano a região de Vini tem uma competição local para classificar todos os times competitivos de pintores de carro da região. Pintores em times que se classificaram nas melhores x posições avançam para competir na ICPC. É uma competição muito emocionante com muitos competidores novos em todos os anos, até que a fumaça nociva das tintas eventualmente faz com que os competidores se aposentem permanentemente.\nPor causa de variações de verba e também por restrições da ICPC, a quantidade x pode variar de ano pra ano, o que pode acabar causando desgosto de alguns dos competidores.\nNo último ano de Vini como competidor, o seu time estava a uma posição de se qualificar para a ICPC. Que azar! Para fazer com que o seu sentimento de “má sorte” ficasse ainda mais forte, no ano seguinte o time que obteve a mesma colocação se classificou para a ICPC! Apesar do sentimento, depois de falar com outros antigos competidores, ele notou que muitos deles já haviam se sentido azarados de uma forma ou de outra.\nAntigos competidores geralmente seguem os resultados das competições regionais por alguns anos após se aposentarem. Portanto, um competidor não se sentiria azarado pelas mudanças em x que acontecessem muitos anos após se aposentar. Mais precisamente, cada antigo competidor participou da sua última competição no ano ai, se posicionando na posição pi e, após se aposentar, seguiu os resultados pelos fi anos seguintes.\nUm competidor que não se qualificou para a ICPC em sua última participação se sentiu azarado em todos os anos em que ele seguiu os resultados e nos quais ele teria se classificado se tivesse competido.\nEm outras palavras, para cada ano até fi anos após se aposentar, se ele não se qualificou em sua última participação, ele se sentiu azarado se o número de times qualificados para a ICPC naquele ano foi ao menos pi.\nDado o número de vagas por ano, e as informações sobre cada antigo competidor, nós gostaríamos de saber em quantos anos cada antigo competidor se sentiu azarado.\nEntrada\nA primeira linha contém dois inteiros Y e N (1 ≤ Y,N ≤ 3 × 105), representando a quantidade de anos de competições e a quantidade de antigos competidores com quem Vini conversou, respecti vamente. (Sim, pintar carros é uma tradição milenar, e bem popular!).\nA próxima linha contém Y inteiros x1, x2, ..., xY (0 ≤ xi ≤ 105), representando quantas vagas para a ICPC a região teve em cada ano.\nCada uma das seguintes N linhas contém três inteiros ai, pi e fi (1 ≤ ai ≤ Y , 1 ≤ pi ≤ 105, 0 ≤ fi ≤ Y −ai), representando o ano em que o i-ésimo antigo competidor teve sua última participação, a colocação do time do i-ésimo antigo competidor naquele ano, e por quantos anos o i-ésimo antigo competidor seguiu os resultados após se aposentar, respectivamente.\nSaída\nImprima N linhas, onde a i-ésima linha deve conter um inteiro representando quantos anos o i-ésimo antigo competidor se sentiu azarado.",
    "samplesExamples": [
      [
        "5 3\n1 2 3 4 5\n1 3 4\n2 6 3\n3 4 1",
        "3\n0\n1"
      ],
      [
        "4 1\n8 8 8 8\n1 7 3",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "N",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fuga da Prisão",
    "text": "Michael e seu irmão Lincoln foram presos injustamente, na mesma prisão, mas Michael tem um plano para resgatar seu irmão. Pode-se considerar que a prisão é um conjunto de polígonos convexos no plano, cujas arestas são muros. Os muros de polígonos distintos não se interceptam, mas os polígonos podem ser encaixados, isto é, um polígono pode estar dentro de outro polígono. Pode-se considerar que Michael e Lincoln são dois pontos no plano. O caminho para o resgate consiste em primeiro Michael chegar até seu irmão e então ambos precisam escapar da prisão.\nEles não têm problema para andar, mas escalar muros é perigoso e difícil, assim Michael tentará minimizar o número total de muros que ele deverá escalar. Portanto, Michael primeiro precisa escalar alguns muros para chegar ao seu irmão, caso não se encontrem na mesma área. Em seguida deve escalar mais alguns muros para deixar a prisão. Deixar a prisão significa não estar dentro de quaisquer muros, que pode-se considerar equivalente a atingir um ponto muito longe, digamos, (1020,1020). Brad está encarregado da alocação dos prisioneiros e está sabendo do plano, de forma que ele colocará os dois prisioneiros em dois pontos diferentes do plano, mas não nos muros, e de tal forma que o número mínimo de muros que precisam ser escalados por Michael seja o maior possível. Qual é o valor do número mínimo de muros que Michael precisará escalar se Brad colocar os dois irmãos de forma ótima? Entrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 2×105), que é o número de polígonos convexos. Esta linha é seguida pelas descrições de cada polígono. A primeira linha da i-ésima descrição contém um inteiro ki (3 ≤ ki ≤ 6 × 105), seguida de ki linhas, cada uma das quais contém um ponto (xj, yj) (−109 ≤ xj,yj ≤ 109).\nOs pontos para formar cada polígono convexo são dados na ordem anti horária e não há três pontos consecutivos colineares. As arestas de dois polígonos distintos não se interceptam. O número total de arestas não passa de 6 × 105, ou seja, (cid:80)N i=1 ki ≤ 6 × 105.\nSaída\nImprima um inteiro, o número mínimo de muros que precisarão ser escalados por Michael para resgatar seu irmão, supondo que Brad os colocou em lugares que torna esse número de muros o maior possível.",
    "samplesExamples": [
      [
        "4\n4\n1 10\n-2 13\n-5 7\n-1 6\n5\n15 11\n9 20\n-6 19\n-14 5\n5 0\n4\n-1 15\n-8 7\n1 4\n2 11\n3\n7 17\n7 6\n12 11",
        "6"
      ],
      [
        "2\n4\n0 0\n3 0\n3 3\n0 3\n4\n1 1\n2 1\n2 2\n1 2",
        "4"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Criando Multiplos",
    "text": "Malba é um garoto muito inteligente que gosta de calcular. Já ganhou muitas competições, inclusive a prestigiosa competição Tahan, em que conseguiu o primeiro lugar, representando o seu país, a Logônia.\nEle inventou um problema, no qual ele considera um número N, escrito numa certa base B, e representado por L algarismos. O objetivo do jogo é reduzir não mais do que um dos algarismos de forma que o novo número, M, seja um múltiplo do número B + 1. Mas há um detalhe: dentre as alterações possíveis, deve-se escolher uma que minimize M.\nPor exemplo, suponha que B = 10 e N = 23456. Há duas maneiras de obter M: ou reduzimos o algarismo 4 para 0 ou reduzimos o algarismo 6 para 2. Então, o 4 deve ser reduzido para 0, portanto M = 23056. Em alguns casos não há solução, como no caso em que B = 10 e N = 102. Nesse caso, se trocarmos o algarismo 1 por 9 obteremos um múltiplo de 11, mas não podemos aumentar o valor de um algarismo! Observe que pode ser necessário reduzir o primeiro algarismo para o valor 0. Por exemplo, isto acontece se B = 10 e N = 322.\nVocê consegue dizer qual dígito deve ser reduzido e qual seu novo valor? Entrada\nA primeira linha contém dois inteiros B e L (2 ≤ B ≤ 104, 1 ≤ L ≤ 2×105), representando a base e o número de algarismos do número N, respectivamente.\nA segunda linha contém L inteiros D1,D2,...,DL (0 ≤ Di < B para i = 1,2,...,L), representando os algarismos do número N. O primeiro algarismo, D1, é o mais significativo e o último algarismo, DL, é o menos significativo.\nSaída\nImprima uma linha contendo dois inteiros, separados por um espaço. O primeiro inteiro é o índice do algarismo a ser alterado (lembre que o índice do primeiro algarismo, D1, é 1 e o índice do último algarismo, DL, é L). O segundo inteiro é o novo valor do algarismo. Se não houver solução para o problema, imprima -1 -1. Se N já for um múltiplo de B + 1, imprima 0 0.",
    "samplesExamples": [
      [
        "10 5\n2 3 4 5 6",
        "3 0"
      ],
      [
        "10 3\n1 0 2",
        "-1 -1"
      ],
      [
        "2 5\n1 0 1 1 1",
        "4 0"
      ],
      [
        "17 5\n3 0 0 0 0",
        "1 0"
      ],
      [
        "16 4\n15 0 13 10",
        "1 14"
      ],
      [
        "16 5\n1 15 0 13 10",
        "0 0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Belas Palavras",
    "text": "São dados uma string A de comprimento N e um conjunto S contendo M strings.\nUma permutação cíclica Bi de A, onde i é um número entre 1 e N, é a string Bi = AiAi+1 ···AN−1ANA1A2 ···Ai−2Ai−1 e a sua pontuação é definida como o maior comprimento de uma substring de Bi que é também uma substring de uma string em S.\nUma substring é definida como uma sequência contígua de letras. Por exemplo, ab e dc são substrings de abfdc, mas ad e fc não são substrings de abfdc.\nSua tarefa é calcular a menor pontuação dentre todas as permutações cíclicas da string A.\nEntrada\nA primeira linha contém dois inteiros positivos N e M, (1 ≤ N ≤ 105, 1 ≤ M ≤ 104), representando o comprimento da string A e o tamanho do conjunto S, respectivamente.\nA segunda linha contém a string A.\nCada uma das M linhas seguintes contém uma string si, representando a i-ésima string em S.\nTodas as strings contêm apenas letras minúsculas do alfabeto, e é garantido que a soma dos tamanhos de todas as strings em S nunca ultrapassa 105 caracteres.\nSaída\nImprima uma linha contendo um inteiro representando a menor pontuação dentre todas as per mutações cíclicas da string A.",
    "samplesExamples": [
      [
        "7 3\nacmicpc\nacm\nicpc\nmaratona",
        "3"
      ],
      [
        "11 4\ncompetition\noncom\npetition\nztxvu\nfmwper",
        "5"
      ],
      [
        "12 4\nlatinamerica\nzyvu\nokp\nwsgh\nkqpdb",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Alocação de Prêmios",
    "text": "Uma competição de programação se dará na Nlogônia, para determinar quem é o melhor programador Nlogoniano de todos os tempos.\nA competição terá N participantes e não há empates, ou seja, todo participante terminará colocado em uma posição de 1 a N, e todas as posições são distintas. Menores posições correspondem a melhores resultados.\nOs organizadores do evento decidiram que cada participante receberá um prêmio de no máximo R pontos e, para ser justo com os participantes com melhor desempenho, um participante nunca receberá menos pontos que um outro com pior colocação.\nAlguns participantes, entretanto, são gananciosos e querem receber mais pontos para serem felizes.\nUm competidor na colocação i precisa receber um prêmio de pelo menos pi pontos para ser feliz.\nIna, uma organizadora muito curiosa, está se perguntando de quantas maneiras é possível distri buir prêmios aos participantes de maneira a satisfazer as condições da organização, e fazer todos os participantes felizes. Como esse número é muito grande, você deve calculá-lo módulo 109 + 7.\nDuas maneiras são diferentes se pelo menos um competidor recebe um prêmio diferente.\nEntrada\nA primeira linha contém dois inteiros N e R (1 ≤ N ≤ 5000, 1 ≤ R ≤ 109), representando o número de participantes e o prêmio máximo que cada competidor pode receber, respectivamente.\nA segunda linha contém N inteiros, pi (1 ≤ pi ≤ 109), representando a menor quantidade de pontos que o participante na colocação i precisa receber para ficar feliz.\nSaída\nImprima uma linha contendo o número de diferentes maneiras de se distribuir o prêmio, módulo 109 + 7.",
    "samplesExamples": [
      [
        "2 5\n4 1",
        "9"
      ],
      [
        "3 10\n7 1 10",
        "1"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Escada Rolante",
    "text": "Você acaba de inventar um novo tipo de escada rolante: uma escada rolante dupla. Escadas rolantes normais levam as pessoas de uma das pontas para a outra, mas não na direção contrária, enquanto que as escadas rolantes duplas podem levar pessoas de qualquer uma das pontas para a outra.\nLeva-se 10 segundos para que a escada rolante dupla leve uma pessoa de uma das pontas até a outra. Isto é, se a pessoa entra na escada rolante dupla em uma das pontas no momento T, então vai sair na outra ponta no momento T + 10 – esta pessoa não estará mais na escada rolante dupla no momento T + 10.\nA todo momento que ninguém esteja usando a escada rolante dupla, ela estará parada. Portanto, inicialmente ela está parada.\nQuando a escada rolante dupla está parada e uma pessoa entra por uma das pontas, a escada rolante dupla se ligará automaticamente e se moverá na direção que aquela pessoa quer ir.\nSe uma pessoa chegar na escada rolante dupla e esta já estiver movendo-se na direção que a pessoa quer ir, então a pessoa entrará nela imediatamente. Caso contrário, se a escada rolante estiver se movendo na direção oposta, a pessoa terá que esperar até que a escada rolante pare e só então a pessoa poderá entrar nela. A escada rolante dupla é tão larga que ela pode acomodar inúmeras pessoas entrando nela ao mesmo tempo.\nA escada rolante dupla tem um efeito bem estranho, provavelmente relacionado a alguma propri edade da física quântica (ou simplesmente ao acaso): nenhuma pessoa vai chegar na escada rolante dupla no momento exato em que ela está prestes a parar.\nAgora que você sabe como a escada rolante dupla funciona, você terá a tarefa de simulá-la. Dada a informação de N pessoas, incluindo o momento em que elas chegaram na escada rolante dupla e em qual direção elas querem andar, você tem que descobrir qual o último momento em que a escada para.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 104), representando quantas pessoas usarão a escada rolante.\nEm seguida haverão N linhas contendo dois inteiros ti e di cada (1 ≤ ti ≤ 105, 0 ≤ di ≤ 1), representando o momento em que a i-ésima pessoa chegará na escada rolante dupla e em qual direção ela quer ir. Se di é igual a 0, então a pessoa quer ir da ponta esquerda para a ponta direita, e se di é igual 1, então a pessoa quer ir da ponta direita para a ponta esquerda. Todos os valores de ti são distintos e dados em ordem crescente.\nSaída\nImprima uma linha contendo o momento no qual a última pessoa saiu da escada rolante.",
    "samplesExamples": [
      [
        "3\n5 0\n8 0\n13 0",
        "23"
      ],
      [
        "3\n5 0\n7 1\n9 0",
        "29"
      ],
      [
        "3\n5 0\n10 1\n16 0",
        "35"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo Duro",
    "text": "Futebol nem sempre foi o esporte mais popular das Américas. Historiadores encontraram registros de um antigo esporte que era jogado em muitas civilizações pelo continente. Por causa da falta da tradição de se falar sobre este esporte, o nome original é desconhecido, mas em tempos modernos ele é criativamente chamado de “butefol”.\nNós não sabemos muito sobre butefol, nem as regras básicas. Porém, arquéologos encontraram muitas anotações feitas pelos técnicos enquanto eles montavam seus times, o que nos deu dicas sobre como os times eram formados. Estas anotações estão lotadas de números e cálculos. Os técnicos de butefol tentaram minuciosamente otimizar seus times ao atribuir os jogadores às melhores posições possíveis. Para facilitar esta tarefa, eles desenvolveram uma métrica para determinar a performance de cada arranjo.\nHá M posições em um campo de butefol, que são distribuídas em uma linha. Um time de butefol é composto de N jogadores, cada um o qual é designado uma posição (todos os jogadores devem ser designados a uma posição, e cada posição pode ser ocupada por zero ou mais jogadores).\nNaturalmente, os jogadores não são todos iguais: cada jogador pode ter performances diferentes quando joga em posições diferentes. Concretamente, para cada jogador i e cada posição j, há um inteiro positivo Pi,j que representa a performance do jogador i quando jogando na posição j.\nPara complicar as coisas ainda mais, os treinadores também consideravam o aspecto de interação dos jogadores. Há alguns pares de jogadores que são “melhores amigos”. Quando melhores amigos estão longes um do outro no campo, isto tem um impacto negativo na performance do time. Há um inteiro positivo C que representa a penalidade de performance quando melhores amigos estão longes um do outro.\nUma vez que os jogadores estejam distribuídos no campo, o valor da performance do time é calcu lado da seguinte maneira: primeiro, nós somamos a performance de cada jogador em sua determinada posição. Em seguida, para cada par de jogadores que são melhores amigos, nós subtraímos C mul tiplicado pela distância entre os dois jogadores, onde a distância entre dois jogadores é definida pela diferença (em valor absoluto) das posições onde os dois jogadores estão designados.\nNós gostaríamos de saber o quão bem os treinadores de butefol estavam formando seus times.\nPara isto, nós gostaríamos de saber qual é a maior performance possível de ser alcançada ao designar os jogadores de maneira ótima, dadas as performances dos jogadores em cada posição e os pares de jogadores que são melhores amigos.\nEntrada\nA primeira linha contém quatro inteiros N, M, K e C (1 ≤ N,M ≤ 50, 0 ≤ K ≤ 50, 0 ≤ C ≤ 106), representando a quantidade de jogadores, a quantidade de posições, a quantidade de pares de melhores amigos e a penalidade por colocar amigos longe uns dos outros.\nCada uma das N linhas seguintes contém M inteiros. O j-ésimo inteiro da i-ésima linha é Pi,j, representando a performance do jogador i se ele for designado na posição j (0 ≤ Pi,j ≤ 106).\nCada uma das K linhas seguintes contém 2 inteiros ai e bi (1 ≤ ai < bi ≤ N), que representa que os jogadores ai e bi são melhores amigos. Nenhum par de jogadores estará repetido nesta lista.\nSaída\nImprima uma linha contendo um inteiro, representando o máximo de performance possível para o time.\n  (Neste caso, a solução ótima é designar os jogadores 1 e 3 na posição 2, e o jogador 2 na posição 3, para que a soma da performance dos jogadores seja 2+8+9=19, a penalidade seja 5 pelos jogadores 1 e 2 estarem distantes por 1 posição, e a penalidade seja 0 pelos jogadores 1 e 3 estarem na mesma posição).",
    "samplesExamples": [
      [
        "3 3 2 5\n5 2 1\n3 2 8\n1 9 3\n1 2\n1 3",
        "14"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Invertendo Ferrovias",
    "text": "O governo de Nlogônia está incomodado com a falta de eficiência de seu sistema ferroviário. Todo par de cidades possui uma única ferrovia que as liga, porém, devido a problemas monetários, algumas delas estão inativas.\nUma configuração ideal da malha ferroviária é tal que, para qualquer par de cidades, existe um único caminho ligando essas duas cidades usando somente ferrovias ativas.\nO governador de Nlogônia te contratou para transformar seu conjunto de ferrovias em uma confi guração ideal. Infelizmente, você não fala Nlogoniano e nem tem controle sobre as ferrovias: somente os líderes de cada cidade, que só falam Nlogoniano, podem ativar ou desativar as ferrovias.\nNlogoniano possui algumas expressões extremamente específicas. Para tentar te ajudar, e te de safiar ao mesmo tempo, um amigo te ensinou uma frase que você pode tentar usar: “lupDujHomwIj luteb gharghmey”. Ele disse que, ao falar isso para o líder de uma cidade, tal líder ativará todas as ferrovias adjacentes a essa cidade que estavam previamente desativadas e desativará todas as ferrovias adjacentes a essa cidade que estavam previamente ativas. Em outras palavras, o status de “ativação” de todas as ferrovias adjacentes à cidade em questão será trocado.\nSabendo essa frase, você pode ligar para alguns líderes e fazê-los “lupDujHomwIj luteb gharghmey” as ferrovias de suas cidades.\nSeu amigo duvida que você conseguirá transformar o sistema de ferrovias em uma configuração ideal apenas utilizando essa frase. Você realmente quer provar que ele está errado. Você não só vai achar uma solução, mas, mais do que isso, vai lhe dizer de quantas maneiras diferentes pode completar o objetivo. Mais precisamente, digamos que um conjunto de líderes é bom se contatando precisamente cada um dos líderes desse conjunto uma única vez, a configuração ideal é obtida. Você vai dizer ao seu amigo quantos conjuntos bons distintos existem.\nDois conjuntos de líderes são considerados distintos se existe pelo menos um líder contido em um conjunto que não está contido no outro.\nComo esse número pode ser muito grande, você deverá informá-lo módulo 109 + 7.\nEntrada\nA primeira linha contém dois inteiros, N e M (1 ≤ N ≤ 100, 0 ≤ M ≤ N × (N − 1)/2), representando o número de cidades e o número de ferrovias inicialmente ativas, respectivamente.\nCada uma das próximas M linhas contém dois inteiros, u e v (1 ≤ u < v ≤ N), representando a existência de uma ferrovia inicialmente ativa entre as cidades u e v. É garantido que não existem duas dessas linhas iguais.\nSaída\nImprima uma linha contendo a quantidade de conjuntos de líderes que tornam a configuração ideal módulo 109 + 7.",
    "samplesExamples": [
      [
        "5 6\n1 2\n1 3\n2 4\n3 4\n3 5\n4 5",
        "8"
      ],
      [
        "3 2\n1 2\n2 3",
        "6"
      ],
      [
        "4 4\n1 2\n2 3\n3 4\n1 3",
        "4"
      ],
      [
        "3 1\n1 2",
        "0"
      ],
      [
        "2 0",
        "2"
      ],
      [
        "10 15\n1 6\n1 2\n1 5\n6 7\n6 10\n2 3\n2 9\n7 3\n7 8\n3 4\n8 9\n8 5\n4 5\n4 10\n9 10",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Haja Ordenação",
    "text": "Um amigo seu inventou um jogo e quer saber se você consegue resolvê-lo ou se ele é impossível.\nEle montou uma sequencia de N blocos. Cada bloco tem um número gravado e uma cor. Todos os números são números distintos entre 1 e N, e blocos diferentes podem ter a mesma cor.\nO jogo funciona da seguinte maneira: você pode jogar quantos turnos você quiser. Em um turno, você escolhe dois blocos diferentes que têm a mesma cor e os troca de posição.\nVocê deve dizer se é possível fazer com que a sequência inteira fique em ordem crescente ou não.\nEntrada\nA primeira linha contém dois inteiros N e K (1 ≤ N ≤ 105, 1 ≤ K ≤ N), representando o número de blocos na sequência e o número de cores diferentes, respectivamente.\nCada uma das N linhas seguintes contém dois inteiros ni e ci (1 ≤ ni ≤ N, 1 ≤ ci ≤ K), representando o número e a cor do i-ésimo bloco, respectivamente.\nSaída\nImprima uma linha contendo um caracter. Se a sequência puder ser ordenada em ordem crescente, imprima a letra maiúscula ‘Y’; caso contrário, imprima a letra maiúscula ‘N’.",
    "samplesExamples": [
      [
        "4 2\n3 1\n4 2\n1 1\n2 2",
        "Y"
      ],
      [
        "4 2\n2 1\n4 2\n1 1\n3 2",
        "N"
      ],
      [
        "3 1\n1 1\n2 1\n3 1",
        "Y"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lembre sua Senha",
    "text": "Michael é o gerente de um escritório pouco conhecido, e dentro de sua sala existe um cofre com o dinheiro para pagar seus funcionários. Infelizmente, Michael esqueceu a senha do cofre, e agora é a responsabilidade de Dwight ajudar seu chefe.\nA senha é uma sequência de N dígitos, contendo apenas zeros e uns, e Michael lembra do valor de apenas algumas posições da sequência, mas não da senha inteira. Michael também lembra de M intervalos da senha que são palíndromos – sua mente memoriza palíndromos, por algum motivo.\nUm intervalo é um palíndromo se, e somente se, o primeiro e o último dígitos do intervalo são iguais, o segundo e o penúltimo dígitos são iguais, e assim por diante.\nAgora Dwight quer saber o quão difícil vai ser recuperar a senha inteira. Você pode ajudar Dwight ao calcular o número de senhas possíveis que respeitam a memória de Michael.\nComo a resposta pode ser muito grande, imprima-a módulo 109 + 7.\nEntrada\nA primeira linha contém dois inteiros N e M (1 ≤ N ≤ 3 × 105, 1 ≤ M ≤ 3 × 105), representando quantos dígitos a senha tem, e a quantidade de intervalos que Michael lembra que são palíndromos, respectivamente.\nA segunda linha contém N caracteres si, representando qual dígito Michael lembra sobre cada posição da senha. Se si é ‘0’ ou ‘1’, então isto significa que o i-ésimo dígito da senha é 0 ou 1, respectivamente. Se si é ‘?’, então isto significa que Michael não lembra qual é o i-ésimo dígito.\nCada uma das M linhas seguintes contém dois inteiros li e ri (1 ≤ li ≤ ri ≤ N), que significa que o intervalo da senha iniciando da posição li até a posição ri, inclusive, é um palíndromo.\nSaída\nImprima o número de possíveis senhas que formam uma senha válida módulo 109 + 7. Como a memória de Michael pode ser conflitante, caso não haja nenhuma senha que respeite suas memórias, imprima ‘0’.",
    "samplesExamples": [
      [
        "5 2\n1??0?\n1 3\n2 4",
        "2"
      ],
      [
        "3 2\n???\n1 1\n1 3",
        "4"
      ],
      [
        "5 2\n1???0\n1 3\n3 5",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Monarquia em Vertigem",
    "text": "A ordem de sucessão da monarquia é um tópico complexo, pois pode envolver múltiplos fatores tal como descendência, gênero, legitimidade, e religião. Geralmente a Coroa é herdada pelo filho do soberano, ou pela linhagem lateral do soberano caso ele não tenha filhos. Não é muito óbvio, não é mesmo? E este é um dos motivos pelos quais, em todos os lugares do mundo, a monarquia está quase acabando.\nA Nlogônia ainda é dominada pela monarquia, mas felizmente com regras de sucessão simples. Em resumo há dois aspectos para levar em consideração: “filhos vêm antes de irmãos” e “os mais velhos vêm antes dos mais novos”.\nOs servos do reino mantêm uma linda e gigante tapeçaria onde a linhagem de Constante, o primeiro rei da Nlogônia, é desenhada em forma de uma árvore. Sempre que um novo membro da família nasce um novo ramo do pai para o filho é desenhado na tapeçaria. Este evento é tão importante que a lenda diz que quando um descendente de Constante tem um filho ele não vai morrer até que o nome do seu filho seja desenhado na tapeçaria. Quando alguém morre, uma cruz é desenhada perto do nome do falecido na tapeçaria. Quando o monarca morre, a tapeçaria é usada pelos servos para determinar quem deve ser o novo monarca. Para que isso seja feito, os servos analisam a árvore iniciando pelo Constante e atravessam os ramos de acordo com as regras descritas antes, “filhos vêm antes de irmãos” e “os mais velhos vêm antes dos mais novos”. Eles visitam cada nó da árvore iniciando pelo Constante, seguido pelo filho mais velho de Constante, seguido pelo filho mais velho daquele filho, e assim por diante, até que encontram alguma pessoa ainda viva, ou até que um membro da família não tenha filhos, e neste caso eles voltam para o pai daquela pessoa e movem para o seu segundo filho, repetindo este processo até que um novo monarca seja encontrado.\nDepois de milhares de anos no poder, a linhagem de Constante é gigante. Manter a tapeçaria e, quando a hora chega, determinar quem é o novo monarca são processos demorados e os servos Nlogonianos decidiram que está na hora de modernizar. Eles querem escrever um programa que seja usado para manter a linhagem de Constante e que também possa definir quem é o novo monarca quando o monarca anterior tragicamente morre. Dada a importância desta tarefa, os servos da monarquia querem testar o programa garantindo que ele produza a saída correta para todos os eventos que aconteceram até agora. Só existe um problema: nenhum deles é bom em programação. Por isso eles querem a sua ajuda.\nMais tecnicamente, cada pessoa na linhagem de Constante vai ser representado por um identificador inteiro positivo único. Sempre que um novo filho nasce, ele é atribuído o próximo menor inteiro único.\nO identificador de Constante é o número 1, e inicialmente ele é a única pessoa viva. Você terá que processar vários eventos em ordem cronológica. Sempre que uma pessoa morrer, você deve ajudar os servos a descobrirem quem é o atual monarca. É garantido que sempre haverá alguém vivo para governar.\nEntrada\nA primeira linha contém um inteiro Q (1 ≤ Q ≤ 105), representando quantos eventos devem ser processados. As próximas Q linhas conterão dois inteiros ti e xi cada, representando o tipo e o argumento do i-ésimo evento. Se ti é igual a 1, então isso significa que a pessoa com identificador xi teve um filho. Se ti é igual a 2, então isso significa que a pessoa com identificador xi morreu.\nSaída\nPara cada evento em que uma pessoa morre, você deve imprimir uma linha com um inteiro, representando o identificador do monarca atual.",
    "samplesExamples": [
      [
        "8\n1 1\n1 1\n1 2\n2 1\n2 4\n1 2\n2 2\n2 5",
        "2\n2\n5\n3"
      ],
      [
        "4\n1 1\n1 1\n2 2\n2 1",
        "1\n3"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Donuts não inteiros",
    "text": "Neil é um advogado muito importante, com uma conta bancária muito importante. Como Neil é um advogado de sucesso com muitos clientes, ele deposita dinheiro em sua conta todas as manhãs.\nDepois de ir ao banco e depositar o dinheiro, Neil vai trabalhar. E aí reside o grande ponto fraco de Neil: uma loja de donuts. Veja bem, Neil é um viciado em donuts em recuperação e, embora não coma um donut há anos, ele não consegue deixar de se perguntar quantos donuts de US$ 1,00 ele poderia comprar com o dinheiro de sua conta se tivesse uma recaída.\nTer $ 5,00 em sua conta significa 5 donuts que Neil poderia ter, mas e quanto a $ 4,50? Bem, isso é mais de 4 donuts com certeza, mas definitivamente menos de 5. Como alguém compraria uma quantidade não inteira de donuts? Esse conceito confunde Neil, então toda vez que o saldo de sua conta não é um número inteiro, ele para para refletir sobre a natureza dos donuts não inteiros e acaba se atrasando para o trabalho.\nAgora Neil já se atrasou muitas vezes e está começando a temer que perderá o emprego. Ele quer saber quantas vezes se atrasará para o trabalho durante os próximos N dias, dado o saldo inicial de sua conta e a quantidade de dinheiro que depositará a cada dia. Por favor, responda isso para ele, ou então Neil começará a ponderar novamente.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000), o número de dias em que Neil está interessado. Cada uma das próximas N + 1 linhas contém uma string que representa uma quantia em dinheiro. A primeira string é o saldo inicial da conta de Neil, enquanto as N strings seguintes são os valores que Neil depositará em sua conta nos diferentes dias. Cada string tem o formato $X.Y onde X é uma substring de comprimento 1 ou 2 indicando todo o dinheiro no valor $X.Y , enquanto Y é uma substring de comprimento exatamente 2 denotando os centavos no valor $X.Y . Tanto X quanto Y são compostos de dígitos, pelo menos um deles contém um dígito diferente de zero e X não possui zeros à esquerda.\nSaída\nProduza uma única linha com um número inteiro indicando quantas vezes Neil se atrasará para o trabalho durante os N dias seguintes.",
    "samplesExamples": [
      [
        "1\n$1.57\n$3.14",
        "1"
      ],
      [
        "4\n$1.00\n$0.01\n$0.99\n$10.00\n$98.76",
        "2"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Cordilheiras",
    "text": "Famosa pelas suas cadeias de montanhas, a Nlogónia atrai milhões de turistas todos os anos. O governo dispõe de um orçamento dedicado à manutenção contínua dos percursos pedestres espalhados por todo o país e a maioria deles está repleta de miradouros panorâmicos, acessíveis através de passadiços e escadas de madeira.\nAtualmente em viagem pela Nlogônia e com esperança de voltar para casa com muitas fotos de tirar o fôlego, Lola e seu marido querem visitar o maior número possível de mirantes. Eles planejam percorrer uma trilha diferente a cada dia e explorar seus mirantes. No entanto, para não ficarem exaustos no final do dia, se a passagem de um miradouro para outro necessitar de subir mais de X metros, basta encerrar o dia e regressar ao hotel para descansar um pouco. Felizmente, todas as trilhas para caminhadas na Nlogônia estão equipadas com teleféricos modernos, para que o casal possa começar a caminhar em qualquer ponto de vista que desejar.\nIniciada a caminhada o casal só se dirige ao pico da montanha.\nPara não perder um dia, Lola só quer caminhar por trilhas onde possa chegar a um número razoável de mirantes. Dadas as altitudes dos mirantes panorâmicos de um percurso pedestre, deve-se determinar o número máximo de mirantes que o casal pode visitar.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 1000) e X (0 ≤ X ≤ 8848), indicando respectivamente o número de mirantes panorâmicos na trilha e o número máximo de metros que Lola e seu marido estão dispostos a percorrer. subir de um ponto de vista para o outro. A segunda linha contém N inteiros A1,A2,...,AN (1 ≤ Ai ≤ 8848 para i = 1,2,...,N), onde Ai é a altitude (em metros) do i-ésimo ponto de vista . Os pontos de vista são dados na ordem em que aparecem na trilha e suas altitudes não são decrescentes, ou seja, Ai ≤ Ai+1 para i = 1,2,...,N − 1.\nSaída\nProduza uma única linha com um número inteiro indicando o número máximo de mirantes panorâmicos que podem ser visitados sem subir mais de X metros de um mirante a outro, e considerando que a jornada pode ser iniciada em qualquer mirante.",
    "samplesExamples": [
      [
        "9 2\n3 14 15 92 653 5897 5897 5898 5900",
        "4"
      ],
      [
        "9 0\n3 14 15 92 653 5897 5897 5898 5900",
        "2"
      ],
      [
        "9 8848\n3 14 15 92 653 5897 5897 5898 5900",
        "9"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Vinicius Santos, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Quase origami",
    "text": "Você tem uma folha de papel retangular de altura 1 e deseja localizar qualquer ponto na altura H medida a partir da borda inferior da folha. Como você não conhece os teoremas de Haga, planeja repetir o passo seguinte. Suponha que você já localizou um ponto PL na altura L na borda esquerda da folha e um ponto PR na altura R na borda direita da folha. Em seguida, você desenha uma linha do canto inferior esquerdo da folha até PR e outra linha do canto inferior direito da folha até PL. Se o ponto de cruzamento estiver na altura H, então está tudo pronto. Caso contrário, você traça uma linha horizontal que passa pelo ponto de cruzamento e dá outro passo.\nComo exemplo, considere o caso H = 1/3. Durante a primeira etapa, a única possibilidade é escolher os cantos superiores da folha (ou seja, L = R = 1). Então você desenha as duas diagonais da folha, e o ponto de cruzamento fica na altura 1/2. Como H (cid:54)= 1/2, você desenha uma linha horizontal que passa pelo ponto de cruzamento. Esta linha fornece dois novos pontos com altura conhecida 1/2 nas bordas da folha, um na borda esquerda e outro na borda direita. Para o segundo passo você pode escolher entre usar os pontos originais conhecidos na altura 1 ou os pontos que você acabou de localizar na altura 1/2. Ou seja, você pode escolher L = 1 ou L = 1/2 e, claro, R = 1 ou R = 1/2. É fácil ver que se você escolher L = R = 1/2, então o ponto de cruzamento estaria na altura 1/4. Porém, se você escolher L = 1/2 e R = 1, então o ponto de cruzamento estaria na altura desejada H = 1/3. Por simetria, o mesmo ocorre se escolher L = 1 e R = 1/2.\nDada uma altura racional H, deve-se determinar uma sequência mais curta de alturas nas bordas da folha que permita localizar um ponto na altura H.\nComo mostra o exemplo acima, apenas um ponto na altura 1/2 pode ser localizado em uma única etapa e, portanto, uma possível sequência mais curta para H = 1/3 é S = (1,1,1/2,1). As duas primeiras alturas devem ser escolhidas durante a primeira etapa, e as duas alturas restantes devem ser escolhidas durante a segunda etapa.\nEntrada\nA entrada consiste em uma única linha que contém dois inteiros M e N (1 ≤ M < N ≤ 100) tais que H = M/N é uma fração irredutível.\nSaída\nProduza uma única linha com o caracter “*” (asterisco) se um ponto na altura H não puder ser localizado por meio do procedimento descrito. Caso contrário, produza uma sequência mais curta de alturas S1,S2,...,SK que permita localizar um ponto na altura H, se forem escolhidas na ordem em que aparecem na sequência. A altura Si deve ser escrita na i-ésima linha usando dois inteiros Ai e Bi tais que Si = Ai/Bi é uma fração irredutível (i = 1,2,...,K). É garantido que quando um ponto na altura H pode ser localizado, ele pode ser localizado de forma ideal escolhendo apenas alturas racionais.",
    "samplesExamples": [
      [
        "1 3",
        "1 1\n1 1\n1 2\n1 1"
      ],
      [
        "1 3",
        "1 1\n1 1\n1 1\n1 2"
      ],
      [
        "3 4",
        "*"
      ],
      [
        "1 4",
        "1 1\n1 1\n1 2\n1 2"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Faturamento Diário",
    "text": "Fernando é um profissional que atua no departamento de contabilidade das Empresas Stark. Ele é responsável pelo controle e análise do faturamento diário da empresa. Fernando registrou o faturamento da empresa durante N dias consecutivos. A partir disso, ele gerou uma lista V de tamanho N onde Vi representa a quantidade de dinheiro que a empresa ganhou no i-ésimo dia. Observe que um valor Vi < 0 indica que a empresa perdeu dinheiro naquele dia.\nUma das tarefas de Fernando é repassar ao seu superior Tony uma lista indicando as movimentações durante um intervalo de dias. Mas Fernando sabe que Tony ficará muito zangado com seus subordinados se, na lista que recebeu, houver um dia em que a soma do faturamento dos primeiros dias seja negativa, indicando que a empresa perdeu dinheiro. Como Fernando deseja que seu superior fique feliz com ele, ele modificará um pouco sua lista V antes de enviá-la a Tony. Esta modificação consiste em retirar alguns dias do início da lista e alguns dias do final da lista.\nFernando diz que a felicidade da lista V é a quantidade de sublistas que ele consegue enviar para que Tony fique feliz. Formalmente, a felicidade de V é o número de pares inteiros p,q (p,q ≥ 0 e p + q < N) tais que se Fernando remover os primeiros p dias e os últimos q dias de V , para cada i a soma dos primeiros i valores da lista resultante não é negativo.\nFernando estava pensando em felicidade quando surgiu um problema adicional. A equipe de TI da empresa informou que houve uma falha no sistema que calcula o faturamento diário da empresa. Eles descobriram que, para um dos N dias, o sistema calculou um faturamento que difere em X unidades do faturamento real. Ou seja, existe um dia i em que o volume de negócios real desse dia é Vi + X em vez de Vi. Fernando poderia cavar fundo e descobrir exatamente em qual dos dias esse erro aconteceu, mas ele tem preguiça. Então ele decide adicionar X em um dia de forma que a felicidade do V modificado seja a maior possível.\nVocê, sendo amigo de Fernando, decidiu ajudá-lo. Dada a falha X e a lista de turnovers V , você deve encontrar a felicidade máxima de V considerando que X deve ser adicionado a um dos turnovers.\nEntrada\nA primeira linha contém dois inteiros X (−109 ≤ X ≤ 109) e N (1 ≤ N ≤ 5 × 105), indicando respectivamente o valor do glitch e o número de dias na lista de turnovers.\nA segunda linha contém N inteiros V1,V2,...,VN (−109 ≤ Vi ≤ 109 para i = 1,2,...,N), descrevendo a lista.\nSaída\nProduza uma única linha com um número inteiro indicando a felicidade máxima considerando que X deve ser somado a um dos turnovers dados por V .",
    "samplesExamples": [
      [
        "1 6\n1 1 -2 1 3 -5",
        "13"
      ],
      [
        "-1 6\n1 1 -2 1 3 -5",
        "9"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Yan Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Árvore Geradora",
    "text": "É Natal em Medford, no Texas, e Meemaw Cooper passou muito tempo preparando uma linda árvore com luzes de Natal em uma configuração muito especial. Mas enquanto Meemaw estava fora de casa, sua neta Missy acidentalmente esbarrou na árvore e quebrou as luzes de Natal. Missy quer restaurar a mesma configuração de luzes antes que Meemaw volte, por isso ela pediu a ajuda de seu irmão Sheldon que sabia algo sobre como a configuração das luzes era construída.\nSheldon sabia que Meemaw comprou muitas cópias da mesma configuração de luzes e simplesmente as juntou. Uma configuração de luzes pode ser vista como uma árvore (grafo conectado acíclico não direcionado) em que os vértices são as luzes e as arestas são os fios que as conectam. Cada aresta conecta duas luzes diferentes e o conjunto de arestas forma uma árvore. Então Meemaw comprou muitas cópias da mesma configuração e adicionou alguns fios conectando cópias distintas de modo que a configuração resultante também fosse uma árvore.\nSheldon explicou rapidamente a Missy o que ela precisava fazer para recuperar a configuração do Meemaw e passou o resto da tarde pensando na seguinte generalização do problema. Dada uma coleção de N árvores, determine para cada árvore quantas outras árvores da coleção podem gerar aquela árvore. Uma árvore T1 pode gerar uma árvore T2 se for possível conectar uma ou mais cópias de T1 com arestas de modo a obter uma árvore isomórfica a T2. Observe que nenhuma aresta pode ser removida, apenas a adição de arestas é permitida. Duas árvores são isomórficas se for possível rotular seus vértices de forma que se tornem exatamente a mesma árvore. Por exemplo, uma árvore com arestas {(1,2),(2,3)} é isomórfica a uma árvore com arestas {(1,3),(3,2)}.\nVocê pode ajudar Sheldon a resolver seu problema? A imagem a seguir mostra um exemplo de uma coleção de N = 4 árvores. Neste caso, a árvore 1 não pode ser gerada a partir de nenhuma outra árvore da coleção, a árvore 2 pode ser gerada a partir da árvore 1, a árvore 3 pode ser gerada a partir da árvore 4 e a árvore 4 pode ser gerada a partir da árvore 3.\nEntrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 2 × 105) indicando o número de árvores que Sheldon está considerando. Após esta linha, existem N grupos de linhas, cada grupo descrevendo uma árvore.\nDentro de cada grupo que descreve uma árvore, a primeira linha contém um inteiro K (2 ≤ K ≤ 2×105) representando o número de vértices da árvore. Os vértices são identificados por inteiros distintos de 1 a K. Cada uma das próximas K − 1 linhas contém dois inteiros U e V (1 ≤ U,V ≤ K e U (cid:54)= V ), indicando que a árvore tem o borda (U,V).\nA quantidade total de vértices sobre todas as árvores é no máximo 4 × 105.\nSaída\nProduza uma única linha com N inteiros, de modo que o i-ésimo deles represente, para a i-ésima árvore de entrada, quantas outras árvores na entrada podem gerar essa árvore.",
    "samplesExamples": [
      [
        "4\n4\n1 2\n1 3\n1 4\n8\n1 2\n1 3\n1 4\n5 6\n5 7\n5 8\n1 5\n2\n1 2\n2\n2 1",
        "0 1 1 1"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Victor de Sousa Lamarca, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "KIARA é um acrônimo recursivo",
    "text": "Uma sigla recursiva é uma sigla em que uma de suas letras representa a própria sigla.\nPor exemplo, a primeira palavra no título deste problema é um acrônimo recursivo do título completo.\nOutro exemplo é “BOB”, que é um acrônimo de “Beware of Bob”.\nDada uma lista de palavras, você deve decidir se existe uma palavra na lista que seja um acrônimo recursivo de uma frase que pode ser formada usando palavras da lista. Como a primeira letra de qualquer palavra pode representar a palavra inteira, basta decidir se existe uma palavra na lista que possa ser formada a partir da primeira letra de algumas palavras da lista.\nEntrada\nA primeira linha contém um inteiro positivo N indicando o número de palavras na lista. Cada uma das próximas N linhas contém uma string não vazia feita de letras maiúsculas representando uma palavra na lista. A soma dos comprimentos de todas as strings é no máximo 106.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se existir uma palavra na lista que seja um acrônimo recursivo de uma frase que pode ser formada usando palavras na lista, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "3\nOF\nBOB\nBEWARE",
        "Y"
      ],
      [
        "3\nWHO\nMADE\nWHO",
        "N"
      ],
      [
        "5\nJUST\nUSE\nWORD\nXX\nTWICE",
        "Y"
      ],
      [
        "1\nYYYYYYYYYYY",
        "Y"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Divisão de Campos",
    "text": "A família Silva é produtora de trigo no interior do Brasil. Eles têm uma enorme plantação administrada pelo Sr. e Sra. Silva. Mas a plantação tem um formato peculiar: possui N campos numerados de 1 a N, interligados por M estradas de mão dupla. Para facilitar o trabalho na época da colheita, a plantação foi projetada de forma que haja um caminho entre cada par de campos utilizando as estradas existentes. Além disso, os campos possuem tamanhos diferentes, impactando assim na produtividade de cada um. O i-ésimo campo produz 2i kg de trigo por ano.\nCom o passar do tempo, o casal Silva se cansou de cuidar da plantação e decidiu deixar a tarefa para os dois filhos: Ana e Bob. Para não haver brigas entre os filhos, o casal quer dividir os N campos de acordo com as seguintes regras: • Cada campo deve pertencer a exatamente um irmão.\n• Deve haver um caminho entre cada par de campos que pertencem ao mesmo irmão, utilizando as estradas existentes e visitando apenas os campos desse irmão.\n• As somas dos rendimentos dos campos de cada irmão devem ser tão semelhantes quanto possível.\nCaso não seja possível dividir os campos de forma que as somas dos rendimentos sejam iguais, Ana ficará com os campos de maior soma por ser a irmã mais velha.\nQuando o casal tentou fazer essa divisão, percebeu que a tarefa seria muito complexa, por isso pediu a sua ajuda. Dados os campos e as estradas, sua função é ajudar a família Silva a dividir os campos entre os dois irmãos da maneira que desejarem.\nEntrada\nA primeira linha contém dois inteiros N (2 ≤ N ≤ 3 × 105) e M (1 ≤ M ≤ 3 × 105), indicando respectivamente o número de campos e o número de estradas. Cada uma das próximas M linhas contém dois inteiros U e V (1 ≤ U,V ≤ N e U (cid:54)= V ), denotando que há uma estrada de mão dupla entre os campos U e V . É garantido que existe um caminho entre cada par de campos usando as estradas fornecidas, e que existe no máximo uma estrada entre cada par de campos.\nSaída\nProduza uma única linha com uma string de comprimento N tal que seu i-ésimo caractere seja a letra maiúscula “A” ou a letra maiúscula “B”, indicando respectivamente que Ana ou Bob devem receber o i-ésimo campo. Se houver várias soluções, produza qualquer uma delas.",
    "samplesExamples": [
      [
        "3 2\n1 3\n3 2",
        "ABA"
      ],
      [
        "6 6\n3 5\n2 6\n1 3\n3 6\n5 1\n4 6",
        "BABABA"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Yan Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Ciclistas versus Nuvens",
    "text": "Na Nlogónia, diversas campanhas visam transformar a bicicleta no principal meio de transporte do país. Uma das ações de divulgação das bicicletas é um Hackathon focado no desenvolvimento de aplicativos para facilitar o dia a dia dos ciclistas.\nA equipe da sua universidade tem uma ideia promissora. Como a Nlogônia é um país muito chuvoso, às vezes quem sai na chuva não tem a intenção de se molhar, mas o faz por falta de opção. A ideia então é desenvolver uma aplicação capaz de gerar um percurso entre dois pontos que garanta que é possível fazer a viagem sem se molhar, de forma que não haja outro percurso com a mesma garantia e que demore menos tempo.\nPara o protótipo a ser apresentado no Hackathon, considere que todos os pontos de interesse estão dispostos no plano cartesiano e possuem coordenadas inteiras. As nuvens de chuva são modeladas como polígonos simples (arestas não contíguas não se cruzam) com cada aresta paralela a um dos eixos. Cada nuvem se move uma unidade de distância por unidade de tempo em uma das direções cardeais (Norte, Sul, Leste ou Oeste). Um ciclista também se move uma unidade de distância por unidade de tempo em direções cardeais. O ciclista pode mudar de direção em qualquer um dos pontos de interesse; a mudança de direção acontece instantaneamente. Além disso, durante o trajeto o ciclista pode ficar parado em qualquer um dos pontos de interesse, protegendo-se da chuva por qualquer quantidade de unidades de tempo desejadas. O ciclista se molha se não estiver parado em um ponto de interesse (protegendo-se da chuva) e houver pelo menos uma nuvem acima dele. Uma nuvem não é considerada acima do ciclista quando o ciclista está na sua fronteira.\nEnquanto os demais membros da equipe se preocupam em gerar os dados e criar a interface gráfica do Hackathon, sua tarefa é desenvolver a parte do software responsável por gerar a melhor rota para um ciclista que deseja se deslocar entre dois pontos de interesse sem se preocupar. molhado.\nA imagem acima corresponde às duas primeiras amostras. Na primeira amostra, à medida que a nuvem se move para leste, o ciclista pode ir diretamente para o destino, primeiro movendo-se para oeste e depois para norte, num total de sete unidades de tempo. Na segunda amostra, a nuvem se move para o sul, de modo que o ciclista só pode se mover uma unidade de distância para oeste sem se molhar. Se o ciclista tentasse mover-se para oeste uma segunda vez, a nuvem estaria acima deles. A maneira mais rápida é esperar uma unidade de tempo depois de se mover para oeste, depois mover-se para norte seguindo a fronteira da nuvem e, finalmente, para oeste em direção ao destino, num total de oito unidades de tempo.\nEntrada\nA primeira linha contém quatro inteiros Xo, Yo, Xd e Yd (0 ≤ Xo,Yo,Xd,Yd ≤ 100), indicando que o ciclista parte do ponto (Xo,Yo) e deseja chegar ao ponto (Xd,Yd ). A segunda linha contém um inteiro N (0 ≤ N ≤ 100) representando o número de nuvens de chuva. Após essas linhas, existem N grupos de linhas, cada grupo descrevendo uma nuvem.\nDentro de cada grupo que descreve uma nuvem, a primeira linha contém um caractere C e um inteiro V (4 ≤ V ≤ 100). O caractere C é uma das letras maiúsculas “N”, “S”, “E” ou “W”, indicando respectivamente que a nuvem se move na direção Norte (y ascendente), Sul (y descendente), Leste (x ascendente). ) ou Oeste (x descendente). O valor V representa o número de vértices do polígono que modela a nuvem. Cada uma das próximas V linhas contém dois inteiros X e Y (0 ≤ X,Y ≤ 100), denotando que o ponto (X,Y ) é um vértice do polígono. Os vértices aparecem no sentido horário. Todos os vértices fornecidos são cantos reais do polígono.\nSaída\nProduza uma única linha com um número inteiro indicando a quantidade mínima de unidades de tempo necessárias para viajar de (Xo,Yo) a (Xd,Yd) sem se molhar.",
    "samplesExamples": [
      [
        "4 0 1 4\n1\nE 8\n0 5\n3 5\n3 2\n5 2\n5 1\n2 1\n2 2\n0 2",
        "7"
      ],
      [
        "4 0 1 4\n1\nS 8\n0 5\n3 5\n3 2\n5 2\n5 1\n2 1\n2 2\n0 2",
        "8"
      ],
      [
        "1 2 1 3\n1\nN 4\n1 4\n2 4\n2 1\n1 1",
        "1"
      ],
      [
        "0 0 0 1\n1\nW 4\n1 1\n1 0\n0 0\n0 1",
        "2"
      ],
      [
        "20 1 1 10\n2\nE 4\n1 30\n15 30\n15 0\n1 0\nS 4\n0 29\n100 29\n100 22\n0 22",
        "32"
      ],
      [
        "42 42 42 42\n0",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Porque, Arte!",
    "text": "Leo é designer. Ele possui uma coleção de N fontes e N cores, cada uma delas possuindo uma nota inteira que indica o quanto ela é bonita. Uma nota negativa indica que a fonte ou cor é “feia”.\nCom base nisso, Leo inventou uma nova forma de medir a beleza de qualquer texto. Se um texto tem uma fonte de grau Fi e uma cor de grau Cj, então a beleza do texto é o produto Fi × Cj.\nObserve que quando a fonte e a cor são feias, o texto resultante é lindo, porque, Arte! Leo tem que apresentar ao seu chefe belos designs de texto. O patrão disse para ele que os textos deveriam ser bem diferentes uns dos outros. Pensando nisso, Leo decidiu selecionar uma fonte distinta e uma cor distinta para cada texto de forma que a soma das belezas dos k textos formados fosse máxima. Para seu orgulho, ele também quer conhecer a soma mínima possível das belezas de k textos feitos de fontes e cores distintas.\nMas há um problema! Leo esqueceu quantos designs o chefe pediu, então ele precisa encontrar a resposta para cada inteiro k entre 1 e N.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 105) indicando a quantidade de fontes e cores.\nA segunda linha contém N inteiros F1,F2,...,FN (−104 ≤ Fi ≤ 104 para i = 1,2,...,N), representando as notas das fontes. A terceira linha contém N inteiros C1,C2,...,CN (−104 ≤ Ci ≤ 104 para i = 1,2,...,N), denotando as graduações das cores.\nSaída\nProduza N linhas, de modo que a k-ésima linha contenha dois inteiros indicando respectivamente a soma mínima e máxima de belezas se o chefe solicitar k textos.",
    "samplesExamples": [
      [
        "2\n-100 -10\n1 2",
        "-200 -10\n-210 -120"
      ],
      [
        "4\n0 -1 1 2\n10 20 30 40",
        "-40 80\n-40 110\n-30 110\n0 100"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Naim Shaikhzadeh Santos, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Torres Antigas",
    "text": "O rei da Nlogónia conquistou muitas terras ao longo da sua vida e agora que o seu filho atingiu a maioridade, o rei quer partilhar os seus bens com ele.\nA Nlogônia possui N torres antigas que podem ser vistas como pontos no plano cartesiano. O rei decidiu que seu filho deveria escolher quatro dessas torres. Em seguida, o filho deve construir uma parede ligando as torres, de modo a formar um quadrilátero (simples, mas não necessariamente convexo) tendo as torres como vértices. O terreno cercado pelo muro será propriedade do filho. Como o rei não quer que as pessoas zombem de seu filho por não ter terras suficientes, a área do quadrilátero deve ser maior ou igual a um determinado valor S.\nO filho está ansioso para escolher sua porção de terra, mas o rei quer saber de antemão de quantas maneiras diferentes isso pode ser feito. A imagem abaixo mostra um exemplo com N = 4 torres. Neste caso, existem dois quadriláteros diferentes com área de pelo menos S = 2.\nEntrada\nA primeira linha contém dois inteiros S (1 ≤ S ≤ 1018) e N (4 ≤ N ≤ 400), indicando respectivamente a área mínima e o número de torres antigas. Cada uma das próximas N linhas descreve uma torre com dois inteiros X e Y (0 ≤ X,Y ≤ 109), denotando as coordenadas da torre. Não existem duas torres com a mesma localização e não existem três delas colineares.\nSaída\nProduza uma única linha com um número inteiro indicando o número de diferentes quadriláteros simples tendo torres como vértices e área pelo menos S. Um quadrilátero é simples se arestas não contíguas não se cruzam. Dois quadriláteros são considerados diferentes se tiverem vértices ou arestas diferentes.",
    "samplesExamples": [
      [
        "2 4\n1 2\n3 4\n3 3\n4 1",
        "2"
      ],
      [
        "1 4\n1 2\n3 4\n3 3\n4 1",
        "3"
      ],
      [
        "4 5\n1 1\n3 3\n3 0\n0 1\n1 0",
        "3"
      ],
      [
        "1 4\n0 0\n1000 0\n0 1000\n1000 1000",
        "1"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Planos de Expedição",
    "text": "A Companhia Internacional de Tubos e Cabos opera um cabo de Internet em todo o Pacífico.\nPorém, parou de funcionar! Mas espere, não precisa entrar em pânico, isso não é inesperado, sendo às vezes causado por ataques de tubarões. O cabo é composto por uma sequência de N+1 segmentos, com um repetidor entre cada par de segmentos consecutivos. Os repetidores são identificados por números inteiros distintos de 1 a N, da esquerda para a direita, de acordo com suas posições dentro do cabo.\nUm sinal é transmitido da esquerda para a direita ao longo do cabo. Diz-se que um repetidor está offline se nenhum sinal chegar ao repetidor; isso indica que há um segmento defeituoso antes do repetidor.\nPelo contrário, diz-se que um repetidor está online se receber dados; isso indica que há um segmento com falha após o repetidor. A equipe técnica determinou que existe um único segmento defeituoso. Para localizá-lo e consertá-lo, é necessária uma expedição.\nUma expedição começa no repetidor 1 e repete os três passos seguintes até que o segmento defeituoso seja localizado: navegar até algum repetidor, mergulhar até esse repetidor e diagnosticar se o sinal está chegando a esse repetidor ou não. O segmento com falha será localizado se o sinal estiver atingindo seu primeiro ponto final, mas não seu segundo ponto final. Uma vez reconhecido o segmento defeituoso, ele é reparado.\nUm plano de expedição define como a viagem acontecerá com base nos diagnósticos que são feitos ao longo do caminho. A imagem acima mostra um cenário possível com N = 3 repetidores (ou seja, N + 1 = 4 segmentos). Seguem cinco planos de expedição possíveis para este caso: 1. Diagnosticar o repetidor 2. Se estiver off-line, diagnosticar o repetidor 1 para decidir qual dos dois primeiros segmentos é o segmento defeituoso. Pelo contrário, se o repetidor 2 estiver online, então diagnostique o repetidor 3 para decidir qual dos dois últimos segmentos está falhando.\n2. Diagnosticar em ordem os repetidores 1, 2 e 3, parando antecipadamente quando o segmento com falha for encontrado.\n3. Diagnosticar em ordem os repetidores 1, 3 e 2, parando antecipadamente quando o segmento com falha for encontrado.\n4. Diagnosticar em ordem os repetidores 3, 1 e 2, parando antecipadamente quando o segmento com falha for encontrado.\n5. Diagnosticar em ordem os repetidores 3, 2 e 1, parando antecipadamente quando o segmento com falha for encontrado.\nO custo total de uma expedição é composto pelos custos de navegação, custos de mergulho e custos de fixação. O custo da navegação é proporcional à distância percorrida. O custo de mergulho para cada mergulho é proporcional à profundidade do repetidor. O custo de fixação do segmento em falha depende do terreno em que ele está colocado. No nosso exemplo, os custos do primeiro plano de expedição seriam os seguintes: • Se o primeiro segmento falhar, a expedição navega para o repetidor 2, mergulha, navega de volta para o repetidor 1, mergulha e repara o segmento. Portanto, o custo de navegação é 1 + 1 = 2, o custo de mergulho é 8 + 3 = 11 e o custo de fixação é 7, num total de 2 + 11 + 7 = 20.\n• Se o segundo segmento estiver falhando, o custo total será (1 + 1) + (8 + 3) + (1) = 14.\n• Se o terceiro segmento estiver falhando, o custo total será (1 + 1) + (8 + 2) + (2) = 14.\n• Se o quarto segmento estiver falhando, o custo total será (1 + 1) + (8 + 2) + (12) = 24.\nDevido à alta afinidade entre as interrupções de rede e a Lei de Murphy, a estimativa de custo mais precisa para um plano de expedição é o máximo que ele pode atingir. Ou seja, devemos considerar que o segmento falido é sempre aquele que faz com que a expedição tenha custo máximo. Assim, o custo estimado do primeiro plano de expedição é 24. Sua tarefa é encontrar o custo mínimo estimado entre todos os planos de expedição. No nosso exemplo, o plano de expedição que diagnostica na ordem os repetidores 1, 3 e 2 teria custos totais de 10, 17, 18 ou 19, dependendo do segmento com falha.\nIsso significa que seu custo estimado é de 19, que é o mínimo entre todos os planos de expedição.\nEntrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 3000) indicando o número de repetidores.\nA segunda linha contém N −1 inteiros S1,S2,...,SN−1 (0 ≤ Si ≤ 109 para i = 1,2,...,N − 1), onde Si é o custo de navegação entre repetidores eu e eu+1. A terceira linha contém N inteiros D1,D2,...,DN (0 ≤ Di ≤ 109 para i = 1,2,...,N), tais que Di é o custo de mergulhar no repetidor i. A última linha contém N +1 inteiros F1,F2,...,FN+1 (0 ≤ Fi ≤ 109 para i = 1,2,...,N + 1), onde Fi é o custo de fixação do i -º segmento.\nSaída\nProduza uma única linha com um número inteiro indicando o custo mínimo estimado entre todos os planos de expedição.",
    "samplesExamples": [
      [
        "3\n1 1\n3 8 2\n7 1 2 12",
        "19"
      ],
      [
        "2\n2\n5 1\n1 2 6",
        "12"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Daniel Bossle, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Juntando Pares",
    "text": "Alexander e Melina são bons amigos. Depois de um longo verão jogando juntos, eles finalmente tiveram que pegar o ônibus de volta para casa. Como eles tiveram um verão tão ativo, eles estavam ficando entediados com a viagem de ônibus, então Alexander desafiou Melina para um último quebra-cabeça.\nAlexander deu a Melina um pedaço de papel milimetrado com W centímetros de largura e H centímetros de altura.\nO papel foi subdividido em quadrados 1 × 1, formando um sistema de coordenadas W × H. No papel, Alexander havia desenhado muitos pontos coloridos, de tal forma que havia exatamente dois pontos de cada cor, todos os pontos estavam em coordenadas inteiras (possivelmente incluindo as bordas e cantos do papel) e não havia dois pontos no papel. mesmo lugar.\nAlexander pediu a Melina que traçasse uma linha entre cada par de pontos de cores iguais, conectando-os. As linhas que conectam os pontos não poderiam se tocar. Porém, eles poderiam assumir uma forma arbitrária (desde que permanecessem dentro do papel) e poderiam ser considerados infinitamente finos.\nMelina argumentou com Alexander que o jogo era injusto, pois não havia como satisfazer suas exigências. Alexander garantiu a ela que o jogo era justo e que ela simplesmente precisava “ficar boa” para resolver o desafio. Depois de muita discussão, os amigos decidiram incumbir você, um observador imparcial, de determinar se o jogo é justo ou não.\nNo exemplo acima, Melina consegue conectar cada par de pontos sem cruzar as linhas, portanto o jogo é justo. Pelo contrário, no exemplo abaixo, Melina não consegue ligar os dois sem cruzar a linha que liga os dois, portanto o jogo não é justo.\nEntrada\nA primeira linha contém dois inteiros W e H (1 ≤ W,H ≤ 109), indicando respectivamente a largura e a altura do papel. A segunda linha contém um inteiro N (1 ≤ N ≤ 105), representando o número de pares de pontos sorteados no papel. Cada uma das próximas N linhas contém quatro inteiros X1, Y1, X2 e Y2 (0 ≤ X1,X2 ≤ W e 0 ≤ Y1,Y2 ≤ H), representando um par de pontos da mesma cor desenhados nas coordenadas (X1,Y1 ) e (X2,Y2). Não existem dois pontos com a mesma localização.\nSaída\nProduza uma única linha com a letra maiúscula “Y” se o jogo for justo, e a letra maiúscula “N” caso contrário.",
    "samplesExamples": [
      [
        "5 5\n3\n4 0 2 5\n1 0 2 4\n4 2 1 2",
        "Y"
      ],
      [
        "5 5\n2\n4 0 3 5\n5 3 0 2",
        "N"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Dinheiro investido",
    "text": "Hoje em dia suas habilidades de programação são incríveis e você recebe regularmente muito dinheiro pelo seu trabalho. Infelizmente, suas habilidades financeiras não evoluíram da mesma forma. Assim, cada vez que você ganha algum dinheiro, basta investi-lo em um banco em um depósito a prazo de 30 dias com cláusula de renovação automática. Isso significa que 30 dias depois de você investir o dinheiro, ele será investido por mais 30 dias, repetidamente, até que você informe ao banco que deseja interromper a renovação e receber seu dinheiro de volta. Os depósitos a prazo não podem ser criados nem renovados durante finais de semana; se o período de 30 dias terminar num fim de semana, a renovação ocorre na segunda-feira imediatamente seguinte.\nComo o banco detém quase todo o seu dinheiro, você deve esperar até a renovação mais próxima sempre que quiser comprar algo que não seja comida diária. Hoje você decidiu comprar um novo smartphone para substituir seu aparelho de seis meses. Dadas as datas em que você criou cada depósito a prazo, você deve determinar o número mínimo de dias que deve esperar para receber algum dinheiro do banco.\nPor exemplo, suponha que hoje seja sábado e que você criou cinco depósitos a prazo: um depósito a prazo na segunda-feira passada, outro depósito a prazo na terça-feira passada, outro depósito a prazo na quarta-feira passada e dois depósitos a prazo ontem. O primeiro depósito (segunda-feira) seria renovado na quarta-feira, após 25 dias a partir de hoje. O segundo depósito a prazo (terça-feira) seria renovado na quinta-feira, após 26 dias a partir de hoje. O terceiro depósito a prazo (quarta-feira) seria renovado em uma sexta-feira após 27 dias a partir de hoje. Por fim, os dois últimos depósitos a prazo (sexta-feira) seriam renovados na segunda-feira após 30 dias de hoje, pois a renovação no domingo não é permitida. Assim, neste caso, você deve esperar 25 dias para retirar algum dinheiro do banco.\nEntrada\nA primeira linha contém uma string T e um inteiro N (1 ≤ N ≤ 105), indicando respectivamente o dia da semana de hoje e a quantidade de depósitos a prazo. A string é “Seg”, “Ter”, “Qua”, “Qui”, “Sex”, “Sábado” ou “Dom”, representando respectivamente que hoje é segunda, terça, quarta, quinta, sexta, sábado , ou domingo. A segunda linha contém N inteiros D1,D2,...,DN (0 ≤ Di ≤ 109 para i = 1,2,...,N), indicando o número de dias decorridos desde a criação de cada depósito a prazo. É garantido que os depósitos a prazo não foram criados nos finais de semana.\nSaída\nProduza uma única linha com um número inteiro indicando o número mínimo de dias que você deve esperar para receber algum dinheiro do banco.",
    "samplesExamples": [
      [
        "Sat 5\n5 4 3 1 1",
        "25"
      ],
      [
        "Sat 5\n3 1 4 1 5",
        "25"
      ],
      [
        "Thu 1\n0",
        "32"
      ],
      [
        "Thu 1\n30",
        "0"
      ],
      [
        "Fri 1\n31",
        "31"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Hamilton - O Musical",
    "text": "A Nlogónia é bem conhecida pela sua robusta infra-estrutura rodoviária. O país tem N cidades numeradas de 1 a N, e para cada par de cidades distintas i e j, existe uma estrada de mão dupla entre elas com comprimento Li,j.\nOs cidadãos da Nlogónia estão muito entusiasmados porque o musical Hamilton chegou ao país pela primeira vez. A organização de Hamilton quer que todos os cidadãos tenham a oportunidade de assistir ao musical, por isso querem escolher um caminho que visite cada cidade exatamente o (cid:80)n N ic =e − 1.\n1 LSu Pic ,h Pi+a 1.caminho é uma permutação P1,P2,...,PN das N cidades, e seu comprimento total é A organização teme que se deixarem os atores escolherem o caminho, eles terão que gastar muito dinheiro em combustível. Mas também temem que se não deixarem os actores escolherem nada, os actores ficarão desmotivados e poderão ter um mau desempenho em palco. Assim a organização permitiu que os atores escolhessem as cidades nas posições pares do caminho, ou seja, os atores podem escolher as cidades P2,P4,...,P2·(cid:98)N/2(cid:99) .\nDepois de muita deliberação, os atores fizeram sua escolha. Ao contrário do que seria de esperar de um grupo tão criativo, eles concordaram com um resultado um tanto enfadonho e decidiram que as posições pares deveriam ser ocupadas por cidades com o mesmo identificador de seus índices, ou seja, Pi = i para i par.\nAgora a organização precisa da sua ajuda. Você pode determinar o comprimento total mínimo de um caminho que satisfaça a decisão dos atores? Entrada\nA primeira linha contém um inteiro N (2 ≤ N ≤ 500) indicando o número de cidades na Nlogônia. As próximas N linhas contêm N inteiros cada, representando os comprimentos das estradas entre as cidades. O j-ésimo inteiro na i-ésima dessas linhas é Li,j (1 ≤ Li,j = Lj,i ≤ 109 para i = 1,2,...,N, j = 1,2,.. .,N e i (cid:54)= j), denotando o comprimento da estrada de mão dupla entre as cidades i e j. Se i = j então Li,j = 0, uma vez que não existe uma estrada real que liga uma cidade a ela mesma.\nSaída\nProduza uma única linha com um número inteiro representando o comprimento total mínimo de um caminho que visita cada cidade exatamente uma vez, satisfazendo a decisão dos atores.",
    "samplesExamples": [
      [
        "4\n0 3 2 13\n3 0 8 9\n2 8 0 5\n13 9 5 0",
        "16"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Tiago Domingos Almeida Souza, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Saindo de Yharnam",
    "text": "Eileen trabalha para uma empresa municipal de ônibus em uma cidade chamada Yharnam. Clássica e empreendedora, ela sempre quer garantir que os passageiros estejam o mais felizes possível, o que não foi muito difícil, já que não havia muita gente querendo sair da grande cidade. Recentemente, porém, algumas doenças malucas apareceram na cidade e muitos cidadãos de Yharnam decidiram partir. De ônibus, é claro.\nCada ônibus em Yharnam é formado por pares de assentos. Cada par é formado por dois assentos: o assento da janela e o assento do corredor. Esses dois assentos são considerados próximos um do outro. Cada assento pode estar vazio, o que significa que não há ninguém sentado nele, ou ocupado, o que significa que há alguém sentado nele.\nAlgumas pessoas preferem que o assento ao lado esteja vazio. Algumas pessoas gostam de ter pessoas com quem conversar, por isso preferem ter o assento ao lado do seu para ficarem ocupados. Algumas pessoas estão muito felizes por deixar Yharnam. Assim, quando se trata de felicidade em sentar no ônibus, existem três tipos de pessoas: • introvertidos: um introvertido fica feliz se conseguir uma vaga no ônibus e o assento ao lado estiver vazio; • extrovertido: um extrovertido fica feliz se conseguir uma vaga no ônibus e o assento ao lado estiver ocupado; • descontraído: uma pessoa descontraída fica feliz desde que consiga uma vaga no ônibus.\nA ordem em que as pessoas embarcam no ônibus é determinada de antemão. Durante o embarque, cada pessoa seleciona um assento e os assentos nele antes que a próxima pessoa possa escolher. Depois que alguém escolhe um assento, não pode alterá-lo. Os introvertidos evitam, tanto quanto possível, sentar-se ao lado de outro introvertido, pois conhecem a dificuldade. Fora isso, cada pessoa procede de maneira semelhante ao selecionar um assento: • Se houver algum assento vazio que a deixe feliz, a pessoa seleciona um desses assentos de maneira uniforme e aleatória.\n• Se houver algum assento vazio, mas nenhum deles o deixar feliz, um extrovertido seleciona um assento vazio uniformemente e aleatoriamente, enquanto um introvertido seleciona um assento uniformemente aleatoriamente entre os assentos vazios que não estão próximos aos introvertidos ou entre todos os assentos vazios. assentos, caso todos os assentos vazios sejam próximos aos introvertidos. Observe que isso não pode acontecer com uma pessoa tranquila.\n• Se não houver lugares vazios, a pessoa sai do ônibus resmungando.\nEileen define a felicidade de um ônibus como o número de passageiros felizes nele quando o ônibus está pronto para partir, ou seja, depois que todos embarcaram ou não há assentos vazios. Com mais ônibus saindo de Yharnam e mais passageiros nesses ônibus, garantir a felicidade de todos tornou-se mais difícil do que nunca.\nA estratégia atual de Eileen para maximizar o número de passageiros felizes é deixar embarcar primeiro todas as pessoas descontraídas, depois todos os extrovertidos e, por fim, os introvertidos. Ela explica sua estratégia da seguinte maneira: primeiro deixe as pessoas caóticas e fáceis de agradar encontrarem seu caminho no ônibus, depois deixe os extrovertidos ficarem felizes sentando-se perto de uma pessoa descontraída ou de outra extrovertida e, finalmente, deixe alguns introvertidos sortudos olharem para eles. para um assento tranquilo.\nEmbora a estratégia de Eileen seja sensata, as avaliações de viagem recebidas dos passageiros mostram uma tendência decrescente. É por isso que ela veio até você pedindo ajuda.\nAntes de fazer qualquer alteração na forma como os passageiros embarcam no ônibus, Eileen quer entender melhor sua abordagem atual. Um ônibus formado por N pares de assentos está prestes a sair de Yharnam.\nEileen sabe que G pessoas descontraídas, I introvertidos e E extrovertidos estão prontos para embarcar. Ela quer saber a felicidade esperada do ônibus, já que os tranquilos embarcam primeiro, seguidos pelos extrovertidos e por último os introvertidos.\nEntrada\nA entrada consiste em uma única linha que contém quatro inteiros N, G, I e E (0 ≤ N,G,I,E ≤ 106), conforme descrito na instrução.\nSaída\nA felicidade esperada do ônibus pode ser expressa como uma fração irredutível P/Q. Saída\no restante da divisão de P × Q(cid:48) por 109 + 7, onde Q(cid:48) é o inverso multiplicativo modular de Q, ou seja, Q × Q(cid:48) ≡ 1 (mod 109 + 7 ).",
    "samplesExamples": [
      [
        "1 0 1 1",
        "1"
      ],
      [
        "10 0 11 0",
        "9"
      ],
      [
        "2 2 1 0",
        "333333338"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Maneira mais ordenada",
    "text": "Sofia recebeu N tarefas da escola, numeradas de 1 a N. Para cada tarefa ela conhece dois valores T e D (hora e prazo), indicando que a tarefa leva T minutos para ser concluída e deve ser concluída no máximo D minutos a partir de agora.\nSofia pode fazer as tarefas em qualquer ordem, ela pode fazer uma tarefa por vez e, uma vez iniciada uma tarefa, ela continua trabalhando nela até que a tarefa seja concluída. Sofia só gasta tempo fazendo as tarefas. Isso significa que ela pode começar a trabalhar agora mesmo, e cada vez que completar uma tarefa ela pode começar a trabalhar em uma nova imediatamente, sem fazer pausas (que trabalho duro, hein?).\nSofia é perfeccionista e quer cumprir todas as tarefas. Originalmente, ela queria fazer as tarefas na ordem que lhe foi dada, mas logo percebeu que essa restrição poderia fazer com que as tarefas não fossem concluídas no prazo. Assim, se existem várias formas de cumprir as tarefas dentro dos prazos, Sofia quer concluí-las da forma “mais ordenada”. Você pode dizer a ela como organizar seu trabalho? O tempo está se esgotando, ela precisa do seu conselho imediatamente.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 5000) representando o número de atribuições.\nCada uma das próximas N linhas descreve uma tarefa com dois inteiros T e D (1 ≤ T ≤ D ≤ 109), indicando que a tarefa leva T minutos para ser concluída e deve ser concluída no máximo até D minutos a partir de agora.\nSaída\nProduza uma única linha com uma permutação dos inteiros de 1 a N descrevendo uma ordem na qual as atribuições podem ser feitas de forma a completar cada uma delas no prazo, ou o caracter “*” (asterisco) se tal ordem não existir . Se mais de uma permutação permitir concluir as tarefas no prazo, produza a menor permutação lexicograficamente.",
    "samplesExamples": [
      [
        "2\n5 9\n5 9",
        "*"
      ],
      [
        "3\n6 6\n2 9\n2 1000",
        "1 2 3"
      ],
      [
        "3\n6 6\n2 1000\n2 9",
        "1 3 2"
      ],
      [
        "3\n30 100\n20 100\n10 100",
        "1 2 3"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Naim Shaikhzadeh Santos, Brasil"
    },
    "hasImages": false
  }
]