[
  {
    "name": "Tomadas",
    "text": "Finalmente, o time da Universidade conseguiu a classificação para a Final Nacional da Maratona de Programação da SBC. Os três membros do time e o técnico estão ansiosos para bem representar a Universidade, e além de treinar muito, preparam com todos os detalhes a sua viagem a São Paulo, onde será realizada a Final Nacional.\nEles planejam levar na viagem todos os seus vários equipamentos eletrônicos: celular, tablet, notebook, ponto de acesso wifi, câmeras, etc, e sabem que necessitarão de várias tomadas de energia para conectar todos esses equipamentos. Eles foram informados de que ficarão os quatro no mesmo quarto de hotel, mas já foram alertados de que em cada quarto há apenas uma tomada de energia disponível.\nPrecavidos, os três membros do time e o técnico compraram cada um uma régua de tomadas, permitindo assim ligar vários aparelhos na única tomada do quarto de hotel; eles também podem ligar uma régua em outra para aumentar ainda mais o número de tomadas disponíveis. No entanto, como as réguas têm muitas tomadas, eles pediram para você escrever um programa que, dado o número de tomadas em cada régua, determine o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.\nEntrada\nA entrada consiste de uma linha com quatro números inteiros T1, T2, T3, T4, indicando o número de tomadas de cada uma das quatro réguas (2 ≤ Ti ≤ 6).\nSaída\nSeu programa deve produzir uma única linha contendo um único número inteiro, indicando o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.\nExemplos",
    "samples": [
      [
        "2 4 3 2",
        "8"
      ],
      [
        "6 6 6 6",
        "21"
      ],
      [
        "2 2 2 2",
        "5"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Triângulo",
    "text": "Ana e suas amigas estão fazendo um trabalho de geometria para o colégio, em que precisam formar vários triângulos, numa cartolina, com algumas varetas de comprimentos diferentes. Logo elas perce beram que não dá para formar triângulos com três varetas de comprimentos quaisquer: se uma das varetas for muito grande em relação às outras duas, não dá para formar o triângulo.\nNeste problema, você precisa ajudar Ana e suas amigas a determinar se, dados os comprimentos de quatro varetas, é ou não é possível selecionar três varetas, dentre as quatro, e formar um triângulo.\nEntrada\nA entrada é composta por apenas uma linha contendo quatro números inteiros A,B,C e D (1 ≤ A,B,C,D ≤ 100).\nSaída\nSeu programa deve produzir apenas uma linha contendo apenas um caractere, que deve ser ‘S’ caso seja possível formar o triângulo, ou ‘N’ caso não seja possível formar o triângulo.\nExemplos",
    "samples": [
      [
        "6 9 22 5",
        "S"
      ],
      [
        "14 40 12 60",
        "N"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo da Memória",
    "text": "Pedro e Paulo resolveram complicar um pouco o tradicional Jogo da Memória, em que os jogadores precisam virar duas cartas iguais. Eles colocam N cartas no chão, com as faces viradas para baixo.\nA face de cada carta tem a figura de um número de 1 até N/2, sendo que exatamente duas cartas possuem a figura de cada número entre 1 e N/2. Como as cartas têm as faces viradas para baixo, elas podem também ser identificadas por suas posições, que são inteiros de 1 a N.\nPedro e Paulo então desenham no chão, usando giz, algumas linhas ligando pares de cartas, de modo que para qualquer par de cartas (A,B) existe uma e apenas uma sequência de cartas e linhas desenhadas que leva de A até B. A figura abaixo mostra um exemplo de jogo, (a) com todas as cartas com as faces viradas para baixo, e (b) com todas as cartas com as faces viradas para cima.\nO jogo é jogado com todas as cartas com as faces viradas para baixo. A cada jogada, o jogador deve escolher um par de cartas A e B. Se as faces das duas cartas escolhidas têm a mesma figura, o jogador acumula um número de pontos igual ao número de linhas desenhadas que existem no caminho entre as cartas A e B.\nPedro e Paulo, agora, estão estudando qual é a melhor estratégia para esse jogo e precisam da sua ajuda para resolver uma tarefa específica: dadas as cartas existentes em cada posição, e as ligações desenhadas com giz, calcular o maior valor total de pontos que é possível acumular.\nEntrada\nA primeira linha da entrada contém o número de cartas N (2 ≤ N ≤ 50000, N é par). A segunda linha da entrada contém N inteiros Ci, indicando qual número está anotado na carta na posição i (1 ≤ Ci ≤ N/2, para 1 ≤ i ≤ N). As cartas são dadas na ordem crescente das posições: a primeira carta ocupa a posição 1, a segunda a posição 2, e assim por diante até a última carta, que ocupa a posição N. Cada uma das N − 1 linhas seguintes contém dois números A e B, indicando que existe uma linha desenhada entre as cartas nas posições A e B (1 ≤ A ≤ N e 1 ≤ B ≤ N).\nSaída\nSeu programa deve produzir uma linha contendo um inteiro, o maior valor total de pontos que é possível acumular.\nExemplos",
    "samples": [
      [
        "6\n3 2 1 1 2 3\n1 2\n3 4\n6 5\n2 6\n3 6",
        "5"
      ],
      [
        "8\n1 2 3 3 2 4 1 4\n1 2\n2 3\n2 6\n5 6\n6 8\n7 8\n4 7",
        "12"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Quebra-cabeça",
    "text": "Discussões recentes na Internet causaram uma onda de renovado interesse em quebra-cabeças de lógica.\nNeste problema a sua tarefa é escrever um programa que resolva quebra-cabeças como o mostrado na figura abaixo, muito comum em revistas de desafios lógicos. Nesse quebra-cabeças, as letras dentro do quadriculado representam variáveis, e os números representam as somas dos valores das variáveis em cada linha ou coluna.\nO objetivo desse tipo de quebra-cabeça é determinar o valor de cada variável de modo a satisfazer as somas das linhas e colunas mostradas. Mas como esse tipo de quebra-cabeças é para crianças, ele tem uma propriedade que o torna mais fácil de encontrar a solução: sempre é possível encontrar uma linha ou coluna em que há apenas uma variável cujo valor ainda é desconhecido. Assim, uma possível maneira de resolver o problema é, a cada passo da solução, encontrar o valor de uma variável.\nDado um quebra-cabeça, você deve determinar os valores das variáveis que o solucionam.\nEntrada\nA primeira linha contém dois inteiros L (1 ≤ L ≤ 100) e C (1 ≤ C ≤ 100) indicando o número de linhas e o número de colunas do quebra-cabeça. Cada uma das L linhas seguintes contém C nomes de variáveis, seguidos de um inteiro S, a soma resultante das variáveis dessa linha (−108 ≤ S ≤ 108). A última linha contém C inteiros Xi (−108 ≤ Xi ≤ 108), indicando respectivamente a soma das variáveis na coluna i. Nomes de variáveis são formados por precisamente duas letras minúsculas, de ’a’ a ’z’.\nTodos os quebra-cabeças têm solução única, em que todas as variáveis são números inteiros.\nSaída\nSeu programa deve produzir uma linha para cada variável do quebra-cabeças, contendo o nome da variável e o seu valor inteiro. As variáveis devem ser escritas em ordem alfabética crescente, ou seja, respeitando a ordem aa,ab,...,az,ba,bb,...,za,zb,...,zz.\nExemplos",
    "samples": [
      [
        "4 5\ndf bb cg df df 11\nee az cg az ee 6\ndf cg cg df df 10\naz az cg az az 6\n6 7 8 6 6",
        "az 1\nbb 3\ncg 2\ndf 2\nee 1"
      ],
      [
        "3 4\naa bb cc dd 10\naa bb cc dd 10\naa bb cc dd 10\n3 6 9 12",
        "aa 1\nbb 2\ncc 3\ndd 4"
      ],
      [
        "3 3\naa zz aa 27\nvv zz aa -5\nkk kk aa 40\n15 -7 54",
        "aa 18\nkk 11\nvv -14\nzz -9"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Guardiões Curiosos",
    "text": "Oa é um dos mundos mais antigos do universo DC, é lá que habitam os guardiões do universo. Eles administram a tropa dos lanternas verdes, uma das maiores forças do universo! Todos sabem que os lanternas verdes sabem voar devido ao poder do anel, porém nem todos os habitantes de Oa fazem parte da tropa. Para esses habitantes está difícil se locomover entre as cidades, pois não há estradas! Os guardiões desejam conectar as cidades de Oa construindo algumas estradas. Existem N cidades em Oa, e eles desejam construir N −1 estradas de duas mãos, de tal forma que seja possível chegar de uma cidade até qualquer outra, direta ou indiretamente. Os guardiões também não desejam privilegiar demais nenhuma cidade, por isso eles estabeleceram que nenhuma cidade pode ter mais de K estradas.\nPor exemplo, se temos três cidades e K vale 2, temos as três opções: 1 2 3 ou 1 3 2 ou 3 1 2 Os guardiões, porém, são muito curiosos, e perguntaram aos lanternas verdes se eles eram capazes de dizer de quantas formas é possível construir N −1 estradas obedecendo estas restrições. Sua tarefa, como membro da tropa dos lanternas verdes é, dados N e K, satisfazer a curiosidade dos guardiões.\nEntrada\nA entrada consiste de uma única linha que contém dois números inteiros N (1 ≤ N ≤ 102) e K (1 ≤ K ≤ N).\nSaída\nSeu programa deve produzir uma única linha, contendo um único número inteiro, a resposta do problema. Como essa resposta pode ser muito grande, imprima-a módulo 109 + 7.\nExemplos",
    "samples": [
      [
        "3 2",
        "3"
      ],
      [
        "4 1",
        "0"
      ],
      [
        "4 3",
        "16"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Palíndromo",
    "text": "Um palíndromo é uma cadeia de caracteres tal que sua reversão é igual à cadeia original. Em outras palavras, é uma cadeia que, quando lida de trás pra frente, é igual à cadeia original. Por exemplo BANANAB é um palíndromo, enquanto BANANAS não. Neste problema estamos interessados em uma questão um pouco mais interessante.\nDada uma cadeia S, queremos encontrar uma subsequência que seja um palíndromo. Uma sub sequência é uma cadeia que pode ser obtida a partir da remoção de zero ou mais caracteres da cadeia original. Por exemplo ANNA é uma subsequência de BANANAS.\nSerá dado também um conjunto de posições de S que chamamos de posições especiais. Sua tarefa é encontrar o tamanho da subsequência que seja um palíndromo e que contenha o maior número de posições especiais possível. Caso exista mais de uma subsequência maximizando o número de posições especiais, você deve imprimir o tamanho da maior delas.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém uma cadeia de caracteres maiúsculos S com pelo menos 1 e no máximo 2000 caracteres. A segunda linha contém um inteiro N, 0 ≤ N ≤ |S|, indicando o número de posições especiais que estamos interessados em incluir no palíndromo, seguido de N números distintos, entre 1 e |S|, inclusive, contendo as posições especiais de S.\nSaída\nSeu programa deve imprimir um único inteiro, representando o tamanho do maior palíndromo possível, como definido acima.\nExemplos",
    "samples": [
      [
        "BANANAS\n0",
        "5"
      ],
      [
        "BANANAS\n1 7",
        "1"
      ],
      [
        "ACDAAACX\n3 2 3 8",
        "3"
      ],
      [
        "MARATONA\n4 3 1 5 2",
        "3"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.\nExemplos",
    "samples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Tri-du",
    "text": "Tri-du é um jogo de cartas derivado do popular jogo de Truco. O jogo utiliza um baralho normal de 52 cartas, com treze cartas de cada naipe, mas os naipes são ignorados. Apenas o valor das cartas, considerados como inteiros de 1 a 13, são utilizados.\nNo jogo, cada jogador recebe três cartas. As regras são simples: • Um trio (três cartas de mesmo valor) ganha de uma dupla (duas cartas de mesmo valor).\n• Um trio formado por cartas de maior valor ganha de um trio formado por cartas de menor valor.\n• Uma dupla formada por cartas de maior valor ganha de uma dupla formada por cartas de menor valor.\nNote que o jogo pode não ter ganhador em muitas situações; nesses casos, as cartas distribuídas são devolvidas ao baralho, que é embaralhado e uma nova partida é iniciada.\nUm jogador já recebeu duas das cartas que deve receber, e conhece seus valores. Sua tarefa é escrever um programa para determinar qual o valor da terceira carta que maximiza a probabilidade de esse jogador ganhar o jogo.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros, A (1 ≤ A ≤ 13) e B (1 ≤ B ≤ 13) indicando os valores das duas primeiras cartas recebidas.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o valor da carta que maximiza a probabilidade de o jogador ganhar a partida.\nExemplos",
    "samples": [
      [
        "10 7",
        "10"
      ],
      [
        "2 2",
        "2"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Bolsa de Valores",
    "text": "Um investidor principiante deseja aprender a investir na bolsa de valores. Como ele não tem ex periência, selecionou uma única empresa, e acompanhou os valores diários das ações dessa empresa, durante N dias. Ficou curioso quanto teria ganhado se tivesse investido nesse período em que acompa nhou os valores. Na verdade, o investidor é milionário e tem muito dinheiro, suficiente para comprar qualquer quantidade de ações da empresa. Entretanto, como é um investidor cuidadoso, decidiu que nunca teria mais do que uma ação da empresa.\nComo sempre há intermediários, a corretora de valores cobra uma taxa fixa de C reais a cada compra de uma ação da empresa.\nVocê deve calcular qual o lucro máximo que o investidor poderia ter auferido, investindo durante alguns dos N dias, podendo inclusive decidir não investir.\nEntrada\nA primeira linha contém dois inteiros, N e C (1 ≤ N ≤ 2 × 105 e 0 ≤ C ≤ 30).\nA segunda linha contém as N cotações P1,P2,...,PN, dos dias 1,2,...,N, respectivamente. Cada cotação Pi satisfaz as desigualdades 1 ≤ Pi ≤ 1000.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o lucro máximo do investidor, em reais.\nExemplos",
    "samples": [
      [
        "6 10\n100 120 130 80 50 40",
        "20"
      ],
      [
        "5 10\n70 80 50 40 50",
        "0"
      ],
      [
        "13 30\n10 80 20 40 30 50 40 60 50 70 60 10 200",
        "220"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Mania de Par",
    "text": "Patrícia é uma ótima desenvolvedora de software. No entanto, como quase toda pessoa brilhante, ela tem algumas manias estranhas, e uma delas é que tudo que ela faz tem que ser em número par.\nMuitas vezes essa mania não atrapalha, apesar de causar estranhamento nos outros. Alguns exemplos: ela tem que fazer diariamente um número par de refeições; no café da manhã toma duas xícaras de café, duas torradas e duas fatias de queijo; sempre que vai ao cinema compra dois bilhetes de entrada (felizmente sempre tem um amigo ou amiga lhe acompanhando); e toma dois banhos por dia (ou quatro, ou seis...).\nMas algumas vezes essa mania de Patrícia atrapalha. Por exemplo, ninguém gosta de viajar de carro com ela, pois se no trajeto ela tem que pagar pedágios, o número de pedágios que ela paga tem que ser par.\nPatrícia mora em um país em que todas as estradas são bidirecionais e têm exatamente um pedágio.\nEla precisa ir visitar um cliente em uma outra cidade, e deseja calcular o mínimo valor total de pedágios que ela tem que pagar, para ir da sua cidade à cidade do cliente, obedecendo à sua estranha mania de que o número de pedágios pagos tem que ser par.\nEntrada\nA entrada consiste de diversas linhas. A primeira linha contém 2 inteiros C e V , o número total de cidades e o número de estradas (2 ≤ C ≤ 104 e 0 ≤ V ≤ 50000). As cidades são identificadas por inteiros de 1 a C. Cada estrada liga duas cidades distintas, e há no máximo uma estrada entre cada par de cidades. Cada uma das V linhas seguintes contém três inteiros C1, C2 e G, indicando que o valor do pedágio da estrada que liga as cidades C1 e C2 é G (1 ≤ C1,C2 ≤ C e 1 ≤ G ≤ 104). Patrícia está atualmente na cidade 1 e a cidade do cliente é C.\nSaída\nUma única linha deve ser impressa, contendo um único inteiro, o custo total de pedágios para Patrícia ir da cidade 1 à cidade C, pagando um número par de pedágios, ou, se isso não for possível, o valor −1.\nExemplos",
    "samples": [
      [
        "4 4\n1 2 2\n2 3 1\n2 4 10\n3 4 6",
        "12"
      ],
      [
        "5 6\n1 2 3\n2 3 5\n3 5 2\n5 1 8\n2 4 1\n4 5 4",
        "-1"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Espiral",
    "text": "Dado um tabuleiro de dimensões N × N, gostaríamos de colocar feijões, um grão em cada quadrado, seguindo uma 1 espiral como mostrado na figura. Começando do canto L superior esquerdo, com coordenadas (1,1), e depois indo para a direita enquanto possível, depois para baixo en q du epan oit so pp ao rass´ cıv imel a, ed ne qp uo ais ntp oar pa ose ss íq vu ele .rd Ra epe en tq imua on st eo ssp eo pss aí dv re ãl oe , direita-baixo-esquerda-cima, até que B grãos de feijão se jam colocados no tabuleiro. O problema é: dados N e B, em que coordenadas será colocado o último grão de feijão? Na figura, para N = 8 e B = 53, o último grão foi colocado no quadrado de coordenadas (4,6).\nEntrada\nA entrada contém apenas uma linha com dois inteiros, N e B, onde 1 ≤ N ≤ 230 and 1 ≤ B ≤ N2.\nSaída\nSeu programa deve produzir uma única linha com dois inteiros L e C representando as coordenadas do último grão de feijão.\nExemplos",
    "samples": [
      [
        "8 53",
        "4 6"
      ],
      [
        "1073741824 1152921504603393520",
        "536871276 536869983"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Jogo de Estratégia",
    "text": "Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas.\nDado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J,R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram.\nOs Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive.\nSaída\nSeu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador ven cedor.\nExemplos",
    "samples": [
      [
        "3 3\n1 1 1 1 2 2 2 3 3",
        "3"
      ],
      [
        "2 3\n0 0 1 0 2 0",
        "1"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ominobox",
    "text": "O planeta de Skyrk nunca vai conhecer a paz enquanto o malvado Mago estiver livre. Dessa vez, o malicioso plano do Mago foi armar uma bomba no meio da maior cidade do planeta. Mago aprecia observar o caos, então, ao invés de explodir a bomba imediatamente, ele colocou um temporizador na bomba e a deixou junto com um desafio. A bomba tem um teclado, e a solução do desafio desarma a bomba.\nO desafio se chama Ominobox; ele consiste de uma caixa retangular com alguns cubos unitários dentro e de uma coleção de todos os possíveis N-ominos. Skyrk deve soltar todo omino em algum lugar da caixa para ganhar pontos. A pontuação máxima é a solução do Ominobox.\nUm N-omino é uma coleção de N quadrados unitários arranjados com lados coincidentes. Um 1-omino é um quadrado unitário, e um N-omino é um (N − 1)-omino com pelo menos um dos seus lados ligados a um quadrado unitário.\nA caixa tem uma superfície retangular e paredes verticais; cada um dos quadrados de um sistema Cartesiano de coordenadas em grade colocado na superfície da caixa possui uma pilha não negativa de cubos unitários. Os cubos não podem ser movidos.\nSkyrk irá alinhar cada omino com os quadrados da grade, e soltá-lo na caixa. O omino irá cair até tocar um cubo ou o fundo. Não é permitido que Skyrk reflita ou rotacione o omino, e ele deve situar-se completamente dentro dos limites da caixa. O número de pontos obtidos após soltá-lo é a distância entre o omino e o topo da caixa. Após soltá-lo, Skyrk anota o número de pontos, remove o omino, e solta o próximo. A pontuação final é a soma de todos os pontos.\nO tempo está passando e a contagem regressiva na bomba diz 5:00 (cinco horas!). Você consegue descobrir a pontuação máxima que Skyrk pode obter para desarmar a bomba e salvar o destino do planeta das mãos do vil Mago? Entrada\nA primeira linha contém T (T ≤ 200) — o número de desafios, após essa linha haverá T desafios.\nCada desafio começa com uma linha com quatro inteiros R, C, H e N (1 ≤ R,C,H ≤ 30; 1 ≤ N ≤ 10) — as dimensões da superfície da caixa são R × C, a altura é H, e a ordem dos ominos é N. Cada uma das próximas R linhas contém C inteiros Hi,j (0 ≤ Hi,j ≤ H) — o número de cubos no quadrado (i,j) da grade.\nSaída\nPara cada desafio, imprima uma linha contendo X, onde X é a solução do Ominobox.\nExemplos\nNotas\nFig. 1 Fig. 2 Fig. 3 Fig. 4 Fig. 5 Fig. 6 Fig. 7 Fig. 8 No primeiro desafio, Fig. 1 mostra a melhor maneira de colocar o único 1-omino. O omino atinge o fundo da caixa na posição (1,0) e possui distância de 3 até o topo da caixa. Esta configuração rende um total de 3 pontos.\nNo segundo desafio, Fig. 2 e Fig. 3 mostram as melhores maneiras de colocar os dois 2-ominos.\nNa Fig. 2 o omino atinge a pilha de cubos de altura 1 na posição (0,0) e possui distância de 2 até o topo de caixa. Na Fig. 3 o omino atinge a pilha de cubos de altura 2 na posição (0,1) e possui uma distância de 1 até o topo de caixa. Esta configuração rende um total de 3 pontos.\nNo terceiro desafio, Fig. 4 mostra a melhor maneira de colocar o único 3-omino que cabe dentro da caixa. Esta configuração rende um total de 1 ponto.\nNo quarto desafio, Fig. 5-8 mostram as melhores maneiras de colocar os quatro 4-ominos que cabem dentro da caixa. Esta configuração rende um total de 5 pontos.",
    "samples": [
      [
        "4\n2 2 3 1\n1 2\n0 3\n2 2 3 2\n1 2\n0 3\n2 2 3 3\n1 2\n0 3\n2 3 5 4\n1 2 5\n0 3 4",
        "3\n3\n1\n5"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Loteria",
    "text": "A loteria BWS é feita anualmente. Nela N pessoas apostam escolhendo K números cada uma. De modo formal, podemos dizer que Bij é o j-ésimo valor apostado pela i-ésima pessoa. Então os orga nizadores escolhem K inteiros positivos. Os números escolhidos são chamados de W1,W2,...,WK.\nOs vencedores são calculados da seguinte maneira: • Um subconjunto não vazio dos N participantes é escolhido aleatoriamente, ou seja, alguns par ticipantes são escolhidos por pura sorte.\n• Para cada pessoa neste subconjunto é calculado o valor S1, que é a soma de todos os primeiros números apostados por elas, ou seja, a soma de Bi1, onde i seria oíndice de cada pessoa escolhida.\nDa mesma maneira os valores S2,...,SK são calculados.\n• É feito um teste de paridade entre Wj e Sj, ou seja, é testado se as paridades (se o número é par ou ímpar) casam entre W1 e S1, W2 e S2, e assim por diante até WK e SK.\n• Se todas as paridades casam, então este conjunto de pessoas é considerado vencedor! Os organizadores querem saber: é possível escolher os números W1,W2,...,WK de forma que não exista nenhum subconjunto de participantes vencedor? Entrada\nA primeira linha contém os números N (1 ≤ N ≤ 104) e K (3 ≤ K ≤ 50), representando o número de participantes e a quantidade de números apostados por cada pessoa respectivamente. As pessoas apostam em inteiros maiores do que 1 e menores do que 50, inclusive. Cada uma das N linhas seguintes contém K números, representando as apostas de cada pessoa, uma pessoa por linha.\nSaída\nImprima ‘S’ caso seja possível ou ‘N’ caso contrário.\nExemplos",
    "samples": [
      [
        "2 3\n1 2 3\n5 6 7",
        "S"
      ],
      [
        "3 3\n3 2 1\n6 5 4\n4 4 4",
        "S"
      ],
      [
        "4 3\n9 4 7\n4 4 4\n2 7 2\n2 2 1",
        "N"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Competition",
    "text": "Bob and Alice are participating in a programming contest as a team.\nThe contest has N problems which must be solved in order. Naturally there are some problems that they cannot solve, in that case they can skip it. There may be also problems that only Bob or Alice alone can solve.\nThey want to solve all the problems possible switching as few times as possible who is at the computer programming the solution.\nGiven the number of problems and the problems that Bob and Alice can solve, calculate the minimum number of switches between the usage of the computer. Anyone can start using it.\nInput\nThe first line contains three integers N (1 ≤ N ≤ 109), A (1 ≤ A ≤ min(N,5 ∗ 104)) and B (1 ≤ B ≤ min(N,5 ∗ 104)). The next line contains A unique integers denoting the problems Alice can solve. The following line contains B unique integers denoting the problems Bob can solve. The first problem is denoted by the number 1, the second by number 2, the N-th by N, and so on.\nOutput\nPrint the minimum number of switches between the usage of the computer.",
    "samples": [
      [
        "5 2 3\n2 4\n1 5 3",
        "4"
      ],
      [
        "4 3 3\n1 2 3\n2 3 4",
        "1"
      ],
      [
        "4 3 3\n1 3 4\n4 3 1",
        "0"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Bruno Junqueira Adami, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "The return of the King",
    "text": "The prolific author Stephen King was entering the grades of his literature students in an on-line general average calculator. When he finished, he noticed his return key was broken so instead of entering the grades of a student in a separate line each, he entered them in a single line without any separation.\nSince Mr. King does not have the skills to fix his return key right away, he needs you to calculate the average of the grades of the student from the non-separated input.\nEach grade is an integer between 1 and 10. All grades were entered written in base 10 without leading zeros. For example, if the grades of Mr. King’s student were 3, 10, 1 and 10 they would be entered as “310110”.\nInput\nThe input consists of a single line that contains a non-empty string S of at most 100 base 10 digits.\nThere is a unique way to partition S into a list of substrings such that each substring represents an integer between 1 and 10 in base 10 without leading zeros.\nOutput\nOutput a line with a rational number representing the average of the grades of the student whose grades Mr. King entered as S. The result must be output as a rational number with exactly two digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "310110",
        "6.00"
      ],
      [
        "10910",
        "9.67"
      ],
      [
        "222222223",
        "2.11"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "The fellowship of the ring",
    "text": "Box is a really violent sport. To compensate, there is a code of conduct to maintain chivalry and fellowship atop the ring in friendly matches. One of the most well known rules of this code of conduct is to avoid hitting the opponent below the waist or above the neck.\nGiven the heights of the waist and neck of an opponent, and the heights of a set of punches, calculate how many of those punches are fair according to the rule above.\nInput\nThe first line contains three integers W, N and P, representing respectively the height of the waist of the opponent, the height of his neck, and the number of thrown punches (1 ≤ W < N ≤ 200 and 1 ≤ P ≤ 100). The second line contains P integers H1,H2,...,HP (1 ≤ Hi ≤ 200 for i = 1,2,...,P) indicating the heights of the punches. All heights are given in centimeters.\nOutput\nOutput a line with an integer representing the number of punches that are fair, according to the code of conduct.",
    "samples": [
      [
        "80 150 3\n10 100 160",
        "1"
      ],
      [
        "80 150 3\n80 100 150",
        "3"
      ],
      [
        "2 199 5\n2 1 200 199 1",
        "2"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "D as in Daedalus",
    "text": "Daedalus is playing the game of “Don’t be greedy”, in which N players sit around a table having each of them five cards labelled 1, 10, 100, 1000 and 10000 points. In “Don’t be greedy” the players may not talk to each other once the game starts, and there are M rounds. In each round, the bank announces a budget B. Then each player chooses one of the cards and places it, face down, on the table. The bank then turns the cards, so that all players can see all N cards. If the sum of the points in the chosen cards is less than or equal to B, then the bank gives to each player exactly the amount of points in the card he or she chose. Otherwise, no one gets anything. Each player gets his or her card back before the next round. The players are very rational and would like to maximize their points and minimize their regrets! What would you do in this situation? Cooperate or defect? Take the following table as an example. Daedalus won a total of 10 points, in the end, because only the first round was successful. But, looking back on the game, he sees that he could have won 110 points, if he had chosen 100 points in the first round and 10 points in the third round. That is, Daedalus could have won 100 extra points! This holds only, of course, assuming the cards chosen by the other players remain unchanged.\nround budget B Daedalus Iapyx Icarus Ariadne Minos sum result 1 300 10 100 10 1 10 131 success 2 1100 100 10 100 1 1000 1211 fail 3 1200 100 100 10 1 1000 1211 fail Given the budget and the cards chosen in each round, we need to compute the maximum total number of extra points Daedalus could have won, in the end, if he had chosen the best possible card in each round, assuming the cards chosen by the other players remain unchanged.\nInput\nThe first line contains two integers N and M, representing respectively the number of players and the number of rounds (1 ≤ N ≤ 20 and 1 ≤ M ≤ 50). Each of the next M lines describes a round with an integer B indicating the budget (1 ≤ B ≤ 106), followed by N integers C1,C2,...,CN representing that the i-th player chose the card labelled with Ci points during that round (Ci ∈ {1,10,100,1000,10000} for i = 1,2,...,N). Daedalus is the first player.\nOutput\nOutput a line with an integer representing the maximum total number of extra points Daedalus could have won, if he had chosen the best possible card in each round, assuming the cards chosen by the other players remain unchanged.",
    "samples": [
      [
        "5 3\n300 10 100 10 1 10\n1100 100 10 100 1 1000\n1200 100 100 10 1 1000",
        "100"
      ],
      [
        "3 2\n2000 1000 1000 1000\n21 1 1 10",
        "9"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Guilherme Albuquerque Pinto, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "Galactic taxes",
    "text": "The year is 2115. The Interplanetary Commercial Planning Center (ICPC) is supported by the Autonomous Communication Ministry (ACM).\nA commercial operation is performed executing transactions between connected ACM offices through out the galaxy. The execution of a transaction between two connected ACM offices involves a non negative tax whose value increases, or decreases, continuously as a linear function A × t + B of time t, where t is a real number measured in minutes during the day (0 ≤ t ≤ 24 × 60).\nThe total tax of a commercial operation performed between a source ACM office and a destination ACM office at some time t, is calculated as the minimum possible sum of the taxes of the executed transactions between the ACM offices visited along some path from the source ACM office to the destination ACM office. The tax of each transaction is calculated at the same time t.\nSince the tax of the transactions between connected ACM offices is continually changing during the day, it would be better to perform the commercial operation at some specific time in the day, in order to maximize the collected tax. At that time, ACM decides to perform the commercial operation, and not before or after.\nYour task is to write a program that receives as input the description of the ACM office network and returns as output the maximum total tax of the commercial operation that can be achieved during the day, that is, the maximum total tax that ACM can collect.\nInput\nThe first line contains two integers N and M, representing respectively the number of ACM offices in the network, and the number of connections (2 ≤ N ≤ 1000 and 1 ≤ M ≤ 104). The ACM offices are identified with distinct integers from 1 to N, being 1 the source ACM office and N the destination ACM office. Each of the next M lines describes a connection with four integers I, J, A and B, indicating that there is a bidirectional connection between office I and office J (1 ≤ I < J ≤ N), such that the tax of a transaction executed between office I and office J at time t is defined by the formula A×t+B (−100 ≤ A ≤ 100 and 0 ≤ B ≤ 106). Taxes are non-negative, so A×t+B ≥ 0 for 0 ≤ t ≤ 24×60. There is at most one connection between each pair of ACM offices, and there is at least one path between the source ACM office and the destination ACM office.\nOutput\nOutput a line with a rational number representing the maximum total tax that ACM can collect.\nThe result must be output as a rational number with exactly five digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "2 1\n1 2 1 0",
        "1440.00000"
      ],
      [
        "5 8\n1 2 27 610658\n2 3 -48 529553\n3 4 -6 174696\n4 5 47 158238\n3 5 84 460166\n1 3 -21 74502\n2 4 -13 858673\n1 5 -90 473410",
        "419431.27273"
      ],
      [
        "3 3\n1 2 1 0\n2 3 1 0\n1 3 -1 1440",
        "960.00000"
      ],
      [
        "4 5\n1 2 1 0\n2 4 2 0\n1 4 0 500\n1 3 -1 1440\n3 4 -2 2880",
        "500.00000"
      ],
      [
        "2 1\n1 2 0 0",
        "0.00000"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Rafael Armando Garcia Gomez, Colombia"
    },
    "hasImages": false
  },
  {
    "name": "Keep it energized",
    "text": "The Incredible Consoles Production Company (ICPC) is now designing its newest video game console model, the Super-Arcade Reloaded (SAR). The launch of the SAR will be accompanied by the release of a flagship game, which will only be available to its users. This game, which incidentally shall be called Adventures of Captain Mikado (ACM), even features an in-game currency which can be conveniently bought using real-world money! The ACM is a very simple game consisting of N levels numbered 1,2,...,N, the i-th level requiring exactly Ei units of energy to be completed. This means that in order to complete that level, the user’s energy should be at least Ei, and after doing so it will decrease in exactly that amount. To win the game the user should complete all the levels in increasing order, starting at level 1 and continuing until level N without ever going back to some already-completed level.\nInitially the user starts with no energy, and in order to get some he must buy energy packs from the in-game shops distributed among the N levels. There are M such shops. Each shop sells an energy pack having a strength S and a cost C that depend on the shop. The user can only buy energy packs from the shops in the level he is currently in, before starting to complete that level. The effect of buying an energy pack of strength S is that the user’s energy immediately turns into S, regardless of which value it had before.\nIn order to increase even further its sales, the ICPC has thought of a revolutionary promotion: it will reimburse the full cost of the SAR to whoever completes the ACM game using the minimum amount of in-game cash. Given the description of the game, can you help them find out what is the minimum amount of in-game cash required to finish the game? Input\nThe first line contains two integers N and M, representing respectively the number of levels and the number of shops in the game (1 ≤ N,M ≤ 105). The second line contains N integers E1,E2,...,EN, where Ei is the energy required to complete the i-th level (1 ≤ Ei ≤ 104 for i = 1,2,...,N). Each of the next M lines describes a shop with three integers L, S and C, representing respectively the level where the shop is located, and the strength and cost of the energy pack it sells (1 ≤ L ≤ N, 1 ≤ S ≤ 109 and 1 ≤ C ≤ 104).\nOutput\nOutput a line with an integer representing the minimum amount of in-game cash that is required to complete all N levels in the game. If it is impossible to complete all the levels, write the value −1.",
    "samples": [
      [
        "5 4\n1 2 3 4 5\n1 6 5\n2 14 10\n5 5 4\n3 7 5",
        "14"
      ],
      [
        "3 4\n14 11 2015\n1 14 23\n2 11 9\n3 1987 1\n1 2039 33",
        "-1"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Fidel I. Schaposnik Massolo, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Fence the vegetables fail",
    "text": "At the early age of 40, Alice and Bob decided to retire. After more than two decades working as examples for networking protocols, game theoretical books and several other texts, they were tired. To remain active, they decided to get into gardening.\nAlice and Bob planted several vegetable plants in a huge field. After finishing, they realized that their plants needed protection from wild animals, so they decided to build a fence around them. The field is represented as the XY plane, and each vegetable plant as a different point in it. A fence is represented as a polygon in the plane. However, not every polygon is a valid fence. The fence needs to be a single simple polygon with each of its sides parallel to one of the axes. Of course, the polygon should contain all the points representing vegetable plants. A fence too close to the plants or to itself could make it difficult to walk around, so each side of the polygon needs to be away from all plants and all non-adjacent sides.\nUnfortunately, Alice and Bob subcontracted the construction of the fence to a nasty multinational.\nThe company had a lot of lawyers on payroll, but no good fence designers, so they failed to comply to all requirements. They built a fence which is a simple polygon with sides parallel to the axes and whose sides are away from plants and itself. However, they forgot to make the fence contain all the plants! Alice and Bob want to assess the extent of the problem. Since not all plants are equally valuable to them, they want to know the total value of the plants that were left outside the fence.\nInput\nThe first line contains two integers P and V , representing respectively the number of plants and the number of vertices of the polygonal fence (1 ≤ P,V ≤ 105). Each of the next P lines describes a different plant with two integers Xp and Yp, indicating the coordinates of the plant (−109 ≤ Xp,Yp ≤ 109). The value of the p-th plant in the input is p, for p = 1,2,...,P. Each of the next V lines describes a vertex of the fence with two integers Xv and Yv, indicating the coordinates of the vertex (−109 ≤ Xv,Yv ≤ 109).\nVertices are given in counter clockwise order. Each of these points is an actual vertex of the polygon, that is, it is not collinear with its two adjacent vertices. The represented polygon is a simple polygon with each side parallel to an axis. No two plants are in the same position, and no plant lies on a fence’s side.\nOutput\nOutput a line with an integer representing the sum of the values of all the plants that lie outside the fence.",
    "samples": [
      [
        "4 8\n1 2\n1 0\n5 3\n3 4\n0 1\n6 1\n6 4\n4 4\n4 3\n2 3\n2 5\n0 5",
        "6"
      ],
      [
        "6 12\n6 5\n1 9\n3 6\n3 4\n2 0\n4 4\n5 8\n5 3\n2 3\n2 5\n4 5\n4 7\n0 7\n0 1\n7 1\n7 10\n0 10\n0 8",
        "15"
      ],
      [
        "1 4\n1 1\n2 0\n2 2\n0 2\n0 0",
        "0"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Cake cut",
    "text": "Carol and Carla are roommates. Yesterday they threw a big party and today they have a partially eaten cake that they want to divide. Since people were careless when cutting themselves a slice, the cake is now shaped as a prism with its top and bottom faces being the same simple convex polygon.\nTo add some fun to the process of dividing the cake, the girls came up with the following game.\nCarol chooses a vertex v of the top face of the cake. Carla chooses another vertex w of the top face that is not adjacent to v. Then, they cut the cake into two pieces by extending downwards the segment vw, so as to obtain two separate pieces of cake, each in the shape of a prism. Finally, Carol chooses the piece that she prefers, and Carla gets the other one. Carla immediately saw that this system gives Carol an advantage. Carla wants to know exactly how much of an advantage Carol has.\nYou are given a polygon that represents both the top and bottom faces of the cake. The height of the cake is 2, so the volume of a piece of cake is 2 times the area of its top face. Assuming the cake is divided as explained, and that both girls make their decisions to maximize the volume of the piece they have at the end, compute the volume of the piece each girl will get.\nInput\nThe first line contains an integer N representing the number of vertices of the polygonal top face of the cake (4 ≤ N ≤ 105). Each of the next N lines describes a vertex of the polygon with two integers X and Y , indicating the coordinates of the vertex in the XY plane (−108 ≤ X,Y ≤ 108). Vertices are given in counter clockwise order and define a simple convex polygon. No three points in the input are collinear.\nOutput\nOutput a line with two integers representing the volume of the piece Carol and Carla will get, in that order, if both make their decisions optimally.",
    "samples": [
      [
        "5\n0 0\n3 0\n3 1\n2 2\n0 1",
        "7 2"
      ],
      [
        "6\n0 1\n1 0\n2 0\n3 1\n2 2\n0 2",
        "6 3"
      ],
      [
        "4\n-100000000 -100000000\n100000000 -100000000\n100000000 100000000\n-100000000 100000000",
        "40000000000000000 40000000000000000"
      ],
      [
        "4\n-99999995 -100000000\n100000000 -100000000\n100000000 99999995\n-100000000 100000000",
        "39999999999999975 39999998000000025"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Blood groups",
    "text": "There are four possible blood groups for humans: AB, A, B and O, meaning that the red blood cells have antigens of types, respectively, A and B, only A, only B, and no antigen at all. Our blood group is determined by two alleles in our DNA. Each allele is of type either A, B or O. The following table lists the possible allele combinations someone may have for each blood group: Blood group AB A B O Possible alleles AB OA,AA OB,BB OO We inherit exactly one allele from each of our two parents. So, given the blood groups of the two parents, we can say for sure if some blood group is possible, or not, in their offspring. For example, if the blood groups of the two parents are AB and B, then the possible allele combinations for them are, respectively, {AB} and {OB,BB}. Since the order of the alleles does not matter, the possible allele combinations for the offspring are {OA,AB,OB,BB}. That means the blood groups AB, A and B are possible in their offspring, but the blood group O is not. Very nice indeed! But what if life on Earth had evolved so that a person had three parents, three alleles, and three different antigen types? The allele combinations would look like this: Blood group ABC AB AC BC A B C O Possible alleles ABC OAB,AAB OAC,AAC OBC,BBC OOA,OAA OOB,OBB OOC,OCC OOO ABB ACC BCC AAA BBB CCC If the blood groups of the three parents are A, BC and O, then all blood groups are possible in their offspring, except groups BC and ABC.\nThe universe is vast! There may be, out there in space, some form of life whose individuals have N parents, N alleles, and N different antigen types. Given the blood groups for the N parents, and a list of Q blood groups to test, your program has to determine which ones are possible, and which ones are not, in the offspring of the given parents.\nInput\nThe first line contains two integers N and Q, representing respectively the number of parents (and alleles, and antigen types) and the number of queries (1 ≤ N ≤ 100 and 1 ≤ Q ≤ 40). Each of the next N lines describes the blood group of a parent. After that, each of the next Q lines describes a blood group to test. Antigen types are identified with distinct integers from 1 to N, not letters. Each line describing a blood group contains an integer B indicating the number of antigen types in the blood group (0 ≤ B ≤ N), followed by B different integers C1,C2,...,CB representing the antigen types present in the blood group (1 ≤ Ci ≤ N for i = 1,2,...,B).\nOutput\nFor each of the Q queries, output a line with the uppercase letter “Y” if the corresponding blood group is possible in the offspring of the given parents; otherwise output the uppercase letter “N”. Write the results in the same order that the queries appear in the input.",
    "samples": [
      [
        "2 1\n2 2 1\n1 2\n0",
        "N"
      ],
      [
        "3 4\n1 1\n2 2 3\n0\n1 3\n3 2 1 3\n2 1 2\n2 3 2",
        "Y\nN\nY\nN"
      ],
      [
        "4 3\n4 2 1 3 4\n4 2 1 3 4\n1 1\n1 2\n1 3\n2 2 1\n0",
        "Y\nY\nN"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Guilherme Albuquerque Pinto, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "At most twice",
    "text": "Given a positive integer U, find the largest integer L such that L ≤ U and L does not contain any digit more than twice.\nInput\nThe input consists of a single line that contains an integer U (1 ≤ U ≤ 1018).\nOutput\nOutput a line with an integer representing the largest number less than or equal to U that does not contain any digit more than twice.",
    "samples": [
      [
        "2210102960",
        "2210099887"
      ],
      [
        "1000000000000000000",
        "998877665544332211"
      ],
      [
        "1001223343",
        "998877665"
      ],
      [
        "20152015",
        "20152015"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Exposing corruption",
    "text": "The Central Committee in Nlogonia is formed by many congress members. As the political system is dichotomic, each congress member belongs to one of two parties: the Deadly Serious Party and the Party! Party! Party. Historical tradition calls them DSP and PPP, respectively.\nEdward is an investigative journalist. He discovered that congress members are corrupt and will switch parties if offered a given amount of Nlogmoney to do so. Each congress member has his or her own specific price, but they all have a price. As usual in politics, there exist rivalries between some pairs of congress members. Rivals would never accept to be in the same party.\nEdward has a budget and wants to use it to make some congress members switch parties, thus gathering indisputable evidence for his investigation. In doing so, he has to respect rivalries: after everyone who was offered money switches, rivals must be left belonging to different parties.\nEdward wants to cause maximum impact. Can you help him find out the maximum number of congress members that can belong to DSP if he uses at most all of his budget towards that goal? Similarly, what is the maximum number of congress members that can belong to PPP under the same constraints? Input\nThe first line contains four integers D, P, R and B, representing respectively the number of congress members that initially belong to DSP (1 ≤ D ≤ 100), the number of congress members that initially belong to PPP (1 ≤ P ≤ 100), the number of rivalries among congress members (1 ≤ R ≤ 2000), and the budget of the journalist expressed in Nlogmoney (1 ≤ B ≤ 104). Members of DSP are identified with distinct integers from 1 to D, while members of PPP are identified with distinct integers from 1 to P. The second line contains D integers S1,S2,...,SD, indicating that member i of DSP will switch parties if offered Si Nlogmoney (1 ≤ Si ≤ 100 for i = 1,2,...,D). The third line contains P integers T1,T2,...,TP, indicating that member j of PPP will switch parties if offered Tj Nlogmoney (1 ≤ Tj ≤ 100 for j = 1,2,...,P). Each of the next R lines describes a rivalry with two integers X and Y , representing that member X of DSP and member Y of PPP are rivals (1 ≤ X ≤ D and 1 ≤ Y ≤ P).\nOutput\nOutput a line with two integers representing the maximum number of congress members that can belong to DSP using the given budget and, similarly, the maximum number of congress members that can belong to PPP using the given budget.",
    "samples": [
      [
        "2 3 2 55\n20 30\n40 30 1\n2 3\n1 3",
        "3 4"
      ],
      [
        "3 2 6 30\n5 5 5\n5 5\n2 1\n2 2\n1 1\n1 2\n3 1\n3 2",
        "3 3"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Walter Erquínigo Pezo, Perú"
    },
    "hasImages": false
  },
  {
    "name": "Just a bit sorted",
    "text": "Jurgen Guntherswarchzhaffenstrassen is known for his virtuous guitar playing and the cruel teaching methods he employs with his students. What most people ignore about him is that he is also a fan of numbers.\nLately Jurgen has been studying sorted lists, but he is getting bored. He thinks that such lists are too predictable and not very abundant, so he decided to spice things up a bit.\nJurgen says that a list (cid:96) of N not necessarily different positive integers is just a bit sorted if and only if for each positive integer x > 1 that occurs in (cid:96), the number x − 1 appears at least once before the last occurrence of x in (cid:96). For example • [2,3,1,2] is just a bit sorted because a 1 appears before the last 2, and a 2 appears before the last 3; • [2,3,4,3,2,1,3,4] is not just a bit sorted because every 1 appears after the last 2; • [1,1,3,1,3,3,1,3] is not just a bit sorted because no 2 appears before the last 3 (since 2 doesn’t appear at all in this list).\nJurgen is trying to find out how many different just a bit sorted lists of N positive integers not greater than K exist. Two lists are different if and only if there is at least one position in which the lists have distinct elements. Can you help Jurgen in counting the number of different lists? Input\nThe first line contains two integers N and Q, representing respectively the number of elements in the just a bit sorted lists and the number of queries to answer (1 ≤ N ≤ 5000 and 1 ≤ Q ≤ 1000).\nThe second line contains Q integers K1,K2,...,KQ, indicating that the lists you must count in the i-th query cannot contain values greater than Ki (1 ≤ Ki ≤ 109 for i = 1,2,...,Q).\nOutput\nOutput a line with Q integers, such that the i-th integer represents the number of different just a bit sorted lists of N positive integers not greater than Ki (for i = 1,2,...,Q). Since this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "1 1\n1",
        "1"
      ],
      [
        "3 4\n2 2 1 10",
        "5 5 1 6"
      ],
      [
        "1000 3\n100 5 300",
        "265428620 285047952 668355714"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Jorge Enrique Moreira Broche, Cuba"
    },
    "hasImages": false
  },
  {
    "name": "Identifying tea",
    "text": "Blind tea tasting is the skill of identifying a tea by using only your senses of smell and taste.\nAs part of the Ideal Challenge of Pure-Tea Consumers (ICPC), a local TV show is organized. During the show, a full teapot is prepared and five contestants are handed a cup of tea each. The participants must smell, taste and assess the sample so as to identify the tea type, which can be: (1) white tea; (2) green tea; (3) black tea; or (4) herbal tea. At the end, the answers are checked to determine the number of correct guesses.\nGiven the actual tea type and the answers provided, determine the number of contestants who got the correct answer.\nInput\nThe first line contains an integer T representing the tea type (1 ≤ T ≤ 4). The second line contains five integers A, B, C, D and E, indicating the answer given by each contestant (1 ≤ A,B,C,D,E ≤ 4).\nOutput\nOutput a line with an integer representing the number of contestants who got the correct answer.",
    "samples": [
      [
        "1\n1 2 3 2 1",
        "2"
      ],
      [
        "3\n4 1 1 2 1",
        "0"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Inés Kereki, Uruguay"
    },
    "hasImages": false
  },
  {
    "name": "Height map",
    "text": "A height map is a two-dimensional matrix of positive integers that represents a polyhedron. Each cell of the matrix with value V represents a parallelepiped shaped column of 1 × 1 × V that is laid on one of its 1×1 faces onto the cell. This creates a polyhedron with a single face in the bottom made up of all the downwards facing 1×1 faces combined, and possibly several faces on the top and on the sides.\nFor instance, a 2 × 2 matrix with all values equal to 2 represents a cube of side 2. However, if one of the values is 1, the represented polyhedron is the same cube with one corner cut off. The following picture represents both alternatives.\nWhile not every polyhedron can be represented in this fashion, there are several that can. Here are a couple of 2 1oth 1 2er examp =les.\nGiven a height map, you are asked to count the number of faces of the represented polyhedron.\nNotice that a face is defined as a simple polygon that describes a contiguous and maximal boundary of the polyhedron. As you can see in the last two examples, it is possible for two different coplanar faces to share a common vertex, or even a side, or portions of a side.\nInput\nThe first line contains two integers R and C, representing respectively the number of rows and columns of the height map (1 ≤ R,C ≤ 100). Each of the next R lines contains C integers; the j-th integer in the i-th line is the value Vi,j located in the i-th row and j-th column of the matrix (1 ≤ Vi,j ≤ 109 for i = 1,2,...,R and j = 1,2,...,C).\nOutput\nOutput a line with an integer representing the number of faces of the polyhedron represented by the input height map.\nSample input 1 Sample output 1 2 2 6   Sample input 2 Sample output 2 2 2 9   Sample input 3 Sample output 3 2 2 13   Sample input 4 Sample output 4 2 3 14",
    "samples": [
      [
        "2 2\n2 2\n2 2",
        "6"
      ],
      [
        "2 2\n2 2\n2 1",
        "9"
      ],
      [
        "2 2\n2 1\n1 2",
        "13"
      ],
      [
        "2 3\n3 2 2\n1 3 2",
        "14"
      ]
    ],
    "source": {
      "year": "2015",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": true
  },
  {
    "name": "Cachorros-quentes",
    "text": "Em 2012 foi alcançado um novo recorde mundial na famosa Competição de Cachorros-Quentes do Nathan: o campeão, Joey Chestnut, devorou 68 cachorros-quentes em dez minutos, um aumento incrível em relação aos 62 sanduíches devorados pelo mesmo Chestnut em 2011.\nO restaurante Nathan’s Famous Corporation, localizado no Brooklyn, NY, é o responsável pela competição. Eles produzem deliciosos cachorros-quentes, mundialmente famosos, mas quando o as sunto é matemática eles não são tão bons. Eles desejam ser listados no Livro de Recordes do Guinness, mas para isso devem preencher um formulário descrevendo os fatos básicos da competição. Em par ticular, eles devem informar o número médio de cachorros-quentes consumidos pelos participantes durante a competição.\nVocê pode ajudá-los? Eles prometeram pagá-lo com um dos seus saborosos cachorros-quentes. Da dos o número total de cachorros-quentes consumidos e o número total de participantes na competição, você deve escrever um programa para determinar o número médio de cachorros-quentes consumidos pelos participantes.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros H e P (1 ≤ H,P ≤ 1000) indicando respectivamente o número total de cachorros-quentes consumidos e o número total de participantes na competição.\nSaída\nSeu programa deve produzir uma única linha com um número racional representando o número médio de cachorros-quentes consumidos pelos participantes. O resultado deve ser escrito como um número racional com exatamente dois dígitos após o ponto decimal, arredondado se necessário.",
    "samples": [
      [
        "10 90",
        "0.11"
      ],
      [
        "840 11",
        "76.36"
      ],
      [
        "1 50",
        "0.02"
      ],
      [
        "34 1000",
        "0.03"
      ],
      [
        "35 1000",
        "0.04"
      ],
      [
        "36 1000",
        "0.04"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Concurso de contos",
    "text": "Machado gosta muito de escrever. Já escreveu muitos contos, resenhas, relatos de viagens que fez, além de um pequeno romance. Agora Machado quer participar de um concurso de contos, que tem regras muito rígidas sobre o formato de submissão do conto.\nAs regras do concurso especificam o número máximo de caracteres por linha, o número máximo de linhas por página, além de limitar o número total de páginas. Adicionalmente, cada palavra deve ser escrita integralmente em uma linha (ou seja, a palavra não pode ser separada silabicamente em duas linhas). Machado quer escrever um conto com o maior número de palavras possível, dentro das regras do concurso, e precisa de sua ajuda.\nDados o número máximo de caracteres por linha, o número máximo de linhas por página, e as palavras do conto que Machado está escrevendo, ele quer saber o número mínimo de páginas que seu conto utilizaria seguindo as regras do concurso.\nEntrada\nA primeira linha da entrada contém três inteiros N, L e C (2 ≤ N ≤ 1000, 1 ≤ L ≤ 30 e 1 ≤ C ≤ 70) que indicam, respectivamente, o número de palavras do conto de Machado, o número máximo de linhas por página e o número máximo de caracteres por linha. O conto de Machado é inovador e não contém nenhum caractere além de letras maiúsculas e minúsculas e espaços em branco, sem letras acentuadas e sem cedilha. A segunda linha contém o conto de Machado, composto de N palavras separadas por espaços em branco; há espaço em branco somente entre duas palavras, e entre duas palavras há exatamente um espaço em branco. Cada palavra é composta por no mínimo uma e no máximo C letras.\nSaída\nSeu programa deve produzir uma única linha, contendo um único número inteiro, indicando o número mínimo de páginas que o conto de Machado ocupa, considerando as regras do concurso.",
    "samples": [
      [
        "14 4 20\nSe mana Piedade tem casado com Quincas Borba apenas me daria uma esperanca colateral",
        "2"
      ],
      [
        "16 3 30\nNo dia seguinte entrou a dizer de mim nomes feios e acabou alcunhando me Dom Casmurro",
        "1"
      ],
      [
        "5 2 2\na de i de o",
        "3"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Divisores",
    "text": "Pense um número positivo n. Agora me diga um divisor A de n. Agora me dê um outro número B que não seja divisor de n. Agora um múltiplo C. E um não múltiplo D. O número que você pensou é...\nParece um truque de mágica, mas é matemática! Será que, conhecendo os números A,B,C e D, você consegue descobrir qual era o número original n? Note que pode existir mais de uma solução! Neste problema, dados os valores de A, B, C e D, você deve escrever um programa que determine qual o menor número n que pode ter sido pensado ou concluir que não existe um valor possível.\nEntrada\nA entrada consiste de uma única linha que contém quatro números inteiros A, B, C, e D, como descrito acima (1 A,B,C,D 109).\n  Saída\nSeu programa deve produzir uma única linha. Caso exista pelo menos um número n para os quais A, B, C e D façam sentido, a linha deve conter o menor n possível. Caso contrário, a linha deve conter 1.\n\u0000",
    "samples": [
      [
        "2 12 8 2",
        "4"
      ],
      [
        "3 4 60 105",
        "6"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Kit de encolhimento de polígonos",
    "text": "Um Kit de Encolhimento de Polígonos é um material muito utilizado nas aulas de magia geométrica na Nlogônia. O kit consiste de dois pontos, A e B no plano cartesiano. Considere um polígono convexo dado pelos vértices 1,2...N, nessa ordem. Para encolher esse polígono usando o kit, algumas regras devem ser respeitadas. Cada vértice x do polígono deve ser movido uma vez só: para o ponto médio do segmento Ax ou para o ponto médio do segmento Bx. A operação de encolhimento deve produzir um novo polígono convexo que preserve a ordem relativa dos vértices do polígono original. Em outras palavras, considerando todas as possíveis maneiras de aplicar o kit, apenas aquelas cuja sequência final dos vértices 1,2...N representa um polígono convexo são válidas. Veja que o polígono convexo original pode estar em sentido horário e uma operação de encolhimento válida produzir um polígono convexo em sentido anti-horário, na mesma ordem dos vértices. Apenas a ordem relativa dos pontos é importante, não o sentido.\nÉ sabido que magia geométrica não é o forte da maioria dos alunos. A professora pediu que eles usassem o kit de encolhimento para encolher um polígono convexo fornecido por ela de forma a obter a menor área possível e um amigo seu implorou para que você resolva a questão por ele. Responda a menor área possível do polígono para ele.\nA Figura acima ilustra um uso válido do kit, onde o polígono sombreado é o de menor área possível que preserva a sequência dos vértices. Os pontos A e B correspondem aos pontos do kit. Note que, apesar do nome encolhimento, às vezes é possível utilizar o kit para aumentar a área dos polígonos! Como geometria é difícil! Observe que um único ponto ou uma reta não são considerados polígonos. Sendo assim, se um uso do kit produzir como resultado algo diferente de um polígono convexo, esse não é um uso válido.\nEntrada\nA primeira linha da entrada contém um inteiro N (3 N 105), o número de vértices do polígono.\nSeguem N linhas, cada uma com dois inteiros x,y ( 106 x,y 106), os vértices do poligono. A u c´ olt oi rm da enl ain dh aa s d xa ee ynt dra ed Aa c eo an sté cm ooq rdu ea ntr ao dain st xeir eos y, dA ex, B\u0000A , y r, esB p x ece tiB vay m( e\u0000n1 te0 .6 OsA px o, nA toy, sB dx a,B eny trad1 a06 s) e, rãa os dados na ordem correta em que aparecem no polígono, no sentido horário ou anti-horário. Não haverão pontos repetidos e o polígono será convexo.\nSaída\nSeu programa deve produzir uma linha, contendo um número real, com 3 casas decimais de precisão, representando a menor área possível para um polígono obtido com o uso do kit.",
    "samples": [
      [
        "3\n20 6\n4 8\n2 6\n0 0 4 0",
        "3.500"
      ],
      [
        "3\n0 4\n4 4\n0 0\n3 -2 -3 -2",
        "1.000"
      ],
      [
        "3\n0 4\n4 4\n0 0\n2 -2 -2 -2",
        "2.000"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Fundindo árvores",
    "text": "Em Computação árvores são objetos estranhos: a raiz está no topo e as folhas estão embaixo! Uma árvore é uma estrutura de dados composta de N vértices conectados por N 1 arestas de forma que é possível chegar de um vértice a qualquer outro vértice seguindo as arestas. E\u0000m uma árvore enraizada, cada aresta conecta um vértice pai a um vértice filho. Um único vértice não tem pai, e é chamado de raiz. Assim, partir da raiz é possivel chegar a qualquer outro vértice da árvore seguindo as arestas na direção de pai para filho.\nEm uma árvore ternária cada vértice pode ter até três vértices filhos, chamados esquerdo, central e direito. Uma árvore ternária canhota é uma árvore ternária enraizada em que nenhum vértice tem filho direito. Uma árvore ternária destra é uma árvore ternária enraizada em que nenhum vértice tem filho esquerdo. A raiz de uma árvore ternária é sempre um vértice central. A figura abaixo mostra exemplos de uma árvore canhota e de uma árvore destra.\nA superposição S de uma árvore canhota C com uma árvore destra D é uma árvore ternária enraizada em que a raiz é ou a raiz de C ou a raiz de D ou ambas as raízes, de C e de D, superpostas, e que contém a estrutura de ambas as árvores superpostas. A figura abaixo mostra algumas árvores formadas pela superposição da árvore canhota e da árvore destra da figura acima.\nNote que na Figura (a) a raiz é o vértice x (da árvore destra) e os pares de vértices (a,y) e (c,u) são superpostos. Na Figura (b) a raiz é o vértice a (da árvore canhota) e os pares de vértices (d,x), (e,y) e (f,u) são superpostos. Na Figura (c) a raiz também é o vértice a (da árvore canhota) e o par de vértices (f,x) é superposto.\nDadas uma árvore canhota e uma árvore destra, sua tarefa é determinar o número mínimo de vértices necessários para construir uma árvore ternária que é uma superposição das árvores dadas.\nEntrada\nA primeira linha de um caso de teste contém um inteiro N indicando o número de vértices da árvore canhota (1 N 104). Vértices nesta árvore são identificados por números de 1 a N, e a raiz é o vértice de número 1. Cada uma das N linhas seguintes contém três inteiros I, L e K, indicando respectivamente o identificador de um vértice I, o identificador do filho esquerdo L de I e o identificador do filho central K de I (0 I,L,K N). A linha seguinte contém um inteiro M indicando o número de vértices da árvore destra (1 M 104). Vértices nesta árvore são identificados por números de 1 a M, e a raiz é o vértice de número 1. Cada uma das M linhas seguintes contém três inteiros P, Q e R, indicando respectivamente o identificador de um vértice P, o identificador do filho central Q de P e o identificador do filho direito R de P (0 P,Q,R N). O valor zero indica um vértice não existente (usado quando um vértice não tem umou ambosos seus filhos).\nSaída\nImprima o número mínimo de vértices de uma árvore que é a superposição das duas árvores dadas na entrada.",
    "samples": [
      [
        "7\n1 2 3\n2 0 0\n3 4 0\n4 0 5\n5 0 6\n6 7 0\n7 0 0\n7\n1 2 3\n2 4 0\n3 5 0\n4 0 6\n5 0 0\n6 0 7\n7 0 0",
        "11"
      ],
      [
        "5\n1 2 3\n2 4 5\n3 0 0\n4 0 0\n5 0 0\n3\n1 2 3\n2 0 0\n3 0 0",
        "6"
      ],
      [
        "3\n3 0 2\n2 0 0\n1 0 3\n2\n2 0 0\n1 2 0",
        "3"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Containers",
    "text": "O SBC–Sistema de Balanceamento de Containers precisa ser atua lizado para funcionar com uma nova classe de navios, a “dois por quatro”, que são navios que podem carregar oito grandes containers numa disposição de duas linhas e quatro colunas, como mostrado na figura ao lado. Esses navios possuem um guindaste fixo que é capaz de realizar um único tipo de movimentação: levantar dois containers adjacentes, na linha ou na coluna, e trocá-los de posição. Para ace lerar o carregamento nos portos, os oito containers são embarcados em qualquer uma das oito posições, definindo uma configuração ini cial. Depois que o navio deixa o porto, o guindaste precisa mover os containers para deixá-los numa configuração final pré-definida para a viagem.\nO problema é que o custo de combustível para o guindaste realizar uma movimentação é igual à soma dos pesos dos dois containers adjacentes cujas posições foram trocadas. Dados os pesos dos containers em cada posição nas configurações inicial e final, o SBC precisa computar o custo total mínimo possível de uma sequência de movimentações que leve os containers da configuração inicial à configuração final.\nEntrada\nA entrada consiste de quatro linhas contendo, cada uma, quatro inteiros entre 1 e 1000, inclusive.\nAs duas primeiras linhas definem os pesos na configuração inicial e as duas últimas linhas, os pesos na configuração final. Sempre existe uma solução, pois os containers nas configurações inicial e final são os mesmos, com as posições possivelmente trocadas.\nSaída\nSeu programa deve produzir uma única linha contendo um inteiro, representando o custo total mínimo de uma sequência de movimentos que leve da configuração inicial à configuração final.\nExemplo de entrada 1 Exemplo de saída 1 81 Exemplo de entrada 2 Exemplo de saída 2   3 4 50 5 10 7 8   3 4 5 8 7 10",
    "samples": [
      [
        "3 1 2 1\n4 7 52 9\n7 1 2 1\n3 9 52 4",
        "81"
      ],
      [
        "1 2 3 4\n5 10 7 8\n1 2 3 4\n5 8 7 10",
        "50"
      ],
      [
        "34 5 6 998\n4 17 77 84\n34 5 6 998\n4 17 77 84",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Batata quente",
    "text": "Batata quente é uma brincadeira bastante popular entre crianças na escola. A brincadeira é simples: a criança que está com a batata a joga para uma outra criança. Em algum momento, o professor, que não está olhando para o que está acontecendo, irá dizer que a brincadeira acabou. Quando isso acontece, a criança que está com a batata perde.\nUma variação da brincadeira, jogada na fila da cantina, é proposta por um professor. As crianças estão numeradas de 1 a N de acordo com sua posição na fila, onde a criança com o número 1 é a primeira da fila. Cada uma receberá um papel com um número, e sempre que receber a batata, deverá passá-la para a criança na posição anotada em seu papel. O jogo termina com o professor vitorioso se a batata chegar em uma posição menor ou igual a X na fila, com X definido no início da brincadeira.\nSe isso nunca acontecer, o jogo nunca termina, porém as crianças saem vitoriosas: no dia seguinte todas ganham um desconto na cantina.\nO professor começa o jogo jogando a batata para alguma criança na fila. Como sua mira não é muito boa, ele só consegue garantir que vai jogar a batata para alguma criança em um invervalo L...R da fila com a mesma probabilidade. Ele está considerando vários possíveis intervalos da fila para iniciar a brincadeira. Para isso, o professor gostaria de descobrir, para cada um desses intervalos, qual o valor de X que ele deve escolher para que o jogo seja o mais justo possível, ou seja, a probabilidade de o jogo terminar seja a mais próxima possível da probabilidade de o jogo não terminar.\nVocê deve auxiliar o professor a avaliar as propostas. Dados os papéis de cada criança da fila e vários intervalos possíveis, responda, para cada intervalo, o valor de X que torne o jogo mais justo possível. Se houver empate, responda o X mais próximo do início da fila.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e Q (2 N 50000, 1 Q 105). A l uin mh aa ds aeg su ci rn it ae nçc ao sn .té Sm egN ueminte ei nr to ãs op Q1,p l2 in. h. a.p s,N ca(1 daup mi acN om), o ds oiv sa il no tr ee is rod sos Lp eap Réis (1receb Lidos Rpor c Nad )a , representando um intervalo considerado pelo professor.    Saída\nImprima Q linhas, cada uma contendo, para cada intervalo considerado pelo professor, o número inteiro X que o professor deverá escolher para que a brincadeira seja a mais justa possível.",
    "samples": [
      [
        "9 4\n2 3 4 5 6 7 4 9 5\n1 3\n3 5\n2 8\n7 9",
        "1\n3\n3\n1"
      ],
      [
        "3 3\n1 3 3\n1 1\n1 2\n2 3",
        "1\n1\n2"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Andando no tempo",
    "text": "Imagine que você tenha uma máquina do tempo que pode ser usada no máximo três vezes, e a cada uso da máquina você pode escolher voltar para o passado ou ir para o futuro. A máquina possui três créditos fixos; cada crédito representa uma certa quantidade de anos, e pode ser usado para ir essa quantidade de anos para o passado ou para o futuro. Você pode fazer uma, duas ou três viagens, e cada um desses três créditos pode ser usado uma vez apenas. Por exemplo, se os créditos forem 5,12 e 9, você poderia decidir fazer duas viagens: ir 5 anos para o futuro e, depois, voltar 9 anos para o passado. Dessa forma, você terminaria quatro anos no passado, em 2012. Também poderia fazer três viagens, todas indo para o futuro, usando os créditos em qualquer ordem, terminando em 2042.\nNeste problema, dados os valores dos três créditos da máquina, seu programa deve dizer se é ou não possível viajar no tempo e voltar para o presente, fazendo pelo menos uma viagem e, no máximo, três viagens; sempre usando cada um dos três créditos no máximo uma vez.\nEntrada\nA entrada consiste de uma linha contendo os valores dos três créditos A,B e C (1 A,B,C 1000).   Saída\nSeu programa deve imprimir uma linha contendo o caracter “S” se é possível viajar e voltar para o presente, ou “N” caso contrário.",
    "samples": [
      [
        "22 5 22",
        "S"
      ],
      [
        "31 110 79",
        "S"
      ],
      [
        "45 8 7",
        "N"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Estatística hexa",
    "text": "Dada uma sequência de inteiros positivos em hexadecimal, por exemplo, S = [9af47c0b,2545557, ff6447979], definimos soma(S) como sendo a soma de todos os elementos de S. Considere agora uma certa permutação dos 16 dígitos hexadecimais, por exemplo, p = [4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e].\nA partir da sequência base S, podemos definir uma sequência transformada S[4], que é obtida pela remoção de todas as ocorrências do dígito hexadecimal 4 de todos os inteiros em S, S[4] = [9af7c0b, 255557,ff67979]. Em seguida, podemos remover o dígito 9 e obter S[4,9] = [af7c0b, 255557,ff677].\nSeguindo a ordem dos dígitos na permutação p, podemos definir dessa forma 16 sequências: S[4],S[4,9], S[4,9,5],...,S[4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e]. Estamos interessados em somar todos os elementos dessas 16 sequências: total(S,p) = soma(S[4]) + soma(S[4,9]) + soma(S[4,9,5]) + + soma(S[4,9,5,a,0,c,f,3,d,7,8,b,1,2,6,e]) ··· Claramente, esse total depende da permutação p usada na remoção sucessiva. Dada uma sequência de N inteiros positivos em hexadecimal, seu programa deve computar, considerando todas as possíveis permutações dos 16 dígitos hexadecimais: o total mínimo, o total máximo e o somatório dos totais de todas as permutações. Para o somatório dos totais de todas as permutações, imprima o resultado módulo 3b9aca07 (109 + 7 na base 10).\nEntrada\nA primeira linha da entrada contém um inteiro N, 1 N 3f, representando o tamanho da sequência. As N linhas seguintes contêm, cada uma, um inteiropositivo P, 0 P fffffffff, definindo a sequência inicial S de inteiros. Todos os números na entrada estão emhexadecimal, com letras minúsculas.\nSaída\nSeu programa deve produzir uma única linha na saída contendo três inteiros positivos, em hexade cimal com letras minúsculas, representando o total mínimo, o total máximo e o somatório dos totais considerando todas as permutações possíveis dos 16 dígitos hexadecimais.",
    "samples": [
      [
        "3\n9af47c0b\n2545557\nff6447979",
        "1312c99c b4e87e9387 5bb5fc"
      ],
      [
        "1\nfffffffff",
        "0 effffffff1 15dac189"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogos olímpicos",
    "text": "Um grupo de investidores está pensando em investir pesado em atletas da delegação brasileira após as olimpíadas do Rio. Para isso, eles vêm observando N atletas e perceberam que alguns estão em decadência e outros em ascensão. Em especial, o grupo está de olho em dois fatores sobre cada atleta: seu cansaço e sua habilidade. Eles anotaram os valores de habilidade e cansaço de cada atleta logo ao final das olimpíadas de 2016. Em seguida, o grupo estimou a taxa com a qual cada atleta perde ou ganha habilidade e a taxa com a qual cada atleta se cansa ao longo do tempo, e percebeu que essas taxas são constantes para os dois atributos.\nOs investidores perceberam que esses dados lhes permitem definir o que resolveram chamar de atleta de ouro: um atleta que, em um determinado período de tempo, é o atleta menos cansado e o mais habilidoso. Ficou decidido que investimentos serão feitos apenas em atletas de ouro. Descubra quantos jogadores, entre os observados inicialmente, receberão algum investimento. Considere que o tempo t = 0 é o tempo das olimpíadas do Rio: nenhum atleta que foi de ouro antes desse tempo pode receber investimento. Considere também que qualquer tempo após as olimpíadas do Rio deve ser considerado, por maior que seja. Um atleta que é de ouro exatamente no tempo t = 0 deve ser contado.\nEntrada\nA primeira linha da entrada contém um inteiro, N (1 N 105), o número de atletas. Seguem N H dait,l hi Cn ai bth ia 6= ls id, 0 a)c d,a erd ,ea p oru cem ase na n st ac a ço n om d ao oq , u r fiea nst apr lo e dcn t aiu s´ vm a om le imr eo n ps t íe ai ,n dat ae shir a eo bs a: ili tdH aa xi d a, e dH a ei ot, vfi aC n r ii a a, l çC ãd oait s d( o\u0000 oli1 cm0 a6 np´ sıa< ad çoaH s d,i, oaH it -it a é, x sC ia mi, d oC e ait v ta l er tia a1 ç .0 ã6 o, Saída\nSeu programa deve produzir uma única linha com um inteiro O, representando o número de atletas que receberão algum investimento do grupo.",
    "samples": [
      [
        "3\n3 2 1 2\n2 2 2 2\n1 2 3 2",
        "1"
      ],
      [
        "6\n1 10 5 8\n8 7 12 -5\n10 -2 -3 8\n-3 -5 -8 -12\n0 1 10 2\n8 3 9 -3",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "huaauhahhuahau",
    "text": "Em chats, é muito comum entre jovens e adolescentes utilizar sequências de letras, que parecem muitas vezes aleatórias, para representar risadas. Alguns exemplos comuns são: huaauhahhuahau hehehehe ahahahaha jaisjjkasjksjjskjakijs huehuehue Cláudia é uma jovem programadora que ficou intrigada pela sonoridade das “risadas digitais”.\nAlgumas delas ela nem mesmo consegue pronunciar! Mas ela percebeu que algumas delas parecem transmitir melhor o sentimento da risada que outras. A primeira coisa que ela percebeu é que as consoantes não interferem no quanto as risadas digitais influenciam na transmissão do sentimento.\nA segunda coisa que ela percebeu é que as risadas digitais mais engraçadas são aquelas em que as sequências de vogais são iguais quando lidas na ordem natural (da esquerda para a direita) ou na ordem inversa (da direita para a esquerda), ignorando as consoantes. Por exemplo, “hahaha” e “huaauhahhuahau” estão entre as risadas mais engraçadas, enquanto “riajkjdhhihhjak” e “huehuehue” não estão entre as mais engraçadas.\nCláudia está muito atarefada com a análise estatística das risadas digitais e pediu sua ajuda para escrever um programa que determine, para uma risada digital, se ela é das mais engraçadas ou não.\nEntrada\nA entrada é composta por uma linha, contendo uma sequência de no máximo 50 caracteres, formada apenas por letras minúsculas sem acentuação. As vogais são as letras ‘a’,‘e’,‘i’,‘o’,‘u’. A sequência contém pelo menos uma vogal.\nSaída\nSeu programa deve produzir uma linha contendo um caractere, “S” caso a risada seja das mais engraçadas, ou “N” caso contrário.",
    "samples": [
      [
        "hahaha",
        "S"
      ],
      [
        "riajkjdhhihhjak",
        "N"
      ],
      [
        "a",
        "S"
      ],
      [
        "huaauhahhuahau",
        "S"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ladrilhos",
    "text": "Avelino tem um mosaico em uma das paredes de sua casa. É uma mosaico muito antigo, composto por pequenos ladrilhos coloridos. Como é um mosaico antigo, alguns ladrilhos se soltaram ao longo dos anos formando buracos.\nAgora, Avelino quer restaurar o mosaico cobrindo os buracos com novos ladrilhos. Entretanto, para economizar, Avelino quer comprar ladrilhos de uma única cor para tapar os buracos. Em particular, quer comprar ladrilhos de uma das cores originais ou de uma cor ainda não contida no mosaico.\nPor ser um mosaico, não se deseja que hajam áreas muito grandes com a mesma cor. Avelino resolveu que vai escolher a cor dos ladrilhos tentando fazer com que o tamanho da menor área mo nocromática seja o menor possível, para que haja mais detalhes. Veja que pode existir mais de uma cor possível. Uma área é monocromática se todos os ladrilhos nela são da mesma cor. Dois ladrilhos adjacentes fazem parte da mesma área se possuem a mesma cor, e dois ladrilhos são adjacentes se compartilham um lado.\nVeja o primeiro caso de exemplo, temos três áreas da cor 1 (uma de tamanho 3 e duas de tamanho 2), uma área da cor 2 (de tamanho 3) e uma área da cor 3 de tamanho 7. Uma resposta possível seria escolher a cor 2, fazendo com que a menor área monocromática seja de tamanho 2. Se escolhermos a cor 1 a menor área seria de tamanho 3.\nCrie um programa que imprima o tamanho da menor área possível.\nEntrada\nA primeira linha contém dois inteiros H e L, a altura e largura do mosaico, respectivamente, satisfazendo 1 H 200 e 1 L 200 . Em seguida, H linhas conterão cada uma L inteiros, separados por espaço,correspondendoàs cores dos ladrilhos. Um inteiro 0 corresponde a um buraco e um inteiro i = 0 corresponde a um ladrilho com a i-ésima cor, podendo ir de 1 até 40000 no máximo.\n6 Saída\nSeu programa deve produzir uma linha, contendo um inteiro, o tamanho da menor área possível.",
    "samples": [
      [
        "3 8\n3 3 3 1 1 0 0 0\n3 1 1 0 2 2 0 1\n3 3 3 0 0 2 1 1",
        "2"
      ],
      [
        "3 7\n1 1 0 2 2 1 1\n1 1 0 2 2 1 1\n1 1 0 0 3 3 3",
        "3"
      ],
      [
        "3 6\n2 2 2 2 0 2\n2 2 2 0 2 2\n2 2 2 2 0 2",
        "1"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Competition",
    "text": "Bob and Alice are participating in a programming contest as a team. The contest has N problems which must be solved in order. Naturally there are some problems that they cannot solve, in that case they can skip it. There may be also problems that only Bob or Alice alone can solve.\nThey want to solve all the problems possible switching as few times as possible who is at the computer programming the solution.\nGiven the number of problems and the problems that Bob and Alice can solve, calculate the minimum number of switches between the usage of the computer. Anyone can start using it.\nInput\nThe first line contains three integers N (1 ≤ N ≤ 109), A (1 ≤ A ≤ min(N,5 ∗ 104)) and B (1 ≤ B ≤ min(N,5 ∗ 104)). The next line contains A unique integers denoting the problems Alice can solve. The following line contains B unique integers denoting the problems Bob can solve. The first problem is denoted by the number 1, the second by number 2, the N-th by N, and so on.\nOutput\nOutput a line with an integer representing the minimum number of switches between the usage of the computer.",
    "samples": [
      [
        "5 2 3\n2 4\n1 5 3",
        "4"
      ],
      [
        "4 3 3\n1 2 3\n2 3 4",
        "1"
      ],
      [
        "4 3 3\n1 3 4\n4 3 1",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Bruno Junqueira Adami, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "Different Digits",
    "text": "The inhabitants of Nlogonia are very superstitious. One of their beliefs is that street house numbers that have a repeated digit bring bad luck for the residents. Therefore, they would never live in a house which has a street number like 838 or 1004.\nThe Queen of Nlogonia ordered a new seaside avenue to be built, and wants to assign to the new houses only numbers without repeated digits, to avoid discomfort among her subjects. You have been appointed by Her Majesty to write a program that, given two integers N and M, determines the maximum number of houses that can be assigned street numbers between N and M, inclusive, that do not have repeated digits.\nInput\nThe input consists of a single line that contains two integers N and M, as described above (1 ≤ N ≤ M ≤ 5000).\nOutput\nOutput a line with an integer representing the number of street house numbers between N and M, inclusive, with no repeated digits.",
    "samples": [
      [
        "87 104",
        "14"
      ],
      [
        "989 1022",
        "0"
      ],
      [
        "22 25",
        "3"
      ],
      [
        "1234 1234",
        "1"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Ines Kereki, Uruguay"
    },
    "hasImages": false
  },
  {
    "name": "Automated Checking Machine",
    "text": "The Internet Computer Parts Company (ICPC) is an on-line shop that sells computer parts. Pairs of in-line electrical connectors are among the most popular parts that ICPC sells. However, they are also one of the parts that are returned more often by unsatisfied customers, because due to errors in packaging the connectors sent to the costumers may not be compatible.\nAn in-line connector is composed of five connection points, labelled from 1 to 5. Each connection point of a connector can be either a plug or an outlet. We say two connectors are compatible if, for every label, one connection point is a plug and the other connection point is an outlet (in other words, two connectors are compatible if, for every connection point with the same label, a plug and an outlet meet when the two connectors are connected).\nThe figure below shows examples of two connectors that are compatible and two connectors that are not compatible.\nICPC is introducing a state-of-the-art Automated Checking Machine (ACM), with an optical checker, which will verify whether the two connectors packaged for a customer are indeed compatible. The com plex and expensive hardware of the ACM is ready, but they need your help to finish the software.\nGiven the descriptions of a pair of in-line connectors, your task is to determine if the connectors are compatible.\nInput\nThe first line contains five integers Xi (0 ≤ Xi ≤ 1 for i = 1,2,...,5), representing the connection points of the first connector in the pair. The second line contains five integers Yi (0 ≤ Yi ≤ 1 for i = 1,2,...,5), representing the connection points of the second connector. In the input, a 0 represents an outlet an a 1 represents a plug.\nOutput\nOutput a line with a character representing whether the connectors are compatible or not. If they are compatible write the uppercase letter “Y”; otherwise write the uppercase letter “N”.",
    "samples": [
      [
        "1 1 0 1 0\n0 0 1 0 1",
        "Y"
      ],
      [
        "1 0 0 1 0\n1 0 1 1 0",
        "N"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Ricardo Anido, Brazil"
    },
    "hasImages": true
  },
  {
    "name": "Dating On-Line",
    "text": "Alex registered in an online dating system to search for the perfect partner. The system requires each of its members to fill a form specifying how much they enjoy N different activities, grading them on a scale from 0 to 100. To present this information to potential dates, the system creates a profile featuring a special kind of polygon called “radial diagram”.\nA radial diagram for N activities is drawn by marking N points on the plane. Starting from the vertical direction, the i-th point in clockwise order represents the i-th activity specified by the member, and is a distance Si away from the center of the diagram, where Si is the score given by the member for the corresponding activity. The angle sustained at the center of the diagram from each pair of consecutive points is always the same, and the polygon is formed by drawing the segments whose endpoints are consecutive points. Note that for the purposes of the radial diagram, the first and last points are considered to be consecutive.\nFor example, if N = 6 Alex might specify the following activities: singing with score S1 = 10, running with score S2 = 60, listening to music with score S3 = 70, traveling with score S4 = 70, eating out with score S5 = 80, and visiting museums with score S6 = 80. Then the corresponding radial diagram would be as shown in the figure below.\nThe area of a radial diagram depends on the order in which the different activities are specified, and Alex suspects that a profile depicting a radial diagram with greater area might be more successful.\nFor example, the radial diagram in the following figure features the same activities and scores as the example above, but has a greater area.\nAlex has asked you to write a program to find the maximum possible area of a radial diagram given a list of activities graded with scores between 0 and 100.\nInput\nThe first line contains an integer N representing the number of activities (3 ≤ N ≤ 105). The second line contains N integers S1,S2,...,SN representing the scores given by Alex to each activity (0 ≤ Si ≤ 100 for i = 1,2,...,N).\nOutput\nOutput a line with a rational number representing the maximum possible area of a radial diagram featuring the scores given in the input. The result must be output as a rational number with exactly 3 digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "6\n10 60 70 70 80 80",
        "10002.593"
      ],
      [
        "3\n100 100 100",
        "12990.381"
      ],
      [
        "7\n16 37 50 35 12 39 24",
        "2772.765"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Rafael Garcia Gomes, Colombia"
    },
    "hasImages": true
  },
  {
    "name": "Game of Matchings",
    "text": "Adam and Carol are having a great time playing the Game of Matchings. The game is played on a string S composed of |S| lowercase English letters, s1s2 ...s|S|. The goal is to find all matchings of a special kind of pattern P in S. The pattern has length N and is defined by a sequence of integers between 1 and 26.\nWe consider a contiguous substring sisi+1 ...si+N−1 starting at position i of S a matching of pattern P if there is a mapping from the numbers in P to lowercase English letters such that the pattern is mapped to sisi+1...si+N−1 but no two distinct numbers are mapped to the same letter.\nFor instance, if S is ”awawww” and P is [10,21,10], the matchings of P are the substrings of S of length three starting at positions 1 and 2: ”awa” and ”waw”. Note that ”www” is not an occurence because pattern numbers 10 and 21 would both map to ’w’.\nAdam and Carol lost the answer sheet and are not sure if they are finding all occurrences for some of the strings in the game. Given S and P can you find the number of matchings for them? Input\nThe first line contains a non-empty string S of at most 5 × 105 characters. Each character of S is a lowercase English letter from ’a’ to ’z’. The second line contains an integer N representing the size of the pattern (1 ≤ N ≤ |S|). The third line contains N integers P1, P2, ..., PN denoting the pattern (1 ≤ Pi ≤ 26 for i = 1,2,...,N).\nOutput\nOutput a line with one integer representing the number of matchings of P found in S.",
    "samples": [
      [
        "awawww\n3\n10 21 10",
        "2"
      ],
      [
        "abcdefghij\n10\n1 2 3 4 5 6 7 8 9 1",
        "0"
      ],
      [
        "abbabaabbaababba\n4\n1 2 2 1",
        "5"
      ],
      [
        "aabcddabccefkkgem\n5\n10 10 3 14 9",
        "4"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Luís Fernando Dorelli de Abreu, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "Kill the Werewolf",
    "text": "In the popular board game One Night Werewolf, players are distributed randomly in the roles of villagers and Werewolves. The goal of the villagers is to decide together on one person to kill during the night – hopefully they will kill a Werewolf. Werewolves pose as villagers in the hope that the person killed is a villager, not a Werewolf.\nIn the variation Uncertain Werewolf, only one Werewolf exists and the game consists of two phases.\nDuring the first phase the players are still uncertain about who they should vote to kill, so each of them chooses two other players as possible victims. After the first phase the Werewolf reveals himself, and then in the second phase each player has to decide which one of their two initial choices they will vote to kill. The Werewolf is the last one to decide between his two initial choices, doing so after all the other players have decided already.\nThe Werewolf then loses the game if he has more votes than anyone else. If there is a draw, the Werewolf wins.\nYou are given the votes of N players after the first phase of the game. You should answer how many players could reveal themselves at this point as the Werewolf and still win the game if the other players chose their votes optimally to kill the Werewolf.\nInput\nThe first line contains an integer N (3 ≤ N ≤ 50), the number of players in the game. Each of the following N lines contains two integers, ai and bi (1 ≤ ai,bi ≤ N, ai (cid:54)= bi), the index of the players the i-th player decided to kill in the first voting phase. No player will try to kill himself.\nOutput\nOutput a line with one integer representing the number of players that could win the game if they were the Werewolf and everyone played optimally.",
    "samples": [
      [
        "5\n3 4\n1 3\n2 4\n1 3\n2 3",
        "4"
      ],
      [
        "4\n3 4\n1 4\n4 1\n3 1",
        "2"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Luis Fernando Dorelli de Abreu, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "Farm robot",
    "text": "To discourage birds such as crows and sparrows from feeding on his crops a farmer needed to put some scarecrows in his corn field. His nephew really likes robots, and suggested that he should use a robot scarecrow instead: “A single robot scarecrow can better protect the whole corn field and will last way more than ten traditional ones!”, he said.\nSince the farmer thinks his nephew is a smart boy, he took his advice and bought a robot scarecrow.\nThe robot moves along a pathway that surrounds the corn field. In the pathway there are N unmanned charging stations, numbered sequentially in clockwise order starting from 1. The figure below shows an example with eight charging stations.\nThe robot begins every day at station number 1, and is issued a sequence of commands that are to be performed in order during the day. These commands are generated based on advanced machine learning algorithms that work on data collected by sensors spread through the corn field, ensuring an optimal coverage of the crop. Each command results in the robot moving to another charging station next to the one it is currently at, either in clockwise or counter-clockwise direction.\nDespite the promises of optimal coverage by the robot, at the end of a certain day the farmer found part of his crop devastated. To figure out what might have happened the farmer wants to know how many times the robot was at the charging station closest to the devastated area. Given the number of the station closest to the devastated area and the sequence of commands for a single day, can you help the farmer find this number? Input\nThe first line contains three integers N, C and S representing respectively the number of posts (2 ≤ N ≤ 100), the number of commands (1 ≤ C ≤ 1000) and the charging station closest to the devastated area (1 ≤ S ≤ N). The second line contains C integers X1,X2,...,XC, representing the sequence of commands received by the robot scarecrow. For i = 1,2,...,C, if Xi is 1 then the i-th command means “move to the next charging station in clockwise order”, whereas if Xi is −1 then the i-th command means “move to the next charging station in counter-clockwise order”. The robot always starts at station number 1.\nOutput\nOutput a line with an integer representing the number of times the robot was at station number S during the day.",
    "samples": [
      [
        "8 8 3\n1 -1 1 1 1 -1 1 1",
        "2"
      ],
      [
        "5 4 1\n1 1 1 1",
        "1"
      ],
      [
        "2 1 1\n1",
        "1"
      ],
      [
        "2 1 2\n1",
        "1"
      ],
      [
        "2 2 1\n-1 1",
        "2"
      ],
      [
        "2 2 1\n-1 -1",
        "2"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Ricardo Anido, Brazil"
    },
    "hasImages": true
  },
  {
    "name": "Counting Self-Rotating Subsets",
    "text": "A set of points in the plane is self-rotating if there is a point P, the center, and an angle α, expressed in degrees, where 0 < α < 360, such that the rotation of the plane, with center P and angle α, maps every point in the set to some point also in the set.\nYou are given a set of N distinct points, all having integer coordinates. Find the number of distinct subsets of size 1,2,...,N that are self-rotating. Two subsets are considered distinct if one contains a point that the other does not contain.\nInput\nThe first line of the input contains one integer N representing the number of points in the input set (1 ≤ N ≤ 1000). Each of the following N lines describes a different point of the set, and contains two integers X and Y giving its coordinates in a Cartesian coordinate system (−109 ≤ X,Y ≤ 109). All points in the input set are distinct.\nOutput\nOutput a single line containing N integers S1,S2,...,SN. For i = 1,2,...,N the integer Si must be the number of subsets of i points of the input set that are self-rotating. Since these numbers can be very big, output them modulo 109 + 7.",
    "samples": [
      [
        "3\n1 1\n2 2\n1 0",
        "3 3 0"
      ],
      [
        "7\n-2 0\n-1 1\n0 2\n0 0\n2 0\n1 -1\n0 -2",
        "7 21 5 5 3 1 1"
      ],
      [
        "1\n-1000000000 1000000000",
        "1"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Back to the Future",
    "text": "Doctor Emmet is working on a safer device to travel in time. He gathered N different and rare pieces of metal. Each piece may be compatible with some other different pieces. He has a complete list with M distinct pairs of compatible metals. Any pair of metals that is not on the list is incompatible.\nIn order for the device to work, he must choose a set of metals such that each of them is compatible with at least A others in that set. However, in order to preserve some balance, they must also be incompatible with at least B others in that set.\nMore metals mean more energy and a safer device. This is why Doctor Emmet needs your help, he wants to know the size of the largest set he can choose that meets these criteria.\nInput\nThe first line contains four integers N, M, A and B, representing respectively how many different pieces of metal exist (1 ≤ N ≤ 105), how many compatibilities there are (1 ≤ M ≤ 105) and the variables A and B described in the problem statement (0 ≤ A,B < N). The different metals are conveniently numbered from 1 to N. Each of the following M lines contains two integers X and Y corresponding to a pair of compatible metals (1 ≤ X,Y ≤ N with X (cid:54)= Y ). There are no repeated pairs in the input.\nOutput\nOutput a line with one integer representing the size of the largest set of metals satisfying the requirements specified in the problem statement.",
    "samples": [
      [
        "3 1 1 0\n1 2",
        "2"
      ],
      [
        "3 1 1 1\n1 2",
        "0"
      ],
      [
        "7 12 2 2\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n3 4\n7 1\n2 7\n3 7\n4 7\n5 7",
        "6"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Bruno Junqueira Adami, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "Assigning Teams",
    "text": "Four friends are playing table tennis. Each of them has a skill level which is represented by an integer number: the higher the number, the better the player is.\nThe four friends want to form two teams of two players each. For the game to be more exciting, they want the skill level of the teams to be as close as possible. The skill level of a team is the sum of the skill levels of the players in that team.\nAlthough they are very good table tennis players, these friends are not so good at other things, like Math or Computing. Can you help them find the smallest possible difference between the teams’ skill levels? Input\nThe input consists of a single line that contains four integers A, B, C and D, representing the skill levels of the four players (0 ≤ A ≤ B ≤ C ≤ D ≤ 104).\nOutput\nOutput a line with an integer representing the smallest difference between the skill levels for both teams.",
    "samples": [
      [
        "4 7 10 20",
        "7"
      ],
      [
        "0 0 1 1000",
        "999"
      ],
      [
        "1 2 3 4",
        "0"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Emission Spectrum",
    "text": "Scientists at the Interstellar Consortium of Planets and Constellations (ICPC) are studying the composition of many celestial objects by analyzing their emission spectrum. The emission spectrum of a celestial object is the spectrum of frequencies of electromagnetic radiation emitted due to its atomic energy transitions, along with the intensity of the emitted radiation. In other words, it corresponds to the intensity of each color for the light radiated by the object.\nAccording to the postulates of quantum mechanics, the emission spectrum of a celestial object is always discrete. Therefore, the ICPC can store the emission spectrum of an object as a sequence of integers where each position in the sequence corresponds to the intensity of a specific wavelength. In this representation of the spectrum, larger numbers correspond to higher emitted intensities, and contiguous positions in the sequence correspond to contiguous wavelengths in the spectrum.\nThe emission spectrum of a celestial object is the result of very complex physical processes, and may thus vary through its lifetime. Notably, due to complex atomic reactions not yet fully understood, the intensity of two contiguous wavelengths can be swapped at a given time.\nThe ICPC is studying very closely the emission spectrum of some celestial object at particular wavelengths. However, scientists are having trouble obtaining useful data from their observations.\nParticularly, given a range of wavelengths and an integer K, they are interested in knowing the intensity of the wavelength which has the K-th smallest intensity in that range. Given a list of observational events mixing information requested by the scientists and wavelength intensity swaps in the spectrum, your task is to help the scientists by answering their queries.\nInput\nThe first line contains two integers N and Q, representing the number of measured wavelengths and the number of events, respectively (1 ≤ N,Q ≤ 105). The second line contains N integers I1,I2,...,IN, representing Ii the initial intensity of the i-th wavelength (0 ≤ Ii ≤ 109 for i = 1,2,...,N). Each of the following Q lines corresponds to an event, and starts with a character representing the event type. If the event corresponds to a query from the ICPC scientists, the character is a ‘Q’; if it corresponds to an atomic swap reaction it is an ‘S’. Query events have three integers A,B and K after the ‘Q’ character, representing that the scientists are interested in the K-th smallest intensity in the range from A to B, inclusive (1 ≤ A ≤ B ≤ N and 1 ≤ K ≤ B − A + 1). Intensity swapping events have a single integer W after the ‘S’ character, representing that the intensities for wavelengths at positions W and W + 1 in the spectrum are swapped (1 ≤ W ≤ N − 1).\nOutput\nOutput one line for each query event in the input, containing a single integer number representing the intensity of the wavelength with the K-th smallest intensity in the range of the spectrum from A to B, inclusive (where A, B and K are the parameters specified in the corresponding query). Queries should be answered in the same order in which they appear in the input.",
    "samples": [
      [
        "10 4\n1 2 6 7 5 8 9 3 0 4\nQ 1 10 7\nQ 2 5 2\nS 5\nQ 2 5 2",
        "6\n5\n6"
      ],
      [
        "4 3\n33333333 22222222 44444444 11111111\nQ 3 3 1\nS 1\nQ 2 4 2",
        "44444444\n33333333"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Nico Lehmann, Chile"
    },
    "hasImages": false
  },
  {
    "name": "Just in Time",
    "text": "Hello contestant, I want to play a game. Your coach is in the contest room with a bomb about to explode in his hands. This bomb will be set to detonate in T seconds, and if it detonates in the contest room it is going to explode only your team’s balloons.\nI can tell you that the contest room is inside a building that contains N rooms in total. From each room there is exactly one direct tunnel to another room, which can only be used in one direction. For example if room A connects to room B, then you can walk from room A to room B, but not from room B to room A, unless of course room B has a direct tunnel to room A.\nThe bomb has a special mechanism that detects if your coach stops moving, and if so it immediately triggers the detonation taking all your team’s balloons down. For that reason your coach will constantly walk between the rooms, taking exactly one second to move through each tunnel. The only way for your team to save its balloons is for your coach not to be in the contest room when the bomb detonates.\nYou don’t have the building map in hand, all I can tell you is that the tunnels are chosen uniformly at random. However, I will give you the possibility to set T, which must be an integer between 2 and N inclusive. Your job is to choose T in such a way that it maximizes your balloons’ chance to survive this riddle.\nLet the game begin.\nInput\nThe input consists of a single line that contains one integer N, representing how many rooms there are in the building (2 ≤ N ≤ 109).\nOutput\nOutput a line with one integer representing the value of T that maximizes your balloons’ chance to survive the riddle.",
    "samples": [
      [
        "3",
        "3"
      ],
      [
        "12",
        "11"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Bruno Junqueira Adami, Brazil"
    },
    "hasImages": false
  },
  {
    "name": "Internet Trouble",
    "text": "The government is planning to provide internet to people in remote areas, in this case small towns that developed on the side of a long and busy highway. There are N towns located side by side along the highway, each taking up exactly one kilometer of highway. The towns are numbered consecutively along the highway from 1 to N. To provide an internet connection, the government is going to place access-point stations with satellite links, which will provide wired connections for the towns.\nThe stations are to be placed in one or more different towns, being B the cost to build each station.\nSince the government wants to provide extremely good service, each house will be connected directly to one of these stations. When connecting a house in town i, we must choose a station in town j for connecting that house. The connection cost is then |i − j| × C, where C is the cost of a kilometer of cable. Notice that the intra-town cable cost is small enough to be ignored, so in particular houses in a town where a station is placed do not incur in any cabling cost when connected to that station.\nGiven N, B, C and the number of houses in each town, write a program to determine the minimum total cost of providing an internet connection for every house in every town, including the cost of building the stations and laying the cabling for each house. Because the government hasn’t decided yet on the final number of access-point stations to be built, you should calculate the minimum cost when there are 1, 2, ..., N stations.\nInput\nThe first line contains three integers N, B and C representing the number of towns, the cost of building one access-point station and the cost of one kilometer of cable, respectively (1 ≤ N ≤ 6000, 1 ≤ B ≤ 109 and 1 ≤ C ≤ 100). The second line contains N integers H1,H2,...,HN, where Hi represents the number of houses in the i-th town (1 ≤ Hi ≤ 109 for i = 1,2,...,N).\nOutput\nOutput a line with N integers representing the minimum total cost of providing an internet connec tion for every house in every town when building 1, 2, ..., N access-point stations.",
    "samples": [
      [
        "5 6 1\n1 2 3 4 5",
        "21 20 22 25 30"
      ],
      [
        "6 8 1\n9 10 3 2 7 6",
        "69 36 35 37 42 48"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Hotel Rewards",
    "text": "You are planning to spend your holidays touring Europe, staying each night in a different city for N consecutive nights. You have already chosen the hotel you want to stay in for each city, so you know the price Pi of the room you’ll be staying at during the i-th night of your holidays, for i = 1,...,N.\nYou will book your accommodation through a website that has a very convenient rewards program, which works as follows. After staying for a night in a hotel you booked through this website you are awarded one point, and at any time you can exchange K of these points in your account for a free night in any hotel (which will however not give you another point).\nFor example, consider the case with N = 6 and K = 2 where the prices for the rooms are P1 = 10, P2 = 3, P3 = 12, P4 = 15, P5 = 12 and P6 = 18. After paying for the first four nights you would have four points in your account, which you could exchange to stay for free the remaining two nights, paying a total of P1 + P2 + P3 + P4 = 40 for your accommodation. However, if after the first three nights you use two of the three points you earned to stay the fourth night for free, then you can pay for the fifth night and use the final two points to get the sixth one for free. In this case, the total cost of your accommodation is P1 + P2 + P3 + P5 = 37, so this option is actually more convenient.\nYou want to make a program to find out what the minimum possible cost for your holidays’ accom modation is. You can safely assume that all hotels you want to stay always will have a room available for you, and that the order of the cities you are going to visit cannot be altered.\nInput\nThe first line of input contains two integers N and K, representing the total number of nights your holidays will last, and the number of points you need in order to get a free night (1 ≤ N,K ≤ 105). The second line contains N integers P1, P2, ..., PN, representing the price of the rooms you will be staying at during your holidays (1 ≤ Pi ≤ 104 for i = 1,2,...,N).\nOutput\nOutput a line with one integer representing the minimum cost of your accommodation for all of your holidays.",
    "samples": [
      [
        "6 2\n10 3 12 15 12 18",
        "37"
      ],
      [
        "6 1\n10 3 12 15 12 18",
        "25"
      ],
      [
        "5 5\n1 2 3 4 5",
        "15"
      ]
    ],
    "source": {
      "year": "2016",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Fidel I. Schaposnik, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Guarda costeira",
    "text": "“Pega ladrão! Pega ladrão!” Roubaram a bolsa de uma inocente senhora que caminhava na praia da Nlogônia e o ladrão fugiu em direção ao mar. Seu plano parece óbvio: ele pretende pegar um barco e escapar! O fugitivo, que a essa altura já está a bordo de sua embarcação de fuga, pretende seguir perpen dicularmente à costa em direção ao limite de águas internacionais, que fica a 12 milhas náuticas de distância, onde estará são e salvo das autoridades locais. Seu barco consegue percorrer essa distância a uma velocidade constante de VF nós.\nA Guarda Costeira pretende interceptá-lo, e sua embarcação tem uma velocidade constante de VG nós. Supondo que ambas as embarcações partam da costa exatamente no mesmo instante, com uma distância de D milhas náuticas entre elas, será possível a Guarda Costeira alcançar o ladrão antes do limite de águas internacionais? Assuma que a costa da Nlogônia é perfeitamente retilínea e o mar bastante calmo, de forma a permitir uma trajetória tão retilínea quanto a costa.\nEntrada\nA entrada consiste de apenas uma linha, contendo três inteiros, D, VF e VG, indicando respectivamente a distância inicial entre o fugitivo e a Guarda Costeira, a velocidade da embarcação do fugitivo e a velocidade da embarcação da Guarda Costeira.\nSaída\nSeu programa deve produzir uma única linha, contendo ‘S’ se for possível que a Guarda Costeira alcance o fugitivo antes que ele ultrapasse o limite de águas internacionais ou ‘N’ caso contrário.\nRestrições • 1 ≤ D ≤ 100 • 1 ≤ VF ≤ 100 • 1 ≤ VG ≤ 100 Exemplos",
    "samples": [
      [
        "5 1 12",
        "S"
      ],
      [
        "12 10 7",
        "N"
      ],
      [
        "12 9 10",
        "N"
      ],
      [
        "10 5 5",
        "N"
      ],
      [
        "9 12 15",
        "S"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Botas perdidas",
    "text": "A divisão de Suprimentos de Botas e Calçados do Exército comprou um grande número de pares de botas de vários tamanhos para seus soldados. No entanto, por uma falha de empacotamento da fábrica contratada, nem todas as caixas entregues continham um par de botas correto, com duas botas do mesmo tamanho, uma para cada pé. O sargento mandou que os recrutas retirassem todas as botas de todas as caixas para reembalá-las, desta vez corretamente.\nQuando o sargento descobriu que você sabia programar, ele solicitou com a gentileza habitual que você escrevesse um programa que, dada a lista contendo a descrição de cada bota entregue, determina quantos pares corretos de botas poderão ser formados no total.\nEntrada\nA primeira linha da entrada contém um inteiro N indicando o número de botas individuais entregues.\nCada uma das N linhas seguintes descreve uma bota, contendo um número inteiro M e uma letra L, separados por um espaço em branco. M indica o número do tamanho da bota e L indica o pé da bota: L = ‘D’ indica que a bota é para o pé direito, L = ‘E’ indica que a bota é para o pé esquerdo.\nSaída\nSeu programa deve imprimir uma única linha contendo um único número inteiro indicando o número total de pares corretos de botas que podem ser formados.\nRestrições • 2 ≤ N ≤ 104 • N é par.\n• 30 ≤ M ≤ 60 • L ∈ {D,E} Exemplos",
    "samples": [
      [
        "4\n40 D\n41 E\n41 D\n40 E",
        "2"
      ],
      [
        "6\n38 E\n39 E\n40 D\n38 D\n40 D\n37 E",
        "1"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Máquina Dobradora",
    "text": "Uma das principais ferramentas de uma Máquina de Turing, que possibilita que seu poder de computação seja maior do que de outros modelos mais simples, é uma fita infinita, dividida em células, onde informações de um alfabeto ficam armazenadas.\nUma Máquina Dobradora é uma máquina inspirada na Máquina de Turing, onde a fita é finita, os dados armazenados são números inteiros e, ao invés do mecanismo de funcionamento tradicional de Turing, a máquina utiliza operações de dobras da fita para fazer computações.\nPara efetuar uma dobra, a máquina escolhe uma posição entre células adjacentes e, ao realizar a dobra, ela soma os valores das células que se sobrepuseram, como pode ser visto na figura abaixo.\n      Observe também que a dobra pode ser feita em uma posição anterior ao centro da fita, como ilustrado a seguir. Note também que, com isso, podem ser feitas dobras também no início e no final da fita, invertendo a ordem desta.\nA empresa Science of Bends Company vem desenvolvendo versões comerciais da Máquina Dobra dora e a produção tem aumentado recentemente. Infelizmente o último lote de Máquinas Dobradoras produzidas está com problemas e algumas máquinas não estão funcionando corretamente. Assim, testes são necessários para evitar a venda de produtos com defeito, o que poderia denegrir a imagem da empresa.\nPara testar as máquinas, um conjunto de testes é dado e, para cada fita, a máquina devolve o resultado da computação. Assim os engenheiros responsáveis pelos testes tomam nota do resultado e podem verificar se este está correto. Mas os engenheiros esqueceram-se de tomar nota de qual com putação foi feita em cada conjunto de teste. Para evitar a necessidade de testar todas as máquinas novamente, os engenheiros estariam satisfeitos em descobrir se pelo menos existe uma sequência de dobras coerente para um par de fitas de entrada e saída. Para isso, eles contrataram você para desen volver um programa que verifique, para cada fita de entrada, se existe uma sequência de dobraduras que leve a uma fita de saída.\nEntrada\nCada caso de teste é composto por 4 linhas. As primeiras duas linhas referem-se à entrada fornecida à Máquina Dobradora e as duas seguintes referem-se à saída fornecida pela Máquina. A primeira linha da entrada contém um único inteiro N, descrevendo o tamanho da fita de entrada. A linha seguinte conterá N inteiros v1,...,vN, correspondentes ao conteúdo da fita de entrada. A terceira linha contém um inteiro M, o tamanho da fita de saída e a última linha conterá inteiros w1,...,wM, correspondentes ao conteúdo da fita de saída.\nSaída\nA saída de cada caso de teste conterá uma única linha contendo a letra “S” caso exista uma sequência de dobraduras que transforme a fita de entrada na fita de saída e “N” em caso contrário.\nRestrições • 1 ≤ M ≤ N ≤ 15.\n• 0 ≤ vi,wj ≤ 108, para 1 ≤ i ≤ N e 1 ≤ j ≤ M.\nExemplos\nExemplos\nEntrada\nSaída\n7 S   4   Entrada\nSaída\n7 S   5   Entrada\nSaída\n4 S   3 4 1 10 Entrada\nSaída\n6 N 19 23 3 5  0 2 34 64 Entrada\nSaída\n6 S   3 4 5 6 6   3 4 5 6 Entrada\nSaída\n6 S   3 4 5 6 6 6 5 4 3 2 1",
    "samples": [
      [
        "7\n5 6 23 8 19 7 10\n4\n5 16 30 27",
        "S"
      ],
      [
        "7\n1 2 3 4 5 6 7\n5\n7 6 5 5 5",
        "S"
      ],
      [
        "4\n1 2 3 4\n1\n10",
        "S"
      ],
      [
        "6\n19 23 3 51 2 0\n2\n34 64",
        "N"
      ],
      [
        "6\n1 2 3 4 5 6\n6\n1 2 3 4 5 6",
        "S"
      ],
      [
        "6\n1 2 3 4 5 6\n6\n6 5 4 3 2 1",
        "S"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Linhas de contêineres",
    "text": "Um carregamento de Nlogs, principal produto de exportação de Nlogônia, está no porto, em contêineres, pronto para ser embarcado. Todos os contêineres têm as mesmas dimensões e são cubos. Os contêineres estão organizados no pátio do porto em L linhas e C colunas, num total de LC contêineres. Cada contêiner está marcado com um número de identificação distinto, de 1 a LC.\nCada uma das L linhas de contêineres será embarcada em um navio distinto. Para facilitar o desembarque nos divesos países em que serão entregues, os containeres de uma linha devem estar organizados de forma que os números de identificação estejam ordenados. Mais precisamente, a linha 1 foi organizada no pátio de forma a conter os contêineres identificados de 1 a C ordenados crescen temente, a linha 2 de forma a conter os contêineres de C + 1 a 2C (ordenados crescentemente), e assim por diante, até a linha L, organizada de forma a conter os contêineres de (L − 1)C + 1 a LC (ordenados crescentemente). A figura (a) abaixo mostra a organização de um carregamento com 5 linhas e 4 colunas de contêineres.\nO guindaste de embarque é capaz de movimentar ou uma linha completa ou uma coluna completa de contêineres, não sendo capaz de movimentar outros tipos de agrupamentos ou contêineres individuais.\nNa noite anterior ao embarque, um grupo de estivadores operou os guindastes para trocar linhas e colunas do carregamento, como forma de protestar quanto aos baixos salários. A figura (b) acima mostra a configuração dos contêineres apás a troca das linhas 1 e 4; a figura (c) mostra a configuração após mais uma troca, entre as colunas 2 e 3.\nO carregamento precisa ser embarcado ainda hoje, mas antes disso é necessário que os contêineres sejam reorganizados da forma descrita. Você deve escrever um programa que, dada a informação sobre a posição de cada contêiner após o protesto, determine se é possível recolocar os contêineres na forma originalmente prevista utilizando apenas os guindastes, e nesse caso calcular o menor número de trocas de linhas e colunas necessário para esse fim.\nEntrada\nA primeira linha de um programa contém dois inteiros L e C indicando respectivamente o número de linhas e o número de colunas do carregamento. As L linhas seguintes descrevem a posição dos contêineres depois do protesto dos estivadores. Cada uma dessas L linhas contém C números inteiros Xl,c indicando a posição de um contêiner. Cada número inteiro entre 1 e LC aparece na entrada, em alguma das L linhas. É garantido que cada número na configuração apareça uma única vez cada e que todos os números entre 1 e LC aparecerão na mesma.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o número mínimo de trocas de linhas e colunas que devem ser realizadas pelo guindaste para recolocar os contêineres na posição original. Se não for possível colocar os contêineres na posição original, utilizando apenas trocas de linhas e colunas, imprima o caractere ‘*’.\nRestrições • 1 ≤ L ≤ 300 • 1 ≤ C ≤ 300 • 1 ≤ Xl,c ≤ LC Exemplos\nEntrada\nSaída\n5 4 2",
    "samples": [
      [
        "2 2\n3 4\n1 2",
        "1"
      ],
      [
        "3 3\n9 2 4\n5 8 7\n6 1 3",
        "*"
      ],
      [
        "5 4\n13 15 14 16\n5 7 6 8\n9 11 10 12\n1 3 2 4\n17 19 18 20",
        "2"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Triângulos",
    "text": "São dados N pontos em uma circunferência. Você deve escrever um programa que determine quantos triângulos equiláteros distintos podem ser construídos usando esses pontos como vértices.\nA figura abaixo ilustra um exemplo; (a) mostra um conjunto de pontos, determinados pelos com primentos dos arcos de circunferência que têm pontos adjacentes como extremos, e (b) mostra os dois triângulos que podem ser construídos com esses pontos.\nEntrada\nA primeira linha da entrada contém um número inteiro N, o número de pontos dados. A segunda linha contém N inteiros Xi, representando os comprimentos dos arcos entre dois pontos consecutivos na circunferência: para 1 ≤ i ≤ (N − 1), Xi representa o comprimento do arco entre os pontos i e i + 1; XN representa o comprimento do arco entre os pontos N e 1.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o número de triângulos equiláteros distintos que podem ser construídos utilizando os pontos dados como vértices.\nRestrições • 3 ≤ N ≤ 105 • 1 ≤ Xi ≤ 103, para 1 ≤ i ≤ N Exemplos",
    "samples": [
      [
        "8\n4 2 4 2 2 6 2 2",
        "2"
      ],
      [
        "6\n3 4 2 1 5 3",
        "1"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Chefe",
    "text": "Todos conhecem Iks, a última moda em redes sociais, que fez tanto sucesso que competidores como Facebook e Google+ estão começando a ter dificuldades financeiras. Assim como muitas companhias “.com”, Iks surgiu em uma pequena garagem, mas hoje emprega milhares de pessoas no mundo todo.\nO sistema de gerência utilizado em Iks é bem diferente do padrão. Por exemplo, não há diretorias ou superintendências. No entanto, como é usual em outras companhias, há uma cadeia (ou melhor, várias cadeias) de comando: uma pessoa pode gerenciar outras pessoas, e pode ser gerenciada por outras pessoas. As figuras abaixo mostra a cadeia de comando para alguns empregados, junto com suas idades.\nUma pessoa P1 pode gerenciar outra pessoa P2 diretamente (quando P1 é o superior imediato de P2) ou indiretamente (quando P1 gerencia diretamente uma pessoa P3 que gerencia P2 direta ou indiretamente). Por exemplo, na figura (a) acima, Alice gerencia David diretamente e Clara indiretamente. Uma pessoa não gerencia a si própria, nem direta nem indiretamente.\nUm folclore que apareceu em Wall Street é que Iks é tão bem sucedido porque em sua rede de comando um(a) gerente é sempre mais jovem do que as pessoas que ele(a) gerencia. Como podemos ver na figura acima, isso não é verdade. Mas esse folclore incentivou Iks a desenvolver uma ferramenta para analisar o seu sistema de gerenciamento, e estudar se tem alguma influência no sucesso da empresa.\nVocê foi contratado para trabalhar nessa ferramenta.\nDadas a descrição da cadeia de comando na Iks e as idades de seus empregados, escreva um programa que execute uma série de instruções. Instruções podem ser de dois tipos: trocas de gerência e perguntas. Uma instrução de troca de gerência faz dois empregados A e B trocarem suas posições na cadeia de comando. Como exemplo, a figura (b) acima mostra a cadeia de comando resultante quando David e George trocam suas respectivas posições na cadeia de comando. Uma instrução de pergunta identifica um empregado A e deseja saber a idade do mais jovem gerente (direto ou indireto) de A na cadeia de comando. Por exemplo, no cenário da figura (a) acima a idade do(a) gerente mais jovem de Clara é 18 anos; já no cenário da figura (b), a idade do(a) gerente mais jovem de Clara é 21 anos.\nInput\nA entrada é composta de várias linhas. A primeira linha contém três inteiros N, M e I, indicando respectivamente o número de empregados, o número de relações de gerência direta e o número de instruções. Empregados são identificados por números de 1 a N. A segunda linha contém N inteiros Ki, onde Ki indica a idade do empregado de número i.\nCada uma das M linhas seguintes contém dois inteiros X e Y , indicando que X gerencia Y diretamente. Seguem-se I linhas, cada uma descrevendo uma instrução. Uma instrução de troca de gerência é descrita em uma linha contendo o identificador T seguido de dois inteiros A e B, indicando os dois empregados que devem trocar seus lugares na cadeia de comando. Uma instrução de pergunta é descrita em uma linha contendo o identificador P seguido de um inteiro E , indicando um empregado.\nA última instrução será sempre do tipo pergunta.\nOutput\nPara cada instrução de pergunta seu programa deve imprimir uma linha contendo um único inteiro, a idade da pessoa mais jovem que gerencia (direta ou indiretamente) o empregado nomeado na pergunta.\nSe o empregado nomeado não possui um gerente, imprima o caractere ‘*’ (asterisco).\nRestrições • 1 ≤ N ≤ 500 • 0 ≤ M ≤ 60 × 103 • 1 ≤ I ≤ 500 • 1 ≤ Ki ≤ 100, para 1 ≤ i ≤ N • 1 ≤ X,Y ≤ N, X (cid:54)= Y • 1 ≤ A,B ≤ N • 1 ≤ E ≤ N Exemplos",
    "samples": [
      [
        "7 8 9\n21 33 33 18 42 22 26\n1 2\n1 3\n2 5\n3 5\n3 6\n4 6\n4 7\n6 7\nP 7\nT 4 2\nP 7\nP 5\nT 1 4\nP 7\nT 4 7\nP 2\nP 6",
        "18\n21\n18\n18\n*\n26"
      ],
      [
        "6 5 6\n10 20 30 40 50 60\n1 5\n1 4\n3 6\n2 5\n4 5\nP 1\nP 5\nP 6\nT 1 6\nP 1\nP 4",
        "*\n10\n30\n30\n60"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Zerinho ou Um",
    "text": "Todos devem conhecer o jogo Zerinho ou Um (em algumas regiões também conhecido como Dois ou Um), utilizado para determinar um ganhador entre três ou mais jogadores. Para quem não conhece, o jogo funciona da seguinte maneira. Cada jogador escolhe um valor entre zero ou um; a um comando (geralmente um dos competidores anuncia em voz alta “Zerinho ou... Um!”), todos os participantes mostram o valor escolhido, utilizando uma das mãos: se o valor escolhido foi um, o competidor mostra o dedo indicador estendido; se o valor escolhido foi zero, mostra a mão com todos os dedos fechados.\nO ganhador é aquele que tiver escolhido um valor diferente de todos os outros; se não há um jogador com valor diferente de todos os outros (por exemplo todos os jogadores escolhem zero, ou um grupo de jogadores escolhe zero e outro grupo escolhe um), não há ganhador.\nAlice, Beto e Clara são grandes amigos e jogam Zerinho a toda hora: para determinar quem vai comprar a pipoca durante a sessão de cinema, quem vai entrar na piscina primeiro, etc. Jogam tanto que resolveram fazem um plugin no Facebook para jogar Zerinho. Como não sabem programar, dividiram as tarefas entre amigos que sabem, inclusive você.\nDados os três valores escolhidos por Alice, Beto e Clara, cada valor zero ou um, escreva um programa que determina se há um ganhador, e nesse caso determina quem é o ganhador.\nEntrada\nA entrada é composta de uma única linha, que contém três inteiros A, B e C, indicando respectivamente os valores escolhidos por Alice, Beto e Clara.\nSaída\nSeu programa deve produzir uma única linha, contendo um único caractere. Se o vencedor é Alice o caractere deve ser ‘A’, se o vencedor é Beto o caractere deve ser ‘B’, se o vencedor é Clara o caractere deve ser ‘C’ e se não há vencedor o caractere deve ser ‘*’ (asterisco).\nRestrições • A,B,C ∈ {0,1} Exemplos",
    "samples": [
      [
        "1 1 0",
        "C"
      ],
      [
        "0 0 0",
        "*"
      ],
      [
        "1 0 0",
        "A"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Mergulho",
    "text": "O recente terremoto em Nlogônia não chegou a afetar muito as edificações da capital, principal epicentro do abalo. Mas os cientistas detectaram que o principal dique de contenção teve um dano significativo na sua parte subterrânea que, se não for consertado rapidamente, pode causar o seu desmoronamento, com a consequente inundação de toda a capital.\nO conserto deve ser feito por mergulhadores, a uma grande profundidade, em condições extre mamente difíceis e perigosas. Mas como é a sobrevivência da própria cidade que está em jogo, seus moradores acudiram em grande número como voluntários para essa perigosa missão.\nComo é tradicional em missões perigosas, cada mergulhador recebeu no início do mergulho uma pequena placa com um número de identificação. Ao terminar o mergulho, os voluntários devolviam a placa de identificação, colocando-a em um repositório.\nO dique voltou a ser seguro, mas aparentemente alguns voluntários não voltaram do mergulho.\nVocê foi contratado para a penosa tarefa de, dadas as placas colocadas no repositório, determinar quais voluntários perderam a vida salvando a cidade.\nEntrada\nA entrada é composta de duas linhas. A primeira linha contém dois inteiros N e R, indicando respectivamente o número de voluntários que mergulhou e o número de voluntários que retornou do mergulho. Os voluntários são identificados por números de 1 a N. A segunda linha da entrada contém R inteiros, indicando os voluntários que retornaram do mergulho (ao menos um voluntário retorna do mergulho).\nSaída\nSeu programa deve produzir uma única linha, contendo os identificadores dos voluntários que não retornaram do mergulho, na ordem crescente de suas identificações. Deixe um espaço em branco após cada identificador (note que isto significa que deve haver um espaço em branco também após o último identificador). Se todos os voluntários retornaram do mergulho, imprima apenas o caractere ‘*’ (asterisco).\nRestrições • 1 ≤ R ≤ N ≤ 104 Exemplos",
    "samples": [
      [
        "5 3\n3 1 5",
        "2 4"
      ],
      [
        "6 6\n6 1 3 2 5 4",
        "*"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Caminhão",
    "text": "A Sociedade de Balões Coloridos (SBC) é a principal fornecedora de balões para competições de programação; ela dispõe de grandes fábricas e depósitos, além de uma extensa frota de caminhões para garantir a alegria dos competidores.\nHá várias sedes regionais na Nlogônia, todas as quais contrataram a SBC para o fornecimento de balões para a prova. A Nlogônia é um arquipélago ligado por várias pontes. Cada ilha do arquipélago pode conter várias sedes regionais e vários depósitos da SBC.\nAo planejar as rotas, a SBC se deparou com um problema: por razões de segurança, cada ponte da Nlogônia tem um limite máximo de peso permitido para os veículos que trafegam sobre ela. Devido ao grande número de pontes na Nlogônia, e ao elevado peso da mercadoria transportada, o diretor de operações da SBC pediu que você escrevesse um programa que determina o maior peso bruto que pode ser transportado entre os depósitos e os locais de prova.\nEntrada\nA primeira linha contém três inteiros N, M e S, indicando, respectivamente, o número de ilhas da Nlogônia, o número de pontes que ligam as ilhas e o número de sedes. As ilhas nlogonianas são numeradas de 1 a N.\nCada uma das M linhas seguintes descreve uma ponte. A descrição de cada ponte consiste de uma linha contendo três inteiros A, B e P, indicando as duas ilhas ligadas por aquela ponte e o peso máximo permitido naquela ponte, em toneladas.\nTodas as pontes são de mão dupla; cada par de ilhas é ligado por no máximo uma ponte; é possível ir de qualquer ilha para qualquer outra ilha utilizando apenas as pontes do arquipélago (mas pode ser preciso passar por outras ilhas primeiro).\nCada uma das S linhas seguintes descreve uma sede. A descrição de cada sede consiste de uma linha contendo dois inteiros A e B, indicando, respectivamente, a ilha onde está a sede e a ilha onde está o depósito que irá fornecer os balões àquela sede.\nSaída\nPara cada sede, na ordem em que elas foram descritas na entrada, seu programa deve imprimir uma linha contendo um único inteiro, indicando o maior peso bruto, em toneladas, que pode ser transportado por caminhão do depósito que irá fornecer os balões até ela.\nRestrições • 2 ≤ N ≤ 2 × 104 • 1 ≤ M ≤ 105 • 1 ≤ S ≤ 5 × 104 • 1 ≤ A,B ≤ N, A (cid:54)= B • 0 ≤ P ≤ 105 Exemplos",
    "samples": [
      [
        "4 5 4\n1 2 9\n1 3 0\n2 3 8\n2 4 7\n3 4 4\n1 4\n2 1\n3 1\n4 3",
        "7\n9\n8\n7"
      ],
      [
        "4 5 2\n1 2 30\n2 3 20\n3 4 10\n4 1 40\n2 4 50\n1 3\n1 2",
        "20\n40"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Remendo",
    "text": "Carlão é muito preocupado com o meio ambiente. Sempre que possível, ele tenta utilizar meios de transporte menos poluentes. Recentemente ele conseguiu um emprego próximo de casa e agora está utilizando sua bicicleta para ir ao trabalho.\nInfelizmente, no caminho entre sua casa e seu emprego, há uma fábrica de pregos, que frequente mente deixa alguns pregos caírem de seus caminhões que acabam furando os pneus de da bicicleta de Carlão. Por isso, ele acaba tendo que fazer diversos remendos nos pneus de sua bicicleta.\nPara fazer os consertos, Carlão usa dois tipos diferentes de remendos. Ambos os tipos têm a largura do pneu da bicicleta, mas diferem no comprimento. Como o valor do remendo é proporcional ao seu comprimento, Carlão está tentando encontrar uma maneira de economizar, gastando o menor comprimento total possível de remendos para fazer os consertos, mas sem precisar cortá-los.\nO primeiro passo para efetuar o conserto é fazer uma marca com giz em uma posição do pneu e depois anotar as distâncias, medidas no sentido horário, de cada um dos furos em relação à marca de giz. Todos os furos devem ser cobertos por um remendo. Carlão gostaria de sua ajuda para determinar, a partir das posições dos furos, a forma mais econômica de efetuar o conserto.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém quatro inteiros N,C,T1 e T2. O inteiro N corresponde ao número de furos no pneu e C corresponde ao comprimento da circunferência do pneu, em centímetros. Os comprimentos dos remendos, em centímetros, são dados pelos inteiros T1 e T2. A segunda linha da entrada contém N inteiros Fi, um para cada furo, descrevendo a distância no sentido horário da marca de giz até o furo i, em centímetros.\nSaída\nSeu programa deve imprimir uma única linha contendo um inteiro indicando o menor comprimento total de remendos que é suficiente para consertar todos os furos do pneu.\nRestrições • 1 ≤ N ≤ 1000 • 1 ≤ C ≤ 106 • 1 ≤ T1,T2 ≤ C • 0 ≤ Fi ≤ C − 1, 1 ≤ i ≤ N • Se a distância entre dois furos é exatamente k centímetros, um remendo de comprimento k centímetros é suficiente para cobrir ambos os furos.\nExemplos",
    "samples": [
      [
        "5 20 2 3\n2 5 8 11 15",
        "8"
      ],
      [
        "4 20 12 9\n1 2 3 13",
        "12"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ô nibus",
    "text": "Competições de programação normalmente exigem infraestrutura e organização por parte dos res ponsáveis. Um problema que frequentemente deve ser resolvido é em relação ao transporte. Ao participar de uma competição recente, Ricardinho ficou observando os ônibus e micro-ônibus utiliza dos no transporte dos competidores, todos enfileirados um atrás do outro enquanto os competidores desembarcavam. Os veículos eram todos de uma mesma empresa, embora tivessem pinturas distin tas. Ricardinho começou a se perguntar de quantas maneiras aquela fila poderia ser formada, usando ônibus e micro-ônibus daquela empresa.\nCada ônibus tem 10 metros de comprimento. Já os micro-ônibus possuem 5 metros de compri mento. A partir de um dado comprimento total a ser alcançado com ônibus e micro-ônibus enfileirados, e das quantidades de cores diferentes para ônibus e micro-ônibus, Ricardinho quer saber de quantas formas uma fila pode ser formada.\nEntrada\nA entrada é composta por apenas uma linha, contendo três inteiros N,K e L, separados por espaço.\nO inteiro N representa o comprimento total, em metros, da fila que Ricardinho está considerando. K e L representam o número de cores distintas disponíveis para micro-ônibus e ônibus, respectivamente.\nNote que, como os inteiros N,K e L podem ser muito grandes, recomenda-se o uso de inteiros de 64 bits.\nSaída\nComo o número de formas diferentes de se formar a fila pode ser muito grande, Ricardinho está interessado nos últimos 6 dígitos da quantidade. Assim, seu programa deve produzir uma única linha contendo exatamente 6 dígitos, correspondentes aos últimos dígitos da solução.\nRestrições • 5 ≤ N ≤ 1015 e N é múltiplo de 5 • 1 ≤ K ≤ 1015 • 1 ≤ L ≤ 1015 Exemplos",
    "samples": [
      [
        "25 5 5",
        "006000"
      ],
      [
        "5 1000 1000",
        "001000"
      ],
      [
        "20 17 31",
        "111359"
      ],
      [
        "15 9 2",
        "000765"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Beautiful Yekaterinburg",
    "text": "Yekaterinburg is a beautiful city founded in the eighteenth century. Your task in this problem is to give us information about the precise year of its foundation. To make the task less overwhelming, you are only asked to calculate one of the four digits of the year.\nTo indicate the position of the digit you must calculate, digits are numbered between 1 and 4, from the most significant to the least significant. As an example, for the year 2013 digit 1 is “2”, digit 2 is “0”, digit 3 is “1” and digit 4 is “3”.\nIn case you failed to bring an encyclopedia with you, information about Yekaterinburg may be obtained via a clarification.\nInput\nA single line that contains an integer D (1 ≤ D ≤ 4) indicating the position of the digit you must calculate.\nOutput\nOutput a line with an integer representing the digit at position D of the year Yekaterinburg was founded.",
    "samples": [
      [
        "1",
        "1"
      ],
      [
        "2",
        "7"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Arithmetic with Morse",
    "text": "Morse code is a method used to transmit text messages as a series of dots “.” and dashes “-”. For example, the letter “A” is represented with “.-” and the letter “B” with “-...”. This code has been used for several years in the army and civil applications, but you are going to use it to do math.\nWith this in mind, we assign values to dots and dashes, and to save space we use two additional characters. The following table shows the four allowed characters and their values.\nCharacter Value . 1 - 5 : 2 (two times “.”) = 10 (two times “-”) A Morse number is a string that only contains the above four characters; its value is the sum of the values assigned to each individual character. As an example, the value of “=.-..” is 10+1+5+1+1 = 18. Notice that each Morse number represents a unique value, but there are values that can be represented with several Morse numbers. For instance, there are three Morse numbers with value 3: “...”, “.:” and “:.”.\nWell, numbers are ready. To form expressions we also need operators. We consider two arithmetic operators: “+” represents addition, while “*” represents multiplication. A Morse expression is a sequence of strings that interleaves Morse numbers and operators, that starts and ends with a Morse number, and contains at least one operator. Morse expressions can be evaluated by replacing each Morse number by its value, and then evaluating the obtained mathematical expression using the common operators precedence and associativity. For example, the value of the Morse expression “=.-.. + ... * :.” is 18 + 3 × 3 = 18 + (3 × 3) = 27. Given a Morse expression, print its value.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 4) representing the number of operators in the Morse expression. The second line contains 2N + 1 non-empty strings representing the Morse expression.\nThe line interleaves Morse numbers and operators, being the first and last strings Morse numbers.\nEach Morse number is at most 7 characters long, where each character is either “.”, “-”, “:” or “=”.\nEach operator is either “+” or “*”.\nOutput\nOutput a line with an integer representing the value of the Morse expression.",
    "samples": [
      [
        "2\n=.-.. + ... * :.",
        "27"
      ],
      [
        "3\n- * - + - * -",
        "50"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Disjoint water supply",
    "text": "Nlogonia is a queendom that consists of several cities located on a big mountain. The capital city is Logville, located on the mountain peak. Logville has a huge lake with a perfectly round shape, appropriately named “The Big O”. This is the only lake with drinkable water in the entire queendom, so it is used to supply all cities. Some cities in Nlogonia are connected with water pipes that allow the distribution of the water. As there are no pumps, each pipe carries water from a city to another city at a lower altitude, using gravity.\nNlogonia’s water system has been a source of worries for the Queen, because since cities depend on other cities for their water supply, hot discussions occur about how much water a city is allowed to use. A water supply path is a sequence of cities in decreasing order of altitude, starting in Logville and such that there is a pipe connecting each pair of consecutive cities in the sequence. Two cities have disjoint water supply if and only if there exist two water supply paths, one supply path ending in each of the cities, such that Logville is the only city that is present in both paths. Notice that Logville itself has disjoint water supply with every other city.\nThe Queen considers disjoint water supply a nice property because it reduces dependency problems and also avoids water outages to spread as quickly through Nlogonia. She therefore ordered a survey to assess the current state of water supply disjointness in the whole queendom. Being the cleverest advisors in the Queen’s court, you have been summoned to help calculate the number of pairs of distinct cities that have disjoint water supply.\nInput\nThe first line contains two integers C (2 ≤ C ≤ 1000) and P (1 ≤ P ≤ 105), representing respectively the number of cities and the number of water pipes in Nlogonia. Cities are identified with different integers from 1 to C, in strictly decreasing order of altitude (no two cities have the same altitude); Logville is city 1. Each of the next P lines describes a pipe with two integers U and V (1 ≤ U < V ≤ C) indicating that the pipe connects city U with city V . You may assume that no two pipes connect the same pair of cities, and that for each city in Nlogonia there is at least one water supply path that ends in it.\nOutput\nOutput a line with an integer representing the number of pairs of distinct cities that have disjoint water supply.",
    "samples": [
      [
        "6 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 6",
        "14"
      ],
      [
        "8 11\n1 2\n1 3\n1 4\n2 5\n3 4\n6 7\n3 6\n3 7\n4 8\n2 6\n5 6",
        "26"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Go up the Ultras",
    "text": "The topographic prominence of a peak is a measure of special interest to mountain climbers and can be defined as follows: the prominence of a peak p with altitude h, relative to the sea level, is the greatest d such that any path on the terrain from p to any strictly higher peak will pass through a point of altitude h − d. If there is no strictly higher peak, then the prominence is h itself. Those peaks with topographic prominence greater than or equal to 150000 centimeters (precision is of great importance to climbers!) have a special name: they are called “Ultras”.\nYou have to write a program that identifies all the Ultras that occur in a two dimensional profile of a mountain range represented as a sequence of points. Note that the horizontal distance between points is not important; all that you need is the altitude of each point. In the picture below, the Ultras are the points 7, 12, 14, 20 and 23.\nInput\nThe first line contains an integer N (3 ≤ N ≤ 105) representing the number of points in the profile.\nThe second line contains N integers Hi indicating the altitudes (in centimeters) of the points, in the order in which they appear in the profile (0 ≤ Hi ≤ 106 for i = 1,2,...,N). Consecutive points have different altitudes (Hi (cid:54)= Hi+1 for i = 1,2,...,N − 1), while the first and the last points are at sea level (H1 = HN = 0). You may assume that the profile contains at least one Ultra.\nOutput\nOutput a line with the indices of all the Ultras in the mountain range, in the order in which they appear in the profile.",
    "samples": [
      [
        "5\n0 10000 100000 884813 0",
        "4"
      ],
      [
        "7\n0 100000 0 200000 180000 200000 0",
        "4 6"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Football",
    "text": "Your favorite football team is playing a charity tournament, which is part of a worldwide fundraising effort to help children with disabilities. As in a normal tournament, three points are awarded to the team winning a match, with no points to the losing team. If the game is drawn, each team receives one point.\nYour team played N matches during the first phase of the tournament, which has just finished.\nOnly some teams, the ones with more accumulated points, will advance to the second phase of the tournament. However, as the main objective of the tournament is to raise money, before the set of teams that will pass to the second phase is determined, each team is allowed to buy additional goals.\nThese new goals count as normally scored goals, and may be used to alter the result of any of the matches the team played.\nYour team’s budget is enough to buy up to G goals. Can you tell the maximum total number of points your team can get after buying the goals, supposing the other teams will not buy any goals? Input\nThe first line contains two integers N (1 ≤ N ≤ 105) and G (0 ≤ G ≤ 106) representing respectively the number of matches your team played and the number of goals your team can buy. Each of the next N lines describes a match result with two integers S and R (0 ≤ S,R ≤ 100), indicating respectively the goals your team scored and received on that match before buying goals.\nOutput\nOutput a line with an integer representing the maximum total number of points your team can get after buying the goals.",
    "samples": [
      [
        "2 1\n1 1\n1 1",
        "4"
      ],
      [
        "3 2\n1 3\n3 1\n2 2",
        "6"
      ],
      [
        "4 10\n1 1\n2 2\n1 3\n0 4",
        "12"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Counting ones",
    "text": "Carl is right now the happiest child in the world: he has just learned this morning what the bi nary system is. He learned, for instance, that the binary representation of a positive integer k is a s ktr =in (cid:80)g n ia =n 0a an i− ×1 · 2· i· .a I1 ta0 isw reh ae lr lye nea icc eh toai seis e a himbin ta ur ry nid ni ggi dt ec0 imor al1 n, us mta br et rin sg inw toit bh ina an ry= nu1 m, ban erd s,s au nch d tt hh ea nt adding and even multiplying them.\nCaesar is Carl’s older brother, and he just can’t stand to see his little brother so happy. So he has prepared a challenge: “Look Carl, I have an easy question for you: I will give you two integers A and B, and you have to tell me how many 1’s there are in the binary representation of all the integers from A to B, inclusive. Get ready”. Carl agreed to the challenge. After a few minutes, he came back with a list of the binary representation of all the integers from 1 to 100. “Caesar, I’m ready”. Caesar smiled and said: “Well, let me see, I choose A = 1015 and B = 1016. Your list will not be useful”.\nCarl hates loosing to his brother so he needs a better solution fast. Can you help him? Input\nA single line that contains two integers A and B (1 ≤ A ≤ B ≤ 1016).\nOutput\nOutput a line with an integer representing the total number of digits 1 in the binary representation of all the integers from A to B, inclusive.",
    "samples": [
      [
        "1000000000000000 10000000000000000",
        "239502115812196372"
      ],
      [
        "2 12",
        "21"
      ],
      [
        "9007199254740992 9007199254740992",
        "1"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Blogger language",
    "text": "Benjamin’s granddaughter Brenda has a blog where she posts articles about school, friends and other life issues. Intrigued by her opinions, Benjamin tried to read it, but very soon he realized it was too hard to read because of Brenda’s writing quirks.\nBrenda writes without spaces or punctuation marks, and moreover, she uses lower and uppercase letters in a liberal and strange way. For example, one of her posts is “PrOgRAMmINgiSgrEAt”. Benjamin has trouble noticing the words “programming”, “is” and “great” when they are written in this way.\nTo improve his understanding Benjamin decided to do the following: he will first choose a particular string T and a blog post he is interested in; then he will select a contiguous substring of the post and search for T within the substring, in a case-insensitive way; for each occurrence of T within the substring, he will calculate the number of case mismatches, and finally he will obtain the maximum among all these values. For example, if Benjamin chooses “GR” as T and then selects the substring “PrOgRAM”, he would find a single occurrence “gR” for which the number of case mismatches is 1.\nFor the same substring, if “r” was chosen as T, he would have found two occurrences, “r” with 0 mismatches and “R” with 1 mismatch, so the maximum number of mismatches would be 1.\nTo complicate things further, Brenda included in the blog a script that, after operating with a substring selection, flips the case of all the selected letters. This means that after selecting “PrOgRAM” and proceeding as explained above, the sample post would read “pRoGrammINgiSgrEAt”. If Ben jamin selects “ammINgi” as a second substring, after calculating his result the post would be left as “pRoGrAMMinGISgrEAt”, accumulating both flips.\nYou will be given the string T and the original text of the blog post chosen by Benjamin. You will also be given a list of substring selections Benjamin made, in the order he made them. You need to calculate, for each selection, the maximum number of case mismatches of the occurrences of T in the selected part, considering all the case flips made by previous selections. Notice that the flipping of the case occurs after calculating the result for each selection.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) and a non-empty string T of at most 5 letters, representing respectively the number of substring selections and the string to search for. The second line contains a non-empty string P of at most 105 letters, indicating the original text of the blog post.\nPositions of the post are numbered with consecutive integers from left to right, being 1 the leftmost position and |P| the rightmost position. Each of the next N lines describes a substring selection with two integers L and R (1 ≤ L ≤ R ≤ |P|) indicating that the substring starts at position L and ends at position R, inclusive.\nOutput\nOutput N lines, each of them containing an integer. In the i-th line write the maximum number of case mismatches of the occurrences of T in the i-th substring selection, considering all the case flips made by previous selections; if no such occurrence exists write the value −1.",
    "samples": [
      [
        "3 gR\nPrOgRAMmINgiSgrEAt\n1 7\n4 18\n6 14",
        "0\n2\n-1"
      ],
      [
        "9 abCAb\naBcAbCAbaBCAb\n1 13\n1 13\n4 8\n5 11\n3 11\n4 10\n1 13\n8 8\n1 13",
        "2\n4\n1\n-1\n0\n5\n2\n-1\n4"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Attacking rooks",
    "text": "Chess inspired problems are a common source of exercises in algorithms classes. Starting with the well known 8-queens problem, several generalizations and variations were made. One of them is the N-rooks problem, which consists of placing N rooks in an N by N chessboard in such a way that they do not attack each other.\nProfessor Anand presented the N-rooks problem to his students. Since rooks only attack each other when they share a row or column, they soon discovered that the problem can be easily solved by placing the rooks along a main diagonal of the board. So, the professor decided to complicate the problem by adding some pawns to the board. In a board with pawns, two rooks attack each other if and only if they share a row or column and there is no pawn placed between them. Besides, pawns occupy some squares, which gives an additional restriction on which squares the rooks may be placed on.\nGiven the size of the board and the location of the pawns, tell Professor Anand the maximum number of rooks that can be placed on empty squares such that no two of them attack each other.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 100) representing the number of rows and columns of the board. Each of the next N lines contains a string of N characters. In the i-th of these strings, the j-th character represents the square in the i-th row and j-th column of the board. The character is either “.” (dot) or the uppercase letter “X”, indicating respectively an empty square or a square containing a pawn.\nOutput\nOutput a line with an integer representing the maximum number of rooks that can be placed on the empty squares of the board without attacking each other.",
    "samples": [
      [
        "5\nX....\nX....\n..X..\n.X...\n....X",
        "7"
      ],
      [
        "4\n....\n.X..\n....\n....",
        "5"
      ],
      [
        "1\nX",
        "0"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Eleven",
    "text": "In this problem, we refer to the digits of a positive integer as the sequence of digits required to write it in base 10 without leading zeros. For instance, the digits of N = 2090 are of course 2, 0, 9 and 0.\nLet N be a positive integer. We call a positive integer M an eleven-multiple-anagram of N if and only if (1) the digits of M are a permutation of the digits of N, and (2) M is a multiple of 11. You are required to write a program that given N, calculates the number of its eleven-multiple-anagrams.\nAs an example, consider again N = 2090. The values that meet the first condition above are 2009, 2090, 2900, 9002, 9020 and 9200. Among those, only 2090 and 9020 satisfy the second condition, so the answer for N = 2090 is 2.\nInput\nA single line that contains an integer N (1 ≤ N ≤ 10100).\nOutput\nOutput a line with an integer representing the number of eleven-multiple-anagrams of N. Because this number can be very large, you are required to output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "2090",
        "2"
      ],
      [
        "16510",
        "12"
      ],
      [
        "201400000000000000000000000000",
        "0"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Join two kingdoms",
    "text": "The kingdoms of Nlogonia and Quadradonia fought a long and terrible war that historians have come to call Almost Completely Meaningless (ACM) because nobody can now remember why it started.\nWhen the ACM war finally ended, the two kingdoms decided to strengthen their bonds in order to avoid more bloodshed, and for this reason they consulted the International Consortium for the Prevention of Conflicts (ICPC). The ICPC recommended building a single road to connect a city in Nlogonia with a city in Quadradonia, thus allowing commercial and cultural exchange between the two.\nNlogonia and Quadradonia have N and Q cities respectively. The road system of each kingdom consists of a set of bidirectional roads that join pairs of different cities in the same kingdom, such that there is a unique path (i.e. sequence of consecutive roads) that one can take to go from any city in a kingdom to any other city in the same kingdom. The “size” of such a road system is defined as the maximum number of roads that one must take in order to travel between any pair of cities.\nBecause the ICPC did not specify which two cities should be connected by the new road joining the two kingdoms, the citizens are now worried that the size of the combined road system might be too large. In order to prevent a second ACM war, you would like to convince them that this is not the case, and to this end you need to calculate the expected size of the resulting road system assuming that all possible roads between the two kingdoms are equally likely to be built.\nInput\nThe first line contains two integers N and Q representing the number of cities in each of the two kingdoms (1 ≤ N,Q ≤ 4 × 104). Cities in Nlogonia are identified with different integers from 1 to N, while cities in Quadradonia are identified with different integers from 1 to Q. Each of the next N − 1 lines describes a road in Nlogonia with two distinct integers A and B indicating that the road connects city A with city B (1 ≤ A,B ≤ N). Each of the next Q−1 lines describes a road in Quadradonia with two distinct integers C and D indicating that the road connects city C with city D (1 ≤ C,D ≤ Q).\nThe road system of each kingdom is such that there is exactly one path between each pair of cities in the kingdom.\nOutput\nOutput a line with a rational number representing the expected size of the road system after the two kingdoms have been joined, considering that all possible roads connecting them are equally likely to be built. The result must be output as a rational number with exactly three digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "4 5\n1 2\n2 3\n4 2\n2 3\n3 4\n4 1\n4 5",
        "5.350"
      ],
      [
        "1 5\n1 2\n2 3\n3 4\n4 5",
        "4.400"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Inverting Huffman",
    "text": "Static Huffman coding is an encoding algorithm used mainly for text compression. Given a text of certain size made of N different characters, the algorithm chooses N codes, one for each different character. The text is compressed using these codes. To choose the codes, the algorithm builds a binary rooted tree having N leaves. For N ≥ 2 the tree can be built as follows.\n1. For each different character in the text build a tree containing just a single node, and assign to it a weight coincident with the number of occurrences of the character within the text.\n2. Build a set s containing the above N trees.\n3. While s contains more than one tree: (a) Choose t1 ∈ s with minimum weight and remove it from s.\n(b) Choose t2 ∈ s with minimum weight and remove it from s.\n(c) Build a new tree t with t1 as its left subtree and t2 as its right subtree, and assign to t the sums of the weights of t1 and t2.\n(d) Include t into s.\n4. Return the only tree that remains in s.\nFor the text “abracadabra”, the tree produced by the above procedure can look like the one on the left of the following picture, where each internal node is labeled with the weight of the subtree rooted at that node. Notice that the obtained tree can also look like the one on the right of the picture, among others, because at steps 3a and 3b the set s may contain several trees with minimum weight.\nFor each different character in the text, its code depends on the path that exists, in the final tree, from the root to the leaf corresponding to the character. The length of the code is the number of edges in that path (which is coincident with the number of internal nodes in the path). Assuming the tree on the left was built by the algorithm, the code for “r” has length 3 while the code for “d” has length 4.\nYour task is, given the lengths of the N codes chosen by the algorithm, find the minimum size (total number of characters) that the text can have so as the generated codes have those N lengths.\nInput\nThe first line contains an integer N (2 ≤ N ≤ 50) representing the number of different characters that appear in the text. The second line contains N integers Li indicating the lengths of the codes chosen by Huffman algorithm for the different characters (1 ≤ Li ≤ 50 for i = 1,2,...,N). You may assume that there exists at least one tree, built as described, that produces codes with the given lengths.\nOutput\nOutput a line with an integer representing the minimum size (total number of characters) that the text can have so as the generated codes have the given lengths.",
    "samples": [
      [
        "2\n1 1",
        "2"
      ],
      [
        "4\n2 2 2 2",
        "4"
      ],
      [
        "10\n8 2 4 7 5 1 6 9 3 9",
        "89"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Hide and seek",
    "text": "In a playground, a group of kids is playing hide and seek. As the name suggests, the game is about kids hiding and seeking other kids. Each kid is either a hiding kid or a seeking kid. Hiding kids are kids that just try not to be found, while seeking kids are kids that try to find (hiding and seeking) kids.\nAs you may note, both hiding and seeking kids try not to be found, and for doing this they use some walls that there are in the playground. Each wall is represented by a line segment and each kid is represented by a point in the XY plane. Two kids see each other if and only if the line segment between them does not intersect any wall segment.\nYour task is to calculate how many other kids each seeking kid can see. To simplify the problem, you may assume that walls do not intersect even at their endpoints. Moreover, no three points are collinear within the set formed by kids and endpoints of walls; this implies that kids are not inside walls, and that no two kids have the same location.\nInput\nThe first line contains three integers S, K and W representing respectively the number of seeking kids, the total number of kids and the number of walls in the playground (1 ≤ S ≤ 10; 1 ≤ K,W ≤ 104 and S ≤ K). Each of the next K lines describes a kid with two integers X and Y (−106 ≤ X,Y ≤ 106), indicating that the location of the kid in the XY plane is the point (X,Y ); the first S of these lines describe seeking kids. Each of the next W lines describes a wall with four integers X1, Y1, X2 and Y2 (−106 ≤ X1,Y1,X2,Y2 ≤ 106), indicating that the two endpoints of the wall in the XY plane are (X1,Y1) and (X2,Y2). You may assume that wall segments do not intersect and no three points given in the input are collinear.\nOutput\nOutput S lines, each of them containing an integer. In the i-th line write the number of other kids the i-th seeking kid can see.",
    "samples": [
      [
        "2 3 2\n0 0\n100 0\n0 100\n50 -1 48 3\n49 49 51 52",
        "1\n0"
      ],
      [
        "4 4 4\n-100 0\n0 100\n0 -100\n100 0\n3 3 -2 -2\n-101 50 101 50\n-101 -101 101 -101\n-49 -50 49 -50",
        "1\n0\n2\n1"
      ],
      [
        "5 6 4\n40 40\n60 10\n70 30\n60 80\n30 81\n20 40\n0 10 40 50\n10 61 30 61\n-100 90 200 90\n50 20 50 50",
        "1\n2\n3\n5\n2"
      ]
    ],
    "source": {
      "year": "2013",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Nota Esquecida",
    "text": "João não é muito bom em Matemática mas aprendeu que a média de dois números é o valor da soma desses dois números dividido por dois. Ou seja, a média de dois números A e B é M = A+ 2B.\nA professora de Cálculo I contou para João as notas que ele tirou nas duas provas já realizadas. As duas notas são números inteiros entre 0 e 100. João prontamente calculou a média das duas provas, que também resultou em um número inteiro.\nMas João é muito esquecido, e agora não consegue lembrar-se das duas notas que tirou na prova. Ele consegue se lembrar de apenas uma das notas das provas. Por sorte, ele consegue se lembrar também da média entre as duas notas.\nVocê pode ajudar João a determinar a nota da outra prova? Entrada\nA primeira linha contém um número inteiro A (0 ≤ A ≤ 100), indicando a nota de uma prova. A segunda linha contém um número inteiro M (0 ≤ M ≤ 100), indicando a média entre as duas notas das provas.\nSaída\nSeu programa deve produzir uma única linha com um número inteiro representando a nota da outra prova, que João não consegue recordar.",
    "samples": [
      [
        "100\n70",
        "40"
      ],
      [
        "80\n75",
        "70"
      ],
      [
        "1\n50",
        "99"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3!+2!+2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
    "samples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Teleférico",
    "text": "A turma da faculdade vai fazer uma excursão na serra e todos os alunos e monitores vão tomar um teleférico para subir até o pico de uma montanha. A cabine do teleférico pode levar C pessoas no máximo, contando alunos e monitores, durante uma viagem até o pico. Por questão de segurança, deve haver pelo menos um monitor dentro da cabine junto com os alunos. Por exemplo, se cabem C = 10 pessoas na cabine e a turma tem A = 20 alunos, os alunos poderiam fazer três viagens: a primeira com 8 alunos e um monitor; a segunda com 6 alunos e um monitor; e a terceira com 6 alunos e um monitor.\nDados como entrada a capacidade C da cabine e o número total A de alunos, você deve escrever um programa para calcular o número mínimo de viagens do teleférico.\nSe você estiver com muita preguiça hoje, não se preocupe: virando a página você encontra soluções para este problema.\nEntrada\nA primeira linha da entrada contém um inteiro C, representando a capacidade da cabine (2 ≤ C ≤ 100). A segunda linha da entrada contém um inteiro A, representando o número total de alunos na turma (1 ≤ A ≤ 1000).\nSaída\nSeu programa deve imprimir uma linha contendo um número inteiro representando o número mínimo de viagens do teleférico para levar todos os alunos até o pico da montanha.\n      Solução em C++ #include <iostream> using namespace std; int main(void){ int C,A; cin >> C >> A; // le a entrada int quociente = A/(C-1); int resto = A%(C-1); int resposta = quociente; if ( resto > 0 ) resposta++; cout << resposta << endl; // escreve a resposta return 0; } Solução em Python C = int(input()) # le a entrada A = int(input()) quociente, resto = A//(C-1), A%(C-1) resposta = quociente if resto>0: resposta += 1 print(resposta) # escreve a resposta Solução em Java import java.util.Scanner; public class A { public static void main(String[] args) { Scanner in = new Scanner(System.in); int quociente, resto, resposta; int C,A; C=in.nextInt(); // le a entrada A=in.nextInt(); quociente=A/(C-1); resto=A%(C-1); resposta=quociente; if (resto>0) resposta=resposta+1; System.out.println(resposta); // imprime a resposta } }",
    "samples": [
      [
        "10\n20",
        "3"
      ],
      [
        "12\n55",
        "5"
      ],
      [
        "100\n87",
        "1"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Delação Premiada",
    "text": "A polícia da Nlogônia está investigando a máfia local. Eles já conhecem todos os membros e a estrutura da organização: a máfia nlogoniana tem N membros no total, e cada um é identificado por um inteiro entre 1 e N, onde 1 é o ID do chefão. Além disso, todo membro é subordinado direto de um outro membro, exceto o chefão.\nMesmo após meses de investigação, a polícia ainda não tem informação suficiente para prender nenhum membro da máfia por nenhum crime. Por isso, resolveram pedir a ajuda de um vidente: dado um membro da máfia, o vidente pode magicamente adivinhar os crimes que ele cometeu, e a polícia pode então confirmá-los através de interrogatório.\nAlém disso, quando um mafioso nlogoniano é interrogado, ele não só admite os seus crimes, mas também delata os crimes de seu superior direto, em troca de uma pena mais leve. Se este já não tiver sido preso, a polícia pode interrogá-lo também, e ele vai então delatar o superior dele, e assim por diante, até chegarem no chefão.\nInfelizmente, o vidente só tem energia suficiente para adivinhar os crimes de no máximo K mafiosos, e a polícia quer usar seus poderes cuidadosamente pra prender o máximo possível de bandidos. Dado o valor de K e a estrutura completa da máfia, qual a quantidade máxima de mafiosos que a polícia consegue prender? Entrada\nA primeira linha contém dois inteiros, N e K, onde N é o número de membros da máfia e K é o número máximo de mafiosos cujos crimes o vidente pode adivinhar (3 ≤ N ≤ 105, 1 ≤ K < N). A segunda linha contém N − 1 inteiros, onde o i-ésimo deles identifica o superior direto do mafioso de ID i + 1.\nÉ garantido que todos os inteiros da segunda linha estão entre 1 e N, e que todos os membros da máfia são subordinados do chefão, direta ou indiretamente.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número máximo de mafiosos que a polícia pode prender.",
    "samples": [
      [
        "8 2\n1 1 2 3 4 4 6",
        "7"
      ],
      [
        "10 3\n1 1 2 2 3 3 4 4 5",
        "8"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Guardando Enfeites",
    "text": "Sicrana adora enfeites. Em casa, ela tem N enfeites que são exibidos enfileirados em uma grande prateleira. Cada enfeite é identificado por um inteiro distinto entre 1 e N.\nUm dia, enquanto jogava bola dentro de casa, Fulano, filho de Sicrana, acertou a prateleira de enfeites de sua mãe, derrubando todos no chão. Mas felizmente nenhum enfeite foi danificado com a queda. Por isso, se Fulano conseguir colocar todos os enfeites de volta na prateleira exatamente como estavam antes, pode ser que sua mãe não perceba que algo de errado aconteceu.\nMas como Fulano tem uma péssima memória, ele não consegue se lembrar da ordem em que os enfeites estavam originalmente, e por isso ele precisa da sua ajuda. Para cada enfeite i, Fulano te informará N valores entre 1 e 100, onde o j-ésimo valor indica quanta confiança Fulano tem de que o enfeite i estava originalmente na posição j da prateleira. Para maximizar sua confiança de que não receberá uma bronca e ficará de castigo, ao escolher uma ordem e posicionar os enfeites, Fulano irá multiplicar as confianças de que cada enfeite esteja no lugar certo. Mais formalmente, a confiança total de Fulano em uma determinada ordem dos enfeites é calculada do seguinte modo: Se pi é a posição ocupada pelo i-ésimo enfeite e a(i,j) é a confiança de Fulano de que o i-ésimo enfeite estava originalmente na posição j, então a confiança total é dada por (cid:81)N i=1 a(i,pi).\nComo existem muitas possibilidades diferentes para posicionar os enfeites, sua missão, caso queira aceitar, é encontrar a ordem na qual Fulano mais pode confiar.\nEntrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 100), indicando o número de enfeites.\nCada uma das N linhas seguintes contém N inteiros entre 1 e 100. O j-ésimo inteiro na i-ésima linha indica o quanto Fulano confia que o enfeite i estava originalmente na posição j da prateleira.\nSaída\nSeu programa deve produzir uma única linha com N inteiros representando a ordem em que Fulano deve colocar os enfeites de modo a maximizar sua confiança total. Caso exista mais de uma ordem que resulte na confiança máxima, qualquer uma delas será aceita.",
    "samples": [
      [
        "3\n1 15 37\n42 8 25\n77 2 1",
        "3 1 2"
      ],
      [
        "2\n15 1\n33 42",
        "1 2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Keep Calm e Venda Balões",
    "text": "Walter vende balões de porta em porta. Todo dia ele escolhe uma rua da sua cidade e visita todas as casas nela, oferecendo seus coloridos balões.\nCada rua da cidade de Walter tem a mesma quantidade de casas dos dois lados, e todas as casas da cidade são do mesmo tamanho. Dessa forma, cada rua pode ser vista como uma matriz 2 × N, onde cada célula é uma casa, e N é a quantidade de casas ao longo de cada lado da rua.\nDepois de escolher a rua do dia, Walter visita cada casa dessa rua exatamente uma vez. Ele pode começar seu caminho em qualquer casa, mas só pode se mover entre casas adjacentes horizontalmente, verticalmente ou diagonalmente.\n  A tabela acima ilustra um exemplo para N = 6. Após visitar a casa de número 1, Walter só poderia seguir imediatamente para as casas de número 2, 7 e 8 (isto é, se ele já não tiver visitado elas antes). E após visitar a casa de número 11, a próxima casa do caminho só poderia ser uma das seguintes: 4, 5, 6, 10 ou 12.\nHoje, antes de sair de casa, Walter olhou o mapa da cidade para contar a quantidade N de casas de cada lado da rua escolhida. Agora ele quer saber de quantas maneiras distintas ele pode visitar todas as 2N casas da rua, seguindo as regras descritas. Duas maneiras de visitar as casas são diferentes se e somente se a ordem das casas varia: isto é, se existem duas casas A e B tais que A é visitada antes de B em uma ordem e B é visitada antes de A na outra.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 109).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número de maneiras possíveis de visitar todas as casas da rua. Dado que este número pode ser muito grande, você deve fornecer o resto da divisão deste número por 109 + 7.",
    "samples": [
      [
        "2",
        "24"
      ],
      [
        "3",
        "96"
      ],
      [
        "4",
        "416"
      ],
      [
        "61728",
        "654783381"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Cruzamento Perigoso",
    "text": "A Agência de Simulação Veicular (ASV), gerenciada pela fundadora Crishna, está trabalhando em um projeto que tem como objetivo a obtenção de dados relacionados às colisões de veículos nos cruzamentos de determinadas regiões do país.\nA primeira simulação da ASV consiste em posicionar arbitrariamente C veículos em cruzamentos de uma determinada região. Inicialmente, haverá no máximo um veículo em cada cruzamento. Uma região é representada por N vias horizontais que se cruzam com M vias verticais.\nApós o início da simulação, cada veículo irá se deslocar na sua direção inicial (Norte, Sul, Leste ou Oeste) com velocidade constante de 1 cruzamento por segundo.\nSe dois ou mais veículos chegarem em um mesmo cruzamento ao mesmo tempo, eles irão colidir e não se movimentarão mais. Se um veículo passar por um cruzamento no qual houve uma colisão anteriormente, ele também colidirá com os veículos parados. Por motivos desconhecidos, quando dois veículos colidem horizontalmente entre dois cruzamentos, ambos vão parar no cruzamento ao leste, e quando dois veículos colidem verticalmente entre dois cruzamentos, ambos vão parar no cruzamento ao norte.\nAbaixo temos um exemplo de simulação com N = 5, M = 6 e C = 7 veículos representados por setas indicando suas direções. Nota-se que os 3 veículos destacados irão colidir eventualmente: Como o software de simulação da ASV ainda não é totalmente confiável, eles irão prover exemplos de configurações iniciais para que seja possível contabilizar a quantidade de veículos que nunca irão colidir.\nEntrada\nA primeira linha contém três inteiros N, M e C (2 ≤ N,M ≤ 105 e 1 ≤ C ≤ min(105,N × M)), representando a quantidade de vias horizontais, a quantidade de vias verticais e a quantidade de veículos na simulação, respectivamente. Cada uma das próximas C linhas conterá dois inteiros Ai e Bi e um caractere D (1 ≤ Ai ≤ N e 1 ≤ Bi ≤ M), representando que o i-ésimo veículo está inicialmente no cruzamento da Ai-ésima via horizontal com a Bi-ésima via vertical, com direção indicada por D (’N’, ’S’, ’L’ ou ’O’).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade de veículos que não colidirão.",
    "samples": [
      [
        "5 6 7\n2 2 O\n3 2 N\n4 2 N\n4 5 N\n2 6 O\n5 5 L\n2 4 O",
        "4"
      ],
      [
        "2 2 3\n1 1 L\n1 2 O\n2 2 N",
        "0"
      ],
      [
        "2 2 3\n1 1 L\n1 2 O\n2 1 N",
        "1"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Bobo da Corte",
    "text": "O Reino dos Emparelhamentos é governado por um generoso Comendador. A fama do Comendador e de suas grandes qualidades é conhecida por todos, inclusive em reinos vizinhos. Uma de suas mais famosas qualidades é seu bom humor, que é nutrido diariamente por um bobo da corte, eleito anualmente no Grande Concurso de Comédia (GCC) do reino. O bobo da corte ajuda a aliviar as tensões das diversas reuniões políticas que o cargo exige, alegrando não só o Comendador como também todo o reino.\nO jovem Carlos é um grande comediante cujo sonho é se tornar bobo da corte na próxima tem porada. Ele passou os últimos meses anotando piadas e trocadilhos dos mais diversos tipos, muitos dos quais sobre sua própria (diminuta) estatura. Chegou a época da eleição do bobo da corte, e um total de N candidatos se inscreveram. Cada um dos candidatos terá cinco minutos para se apresentar perante uma platéia. Após as apresentações, cada cidadão do Reino dos Emparelhamentos poderá votar em um dos candidatos, e o mais votado será o novo bobo da corte. Caso haja empate entre um ou mais candidatos, aquele que tiver feito a inscrição primeiro é eleito. Sabendo disso, o jovem Carlos passou noites na frente do escritório eleitoral e garantiu que sua inscrição fosse a primeira a ser feita.\nApós a votação, resta apenas apurar os resultados. A urna eletrônica gera um relatório com N inteiros, correspondentes ao número de votos de cada candidato, ordenados pela ordem de inscrição.\nSua missão é determinar se o jovem Carlos foi eleito ou não.\nEntrada\nA primeira linha da entrada contém um inteiro N, satisfazendo 2 ≤ N ≤ 104. As N linhas seguintes conterão N inteiros positivos v1,...,vN, um em cada linha, correspondentes ao número de votos recebido por cada um dos candidatos, em ordem de inscrição. Como a população do Reino dos Emparelhamentos é de 100.000 pessoas, o número total de votos não será superior a este valor, ou seja, (cid:80)N i=1 vi ≤ 100.000.\nSaída\nSeu programa deve produzir uma única linha contendo o caractere ‘S’ caso o jovem Carlos seja eleito bobo da corte, ou o caractere ‘N’ caso contrário.",
    "samples": [
      [
        "3\n1000\n1000\n1000",
        "S"
      ],
      [
        "5\n1\n2\n3\n4\n5",
        "N"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Arte Valiosa",
    "text": "A Mona Dura é uma das obras de arte mais valiosas do museu da Nlogônia. A famosa pintura fica em exibição num salão retangular de M por N metros. A entrada do salão fica em um canto, e a Mona fica no canto diagonalmente oposto à entrada.\nPara impedir roubos, o salão dispõe de sensores de movimento, que são ativados toda noite quando o museu fecha. Cada sensor tem um valor de sensibilidade S, tal que o sensor dispara um alarme se detectar qualquer movimento a no máximo S metros de distância dele.\nUm ladrão invadiu o museu esta noite com a intenção de roubar a Mona Dura. Para isso, ele precisa entrar no salão e chegar até a pintura sem ser detectado por nenhum sensor de movimento.\nOu seja, ele tem que manter uma distância maior do que Si metros do i-ésimo sensor o tempo todo, para todos os sensores.\nO ladrão obteve acesso às plantas do museu, e portanto sabe as dimensões do salão e as coordenadas e sensibilidades de cada um dos sensores. Dadas essas informações, sua tarefa é determinar se o roubo é possível ou não.\nEntrada\nA primeira linha contém três inteiros, M, N e K, as dimensões do salão e o número de sensores de movimento, respectivamente (10 ≤ M,N ≤ 104, 1 ≤ K ≤ 1000). A entrada do salão fica no ponto (0,0) e a pintura fica no ponto (M,N).\nCada uma das K linhas seguintes corresponde a um dos K sensores e contém três inteiros, X, Y e S, onde (X,Y ) indica a localização do sensor e S indica a sua sensibilidade (0 < X < M, 0 < Y < N, 0 < S ≤ 104). Todas as dimensões e coordenadas da entrada são em metros. É garantido que todos os sensores têm coordenadas distintas.\nSaída\nSeu programa deve produzir uma única linha contendo o caractere ‘S’ caso seja for possível roubar a pintura, ou o caractere ‘N’ caso contrário.",
    "samples": [
      [
        "10 22 2\n4 6 5\n6 16 5",
        "S"
      ],
      [
        "10 10 2\n3 7 4\n5 4 4",
        "N"
      ],
      [
        "100 100 3\n40 50 30\n5 90 50\n90 10 5",
        "S"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Exibição de Peixes",
    "text": "O Grande Aquário da Nlogônia recebe milhares de visitantes todo mês. Uma das suas atrações mais populares é a exibição de peixes-palhaço, um salão com vários tanques com cardumes dessa bela espécie branca e laranja. Os visitantes têm a oportunidade de aprender muitas curiosidades sobre os peixes-palhaço, incluindo sua organização social: cardumes de peixes-palhaço são liderados por fêmeas, e quando a última fêmea morre ou deixa o grupo, um dos machos restantes sofre mutação, vira uma fêmea e passa a liderar o cardume! Assim que aprendeu isso, Zélio, o Zelador, decidiu pregar uma peça no Aquário e fazer todos os peixes-palhaço da exibição virarem fêmeas! Pra isso, ele vai mover os peixes de um tanque para o outro durante a noite, quando o Aquário está fechado. Se ao final da noite algum tanque ficar com um ou mais machos e nenhuma fêmea, no dia seguinte um deles já terá se transformado em fêmea.\nPara não levantar suspeitas dos outros funcionários, Zélio só pode mover um peixe-palhaço a cada noite, e cada peixe só pode ser movido entre tanques da exibição. Cada tanque é grande o bastante para conter uma quantidade ilimitada de peixes, e Zélio pode deixar tantos tanques vazios quanto quiser. Podemos assumir que nenhuma outra pessoa irá mexer nos peixes, e que nenhum peixe vai nascer, morrer, ser adicionado ou removido dos aquários.\nZélio contou quantos peixes machos e fêmeas vivem atualmente em cada tanque da exibição. Agora ele precisa da sua ajuda pra planejar seus movimentos de forma a transformar todos os peixes-palhaço em fêmeas no menor tempo possível.\nEntrada\nA primeira linha contém um único inteiro N, a quantidade de tanques da exibição (2 ≤ N ≤ 3000).\nCada uma das N linhas seguintes corresponde a um dos tanques e contém dois inteiros, M e F, as quantidades de peixes machos e fêmeas naquele tanque, respectivamente (0 ≤ M,F ≤ 105, M = 0 ou F > 0).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade mínima de movimentos necessários.",
    "samples": [
      [
        "2\n2 1\n0 2",
        "2"
      ],
      [
        "2\n2 5\n1 3",
        "7"
      ],
      [
        "4\n2 3\n0 0\n3 1\n0 0",
        "5"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Baralho",
    "text": "O cronograma do dia das competições de programação normalmente segue o mesmo padrão: aqueci mento de manhã, seguido do horário de almoço, um tempo de descanso, ajustes finais do ambiente de competição e então o início da prova.\nNo tempo de descanso, alguns competidores preferem relaxar, outros preferem socializar e uma parte tem o costume de jogar algum jogo de baralho. Luciano e seus amigos gostam de jogar um jogo conhecido como “Copo d’Água”. Cansado de não ser o vencedor, Luciano quer escrever um programa que, dadas as cartas iniciais de todos os jogadores (não me pergunte como ele sabe disso), determine se ele irá vencer ou não. Se ele não for vencer, ele pode então inventar uma desculpa qualquer e pedir para não participar daquela rodada.\nO jogo funciona da seguinte maneira: – O baralho utilizado possui as cartas: “A23456789DQJK” (nessa ordem, de menor para maior valor), onde os naipes são ignorados. Além disso, o baralho possui mais uma única carta extra: o curinga.\n– N competidores sentam lado a lado em círculo. O competidor 1 está imediatamente à esquerda do 2, que está imediatamente à esquerda do 3, e assim por diante até completar o círculo com o N-ésimo competidor imediatamente à esquerda do 1. Um competidor K é sorteado para iniciar o jogo.\n– Em um jogo com N competidores, existirão quatro cartas de N diferentes valores e um curinga.\nNo começo do jogo, o competidor K recebe o curinga; as demais cartas são embaralhadas e distribuídas entre os jogadores, de modo que cada jogador receba quatro delas.\n– Em cada rodada, o jogador da vez escolhe uma de suas cartas e a passa para o jogador à sua direita. O jogador que recebeu uma carta será o próximo jogador da vez.\n– Dizemos que um jogador está em estado vencedor se possuir exatamente quatro cartas em mãos e elas forem todas iguais. O jogo termina assim que ao menos um competidor estiver em estado vencedor. Nesse caso, o competidor de menoríndice em estado vencedor será declarado o jogador vencedor.\nA carta que será passada de um competidor para o próximo é definida pela seguinte regra: – O curinga nunca pode ser passado logo depois de ser recebido. Isso também se aplica ao jogador inicial, que recebeu o curinga do distribuidor de cartas logo antes da primeira rodada.\n– O competidor irá, sempre que possível, passar o curinga para o próximo.\n– Caso não passe o curinga, o competidor irá escolher a carta que menos aparece em sua mão e passar para o próximo. Caso exista mais de uma carta que aparece uma menor quantidade de vezes, ele irá passar, dentre essas, a carta de menor valor de acordo com a ordem descrita anteriormente.\nSabendo das regras, ajude Luciano escrevendo um programa que, dada a configuração inicial do jogo, diga qual jogador será declarado vencedor.\nEntrada\nA primeira linha contém dois inteiros N e K (2 ≤ N ≤ 13 e 1 ≤ K ≤ N) representando, respectivamente, a quantidade de competidores e o competidor que iniciará o jogo. Cada uma das próximas N linhas conterá quatro caracteres, representando as cartas iniciais do i-ésimo competidor (com exceção do curinga).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o competidor que será declarado vencedor.",
    "samples": [
      [
        "2 1\n33J3\nJJJ3",
        "2"
      ],
      [
        "2 2\nA2A2\n22AA",
        "2"
      ],
      [
        "4 2\n774Q\nJJQ7\n44Q7\n4QJJ",
        "3"
      ],
      [
        "3 1\nJQAA\nJJJA\nQQQA",
        "3"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Interplanetário",
    "text": "Estamos no ano de 2306 e, com o avanço da nanotecnologia, viagens interplanetárias estão cada vez mais acessíveis. Bibika trabalha na maior agência de viagem interplanetária do universo e recebe clientes interessados diariamente.\nOs clientes de Bibika são exigentes e fazem várias demandas antes de fechar o roteiro de suas viagens, como minimizar a distância total percorrida. Mas as maiores restrições são com relação às temperaturas dos planetas visitados no percurso (excluindo os planetas de origem e de destino). A temperatura de um planeta, medida em graus Anidos, pode variar de 109 graus Anidos negativos até 109 graus Anidos positivos. Os clientes de Bibika são oriundos de planetas de climas variados e, consequentemente, possuem preferências diferentes em relação a temperatura: alguns se incomodam com planetas muito frios e outros com planetas muito quentes. Bibika precisa planejar a rota das viagens de forma a poupar seus clientes de qualquer desconforto, mesmo que para isso o comprimento total da rota não seja o menor possível (ou até mesmo que não exista uma rota: nesse caso Bibika simplesmente informa os clientes de que a viagem é impossível).\nBibika lhe forneceu a temperatura média histórica de cada um dos N planetas e as R rotas que ligam pares de planetas diretamente (é garantido que entre dois planetas existe no máximo uma rota direta), juntamente com suas respectivas distâncias. Ela lhe fornecerá também os pedidos de viagem de Q clientes. Cada pedido consiste de um planeta de origem A, um planeta de destino B, e a restrição do cliente em relação às temperaturas dos planetas intermediários: cada cliente pode exigir passar apenas por planetas com temperaturas entre as K menores ou K maiores dentre todos os N planetas.\nSua tarefa é, para cada pedido de viagem, encontrar a menor distância percorrida possível dadas as restrições descritas, ou dizer que a viagem é impossível.\nEntrada\nA primeira linha contém dois inteiros N e R (2 ≤ N ≤ 400 e 0 ≤ R ≤ N ·(N −1)/2), representando a quantidade de planetas conhecidos e a quantidade de rotas diretas entre eles. O primeiro planeta é representado pelo número 1, o segundo pelo número 2, ..., até o N-ésimo pelo número N. A segunda linha contém N inteiros Ti (−109 ≤ Ti ≤ 109), representando a temperatura média de cada um dos planetas. A seguir haverá R linhas, cada uma contendo três inteiros X, Y e D (1 ≤ X,Y ≤ N com X (cid:54)= Y e 1 ≤ D ≤ 103), representando uma rota direta de comprimento D entre os planetas X e Y . Em seguida haverá um inteiro Q (1 ≤ Q ≤ 105), representando a quantidade de pedidos de viagens dos clientes. Por fim, cada uma das próximas Q linhas conterá quatro inteiros A, B, K e T (1 ≤ A,B,K ≤ N com A (cid:54)= B e T ∈ {0,1}), representando um cliente que deseja ir do planeta A para o planeta B passando apenas por planetas que estejam entre os K mais frios se T = 0 ou K mais quentes se T = 1.\nSaída\nSeu programa deve produzir uma linha para cada cliente contendo um inteiro que representa a menor distância total de viagem entre os dois planetas dadas as restrições do cliente, ou −1 caso a viagem não seja possível.",
    "samples": [
      [
        "7 9\n-53 -180 456 420 -210 15 150\n1 2 2\n1 3 1\n2 3 4\n2 4 2\n2 5 5\n3 4 6\n6 4 10\n4 5 4\n3 7 2\n4\n1 5 2 1\n1 2 1 1\n5 6 1 0\n1 7 2 1",
        "11\n2\n-1\n3"
      ],
      [
        "6 5\n5 10 20 10 10 8\n1 2 5\n2 3 5\n3 4 5\n4 5 5\n5 6 5\n4\n1 6 2 1\n1 6 1 1\n4 5 1 0\n2 4 1 1",
        "25\n-1\n5\n10"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hora da Corrida",
    "text": "Vinicius leva muito a sério seu condicionamento físico e, diariamente às 6h da manhã, chova ou faça sol, no verão e no inverno, ele corre no entorno de uma lagoa. Ao longo da pista de corrida existem N placas igualmente espaçadas. Para não desanimar do exercício, Vinicius conta o número de placas pelas quais ele já passou e verifica se ele já correu pelo menos 10%, pelo menos 20%, ..., pelo menos 90% do percurso.\nVamos ajudar o Vinicius, calculando para ele o número de placas que ele precisa contar para ter completado pelo menos 10%, 20%, ..., 90% da corrida, dados o número de voltas que ele pretende correr e o número total de placas ao longo da pista.\nPor exemplo, suponhamos que Vinicius queira dar 3 voltas e o número de placas seja 17. Então, para garantir ter corrido pelo menos 30% do percurso, ele precisa contar 16 placas. Para garantir pelo menos 60%, ele precisa contar 31 placas.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros, V e N (1 ≤ V,N ≤ 104), onde V é o número pretendido de voltas e N é o número de placas na pista.\nSaída\nSeu programa deve produzir uma única linha com nove inteiros representando os números de placas que devem ser contadas para garantir o cumprimento, respectivamente, de 10%, 20%, ..., 90% da meta.",
    "samples": [
      [
        "3 17",
        "6 11 16 21 26 31 36 41 46"
      ],
      [
        "5 17",
        "9 17 26 34 43 51 60 68 77"
      ],
      [
        "3 11",
        "4 7 10 14 17 20 24 27 30"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lançando Moedas",
    "text": "Carla e Daniel decidiram jogar cara-ou-coroa para decidir quem vai lavar os pratos hoje. Eles vão jogar com uma das moedas antigas da coleção de Carla. Isso deixa Daniel preocupado, pois essas moedas são tortas e desbalanceadas: no lançamento de uma moeda, as probabilidades da obtenção de cara e de coroa não são necessariamente iguais.\nCarla conhece bem suas moedas, e pode escolher uma que maximize suas chances de vencer. Por isso, Daniel inventou um esquema para fazer com que o sorteio seja completamente justo, indepen dentemente da moeda escolhida. Primeiro, a cada um deles será atribuído um conjunto não-vazio de cadeias binárias de tamanho N. Nenhuma cadeia pode pertencer a ambos, e algumas cadeias podem não ser incluídas no conjunto de nenhum dos dois. Por exemplo, para N = 3, uma forma válida de dividir as cadeias seria: • “010” e “110” para Carla; • “001” e “011” para Daniel; • “000”, “100”, “101” e “111” para nenhum dos dois.\nApós a divisão das cadeias, Carla e Daniel vão jogar a mesma moeda N vezes e anotar a sequência de resultados, onde cada cara equivale a um 0 e cada coroa equivale a um 1. Se a cadeia binária resultante pertencer ao conjunto de Carla, ela é a vencedora. Se pertencer ao conjunto de Daniel, ele é o vencedor. Se a cadeia não pertencer a nenhum dos dois, a moeda é jogada mais N vezes para gerar uma nova cadeia. O processo é repetido tantas vezes quanto necessário, até conseguirem um vencedor.\nO justo funcionamento desse esquema depende da repartição das cadeias entre Carla e Daniel: é preciso que a probabilidade de gerar uma cadeia do conjunto de Carla seja igual à probabilidade de gerar uma cadeia do conjunto de Daniel. Em outras palavras, seja P(S) a probabilidade de que uma cadeia binária S de comprimento N seja gerada por uma sequência de N lançamentos de uma mesma moeda, possivelmente desbalanceada. O total de P para todas as cadeias do conjunto de Carla deve ser o mesmo que o total de P para todas as cadeias do conjunto de Daniel.\nAlém de repartir as cadeias de forma justa, Carla e Daniel querem evitar ao máximo ter que repetir os lançamentos da moeda, e por isso querem minimizar a quantidade de cadeias que não pertençam a nenhum dos dois. Dado o valor de N, determine o menor número possível de cadeias não atribuídas.\nEntrada\nA entrada consiste de uma única linha que contém contém um inteiro N, o número de lançamentos da moeda e o comprimento das cadeias binárias (2 ≤ N ≤ 1018).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número mínimo de cadeias não utilizadas na divisão.",
    "samples": [
      [
        "3",
        "4"
      ],
      [
        "5",
        "4"
      ],
      [
        "8",
        "2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Maratona Brasileira de Comedores de pipocas",
    "text": "A Maratona Brasileira de Comedores de pipocas é uma competição que ocorre anualmente com o intuito de descobrir qual a equipe mais organizada, preparada e bem-treinada na arte de comer pipoca.\nEla é organizada pela SBCp (Sociedade Brasileira de Comedores de pipocas), que periodicamente se reúne para discutir as regras e o formato da competição.\nA competição consiste em N sacos de pipocas colocados lado a lado, onde cada saco possui uma quantidade arbitrária de pipoca. Para proporcionar uma maior diversão, a competição ocorre em equipes, cada uma composta por C competidores. Como a Maratona Brasileira de Comedores de pipocas é um evento sério que preza, além de tudo, pela saúde dos competidores, a comissão médica impôs que cada competidor poderá comer, no máximo, T pipocas por segundo, a fim de evitar um possível mal-estar.\nA SBCp, em sua última reunião, definiu duas novas regras para a edição de 2019: – Cada competidor da equipe deverá comer uma sequência contígua de sacos de pipoca. É perfei tamente válido que um competidor não coma nenhuma pipoca.\n– Todas as pipocas de um mesmo saco devem ser comidas por um único competidor.\nO objetivo da competição é comer todas as pipocas no menor tempo possível, dado que os C competidores podem comer em paralelo e eles respeitarão todas as regras impostas pela SBCp.\nEntrada\nA primeira linha contém três inteiros N, C e T (1 ≤ N ≤ 105, 1 ≤ C ≤ 105 e 1 ≤ T ≤ 50), representando a quantidade de sacos de pipoca, a quantidade de competidores de uma mesma equipe e quantidade máxima de pipoca por segundo que um competidor pode comer. A segunda linha conterá N inteiros Pi (1 ≤ Pi ≤ 104), sendo estes a quantidade de pipoca em cada um dos N sacos.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade mínima de segundos necessária para a equipe comer todas as pipocas se ela se organizar da melhor maneira possível.",
    "samples": [
      [
        "5 3 4\n5 8 3 10 7",
        "4"
      ],
      [
        "3 2 1\n1 5 1",
        "6"
      ],
      [
        "3 2 1\n1 1 5",
        "5"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Database of Clients",
    "text": "Nowadays there are billions of email users. A little-known fact is that some email providers offer way more than the usual username@provider.com email address.\nSome providers simply ignore dots in usernames. Thus, if John owns the username johnsmith, he could tell people that his email address is johnsmith@provider.com, john.smith@provider.com or john.s.mith@provider.com, among others. Emails sent to any of these addresses would end up on his mailbox.\nOther providers allow appending the character “+” followed by any combination of letters and/or digits after the username. With this feature, by registering the username johnsmith, John would also be able to use johnsmith+friends@provider.com and johnsmith+2x3is6@provider.com.\nSometimes both features are available at once and in those cases john.smith+icpc@provider.com and john.smith+wants.2.eat.lemon.3.14@provider.com are valid addresses that John could use.\nThis is quite useful for users, who can manage different addresses to help organize their mailboxes and easily filter the newsletters eventually sent after registering on a new website. Unfortunately, this also opens up space for abuse. Some websites rely upon the fact that each email address identifies a single user. However, a misbehaving user might easily create multiple accounts by taking advantage of the multiple addresses allowed by the email provider.\nAfter learning all of this your boss got really worried. What if the number of unique users that has been reported to the shareholders is not accurate, bloated by duplicate accounts instead? That brings you to the task at hand: given the list of all email addresses from the users database of the company, you must determine the real number of unique users, assuming that all email providers have both described features available.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000) representing the number of email addresses in the database. Each of the next N lines contains a string of at most 100 characters representing an email address in the database. Each email address has the form localpart@provider where localpart is a non-empty list of labels with a “.” (dot) or a “+” (plus sign) between each pair of consecutive labels, and provider is a non-empty list of labels always with a “.” (dot) between each pair of consecutive labels. A label is a non-empty sequence of lowercase letters and/or digits. The character “+” (plus sign) appears at most once in each email address.\nOutput\nOutput a single line with an integer indicating the number of unique users in the database.",
    "samples": [
      [
        "2\ntwo.different.providers@now.here\ntwo.different.providers@nowhere",
        "2"
      ],
      [
        "2\n1.2.3@testing\ntesting@1.2.3",
        "2"
      ],
      [
        "7\nalice@e.mail\neve@another.mail\nbob@e.mail\njoe90@e.mail\nb.o.b@e.mail\nbob+new@e.mail\nbob@another.provider",
        "5"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "A Symmetrical Pizza",
    "text": "Bob has a symmetry craze. Everything in his life must be symmetric: his house, his clothes, his car, even his food. And pizza is no exception. For him to eat a pizza, all the toppings, like tomatoes, olives, pepperoni or basil, must be arranged with some degree of rotational symmetry.\nThis evening Bob ordered some pizza. As usual, when it arrived, he asked the delivery driver to demonstrate that the pizza met his demands for rotational symmetry. The driver demonstrated the symmetry then, as they are trained to do, using the following procedure: • take a picture of the pizza with a cellphone; • rotate the pizza by R degrees around its center; • take another picture; • show Bob the two pictures side by side, so that he sees that the pizza appears identical in both.\nSatisfied, Bob paid for the pizza and took it to the kitchen. In order to test his brand new laser pizza cutter, he decided to cut the pizza in as many slices as possible. Of course, Bob wants to cut the slices in a way that all of them look exactly the same, in accordance with another of his crazes. Now given the angle R of the symmetry demonstration, Bob wants to know the maximum amount of equal slices he can cut the pizza in.\nInput\nThe input consists of a single line that contains a rational number R (0 < R < 360) indicating the angle of the rotational symmetry demonstration. This number has exactly two digits after the decimal point.\nOutput\nOutput a single line with an integer representing the maximum amount of equal slices Bob can cut the pizza in, based on the provided information.",
    "samples": [
      [
        "45.00",
        "8"
      ],
      [
        "180.00",
        "2"
      ],
      [
        "240.00",
        "3"
      ],
      [
        "35.00",
        "72"
      ],
      [
        "2.50",
        "144"
      ],
      [
        "11.34",
        "2000"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Farm Robot",
    "text": "To discourage birds such as crows and sparrows from feeding on his crops a farmer needed to put some scarecrows in his corn field. His nephew really likes robots, and suggested that he should use a robot scarecrow instead: “A single robot scarecrow can better protect the whole corn field and will last way more than ten traditional ones!”, he said.\nSince the farmer thinks his nephew is a smart boy, he took his advice and bought a robot scarecrow.\nThe robot moves along a pathway that surrounds the corn field. In the pathway there are N unmanned charging stations, numbered sequentially in clockwise order starting from 1. The figure below shows an example with eight charging stations.\nThe robot begins every day at station number 1, and is issued a sequence of commands that are to be performed in order during the day. These commands are generated based on advanced machine learning algorithms that work on data collected by sensors spread through the corn field, ensuring an optimal coverage of the crop. Each command results in the robot moving to another charging station next to the one it is currently at, either in clockwise or counter-clockwise direction.\nDespite the promises of optimal coverage by the robot, at the end of a certain day the farmer found part of his crop devastated. To figure out what might have happened the farmer wants to know how many times the robot was at the charging station closest to the devastated area. Given the number of the station closest to the devastated area and the sequence of commands for a single day, can you help the farmer find this number? Input\nThe first line contains three integers N, C and S representing respectively the number of posts (2 ≤ N ≤ 100), the number of commands (1 ≤ C ≤ 1000) and the charging station closest to the devastated area (1 ≤ S ≤ N). The second line contains C integers X1,X2,...,XC, representing the sequence of commands received by the robot scarecrow. For i = 1,2,...,C, if Xi is 1 then the i-th command means “move to the next charging station in clockwise order”, whereas if Xi is −1 then the i-th command means “move to the next charging station in counter-clockwise order”. The robot always starts at station number 1.\nOutput\nOutput a single line with an integer indicating the number of times the robot was at station number S during the day.",
    "samples": [
      [
        "8 8 3\n1 -1 1 1 1 -1 1 1",
        "2"
      ],
      [
        "5 4 1\n1 1 1 1",
        "1"
      ],
      [
        "2 1 1\n1",
        "1"
      ],
      [
        "2 1 2\n1",
        "1"
      ],
      [
        "2 2 1\n-1 1",
        "2"
      ],
      [
        "2 2 1\n-1 -1",
        "2"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Dazzling Stars",
    "text": "Little Bernie loves to look at the stars in the sky. His favorite constellation is the Ball of Paper Constellation, because of its distinct and unmistakable shape of... a ball of crumpled paper.\nBernie downloaded a picture of the constellation from the internet, and now he wants to print it and stick it to his wall. Bernie also likes to watch the paper sheets gradually coming out of the printer, and for this occasion, he made a decision: he wants the stars to be printed in non-increasing order of brightness.\nThe constellation has N stars. For each one, Bernie knows its brightness level B as well as its X and Y coordinates in the picture, where the X direction points rightwards and the Y direction points upwards. He knows that the pictures are printed from top to bottom (that is, in decreasing order of the Y coordinate), and that everything in a horizontal line is printed simultaneously.\nBernie’s plan can be described like this: for any two stars S and T, if S is brighter than T, then S must be printed before or at the same time as T. Before printing the picture, Bernie can rotate it at any angle around any given point, but he cannot scale, reflect or distort it. Now Bernie needs your help to find out if there is any rotation that allows the stars to be printed in the order he wants.\nInput\nThe first line contains an integer N (3 ≤ N ≤ 1000) indicating the number of stars in the constellation. Each of the next N lines describes a star with three integers X, Y (−104 ≤ X,Y ≤ 104) and B (1 ≤ B ≤ 1000), where X and Y are the coordinates of the star in the picture, and B is its brightness level. No two stars have the same location.\nOutput\nOutput a single line with the uppercase letter “Y” if there is any rotation that allows the stars to be printed in non-increasing order of brightness, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "4\n0 2 1\n1 -1 2\n3 3 5\n4 0 2",
        "Y"
      ],
      [
        "5\n0 4 6\n2 4 5\n3 7 2\n4 4 6\n3 0 8",
        "Y"
      ],
      [
        "4\n-1 2 5\n0 0 2\n3 4 1\n4 2 4",
        "N"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Gluing Pictures",
    "text": "Enzo recently traveled to the city of Montevideo, where he saw a big sign with the name of the city. He decided to take pictures of the sign to make a collage and send it to his friend Demonio.\nEnzo wants to form the name of his friend by taking one or several pictures of sections of the sign. For example, with the string “MONTEVIDEO”, he might form the name of his friend by putting together “DE-MON-I-O”, using four pictures to form the entire name. It is easy to show that the result cannot be achieved with fewer pictures.\nYou will be given the name of a city and a list of friends’ names. Return the minimum number of pictures needed to form the name of each friend. When forming the names, pictures cannot be rotated, reflected or modified in any way.\nInput\nThe first line contains a string C indicating the name of the city. The second line contains a positive integer N representing the number of friends. Each of the following N lines contains a string indicating the name of a friend. All strings are non-empty and consist only of uppercase letters. The sum of the lengths of all strings is at most 2 × 105.\nOutput\nOutput N lines, each line with an integer indicating the minimum number of needed pictures to form the corresponding name in the input, or the value “-1” if it is not possible to generate the name.",
    "samples": [
      [
        "MONTEVIDEO\n4\nDEMONIO\nMONTE\nEDIT\nWON",
        "4\n1\n4\n-1"
      ],
      [
        "SANTIAGO\n3\nTITA\nSANTIAGO\nNAS",
        "3\n1\n3"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Know your Aliens",
    "text": "Our world has been invaded by shapeshifting aliens that kidnap people and steal their identities.\nYou are an inspector from a task force dedicated to detect and capture them. As such, you were given special tools to detect aliens and differentiate them from real humans. Your current mission is to visit a city that is suspected of have been invaded, secretly inspect every person there so as to know whose are aliens and whose aren’t, and report it all to Headquarters. Then they can send forces to the city by surprise and capture all the aliens at once.\nThe aliens are aware of the work of inspectors like you, and are monitoring all radio channels to detect the transmission of such reports, in order to anticipate any retaliation. Therefore, there have been several efforts to encrypt the reports, and the most recent method uses poly nomials.\nThe city you must visit has N citizens, each identified by a distinct even integer from 2 to 2N. You want to find a polynomial P such that, for every citizen i, P(i) > 0 if citizen i is a human, and P(i) < 0 otherwise. This polynomial will be transmitted to the Headquarters.\nWith the aim of minimizing bandwidth, the polynomial has some additional requirements: each root and coefficient must be an integer, the coefficient of its highest degree term must be either 1 or −1, and its degree must be the lowest possible.\nFor each citizen, you know whether they’re a human or not. Given this information, you must find a polynomial that satisfies the described constraints.\nInput\nThe input consists of a single line that contains a string S of length N (1 ≤ N ≤ 104), where N is the population of the city. For i = 1,2,...,N, the i-th character of S is either the uppercase letter “H” or the uppercase letter “A”, indicating respectively that citizen 2i is a human or an alien.\nOutput\nThe first line must contain an integer D indicating the degree of a polynomial that satisfies the described constraints. The second line must contain D +1 integers representing the coeffi cients of the polynomial, in decreasing order of the corresponding terms. It’s guaranteed that there exists at least one solution such that the absolute value of each coefficient is less than 263.",
    "samples": [
      [
        "HHH",
        "0\n1"
      ],
      [
        "AHHA",
        "2\n-1 10 -21"
      ],
      [
        "AHHHAH",
        "3\n1 -23 159 -297"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fabricating Sculptures",
    "text": "Miguel Angelo is a great sculptor, widely recognized for his outdoor sculptures. In his home town, it is very common to find one of his creations in squares and gardens. People love his sculptures, not only for their beauty, but also because they look like new even after decades.\nThe sculptures do not degrade easily due to the material and technique developed by Miguel and his staff over the years.\nTo build the sculptures, he first constructs its base by stacking blocks of waterproof plaster (his secret material), forming several stacks of blocks in a straight line. He always uses identical blocks, and each stack has at least one block. To stabilize the structure, he surrounds it by two big glass panes, one behind the stacks and one in front of them. Then he waits for the rain for as long as it takes. If the structure is such that it doesn’t accumulate water during this procedure, Miguel is sure that the base can be used to obtain a piece of long-lasting artwork.\nNotice that water will accumulate on a block if there are obstacles (other blocks) on both sides (to the left and to the right).\nThe following picture shows the front view of several different bases. All of them consist of three stacks made of a total of six blocks, with each stack having at least one block as required.\nHowever, the eight bases on the left will lead to long-lasting artwork, while the two bases on the right will not.\nMiguel Angelo is receiving a lot of sculpture requests. Although he has all the freedom to create the artwork, he wants to be fair and use the same number of stacks and the same number blocks in each of the sculptures. Since he doesn’t want to sell identical sculptures to different clients, he will construct a different base each time.\nHe worries that he won’t be able to fulfill all the requests. Help him calculate the number of different bases given the number of stacks and the number of blocks that the base must have.\nInput\nThe input consists of a single line that contains two integers S and B (1 ≤ S ≤ B ≤ 5000) indicating respectively the number of stacks and the number of blocks that the base must have.\nOutput\nOutput a single line with an integer indicating the number of different bases that don’t accumulate water which Miguel can construct. Because this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "3 6",
        "8"
      ],
      [
        "3 7",
        "12"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Cut Inequality Down",
    "text": "Complejidonia has not always been the peaceful and egalitarian land we all know today. The wealthy Constantones were the owners of the local media and plunged Complejidonia into the tyranny of their ruthless economic system: Nlogonialism, a system that promoted extreme unfairness which, strangely enough, always benefited the Constantones.\nWhile the Constantones owned most of the wealth, Cuadradones lived in extreme poverty, and inequality was justified by tagging Cuadradones as lazy and inefficient. The Nlogones would usually look down on Cuadradones, despite working as much as they did, believing they were better off thanks to their mix of hard work and cunning. For the Cubiones and Cuaterniones it was even worse, coming from neighboring countries they were seen as criminals and, at the same time, accused of stealing Complejidonian jobs.\nEverything changed after the International Collectivist and Popular Congress (ICPC) man aged to overthrown the Constantones and put a new economic system in place, a system which strives for fairness and takes into account that each inhabitant might go through good and bad economic periods in life.\nIn the new system an upper limit U on how much wealth an individual can accumulate and a lower bound L representing the minimum wealth required in order for an individual to keep a decent lifestyle were established. At the end of each month every inhabitant will evaluate their wealth. Those with more than U will donate what they own above the upper limit to the ICPC while the ones who sadly have less than L will receive enough from ICPC to reach the established lower bound.\nThe Cuadradones, which are very good farmers, need your help managing their finance.\nThe long era of Nlogonialism has seriously harmed the environment and now the weather in Complejidonia is very volatile. This has a big impact on its agriculture that fluctuates between good and bad periods.\nA farmer keeps a long record A1,A2,...,AN of their net income (income minus expenses) on a sequence of N months. Based on this data the farmer wants to plan how to invest their wealth in order to avoid being a burden to the ICPC in the future. The farmer wants to be able to know, given an initial wealth X at the beginning of a month B, how much they would own at the end of a month E (considering that at the end of each month they might either donate or receive a donation to ensure their wealth is between L and U, inclusive).\nInput\nThe first line contains three integers N (1 ≤ N ≤ 105), L and U (1 ≤ L ≤ U ≤ 2 × 106), indicating respectively the number of months for which the farmer has net income records, the wealth lower bound and the wealth upper bound. The second line contains N integers A1,A2,...,AN (−106 ≤ Ai ≤ 106 for i = 1,2,...,N), where Ai is the net income on the i-th month. The third line contains an integer Q (1 ≤ Q ≤ 105) representing the number of scenarios the farmer is interested in. Each of the next Q lines describes a scenario with three integers B, E (1 ≤ B ≤ E ≤ N) and X (L ≤ X ≤ U), indicating that the farmer would like to know how much they would own at the end of month E if they start owning X at the beginning of month B, and each month j = B,B + 1,...,E their net income is Aj.\nOutput\nOutput Q lines, each line with an integer indicating how much the farmer would own at the end of the period described in the corresponding scenario.\n  On the first scenario the farmer’s net incomes would be [10,1,−1,−70] and they start with a wealth of 31: • At the end of first month their wealth is 41. As 1 ≤ 41 ≤ 41 they won’t donate nor receive money.\n• At the end of second month their wealth is 42. As 42 > 41 they donate 1, ending the month with a wealth of 41.\n• At the end of third month their wealth is 40. As 1 ≤ 40 ≤ 41 once again they won’t donate nor receive money.\n• Finally, at the end of fourth month their wealth is −30. As −30 < 1 they receive a donation from the ICPC ending the month with a wealth of 1.\nHence, on this scenario, the farmer ends up owning a wealth of 1.",
    "samples": [
      [
        "5 1 41\n-10 10 1 -1 -70\n10\n2 5 31\n2 4 30\n2 4 29\n2 4 28\n1 2 20\n1 2 10\n1 4 11\n1 4 10\n1 4 40\n1 4 41",
        "1\n40\n39\n38\n20\n11\n11\n11\n40\n40"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Build the Perfect House",
    "text": "Alice and Bob are now 45 years old and have enjoyed a long five-years retirement maintaining their vegetable field. Going back and forth to the field from their house in the city has become a really exhausting task, so they decided to move to the field permanently. They currently have a perfect fence surrounding all the vegetable plants (it has minimum perimeter and area), but they will tear down the old fence and build a new perfect house to live in.\nSo what is a perfect house? Well, you know, there are some requirements. The area of the house must be a square centered at the point of the field that has the most beautiful view.\nBesides, the house cannot be built over any of the vegetables, although vegetables are allowed right on the border of the house.\nSince Alice and Bob love spacious rooms, your task is to find the maximum perimeter a perfect house can have.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 104) indicating the number of vegetable plants in Alice and Bob’s field. Vegetable plants are represented as points in the two dimensional plane, being (0,0) the point of the field that has the most beautiful view. Each of the next N lines describes a vegetable plant with two integers X and Y (−109 ≤ X,Y ≤ 109) indicating the coordinates of the plant. No two vegetable plants have the same location and none of them is at point (0,0).\nOutput\nOutput a single line with a number indicating the maximum perimeter a perfect house can have. The result must be output as a rational number with exactly four digits after the decimal point, rounded if necessary. Notice that the sides of the house don’t need to be aligned with the coordinate axes.",
    "samples": [
      [
        "1\n0 1",
        "8.0000"
      ],
      [
        "2\n10 4\n-5 -8",
        "74.9634"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Algorithm Teaching",
    "text": "The Latin American Beginners Regional Contest is coming, and the University of Byteland wants to prepare a team of newly-admitted students to compete. The university has N teachers that can instruct students in the topic of algorithms. Each candidate student must be trained by a single teacher, in a non-empty subset of the algorithms that the teacher knows. For example, if a given teacher knows the two algorithms PRIM and KRUSKAL, then the teacher can train a student just on PRIM, just on KRUSKAL, or on both PRIM and KRUSKAL. As you can see, in this case there are three different options for this particular teacher to train a student. In general, a given teacher that knows A different algorithms can train a student in 2A − 1 different ways. All these 2A − 1 options can be carried out, because the university has a lot of new students, and there is no limit on the number of students a teacher can train.\nThe university would like to form a team having as many students as possible. However, each pair of students in the final team must be able to cooperate, which means that each one of them must have been trained on an algorithm that the other hasn’t. For example, a student trained on BFS and DFS can cooperate with another student trained on DFS and DIJKSTRA, because the first student is trained on BFS while the second student isn’t, and the second student is trained on DIJKSTRA while the first student isn’t. On the other hand, a student trained on BFS and DFS cannot cooperate with another student trained just on BFS, or just on DFS, or on both BFS and DFS, among others.\nGiven the set of algorithms that each teacher knows, you must determine the maximum number of students in a team in which every student can cooperate with each other. Recall that each student must be trained by a single teacher, while each teacher can train as many students as needed. For example, if there is just one teacher who knows the algorithms DFS, BFS and DIJKSTRA, it is possible to prepare a team with up to three students: a first student trained on DFS and BFS, a second student trained on DFS and DIJKSTRA, and a third student trained on BFS and DIJKSTRA.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 100) indicating the number of teachers.\nEach of the next N lines describes a teacher with an integer A (1 ≤ A ≤ 10) representing the number of algorithms the teacher knows, followed by A different non-empty strings of at most 10 uppercase letters each, indicating the names of the algorithms that teacher knows.\nOutput\nOutput a single line with an integer indicating the maximum number of students in a team in which every student can cooperate with each other.",
    "samples": [
      [
        "1\n3 DFS BFS DIJKSTRA",
        "3"
      ],
      [
        "2\n4 BFS DFS LCA RMQ\n2 PRIM KRUSKAL",
        "8"
      ],
      [
        "4\n3 BFS DFS DIJKSTRA\n4 BFS DFS LCA RMQ\n3 DIJKSTRA BFS DFS\n3 FLOYD DFS BFS",
        "10"
      ],
      [
        "1\n1 HAVEFUN",
        "1"
      ],
      [
        "3\n4 FFEK DANTZIG DEMOUCRON FFT\n4 PRIM KRUSKAL LCA FLOYD\n4 DFS BFS DIJKSTRA RMQ",
        "18"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Eggfruit Cake",
    "text": "Today is Jaime’s birthday and, to celebrate, his friends ordered a cake decorated with eggfruits and persimmons. When the cake arrived, to their surprise, they noticed that the bakery didn’t use equal amounts of eggfruits and persimmons, but just randomly distributed the fruits over the cake’s border instead.\nJaime eats persimmons every day, so he was eager to try some eggfruit on his birthday.\nHowever, as he doesn’t want to eat too much, his cake slice should be decorated with at most S fruits. Since Jaime doesn’t like when a fruit is cut into parts, each fruit should either be entirely in his slice or be left in the rest of the cake. The problem is, with the fruits distributed in such a chaotic order, his friends are having trouble cutting a suitable slice for him.\nJaime is about to complain that his friends are taking too long to cut his slice, but in order to do so, he needs to know how many different slices with at least one eggfruit and containing at most S fruits there are. A slice is defined just based on the set of fruits it contains. As Jaime is quite focused on details, he is able to distinguish any two fruits, even if both fruits are of the same type. Hence, two slices are considered different when they do not contain exactly the same set of fruits. The following picture shows a possible cake, as well as the six different slices with at most S = 2 fruits that can be cut from it.\nInput\nThe first line contains a circular string B (3 ≤ |B| ≤ 105) describing the border of the cake.\nEach character of B is either the uppercase letter “E” or the uppercase letter “P”, indicating respectively that there’s an eggfruit or a persimmon at the border of the cake. The second line contains an integer S (1 ≤ S < |B|) representing the maximum number of fruits that a slice can contain.\nOutput\nOutput a single line with an integer indicating the number of different slices with at most S fruits and at least one eggfruit.",
    "samples": [
      [
        "PEPEP\n2",
        "6"
      ],
      [
        "EPE\n1",
        "2"
      ],
      [
        "PPPP\n1",
        "0"
      ],
      [
        "EPEP\n2",
        "6"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Jumping Grasshopper",
    "text": "Jazmín has a garden in front of her house, with N plants forming a line in the left-right direction. She is very proud of her plants, and measures their growing heights with great precision, because she thinks that each plant is different and so it must have a different height.\nOne day Jazmín found a grasshopper in her garden, and after watching it for some time, she noticed a very peculiar behavior. During each jump the grasshopper moves to the first plant taller than its current plant, in the direction it is looking at. Besides, before landing on the new plant, the grasshopper does a backflip that changes its direction. That is, if before jumping the grasshopper is looking to the left, once the jump is completed it is looking to the right, and vice versa. The grasshopper keeps jumping until there is no taller plant in the direction it is looking at.\nJazmín decided to record her sightings of the grasshopper. Each time she saw it, she wrote the plant where the grasshopper was, and the direction it was looking at. She also recorded how her plants were growing, as she always does. Now Jazmín wonders, for each sighting of the grasshopper, on which plant it stopped jumping. Jazmín’s notebook is currently broken, so she cannot write her own program. Can you help her? Input\nThe first line contains two integers N and M (1 ≤ N,M ≤ 2×105), indicating respectively the number of plants and the number of records. Plants are identified by distinct integers from 1 to N according to their positions in front of the house, starting from the leftmost plant. The second line contains N different integers H1,H2,...,HN (0 ≤ Hi ≤ 109 for i = 1,2,...,N), where Hi is the initial height of plant i. The following M lines describe Jazmín’s records in chronological order, one line per record. If a record represents the growing of a plant, the line contains the uppercase letter “U” followed by two integers I (1 ≤ I ≤ N) and H (H ≤ 109), indicating that the new height of plant I is H; the new height H is greater than the old height of plant I, and different from the current height of each of the other plants. If a record represents the sighting of the grasshopper, the line contains the uppercase letter “L” or the uppercase letter “R” followed by an integer J (1 ≤ J ≤ N) indicating that the grasshopper starts jumping from plant J; the grasshopper starts looking to the left if the letter is “L”, and it starts looking to the right if the letter is “R”. There is at least one record that is a sighting of the grasshopper.\nOutput\nOutput a line for each sighting of the grasshopper. The line must contain an integer indicating the plant where the grasshopper stops jumping. Write the results in chronological order, that is, using the same order of the input.",
    "samples": [
      [
        "10 4\n1 8 5 6 10 20 12 15 2 4\nL 2\nR 3\nU 10 16\nL 9",
        "2\n5\n6"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Improve SPAM",
    "text": "After the amazing job you did cleaning up duplicate users from the client database, your boss is eager to be impressed by your improvements to the company SPAM (System for Publishing Amazing Marketing).\nDespite the marketing campaigns being extremely useful for clients, some complaints were received by the customer service indicating that too many messages are being sent, and that certain clients even receive the same message multiple times.\nSPAM is based on mailing lists. Each mailing list is composed of client emails and/or other mailing lists. Client emails might be added to existing mailing lists at any point in time, while only when a mailing list is created it can be added to any number of existing mailing lists.\nNotice that it is not possible to create several mailing lists at the same time.\nWhen a message is sent to a mailing list, the system sends the message to each address in the list. If the address in the list is a client email, then the message is sent to that client email; if instead the address is a mailing list, then the process is started for that mailing list.\nDue to privacy reasons, in the following example mailing lists and client emails are repre sented by integers. Suppose that 1, 2 and 3 are mailing lists, while 4 and 5 are client emails.\nMoreover, mailing list 1 contains mailing lists 2 and 3, mailing list 2 contains client emails 4 and 5, while mailing list 3 contains client email 4 and mailing list 2. Now suppose that a message is sent to mailing list 1. This means that the list is processed as described above, and then mailing lists 2 and 3 are also processed. When mailing list 2 is processed, the message is sent to client emails 4 and 5. When mailing list 3 is processed, a second message is sent to client email 4, and mailing list 2 is processed again, which yields a third message sent to client email 4 and a second message sent to client email 5. Thus, a total of five messages are sent to client emails.\nYour task is to optimize SPAM in such a way that no client receives the same message multiple times. As a first step, your boss wants to know the number of messages sent before and after your improvements. In the above example, just two messages should be sent to client emails after your work is done.\nInput\nThe first line contains two integers N and L (2 ≤ N ≤ 2000, 1 ≤ L ≤ min(N − 1,1000)), representing respectively the number of addresses in the system, and the number of addresses that are mailing lists. Addresses are identified by distinct integers from 1 to N. Addresses from 1 to L are mailing lists, while the rest are client emails. For i = 1,2,...,L, the i-th of the next L lines describes mailing list i with an integer K (1 ≤ K < N) followed by K different integers M1,M2,...,MK (1 ≤ Mi ≤ N for i = 1,2,...,K), indicating that the mailing list contains the K addresses M1,M2,...,MK. Each client address appears in at least one mailing list.\nOutput\nOutput a single line with two integers B and A indicating respectively the number of messages sent to client emails before and after your improvements, if a message is sent to mailing list 1. Because these numbers can be very large, output the remainder of dividing them by 109 + 7.",
    "samples": [
      [
        "5 3\n2 2 3\n2 4 5\n2 4 2",
        "5 2"
      ],
      [
        "15 6\n1 6\n7 10 11 12 13 9 7 8\n5 6 14 4 5 15\n2 14 15\n2 4 14\n2 5 4",
        "5 2"
      ],
      [
        "10 5\n4 8 9 10 3\n3 9 10 6\n3 8 9 7\n6 2 3 6 7 8 10\n5 9 10 3 1 7",
        "6 4"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hold or Continue?",
    "text": "Pig is a simple dice game for two or more players. Each turn, a player repeatedly rolls a dice until either a 1 is rolled or the player decides to “hold”: • If the player rolls a 1, they score nothing in their turn and it becomes the next player’s turn.\n• If the player rolls any other number, it is added to their turn total and the player can decide between “hold” or “continue”.\n• If the player chooses to “hold”, their turn total is added to their score and it becomes the next player’s turn. Otherwise the player continues rolling the dice.\nThe first player to score exactly 75 wins the game. If a player’s score plus their turn total exceeds 75, they score nothing in their turn and it becomes the next player’s turn.\nCatelyn Tully is playing Pig with her father Hoster. If Catelyn begins her turn rolling a 5, she could hold and score 5 during her turn. If she chooses to continue and rolls a 2, she could hold and score 7. If she chooses again to continue and rolls a 1, she must end her turn without scoring. If at his turn Hoster rolls the sequence 4-5-3-5-5 and then he chooses to hold, he adds his turn total of 22 to his current score (unless the sum exceeds 75). Then Catelyn rolls the dice again, and so on, until one of them scores exactly 75.\nHoster finds the game very didactic and he became a pretty good player. After playing several times with Catelyn, he realized that she is very impulsive and continues rolling the dice more times than she should. Catelyn would like to improve the way she plays, but unfortunately Hoster doesn’t have too much patience to teach her, so she needs your help. While playing with her father, Catelyn has to decide several times whether to hold or continue, and sometimes she is not sure about what to do. Can you advise her so that each decision maximizes her winning probability? Input\nThe first line contains an integer Q (1 ≤ Q ≤ 1000) indicating the number of questions on which Catelyn wants your advice. Each of the next Q lines describes a question with three integers C, H and X (0 ≤ C,H ≤ 73, X ≥ 2, C +X ≤ 75), representing respectively Catelyn’s current score, Hoster’s current score, and Catelyn’s turn total (sum of the rolls of the dice during her turn).\nOutput\nOutput Q lines, each line with a character indicating the decision Catelyn must make for the corresponding question of the input, so as to maximize her winning probability if both Catelyn and Hoster play optimally. For each question, the character must be the uppercase letter “H” if the optimal decision is to hold, or the uppercase letter “C” if the optimal decision is to continue. It is guaranteed that the optimal decision can be clearly differentiated; this means that |ph − pc| > 10−5, where ph is the winning probability if Catelyn decides to hold, and pc is the winning probability if she decides to continue (0 ≤ ph,pc ≤ 1).",
    "samples": [
      [
        "3\n15 0 3\n35 50 40\n15 0 30",
        "C\nH\nH"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Leverage MDT",
    "text": "The kingdom of Nlogonia is a very prosperous one. Its king, Constantourist, expanded the kingdom by conquering nearby towns. However, now that Constantourist’s life is coming to an end, his two sons, Javasar and Golangsar, need to decide the fate of the kingdom.\nInstead of fighting an unnecessary war to choose the next king, the two sons are trying to negotiate an agreement so as to divide the kingdom’s jurisdiction into two. Nlogonia is a rectangle-shaped land having N kilometers in the North-South direction and M kilometers in the West-East direction. Thus, during the initial stage of negotiations the two sons were able to divide the land in N × M square parcels of one kilometer on each side, using divisory lines parallel to the kingdom’s border. The next step is to distribute the parcels between the two sons.\nBefore the negotiations can continue, Javasar needs to decide which parcels he wants to claim for himself. He has already categorized each parcel in either good or bad, according to soil quality. Javasar wants his jurisdiction to be recognized as the best in Nlogonia, and so he is planning to choose only parcels with good soil quality. Moreover, being a perfectionist, he decided that the parcels that he will claim need to form a square.\nJavasar is worried that these requirements might make him get only a few amount of parcels.\nLuckily for him, during one of his adventures to Byteland, he found an ancient Magical Divine Tool (MDT) which, when active, is able to reverse the soil quality of the parcel Javasar is currently standing in. In other words, if active, the MDT turns a bad quality parcel into a good one, and vice versa.\nWith this handy tool, Javasar came up with the perfect plan! He will travel outside the kingdom, to the West of the parcel that is at the North-West corner, and then he will visit each parcel exactly once following the route that the picture below shows. Notice that Javasar will enter and leave Nlogonia several times. In this way he will avoid activating or deactivating the MDT when he is inside the kingdom, and then nobody will see him manipulating the tool.\nAlthough the MDT is magical and divine, it does not activate or deactivate by itself.\nAs Javasar’s main advisor, you must tell him the maximum number of parcels it is possible to obtain, meeting his requirements, if he optimally leverages the MDT.\nInput\nThe first line contains two integers N and M (1 ≤ N,M ≤ 1000), indicating the length (in kilometers) of Nlogonia in the North-South and West-East directions, respectively. Each of the next N lines contains a string of M characters, where each character is either the uppercase letter “G” or the uppercase letter “B”, representing that the soil quality of a parcel is good or bad, respectively. The description of the kingdom’s parcels is made from North to South, and from West to East.\nOutput\nOutput a single line with an integer indicating the maximum number of parcels Javasar can obtain, whilst meeting his requirements, if he optimally leverages the MDT.",
    "samples": [
      [
        "2 2\nGG\nGG",
        "4"
      ],
      [
        "5 5\nGGGGG\nGBBBG\nGBBBG\nGBBBG\nGGGGG",
        "9"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Mountain Ranges",
    "text": "Famous for its mountain ranges, Nlogonia attracts millions of tourists every year. The gov ernment has a dedicated budget for continuous maintenance of the hiking trails spread across the country and most of them are filled with scenic viewpoints, accessible through wooden walkways and stairs.\nCurrently on a trip through Nlogonia and with hopes of going back home with lots of breath-taking pictures, Lola and her husband want to visit as many viewpoints as possible.\nThey plan to hike a different trail each day and explore its viewpoints. However, to avoid being exhausted at the end of the day, if moving from one viewpoint to the next requires going up more than X meters they simply call it a day and go back to their hotel in order to get some rest. Fortunately, every hiking trail in Nlogonia is equipped with modern chairlifts, so the couple can start hiking the trail at any viewpoint they decide. Once the hiking begins the couple only moves towards the peak of the mountain.\nTo make sure she doesn’t waste a day Lola only wants to hike on trails where she’ll get to a reasonable number of viewpoints. Given the altitudes of the scenic viewpoints on a hiking trail, you must determine the maximum number of viewpoints that the couple can visit.\nInput\nThe first line contains two integers N (1 ≤ N ≤ 1000) and X (0 ≤ X ≤ 8848), indicating respectively the number of scenic viewpoints on the hiking trail, and the maximum number of meters that Lola and her husband are willing to go up from one viewpoint to the next. The second line contains N integers A1,A2,...,AN (1 ≤ Ai ≤ 8848 for i = 1,2,...,N), where Ai is the altitude (in meters) of the i-th viewpoint. Viewpoints are given in the order they appear on the hiking trail and their altitudes are non-decreasing, that is, Ai ≤ Ai+1 for i = 1,2,...,N − 1.\nOutput\nOutput a single line with an integer indicating the maximum number of scenic viewpoints that can be visited without going up more than X meters from one viewpoint to the next, and considering that the journey can be started at any viewpoint.",
    "samples": [
      [
        "9 2\n3 14 15 92 653 5897 5897 5898 5900",
        "4"
      ],
      [
        "9 0\n3 14 15 92 653 5897 5897 5898 5900",
        "2"
      ],
      [
        "9 8848\n3 14 15 92 653 5897 5897 5898 5900",
        "9"
      ]
    ],
    "source": {
      "year": "2019",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Teleférico",
    "text": "A turma da faculdade vai fazer uma excursão na serra e todos os alunos e monitores vão tomar um teleférico para subir até o pico de uma montanha. A cabine do teleférico pode levar C pessoas no máximo, contando alunos e monitores, durante uma viagem até o pico. Por questão de segurança, deve haver pelo menos um monitor dentro da cabine junto com os alunos. Por exemplo, se cabem C = 10 pessoas na cabine e a turma tem A = 20 alunos, os alunos poderiam fazer três viagens: a primeira com 8 alunos e um monitor; a segunda com 6 alunos e um monitor; e a terceira com 6 alunos e um monitor.\nDados como entrada a capacidade C da cabine e o número total A de alunos, você deve escrever um programa para calcular o número mínimo de viagens do teleférico.\nSe você estiver com muita preguiça hoje, não se preocupe: virando a página você encontra soluções para este problema.\nEntrada\nA primeira linha da entrada contém um inteiro C, representando a capacidade da cabine (2 ≤ C ≤ 100). A segunda linha da entrada contém um inteiro A, representando o número total de alunos na turma (1 ≤ A ≤ 1000).\nSaída\nSeu programa deve imprimir uma linha contendo um número inteiro representando o número mínimo de viagens do teleférico para levar todos os alunos até o pico da montanha.\n      Solução em C++ #include <iostream> using namespace std; int main(void){ int C,A; cin >> C >> A; // le a entrada int quociente = A/(C-1); int resto = A%(C-1); int resposta = quociente; if ( resto > 0 ) resposta++; cout << resposta << endl; // escreve a resposta return 0; } Solução em Python C = int(input()) # le a entrada A = int(input()) quociente, resto = A/(C-1), A%(C-1) resposta = quociente if resto>0: resposta += 1 print(resposta) # escreve a resposta Solução em Java import java.util.Scanner; public class C { public static void main(String[] args) { Scanner in = new Scanner(System.in); int quociente, resto, resposta; int C,A; C=in.nextInt(); // le a entrada A=in.nextInt(); quociente=A/(C-1); resto=A%(C-1); resposta=quociente; if (resto>0) resposta=resposta+1; System.out.println(resposta); // imprime a resposta } }",
    "samples": [
      [
        "10\n20",
        "3"
      ],
      [
        "12\n55",
        "5"
      ],
      [
        "100\n87",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Estratégia",
    "text": "Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas.\nDado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor.\nEntrada\nA entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J,R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram.\nOs Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive.\nSaída\nSeu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador ven cedor.",
    "samples": [
      [
        "3 3\n1 1 1 1 2 2 2 3 3",
        "3"
      ],
      [
        "2 3\n0 0 1 0 2 0",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
    "samples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Despojados",
    "text": "Todo inteiro positivo pode ser escrito como um produto de potências de primos. Por exemplo, 252 = 22 × 32 × 7. Um inteiro é despojado se pode ser escrito como um produto de dois ou mais primos distintos, sem repetição. Por exemplo, 6 = 2 × 3 e 14 = 2 × 7 são despojados, mas 28 = 22 × 7, 1, 17 não são despojados.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 1012).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número de divisores despojados de N.",
    "samples": [
      [
        "252",
        "4"
      ],
      [
        "6469693230",
        "1013"
      ],
      [
        "8",
        "0"
      ],
      [
        "1",
        "0"
      ],
      [
        "88290298627",
        "0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ginástica",
    "text": "Vinícius gosta muito de se exercitar na academia de ginástica. Ele fez um acordo com o seu treinador para ter programas de exercícios diferentes a cada vez que usar a bicicleta ergométrica. Um programa, na linguagem das academias, é uma sequência de níveis de dificuldade do exercício. Os programas de Vinícius para a bicicleta ergométrica devem ter a mesma duração em minutos e os níveis de dificul dade devem mudar a cada minuto, para um nível imediatamente acima ou um nível imediatamente abaixo. Os níveis de dificuldade não podem estar abaixo de um mínimo e nem acima de um máximo previamente estipulados.\nSeu problema é calcular o número de programas diferentes que o treinador pode construir, obede cidas as restrições acima.\nEntrada\nA entrada consiste de uma única linha que contém três inteiros, T,M,N (1 ≤ T ≤ 50,1 ≤ M < N ≤ 105) em que T é o número de minutos do exercício, M é o valor mínimo de dificuldade permitido e N é o valor máximo de dificuldade permitido.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número de programas diferentes que o treinador pode construir. Como esse número pode ser grande, a resposta deve ser esse número módulo 109 + 7.",
    "samples": [
      [
        "3 2 5",
        "10"
      ],
      [
        "30 2 5",
        "4356618"
      ],
      [
        "50 1 100000",
        "738072143"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "K-ésimo",
    "text": "√ √ Dado um número real X da forma A + B, com A e B inteiros positivos e −1 < A − B < 1, e dois números inteiros N e K, sua tarefa é determinar o K-ésimo dígito menos significativo da parte inteira de XN. Por exemplo, se K = 1, você precisa determinar o algarismo das unidades de (cid:98)XN(cid:99).\nEntrada\nA entrada consiste de uma única linha, que contém quatro números inteiros, A, B, N e K, com 1 ≤ A,B ≤ 104, 1 ≤ N ≤ 109 e 1 ≤ K ≤ 4.\nSaída\nSeu programa deve imprimir uma única linha, contendo o K-ésimo dígito menos significativo da parte inteira de XN.",
    "samples": [
      [
        "3 10 1 1",
        "6"
      ],
      [
        "3 10 2 1",
        "7"
      ],
      [
        "3 10 1000000000 1",
        "1"
      ],
      [
        "10 90 1000000000 2",
        "9"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fase",
    "text": "Em diversas competições acadêmicas, como a Olimpíada Brasileira de Informática (OBI), uma certa quantidade de competidores se classifica de uma fase para a fase seguinte, garantindo uma das vagas disponíveis. Entretanto, normalmente essa quantidade é variável, pois dada uma certa quantidade mínima de classificados, é frequente que haja empate na última vaga de classificação. Neste caso, é comum que todos os competidores empatados na última colocação se classifiquem.\nSua tarefa é ajuda a calcular o número de competidores classificados para a próxima fase. Você receberá uma lista de pontuações obtidas pelos competidores e o número mínimo de vagas para a fase seguinte e você deve decidir quantos competidores de fato vão se classificar.\nEntrada\nA primeira linha da entrada contém um número inteiro N, 1 ≤ N ≤ 1000, representando o número de competidores. A segunda linha conterá um inteiro K, 1 ≤ K ≤ N, indicando o número mínimo de competidores que devem se classificar para a próxima fase. Em seguida, N linhas conterão, cada uma um número entre 1 e 1000, inclusive, correspondente à pontuação de um competidor.\nSaída\nSeu programa deve imprimir uma linha, contendo o número de classificados para a próxima fase.",
    "samples": [
      [
        "10\n3\n1\n2\n3\n4\n5\n5\n4\n3\n2\n1",
        "4"
      ],
      [
        "5\n2\n500\n500\n500\n500\n500",
        "5"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Cigarras periódicas",
    "text": "As “cigarras períodicas” americanas têm o ciclo de vida mais longo de todos os insetos conhecidos.\nA cada 17 anos, estas cigarras períodicas amadurecem, se acasalam, depositam ovos e morrem. Suas crias se refugiam debaixo da terra, a 20 centímetros de profundidade, onde elas se alimentarão da seiva de raízes por 17 anos, até que chegue seu dia de buscar um lugar ao sol.\nAcredita-se que esse número não aconteceu por acaso, outras espécies de cigarras da região tem ciclos de 13 anos, assim essas duas espécies emergem ao mesmo tempo apenas a cada 221 anos. Isso é desejável pois dessa forma a chance de que as duas espécies se misturem diminui consideravelmente e características indesejáveis de uma população não são introduzidas na outra.\nInspirado por esse fenômeno, uma nova variação de algoritmo evolutivo foi criada. Na última etapa desse algoritmo as melhores possíveis soluções são divididas em populações de modo que cada população i tem um ciclo de vida Ci. Além disso uma população extra também é adicionada, de modo que a quantidade de iterações até que o ciclo de vida de todas as populações coincida seja a maior possível. Essas populações são então avaliadas até que o ciclo de vida de todas coincida e a melhor solução ao final do processo é escolhida. Como não é interessante esperar demais até que o algoritmo gere uma resposta, um limite superior L no número de iterações também deve ser respeitado.\nDados os ciclos de vida das populações criadas e o limite na quantidade de iterações L, sua tarefa é computar qual o período ótimo para a população extra que será adicionada.\nEntrada\nA primeira linha da entrada contém dois inteiros N e L, respectivamente, a quantidade de po pulações geradas pelas etapas anteriores do algoritmo e o limite da quantidade de iterações, 2 ≤ N ≤ 104, 1 ≤ L ≤ 106. A linha seguinte contém os N valores Ci representando a quantidade de iterações no ciclo de vida de cada população, onde 1 ≤ Ci. Você pode assumir que os ciclos de vida das populações atuais coincidem em menos de L iterações.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o período da população extra que maximiza a quantidade T de iterações até que os ciclos de vida de todas as populações coincidam, respeitando a restrição de que T ≤ L. Caso exista mais de um valor possível imprima o menor deles.",
    "samples": [
      [
        "2 5000\n105 55",
        "4"
      ],
      [
        "2 512\n3 14",
        "72"
      ],
      [
        "3 80\n6 10 15",
        "4"
      ],
      [
        "3 60\n12 10 15",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Brincadeira",
    "text": "Um Registrador de Deslocamento é um circuito que desloca de uma posição os elementos de um vetor de bits. O registrador de deslocamento tem uma entrada (um bit) e uma saída (também um bit), e é comandado por um pulso de relógio. Quando o pulso ocorre, o bit de entrada se transforma no bit mais significativo do vetor, o bit menos significativo é jogado na saída do registrador, e todos os outros bits são deslocados de uma posição em direção ao bit menos significativo do vetor (em direção à saída).\nUm Registrador de Deslocamento com Retroalimentação Linear (em inglês, LFSR) é um registrador de deslocamento no qual o bit de entrada é determinado pelo valor do ou-exclusivo de alguns dos bits do registrador antes do pulso de relógio. Os bits que são utilizados na retroalimentação do registrador são chamados de torneiras. A figura abaixo mostra um LFSR de 8 bits, com três torneiras (bits 0, 3 e 5).\nDurante uma competição de programação, enquanto aguardam a divulgação do resultado final, Ricardo e Cláudio se divertem com um LFSR que encontraram no local.\nEles usam o LFSR para gerar uma sequência infinita de números. Para gerar tal sequência, antes de cada pulso do relógio, os bits do registrador são convertidos para decimal. Assim, para um LFSR como o da figura os primeiros elementos da sequência são: A0 = 169 (10101001), A1 = 212 (11010100), A2 = 106 (01101010), A3 = 53 (00110101) e A4 = 26 (00011010). Note que o valor dos bits antes do primeiro pulso é o primeiro elemento da sequência.\nEm cada rodada da brincadeira um deles fala dois números inteiros, X e Y . Daí em diante o outro deve encontrar uma subsequência contígua, de tamanho maior ou igual a Y , dos elementos da sequência gerada pelo LFSR, de modo que a soma dos elementos da subsequência contígua seja divisível por X.\nDe alguma forma os dois são capazes de se divertir com isso e encontrar as respostas mesmo sem a ajuda de um computador. E você, dada a descrição de um LSFR e dois inteiros X e Y , é capaz de encontrar uma subsequência válida (ou informar caso não exista uma)? Entrada\nA primeira linha contém cinco números inteiros N,T,A0,X e Y . O inteiro N representa o número de bits (2 ≤ N ≤ 30), T é o número de torneiras (1 ≤ T ≤ N), A0 é a representação decimal do estado inicial do LFSR, X o valor pelo qual a soma da subsequência contígua deve ser divisível (1 ≤ X ≤ 106) e Y é a quantidade mínima de elementos na subsequência contígua desejada (1 ≤ Y ≤ 106). Os bits são identificados por inteiros de 0 (bit menos significativo) a N−1 (bit mais significativo). A segunda linha contém T inteiros, separados por espaços, representando os identificadores dos bits que são torneiras, em ordem crescente. O bit 0 sempre é uma torneira.\nSaída\nSeu programa deve imprimir, em uma única linha, dois inteiros I e F, representando os índices do primeiro e do último elementos da subsequência contígua escolhida. Caso não exista uma solução imprima a palavra impossivel. Caso exista mais de uma solução possível escolha aquela que minimiza o valor de F. Se mesmo assim houver mais de uma possibilidade opte por aquela que minimiza o valor de I.",
    "samples": [
      [
        "8 3 169 169 1\n0 3 5",
        "0 0"
      ],
      [
        "8 3 169 238 2\n0 3 5",
        "13 25"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Acordes intergaláticos",
    "text": "A maratona de composição de sonatas para piano intergalático está tentando dificultar a vida dos competidores, pois cada vez mais seres de inteligência superior estão participando. O piano é composto de N teclas, numeradas de 0 a N − 1. O sistema tonal intergalático possui 9 notas musicais, com valores de 0 a 8. Inicialmente todas as teclas do piano estão associadas à mesma nota 1. O competidor vai tocar uma sequência de acordes. Cada acorde intergalático é composto por duas teclas distintas, a e b, 0 ≤ a < b < N. Quando o acorde é tocado, o piano vai emitir a nota mais frequente, f, entre todas as teclas do intervalo [a,b]. Se houver mais de uma nota mais frequente, ele emite a maior delas.\nImediatamente após emitir a nota, o piano muda a nota associada a todas as teclas do intervalo [a,b].\nA nova nota associada à tecla k, a ≤ k ≤ b, será a anterior mais f, módulo 9.\nPor exemplo, se em determinado momento as notas associadas a um piano de N = 15 teclas são teclas 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 notas 2 2 1 4 5 4 3 4 8 0 1 6 2 0 1 e o acorde [3,9] é tocado, então a nota mais frequente será 4 e as novas notas após o acorde serão: teclas 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 notas 2 2 1 8 0 8 7 8 3 4 1 6 2 0 1 Dada a sequência de Q acordes, seu programa deve imprimir as notas que estarão associadas às teclas do piano após todos os acordes da sequência terem sido tocados.\nEntrada\nA primeira linha da entrada contém dois inteiros, N (2 ≤ N ≤ 100000), e Q (1 ≤ Q ≤ 100000), respectivamente o número de teclas do piano intergalático e a quantidade de acordes. As Q linhas seguintes contêm, cada uma, dois inteiros A e B, (0 ≤ A < B < N), representando um acorde.\nSaída\nSeu programa deve imprimir N inteiros, um por linha, representando as notas associadas às teclas do piano, após todos os acordes terem sido tocados.\nExemplos",
    "samples": [
      [
        "5 3\n1 2\n0 4\n0 2",
        "5\n6\n6\n2\n2"
      ],
      [
        "15 15\n10 12\n4 5\n1 14\n6 10\n9 11\n11 12\n9 13\n8 9\n5 7\n11 13\n8 10\n11 12\n11 13\n8 14\n3 9",
        "1\n2\n2\n1\n2\n6\n7\n7\n8\n6\n4\n4\n8\n0\n4"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Escala musical",
    "text": "As notas musicais são as unidades mais básicas da composição musical no ocidente. Muitas pessoas acreditam que existem apenas 7 notas musicais: dó ré mi fá sol lá si Chamaremos essas notas de notas elementares. Na verdade, existem notas além destas acima, normalmente identificadas pelo nome de uma das notas acima seguido do símbolo sustenido (#): dó dó# ré ré# mi fá fá# sol sol# lá lá# si Assim, existem 12 notas musicais básicas distintas. Entretanto, a rigor, esta sequência é infinita e períodica: após um “si” existe um outro “dó”, e a sequência se repete novamente.\nAs notas elementares são mais conhecidas, por estarem em um tom musical conhecido como “dó maior”. Em qualquer tom “maior”, as distâncias entre as possíveis notas seguem um padrão. No tom “dó maior”, por exemplo:   Note que eu poderia usar qualquer “dó” na escala de “dó maior”, pois a nota seguinte ao “si” será, novamente, um “dó”. O mesmo vale para as demais notas. Um outro exemplo de notas em um determinado tom maior seria a escala de “dó# maior”:   Guilherme está aprendendo a tocar um teclado com 61 teclas, numeradas de 1 a 61. Assim, a nota 1 corresponde a um “dó”, a nota 2 corresponde a um “dó #” e assim por diante, até chegar nas notas 60 (um “si”) e 61 (um “dó”).\nAcredita-se que as músicas com as melhores melodias são aquelas que estão em algum tom maior, ou seja, músicas em que todas as notas pertencem à escala de algum tom maior. Enquanto pratica no teclado, Guilherme usa um aparelho que grava todas as notas tocadas durante a música. Para ajudá-lo a melhorar sua técnica você decidiu criar um programa capaz de avaliar as músicas gravadas por ele e determinar se elas estão em algum tom maior ou não.\nEntrada\nA primeira linha da entrada terá um número inteiro N, com 1 ≤ N ≤ 105, correspondente ao número de notas musicais da música. Em seguida, serão fornecidos N números, um por linha, todos entre 1 e 61, inclusive, correspondendo às notas musicais.\nSaída\nSeu programa deve verificar se a música está em algum tom maior. Em caso afirmativo, seu programa deve imprimir uma única linha com o tom maior (sem acentos) em que a música está.\nCaso contrário, seu programa deve imprimir uma linha contendo a palavra desafinado. Caso a música possa estar em mais de um tom maior imprima aquele relativo a menor nota musical básica, sendo que “do” < “do#” < “re”, ...",
    "samples": [
      [
        "8\n1\n3\n5\n6\n8\n10\n12\n13",
        "do"
      ],
      [
        "10\n8\n11\n21\n16\n11\n8\n27\n57\n27\n21",
        "re#"
      ],
      [
        "7\n2\n2\n4\n3\n12\n12\n3",
        "desafinado"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Boca",
    "text": "Um jogo infantil, muito popular, é o 21 de boca. O jogo é jogado da seguinte forma: o primeiro jogador diz um número, n0, que pode ser 1 ou 2. O segundo jogador pode então dizer um número n1 tal que n1 ∈ {n0 +1,n0 +2}. E assim por diante, os jogadores se alternam, dizendo sempre um número que é um ou dois maior do que o anterior. O jogador que disser 21 ganha o jogo. Por exemplo, a sequência de números poderia ser: 1,3,5,6,7,9,11,12,14,15,16,18,19,21. Neste jogo, o primeiro jogador sempre perde, se o segundo souber jogar bem.\nA cada nova geração as crianças ficam mais espertas. Atualmente, apesar de acharem o 21 de boca um jogo interessante, muitas crianças não se sentem desafiadas o bastante e por isso resolveram generalizar o jogo, criando assim o N de boca. Dado um inteiro N, no lugar do 21, o primeiro jogador pode escolher 1 ou 2. A partir daí os jogadores se alternam, adicionando 1 ou 2 ao número anterior, até que um deles diga o número N e ganhe o jogo. Sabendo que ambos os jogadores são excelentes e sabem jogar muito bem, seu problema é determinar qual o inteiro inicial que o primeiro jogador deve escolher para ganhar o jogo.\nEntrada\nA entrada consiste de uma única linha que contém o inteiro N (3 ≤ N ≤ 10100) escolhido para a partida atual do N de boca.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número, em {1,2}, que o primeiro jogador deve escolher, para ganhar o jogo. Se não for possível, então o inteiro deve ser zero.",
    "samples": [
      [
        "7",
        "1"
      ],
      [
        "9",
        "0"
      ],
      [
        "12341234123412341234123412341234",
        "2"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Imposto Real",
    "text": "O reino de Nlogônia é rico, o povo é educado e feliz, mas o Rei é um tirano quando o assunto se refere a impostos. A cada final de ano, cada cidade do país deve pagar uma determinada quantidade de quilos de ouro em impostos. Chegado o momento de coletar os impostos, o Rei envia sua carruagem real para recolher o ouro devido, usando as estradas do reino.\nCada estrada liga duas cidades diferentes e pode ser percorrida nas duas direções. A rede de estradas é tal que é possível ir de qualquer cidade para qualquer outra cidade, possivelmente passando por cidades intermediárias, mas há apenas um caminho entre duas cidades diferentes.\nEm cada cidade há um cofre real, utilizado para armazenamento de ouro de impostos. Os cofres reais são imensos, de forma que cada cofre tem capacidade de armazenar todo o ouro devido por todo o reino. A carruagem sai da capital, percorrendo as estradas do reino, visitando as cidades para recolher o ouro devido, podendo usar qualquer cofre real para armazenar temporariamente uma parte do imposto recolhido, se necessário. Ao final da coleta, todo o ouro devido por todas as cidades deve estar armazenado no cofre real da capital.\nÁvaro como é o Rei, ele contratou o seu time para, dados a quantidade de ouro a ser recolhido em cada cidade (em kg), a lista das estradas do reino, com os respectivos comprimentos (em km) e a capacidade de carga da carruagem real (em kg), determine qual é a mínima distância que a carruagem deve percorrer para recolher todo o ouro devido.\nEntrada\nA primeira linha contém dois inteiros N e C indicando respectivamente o número de cidades e a capacidade de carga da carruagem (2 ≤ N ≤ 104 e 1 ≤ C ≤ 100). A capital do reino é identificada pelo número 1, as outras cidades são identificadas por inteiros de 2 a N. A segunda linha contém N inteiros Ei representando a quantidade de imposto devido por cada cidade i (0 ≤ Ei ≤ 100 para 1 ≤ i ≤ N). Cada uma das M linhas seguintes contém três inteiros A, B e C, indicando que uma estrada liga a cidade A e a cidade B (1 ≤ A,B ≤ N) e tem comprimento C (1 ≤ C ≤ 100).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor distância que a carruagem real deve percorrer para recolher todo o imposto devido, em km.",
    "samples": [
      [
        "6 10\n0 10 10 10 10 10\n1 4 7\n5 1 2\n3 5 3\n2 5 2\n6 5 2",
        "44"
      ],
      [
        "3 10\n10 10 12\n1 2 5\n2 3 7",
        "58"
      ],
      [
        "5 9\n5 2 6 3 6\n1 2 1\n2 3 1\n2 4 1\n2 5 1",
        "10"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hipercampo",
    "text": "São dadas duas âncoras, dois pontos A = (XA,0) e B = (XB,0), formando um segmento horizontal, tal que 0 < XA < XB, e um conjunto P de N pontos da forma (X,Y ), tal que X > 0 e Y > 0. A figura mais à esquerda exemplifica uma possível entrada.\nPara “ligar” um ponto v ∈ P precisamos desenhar os dois segmentos de reta (v,A) e (v,B). Que remos ligar vários pontos, mas de modo que os segmentos se interceptem apenas nas âncoras. Por exemplo, a figura do meio mostra dois pontos, 1 e 4, que não podem estar ligados ao mesmo tempo, pois haveria interseção dos segmentos fora das âncoras. A figura mais à direita mostra que é possível ligar pelo menos 3 pontos, 8, 5 e 3, com interseção apenas nas âncoras.\nSeu programa deve computar o número máximo de pontos que é possível ligar com interseção de segmentos apenas nas âncoras.\nEntrada\nA primeira linha da entrada contém três inteiros, N (1 ≤ N ≤ 100), XA e XB (0 < XA < XB ≤ 104), representando, respectivamente, o número de pontos no conjunto P e as abscissas das âncoras A e B. As N linhas seguintes contêm, cada uma, dois inteiros Xi e Yi (0 < Xi,Yi ≤ 104), representando as coordenadas dos pontos, para 1 ≤ i ≤ N. Não há pontos coincidentes e não há dois pontos u e v distintos tais que {A,u,v} ou {B,u,v} sejam colineares.\nSaída\nSeu programa deve imprimir uma linha contendo um inteiro, representando o número máximo de pontos de P que podem ser ligados com interseção de segmentos apenas nas âncoras.\nExemplos",
    "samples": [
      [
        "4 1 10\n2 4\n5 1\n6 5\n7 8",
        "3"
      ],
      [
        "2 2 8\n3 4\n7 4",
        "1"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Laboratório de biotecnologia",
    "text": "Uma cadeia ponderada é definida sobre um alfabeto Σ e uma função f que atribui um peso a cada caractere do alfabeto. Assim, podemos definir o peso de uma cadeia s como a soma dos pesos de todos os caracteres em s.\nVários problemas da bioinformática podem ser formalizados como problemas em cadeias ponde radas. Um exemplo é a espectrometria de massa de proteínas, uma técnica que permite identificar proteínas de forma bastante eficiente. Podemos representar cada aminoácido por um caractere distinto e uma proteína é representada pela cadeia de caracteres relativos aos aminoácidos que a compõe.\nUma das aplicações da espectrometria de massa de proteínas são buscas em bancos de dados.\nPara isso a cadeia que representa a proteina é dividida em subcadeias, a massa de cada subcadeia é determinada, e a lista de massas é comparada com um banco de dados de proteínas. Um dos desafios para essa técnica é lidar com cadeias muito grandes de caracteres, que podem ter várias possíveis subcadeias. A quantidade de subcadeias selecionadas é fundamental para obter bons resultados.\nEm seu primeiro dia de estágio em um renomado laboratório de biotecnologia, Carlos recebeu a tarefa de determinar, para uma cadeia s, a quantidade de pesos distintos encontrada ao avaliar os pesos de todas as subcadeias não vazias de caracteres consecutivos de s.\nCarlos não conseguiu pensar em uma solução eficiente para essa tarefa, mas felizmente ele conhece o grupo ideal para auxiliá-lo.\nConsiderando que s é formada por letras minúsculas e cada letra tem um peso diferente entre 1 e 26: a letra a tem peso 1, a letra b tem peso 2 e assim por diante. Mostre que seu time é capaz de ajudar Carlos a impressionar seu supervisor logo na primeira semana, com uma solução capaz de lidar facilmente com as maiores cadeias de caracteres existentes.\nEntrada\nApenas uma linha, que contém a cadeia s formada por letras minúsculas, cujo comprimento |s| satisfaz 1 ≤ |s| ≤ 105.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a quantidade de pesos distintos das subcadeias não vazias de caracteres consecutivos de s.",
    "samples": [
      [
        "abbab",
        "8"
      ],
      [
        "adbbabdcdbcbacdabbaccdac",
        "56"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Máquina de café",
    "text": "O novo prédio da Sociedade Brasileira de Computação (SBC) possui 3 andares. Em determinadas épocas do ano, os funcionários da SBC bebem muito café. Por conta disso, a presidência da SBC decidiu presentear os funcionários com uma nova máquina de expresso. Esta máquina deve ser instalada em um dos 3 andares, mas a instalação deve ser feita de forma que as pessoas não percam muito tempo subindo e descendo escadas.\nCada funcionário da SBC bebe 1 café expresso por dia. Ele precisa ir do andar onde trabalha até o andar onde está a máquina e voltar para seu posto de trabalho. Todo funcionário leva 1 minuto para subir ou descer um andar. Como a SBC se importa muito com a eficiência, ela quer posicionar a máquina de forma a minimizar o tempo total gasto subindo e descendo escadas.\nSua tarefa é ajudar a diretoria a posicionar a máquina de forma a minimizar o tempo total gasto pelos funcionários subindo e descendo escadas.\nEntrada\nA entrada consiste em 3 números, A1,A2,A3 (0 ≤ A1,A2,A3 ≤ 1000), um por linha, onde Ai representa o número de pessoas que trabalham no i-ésimo andar.\nSaída\nSeu programa deve imprimir uma única linha, contendo o número total de minutos a serem gastos com o melhor posicionamento possível da máquina.",
    "samples": [
      [
        "10\n20\n30",
        "80"
      ],
      [
        "10\n30\n20",
        "60"
      ],
      [
        "30\n10\n20",
        "100"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Pangram",
    "text": "“Pangram Show” is an exciting new television quiz show which offers very large cash prizes for contestants who correctly detect if a sentence is a pangram. A pangram is a sentence that contains at least once each of all 26 letters of the English alphabet. Here are some pangram examples: • the quick brown fox jumps over a lazy dog • jackdaws loves my big sphinx of quartz • pack my box with five dozen liquor jugs Each contestant in the Pangram Show is given a sentence and he/she must indicate within fifteen seconds if the given sentence is a pangram or not. When a contestant fails he/she is eliminated from the competition, otherwise he/she continues for the next round.\nDuring the ICPC Latin American Regional you will be able to play along with actual contestants from the show. You’ll be given the same sentences as they appear on the show. Can you do as well as the contestants? Input\nThe input consists of a single line that contains a string S containing at least one and at most 200 characters. The only characters in S are lowercase letters of the English alphabet and spaces.\nOutput\nOutput a single line with the uppercase letter “Y” if the sentence is a pangram and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "jackdawf loves my big quartz sphinx",
        "Y"
      ],
      [
        "hello world",
        "N"
      ],
      [
        "abcdefghijklmnopqrstuvwxyz",
        "Y"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Inés Kereki, Uruguay"
    },
    "hasImages": false
  },
  {
    "name": "Mean Median Problem",
    "text": "The mean of three integers A, B and C is (A + B + C)/3. The median of three integers is the one that would be in the middle if they are sorted in non-decreasing order.\nWrite a program that, given two distinct integers A and B, determines the minimum possible integer C such that the mean and the median of A, B and C are equal.\nInput\nThe input consists of a single line that contains two integers A and B (1 ≤ A ≤ B ≤ 109).\nOutput\nOutput a single line with the minimum possible integer C such that the mean and the median of A, B and C are equal.",
    "samples": [
      [
        "1 2",
        "0"
      ],
      [
        "6 10",
        "2"
      ],
      [
        "1 1000000000",
        "-999999998"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Secret Chamber at Mount Rushmore",
    "text": "By now you have probably heard that there is a spectacular stone sculpture featuring four famous U.S. presidents at Mount Rushmore. However, very few people know that this monument contains a secret chamber. This sounds like something out of a plot of a Hollywood movie, but the chamber really exists. It can be found behind the head of Abraham Lincoln and was designed to serve as a Hall of Records to store important historical U.S. documents and artifacts. Historians claim that the construction of the hall was halted in 1939 and the uncompleted chamber was left untouched until the late 1990s, but this is not the whole truth.\nIn 1982, the famous archaeologist S. Dakota Jones secretly visited the monument and found that the chamber actually was completed, but it was kept confidential. This seemed suspicious and after some poking around, she found a hidden vault and some documents inside. Unfortunately, these documents did not make any sense and were all gibberish. She suspected that they had been written in a code, but she could not decipher them despite all her efforts.\nEarlier this week when she was in the area to follow the ACM-ICPC World Finals, Dr. Jones finally discovered the key to deciphering the documents, in Connolly Hall of SDSM&T. She found a document that contains a list of translations of letters. Some letters may have more than one translation, and others may have no translation. By repeatedly applying some of these translations to individual letters in the gibberish documents, she might be able to decipher them to yield historical U.S. documents such as the Declaration of Independence and the Constitution. She needs your help.\nYou are given the possible translations of letters and a list of pairs of original and deciphered words.\nYour task is to verify whether the words in each pair match. Two words match if they have the same length and if each letter of the first word can be turned into the corresponding letter of the second word by using the available translations zero or more times.\nInput\nThe first line of input contains two integers M (1 ≤ M ≤ 500) and N (1 ≤ N ≤ 50), where M is the number of translations of letters and N is the number of word pairs. Each of the next M lines contains two distinct letters A and B, indicating that the letter A can be translated to the letter B.\nEach ordered pair of letters (A,B) appears at most once. Following this are N lines, each containing a word pair to check. Translations and words use only lowercase letters “a”–“z”, and each word contains at least 1 and at most 50 letters.\nOutput\nFor each pair of words, output “YES” if the two words match, and “NO” otherwise.",
    "samples": [
      [
        "9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the",
        "YES\nNO\nNO\nYES\nYES"
      ],
      [
        "3 3\na c\nb a\na b\naaa abc\nabc aaa\nacm bcm",
        "YES\nNO\nYES"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "World Finals 2017"
    },
    "hasImages": false
  },
  {
    "name": "Daunting device",
    "text": "In a recent trip to an excavation site in the Caribbean island of Saint Basil, you found a mysterious device with some instructions resembling a puzzle. Your local guide Vibenas tells you that if you solve the puzzle, the device might show you the place where a big treasure left by the old merciless pirate Lyerpes is hidden.\nThe device has a tape with L cells indexed from 0 to L−1. Each cell has a color than can be changed with commands to the device. Each color is encoded by an integer, and initially all cells have the same color. The instructions that you found represent N steps to be performed before the device shows the way to the treasure. Each step is described using four integers P, X, A and B. The instructions say that to complete the step you must first count the number of cells currently having color P. Let this number be S. Then you must calculate the values M1 = (A + S2) mod L , M2 = (A + (S + B)2) mod L .\nFinally you have to make all cells within the closed interval [min(M1,M2),max(M1,M2)] to be of color X.\nAfter the exhausting task of processing the N steps required by the device, you still have one job: given a color that appears the greatest number of times in the device tape after all steps (that is, a most frequent color), you must go to the shipwreck of Lyerpes’ legendary vessel and say aloud the number of cells having that color. Note that this number is unique even if more than one color appears the greatest number of times in the device tape after all steps.\nDoing all those calculations on the device will take ages but you, as a renowned programmer, can create a program that quickly indicates the answer for the puzzle. After that, the real hard part of your mission will be to find out where is the shipwreck of Lyerpes’ old vessel.\nInput\nThe first line contains three integers L, C and N (1 ≤ L,C,N ≤ 105), representing respectively the number of cells in the tape, the number of available colors, and the number of steps in the instructions.\nColors are identified by distinct integers from 1 to C and initially all cells have color 1. Each of the next N lines describes a step of the instructions with four integers P, X, A and B (1 ≤ P,X ≤ C and 0 ≤ A,B ≤ 108), indicating respectively the color whose number of cells is used to decide the range of the step, the color the cells in the range must have after the step is performed, and the other two values used to calculate the bounds of the range as described above.\nOutput\nGiven a color that appears the greatest number of times in the device tape after sequentially per forming all steps described in the input, output a single line with an integer indicating the number of cells having that color.",
    "samples": [
      [
        "7 5 2\n1 2 5 3\n3 3 0 1",
        "4"
      ],
      [
        "7 10 8\n10 6 5 6\n5 1 7 5\n9 9 10 1\n3 2 6 7\n8 3 4 8\n3 7 7 4\n9 3 9 7\n1 1 8 1000",
        "3"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Walter Erquinigo, Perú"
    },
    "hasImages": false
  },
  {
    "name": "Gates of uncertainty",
    "text": "A NAND gate (negative-AND gate) is a digital electronic circuit which produces an output that is false only if all its inputs are true; in other words, the output of a NAND gate is the complement to the output of an AND gate for the same inputs. A two-input NAND gate is a NAND gate with two inputs.\nThe following figure shows the usual symbol of a two-input NAND gate and its truth table, using 1 for true and 0 for false.\nIn this problem we have a binary tree representing a circuit composed only by two-input NAND gates. In the tree, each internal node represents a NAND gate, which uses as inputs the values produced by its two children. Each leaf in the tree represents an external input to the circuit, and is a value in {0,1}. The value produced by the circuit is the value produced by the gate at the root of the tree. The following picture shows a circuit with nine nodes, of which four are NAND gates and five are external inputs.\nEach gate in the circuit may be stuck, meaning that it either only produce 0 or only produce 1, regardless of the gate’s inputs. A test pattern is an assignment of values to the external inputs so that the value produced by the circuit is incorrect, due to the stuck gates.\nGiven the description of a circuit, you must write a program to determine the number of different test patterns for that circuit.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) representing the number of gates in the circuit, which has the shape of a binary tree. Gates are identified by distinct integers from 1 to N, gate 1 being the root of the tree. For i = 1,2,...,N, the i-th of the next N lines describes gate i with three integers X, Y and F (0 ≤ X,Y ≤ N and −1 ≤ F ≤ 1). The values X and Y indicate the two inputs to the gate.\nIf X = 0 the first input is from an external input, otherwise the input is the output produced by gate X. Analogously, if Y = 0 the second input is from an external input, otherwise the input is the output produced by gate Y . The value F represents the state of the gate: −1 means the gate is well-behaved, 0 means the gate is stuck at 0, and 1 means the gate is stuck at 1.\nOutput\nOutput a single line with an integer indicating the number of different test patterns for the given circuit. Because this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "4\n2 3 1\n0 0 -1\n4 0 0\n0 0 -1",
        "15"
      ],
      [
        "2\n2 0 1\n0 0 -1",
        "3"
      ],
      [
        "6\n5 4 -1\n0 0 -1\n0 0 0\n6 3 -1\n0 2 1\n0 0 -1",
        "93"
      ],
      [
        "7\n2 3 -1\n4 5 -1\n6 7 -1\n0 0 1\n0 0 -1\n0 0 -1\n0 0 -1",
        "21"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Keep it covered",
    "text": "Eve loves puzzles. She recently bought a new one that has proven to be quite difficult. The puzzle is made of a rectangular grid with R rows and C columns. Some cells may be marked with a dot, while the other cells are empty. Four types of pieces come with the puzzle, and there are R×C units of each type.\nTypes of pieces 11 2 3 4 The objective of the puzzle is to use some of the pieces to completely fill the grid; that is, each cell must be covered with a piece. In doing that, each piece may be rotated 90, 180 or 270 degrees. But of course, to make it more interesting, there are a few constraints that must be respected: 1. Type 1 pieces can only be used on cells marked with a dot, while the other types of pieces can only be used on empty cells.\n2. Given any pair of cells sharing an edge, the line drawings of the two pieces on them must match.\n3. The line drawings of the pieces cannot touch the border of the grid.\nAs Eve is having a hard time to solve the puzzle, she started thinking that it was sloppily built and perhaps no solution exists. Can you tell her whether the puzzle can be solved? Input\nThe first line contains two integers R and C (1 ≤ R,C ≤ 20), indicating respectively the number of rows and columns on the puzzle. The following R lines contain a string of C characters each, representing the puzzle’s grid; in these strings, a lowercase letter “o” indicates a cell marked with a dot, while a “-” (hyphen) denotes an empty cell. There are at most 15 cells marked with a dot.\nOutput\nOutput a single line with the uppercase letter “Y” if it’s possible to solve the puzzle as described in the statement, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "6 6\no----o\n---oo-\n------\n--o---\no--o--\n-----o",
        "Y"
      ],
      [
        "1 1\n-",
        "N"
      ],
      [
        "6 7\n-------\n-o--o--\n--o----\n-----o-\n----o--\no------",
        "N"
      ],
      [
        "3 3\n-o-\no-o\n-o-",
        "N"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Fundraising",
    "text": "A prestigious politician aiming for presidency next year is planning a fundraising dinner for her cam paign. She has a list of some wealthy people in the country and wants to invite them in a way that the amount of money raised is as great as possible.\nSometimes wealthy people have futile behavior and don’t like the idea that someone richer or prettier than them exists. Every time someone like this meets another person who is strictly prettier, but not strictly richer, then an argument ensues. Likewise, if they meet another person who is strictly richer, but not strictly prettier, an argument occurs as well. These two situations are the only possible causes of an argument involving two persons. Thus, two persons do not have an argument if one of them is strictly prettier and strictly richer than the other. Also, two persons do not have an argument if they are equally rich and equally pretty.\nSince the presidential candidate wants to raise as much money as possible, an argument should be avoided at all costs, as it could ruin the campaign. Given the characteristics of some wealthy people in the country, you must find a guest list that maximizes the donations while ensuring that no argument will happen during the dinner.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) representing the number of possible guests with known characteristics. Each of the next N lines describes a possible guest with three integers B, F and D (1 ≤ B,F,D ≤ 109), indicating respectively the person’s beauty, his/her fortune, and how much this person will donate if invited.\nOutput\nOutput a single line with an integer indicating the maximum sum of donations if guests are invited so that no argument will happen during the dinner.",
    "samples": [
      [
        "4\n1 2 50\n2 1 50\n2 2 30\n1 1 30",
        "60"
      ],
      [
        "3\n3 3 3\n5 5 3\n2 2 3",
        "9"
      ],
      [
        "3\n2 8 13\n1 4 12\n2 1 16",
        "25"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Complete Naebbirac’s sequence",
    "text": "Naebbirac is a young and easy-to-get-bored sailor. He likes sequences of integers and to come up with ways to classify them. Naebbirac says that a sequence is complete for a chosen integer K, if the sequence only contains integers between 1 and K, and each integer between 1 and K appears the same number of times.\nBased on that, Naebbirac created a game to entertain himself and his peers, when the waters calm down and there’s not much they can do to spend their time in the middle of the ocean.\nFirst he chooses a positive integer K and then he uses chalk to draw on the deck a sequence S having N integers between 1 and K. After that he challenges one of his peers. The goal of the challenged peer is to turn the sequence S into a complete sequence by performing exactly one of the following three possible operations: • “-x”: remove one occurrence of integer x from S; • “+x”: add a new integer with value x in S; or • “-x +y”: replace one occurrence of integer x from S by an integer with value y.\nNaebbirac is quite smart. He never writes a sequence that is already complete and often the written integers don’t follow a pattern, making it quite hard to find an operation that solves the puzzle. One of your friends, that usually sails with Naebbirac, is tired of always losing the game. Are you able to help your friend and create a computer program that can find a solution to Naebbirac’s game before they go on their next trip? Input\nThe first line contains two integers K (3 ≤ K ≤ 1000) and N (1 ≤ N ≤ 104), indicating respectively the integer that Naebbirac chooses at the beginning of the game, and the length of the sequence written on the deck. The second line contains N integers S1,S2,...,SN (1 ≤ Si ≤ K for i = 1,2,...,N) representing the written sequence; you can safely assume that the sequence is not complete.\nOutput\nOutput a single line with the description of the operation that allows your friend to win the game or an “*” (asterisk) if there is no way to win. The description of the operation must follow the format shown on the statement, i.e. “-x”, “+x” or “-x +y”.",
    "samples": [
      [
        "3 5\n1 3 2 3 1",
        "+2"
      ],
      [
        "3 7\n1 2 3 3 3 2 1",
        "-3"
      ],
      [
        "3 6\n3 1 2 1 3 1",
        "-1 +2"
      ],
      [
        "3 6\n2 3 2 2 2 1",
        "*"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Yonny Mondelo Hernández, Cuba"
    },
    "hasImages": false
  },
  {
    "name": "Buggy ICPC",
    "text": "Alan Curing is a famous sports programmer. He is the creator of the theoretical model of computation known as the Alan Curing Machine (ACM). He’s most famous for creating his own computer for pro gramming competitions: the Integrated Computer for Programming Contests (ICPC). This computer has a specialized operating system with commands for submitting code and testing executables on sam ple inputs, an input generator, a wide display for debugging, and a very soft keyboard. However, as it happens even to the best, Alan’s creation has a nasty bug. Every time Alan types a vowel on the ICPC, the content of the current line is reversed.\nThe bug has been extremely hard to track down, so Alan has decided to accept the challenge and use the computer as it is. He is currently training touch typing on the ICPC. For now, he is only typing strings using lowercase letters, and no spaces. When Alan types a consonant, it is appended to the end of the current line, as one would expect. When he types a vowel, however, the typed character is first added to the end of the line, but right after that the whole line is reversed. For example, if the current line has “imc” and Alan types “a” (a vowel), for a brief moment the line will become “imca”, but then the bug kicks in and turns the line into “acmi”. If after that he types the consonants “c”, “p” and “c”, in that order, the line becomes “acmicpc”.\nWhen practicing, Alan first thinks of the text he wants to type, and then tries to come up with a sequence of characters he can type in order to obtain that text. He is having trouble, however, since he realized that he cannot obtain some texts at all (such as “ca”), and there are multiple ways of obtaining other texts (as “ac”, which is obtained whether he types “ac” or “ca”). Help Alan in his training by telling him in how many ways he can type each text he wishes to type. A way of typing a text T can be encoded by a string W with |T| characters such that if the characters are typed on the ICPC in the order they appear in W (i.e. W1,W2,...,W|T|) the final result is equal to T, considering ICPC’s known bug. Two ways are considered different if they are encoded by different strings. The letters that trigger the bug in the ICPC when typed are “a”, “e”, “i”, “o” and “u”.\nInput\nThe input consists of a single line that contains a non-empty string T of at most 105 lowercase letters, representing the text Alan wants to type on the ICPC.\nOutput\nOutput a single line with an integer representing the number of distinct ways Alan can type the desired text T considering ICPC’s known bug.",
    "samples": [
      [
        "ac",
        "2"
      ],
      [
        "ca",
        "0"
      ],
      [
        "acmicpc",
        "3"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Arranging tiles",
    "text": "A set of rectangular stone tiles, all of them having the same height H, had their original four corners cut in different ways so that two properties were kept: 1. Each tile is still a simple convex polygon.\n2. Each tile has two parallel sides that are part of the bottom and top sides of the original rectangular tile, which implies that the height H was preserved.\nThe figure below illustrates two tiles before and after the cuts. The corners are highlighted with small circles.\nWe need to place all tiles, side by side and without overlap, along a frame of height H, for trans portation. The tiles can be translated from their original positions, but they may not be rotated or reflected. Since their convex shapes may be very different, the order in which we place the tiles along the frame matters, because we want to minimize the width of the frame. The next figure shows the two possible orders for the tiles from the previous figure, the second order being clearly the one that minimizes the width of the frame.\nGiven the description of the set of tiles, your program must compute the minimum width for a frame of the same height of the tiles that contains all of them, side by side and without overlap.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 14) representing the number of tiles. Following, there are N groups of lines, each group describing a tile, all of them having the same height.\nWithin each group describing a tile, the first line contains an integer K (4 ≤ K ≤ 104) representing the number of corners of the tile. Each of the next K lines describes a corner of the tile with two integers X (−108 ≤ X ≤ 108) and Y (0 ≤ Y ≤ 108), indicating the coordinates of the corner in the XY plane.\nThe corners are given in counterclockwise order. The first corner is (0,0) and the second corner is of the form (X,0) for X > 0, this side being the bottom side of the tile. The tile has the shape of a simple convex polygon with a top side parallel to its bottom side.\nOutput\nOutput a single line with a rational number indicating the minimum width for a frame of the same height of the tiles that contains all of them, side by side and without overlap. The result must be output as a rational number with exactly three digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "3\n4\n0 0\n1 0\n0 5\n-1 5\n4\n0 0\n1 0\n2 5\n1 5\n4\n0 0\n3 0\n2 5\n1 5",
        "5.000"
      ],
      [
        "3\n4\n0 0\n204 0\n412 1031\n-253 1031\n6\n0 0\n110 0\n290 436\n100 1031\n0 1031\n-400 750\n5\n0 0\n120 0\n100 1031\n0 1031\n-281 93",
        "1420.754"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Guilherme A. Pinto, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Enigma",
    "text": "The world famous pirate Cornelius “Cheesehead” Bakker was a renowned astronomer and mathemati cian. He buried most of his treasury in the Caribbean island of Saint Basil, where Pico Colombo is a well-known geographic reference mark. Cheesehead disappeared when his fleet of three ships was caught in a hurricane in 1617. Perhaps by some kind of premonition, before his fatal excursion he wrote in a letter to one of his nieces in the Netherlands the exact distance to his hidden treasure, from Pico Colombo in the south direction.\nWary that the map would end up in the wrong hands, Cheesehead used his math skills as an insurance against robbers. Instead of writing in the letter the number indicating the distance, he multiplied it by a second number N, and wrote the result D in the letter, together with the value of N and an explanation of the computation he had done. He knew that even if some unwanted person had the letter, he or she would have to know how to divide two numbers, which very few robbers could at that time. Unfortunately, when the letter arrived in Europe, Cheesehead’s niece had joined a convent to become a nun and did not even bother to open the letter.\nExactly four centuries afterwards, Maria came into possession of a chest containing the belongings of her ancestor nun. And you can imagine her surprise when she found the letter, still unopened! Maria is planning an excursion to seek for Cheesehead’s treasure, but she needs your help. Although the value of N is intact and she can read it, the number D has been partially eaten by moths so that some of its digits are unreadable. The only clue Maria has is that the leftmost digit of D is not zero because Cheesehead said so in the letter to his niece.\nGiven the partial representation of D and the value of N, you must determine the smallest possible value for D so that it is a multiple of N and does not have leading zeros.\nInput\nThe input consists of a single line that contains a non-empty string S of at most 1000 characters and an integer N (1 ≤ N ≤ 1000). Each character of S is either a decimal digit or the character “?” (question mark); the leftmost character is not “0” and at least one character is “?”.\nOutput\nOutput a single line with an integer D without leading zeros indicating the smallest multiple of N that has |S| digits and such that the digits in S are coincident with the corresponding digits in D. If there exists no such an integer D, write an “*” (asterisk) to the output.",
    "samples": [
      [
        "1??????????????????????????????? 2",
        "10000000000000000000000000000000"
      ],
      [
        "???????????????????????????????1 2",
        "*"
      ],
      [
        "?294?? 17",
        "129404"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Jeferson Lesbão, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Jumping Frog",
    "text": "Pog the Frog wants to compete in the World Frog Jump competition, which will take place in Nlogonia.\nIn the competition, each frog must perform a sequence of acrobatic jumps in a specially built arena. The arena is composed of N equally spaced positions around a circumference (the arc between two adjacent positions is always the same length) where each position can be either a rock or a pond. The positions are numbered sequentially from 0 to N − 1 in the clockwise direction, so that judges can easily make notes about which jumps were performed in each position. Thus, position 0 is adjacent to positions 1 and N − 1 in the arena.\nThe competition rules stipulate that the sequence of jumps of each frog must start at a rock, always go from a rock to another rock, and finish at the same position it started. The rules do not require frogs to use every rock in the arena for their sequence of jumps.\nPog the Frog is currently practicing for the competition. He must develop two skills. First, he needs to get better at jumping from one rock to another, since landing on either a pond or outside of the marked positions can mean disqualification. Besides that, he must learn impressing acrobatic moves.\nWith that in mind, he has decided on a practicing strategy. In the beginning of each practice session, Pog the Frog will pick a starting rock and an integer jump length K between 1 and N − 1. After that, whenever he is standing on a rock numbered i, he will aim his next acrobatic jump at the rock whose number is obtained by getting the remainder of the division of i+K by N. He will stop when he lands on the starting rock. For example, if the arena has 3 positions, all of them rocks, and Pog the Frog starts at position 0 and picks K = 2, he will first jump from rock 0 to rock 2, then to rock 1, and finally jump back to rock 0. At this point, his practice session ends.\nGiven the description of the N positions in the arena, help Pog the Frog by answering this question: how many distinct values of K can he choose for his practice sessions, if he can use any rock as a starting position for his sequence of jumps? Input\nThe input consists of a single line that contains a string S of N characters (3 ≤ N ≤ 105), rep resenting the positions in the arena. The i-th character of S (i = 0,1,...,N − 1) indicates that the position i in the arena is either a rock (uppercase letter “R”) or a pond (uppercase letter “P”).\nOutput\nOutput a single line with an integer representing the number of distinct jump lengths that Pog the Frog can choose for his practice sessions, given that he can use any rock as a starting position for his sequence of jumps.",
    "samples": [
      [
        "RRR",
        "2"
      ],
      [
        "RRPR",
        "1"
      ],
      [
        "PRP",
        "0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Imperial roads",
    "text": "The roads of Cubiconia are in a dire state, after years of neglect and lack of maintenance. Each road connects two different cities A and B and can be traveled in both ways (from A to B or from B to A). There is at most one road between each pair of cities, and using the existing roads it is possible to travel between any pair of cities. The new emperor of Cubiconia has just raised the taxes (again!), but promised to repair at least some of the roads, guaranteeing that Cubiconians will be able to travel between any pair of cities using only restored roads.\nThe Department of Public Works have calculated the cost of repairing each individual road. Now they want to calculate the minimum cost for repairing a set of roads so that the emperor’s promise is made true. This is not easy because the emperor wants the set of repaired roads to include one particular road, but he has not yet decided which particular road to include: could be the one that connects the city where his castle is to the city where his daughter’s royal residence is, or the road that connects the city where his summer palace is to the only city by the seaside, or... Fearing the emperor will take too long to decide, the engineers want your help.\nGiven the description of the roads in Cubiconia, with their respective repairing costs, you must write a program to answer a set of queries. For each query you will be given one specific road that should be repaired, and must determine the minimum cost for repairing a set of roads (including the given specific road) so that Cubiconians will be able to travel between any pair of cities using only restored roads.\nInput\nThe first line contains two integers N (2 ≤ N ≤ 105) and R (N − 1 ≤ R ≤ 2 × 105), representing respectively the number of cities and the number of roads in Cubiconia. Cities are identified by distinct integers from 1 to N. Each of the next R lines describes a road with three integers A, B (1 ≤ A < B ≤ N) and C (1 ≤ C ≤ 104), indicating that there is a road between cities A and B and the cost of repairing it is C. There is at most one road between each pair of cities, and using the existing roads it is possible to travel between any pair of cities. The next line contains an integer Q (1 ≤ Q ≤ 105) representing the number of queries. Each of the next Q lines describes a query with two integers U and V (1 ≤ U < V ≤ N), indicating the specific road that should be repaired. There are no repeated queries.\nOutput\nOutput Q lines, each line with an integer indicating the answer to the corresponding query of the input, that is, the minimum cost for repairing a set of roads (including the specific road in the query) so that Cubiconians will be able to travel between any pair of cities using only restored roads.",
    "samples": [
      [
        "3 3\n1 2 10\n2 3 5\n1 3 7\n3\n2 3\n1 2\n1 3",
        "12\n15\n12"
      ],
      [
        "4 4\n1 2 1\n2 4 1\n2 3 100\n1 4 50\n1\n1 4",
        "151"
      ],
      [
        "5 7\n1 2 8\n1 3 10\n2 4 5\n2 3 12\n4 5 4\n3 5 14\n1 5 20\n3\n2 3\n1 5\n3 5",
        "29\n39\n31"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Edwin Ninõ, Colombia"
    },
    "hasImages": false
  },
  {
    "name": "Hard choice",
    "text": "In long flights, airlines offer hot meals. Usually the flight attendants push carts containing the meals down along the aisles of the plane. When a cart reaches your row, you are asked right away: “Chicken, beef, or pasta?” You know your choices, but you have only a few seconds to choose and you don’t know how your choice will look like because your neighbor hasn’t opened his wrap yet...\nThe flight attendant in this flight decided to change the procedure. First she will ask all passengers what choice of meal they would prefer, and then she will check if the number of meals available in this flight for each choice are enough.\nAs an example, consider that the available number of meals for chicken, beef and pasta are respec tively (80,20,40), while the number of passenger’s choices for chicken, beef and pasta are respectively (45,23,48). In this case, eleven people will surely not receive their selection for a meal, since three passengers who wanted beef and eight passengers who wanted pasta cannot be pleased.\nGiven the quantity of meals available for each choice and the number of meals requested for each choice, could you please help the flight attendant to determine how many passengers will surely not receive their selection for a meal? Input\nThe first line contains three integers Ca, Ba and Pa (0 ≤ Ca,Ba,Pa ≤ 100), representing respectively the number of meals available for chicken, beef and pasta. The second line contains three integers Cr, Br and Pr (0 ≤ Cr,Br,Pr ≤ 100), indicating respectively the number of meals requested for chicken, beef and pasta.\nOutput\nOutput a single line with an integer representing the number of passengers that will surely not receive their selection for a meal.",
    "samples": [
      [
        "80 20 40\n45 23 48",
        "11"
      ],
      [
        "0 0 0\n100 100 100",
        "300"
      ],
      [
        "41 42 43\n41 42 43",
        "0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Inés Kereki, Uruguay"
    },
    "hasImages": false
  },
  {
    "name": "Linearville",
    "text": "The city of Linearville has N parallel two-way streets go- N ing in the West-East direction and N parallel two-way s gt rr ideet ws itg hoin (Ng i −n t 1h )e ×So (Nuth −-N 1o )rt bh lod ckir se .ct Tio hn e, m dia sk tain ng ceup bea - 10 S tween two consecutive parallel streets is either 1 or 5. 89 The Linearville Transit Authority is conducting an ex periment and now requires all cars to always follow a 7 path that alternates direction between W-E and S-N at every crossing, meaning they must turn either left or right 6 when reaching a crossing. The LTA is developing a new 5 navigation app and needs your help to write a program to compute the lengths of shortest alternating paths be- 4 tween many pairs of start and target crossings. The al ternating path in the figure, as an example for N = 10, 3 is clearly not a shortest alternating path. But beware! 2 Linearville may be huge.Input\nThe first line contains an integer N (2 ≤ N ≤ 105) representing the number of streets in each direction. For each direction, the streets are identified by distinct integers from 1 to N starting at the S-W corner of the city. The second line contains N − 1 integers D1,D2,...,DN−1 (Di ∈ {1,5} for i = 1,2,...,N − 1) indicating the distances between consecutive streets going S-N (that is, Di is the distance between street i and street i + 1). The third line contains N − 1 integers E1,E2,...,EN−1 (Ei ∈ {1,5} for i = 1,2,...,N − 1) indicating the distances between consecutive streets going W-E (that is, Ei is the distance between street i and street i + 1). The fourth line contains an integer Q (1 ≤ Q ≤ 105) representing the number of shortest path queries. Each of the next Q lines describes a query with four integers AX, AY , BX and BY (1 ≤ AX,AY ,BX,BY ≤ N), indicating that the start crossing is (AX,AY ) and the target crossing is (BX,BY ); the values AX and BX are streets going S-N while the values AY and BY are streets going W-E. There are no repeated queries.\nOutput\nOutput Q lines, each line with an integer indicating the length of a shortest alternating path for the corresponding query of the input.",
    "samples": [
      [
        "10\n5 1 5 5 5 1 1 5 5\n1 5 5 5 1 5 5 1 5\n3\n4 3 9 10\n9 2 2 9\n5 1 5 10",
        "46\n50\n49"
      ],
      [
        "5\n5 1 5 5\n5 1 5 5\n2\n3 1 4 5\n5 5 5 5",
        "23\n0"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Guilherme A. Pinto, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Marblecoin",
    "text": "Cubiconia is known for having one of the highest tax rates. Taxes are calculated on a daily basis and even things that seem worthless are subject to taxes. In order to avoid the crazy tax rates, some of the emperor’s friends created a new currency using marbles. Unfortunately, it didn’t work out, marbles became subject to taxes as well.\nDespite this, the emperor believes that using marbles as a currency is a great idea and that in the future they will be worth a lot more. So he decided to steal all of his friends’ marbles. To avoid unnecessary attention, in the dead of each night he will visit one of his friends and during each visit exactly one marble will be stolen. Since the emperor’s friends keep their marbles in stacks, only a marble that is currently on the top of a stack might be stolen.\nEach marble has a value associated to it. The amount due per owned marble is V ×365D, where V is the value associated to the marble and D is the number of days the marble was owned. The emperor plans to sell all the marbles once he is finished stealing them. This means that, if there is a total of T marbles, the marble owned the least amount of time will be owned for 1 day, while the one owned the maximum amount of time will be owned for T days.\nThe emperor is smart and already realized that the total due in taxes depends on the order in which marbles are stolen. To avoid paying more taxes than necessary, he would like to know the best order to steal the marbles. Can you help him? Input\nThe first line contains an integer N (1 ≤ N ≤ 105) representing the number of stacks the emperor is going to steal from. Each of the next N lines describes a stack with an integer K (1 ≤ K ≤ 105) followed by K integers V1,V2,...,VK (1 ≤ Vi ≤ 300 for i = 1,2,...,K); the number K is the amount of marbles in the stack, while the numbers V1,V2,...,VK are the values of the marbles in the stack, from top to bottom. The total amount of marbles is at most 4 × 105.\nOutput\nOutput a single line with an integer representing the minimum value due in taxes if the marbles are stolen in an optimal order. Because this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "3\n1 1\n1 2\n1 3",
        "48894670"
      ],
      [
        "3\n3 2 5 7\n4 1 4 6 10\n3 3 2 1",
        "227712621"
      ]
    ],
    "source": {
      "year": "2017",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Nota Esquecida",
    "text": "João não é muito bom em Matemática mas aprendeu que a média de dois números é o valor da soma desses dois números dividido por dois. Ou seja, a média de dois números A e B é M = A+ 2B.\nA professora de Cálculo I contou para João as notas que ele tirou nas duas provas já realizadas. As duas notas são números inteiros entre 0 e 100. João prontamente calculou a média das duas provas, que também resultou em um número inteiro.\nMas João é muito esquecido, e agora não consegue lembrar-se das duas notas que tirou na prova. Ele consegue se lembrar de apenas uma das notas das provas. Por sorte, ele consegue se lembrar também da média entre as duas notas.\nVocê pode ajudar João a determinar a nota da outra prova? Entrada\nA primeira linha contém um número inteiro A (0 ≤ A ≤ 100), indicando a nota de uma prova. A segunda linha contém um número inteiro M (0 ≤ M ≤ 100), indicando a média entre as duas notas das provas.\nSaída\nSeu programa deve produzir uma única linha com um número inteiro representando a nota da outra prova, que João não consegue recordar.",
    "samples": [
      [
        "100\n70",
        "40"
      ],
      [
        "80\n75",
        "70"
      ],
      [
        "1\n50",
        "99"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fatorial",
    "text": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24.\nDado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo.\nPor exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3!+2!+2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.\nEntrada\nA entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
    "samples": [
      [
        "10",
        "3"
      ],
      [
        "25",
        "2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Teleférico",
    "text": "A turma da faculdade vai fazer uma excursão na serra e todos os alunos e monitores vão tomar um teleférico para subir até o pico de uma montanha. A cabine do teleférico pode levar C pessoas no máximo, contando alunos e monitores, durante uma viagem até o pico. Por questão de segurança, deve haver pelo menos um monitor dentro da cabine junto com os alunos. Por exemplo, se cabem C = 10 pessoas na cabine e a turma tem A = 20 alunos, os alunos poderiam fazer três viagens: a primeira com 8 alunos e um monitor; a segunda com 6 alunos e um monitor; e a terceira com 6 alunos e um monitor.\nDados como entrada a capacidade C da cabine e o número total A de alunos, você deve escrever um programa para calcular o número mínimo de viagens do teleférico.\nSe você estiver com muita preguiça hoje, não se preocupe: virando a página você encontra soluções para este problema.\nEntrada\nA primeira linha da entrada contém um inteiro C, representando a capacidade da cabine (2 ≤ C ≤ 100). A segunda linha da entrada contém um inteiro A, representando o número total de alunos na turma (1 ≤ A ≤ 1000).\nSaída\nSeu programa deve produzir uma única linha com um número inteiro representando o número mínimo de viagens do teleférico para levar todos os alunos até o pico da montanha.",
    "samples": [
      [
        "10\n20",
        "3"
      ],
      [
        "12\n55",
        "5"
      ],
      [
        "100\n87",
        "1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Dança da Divisibilidade",
    "text": "No país da Nlogônia os habitantes realizam uma dança especial para homenagear o deus da divisibili dade. A dança é executada por N homens e N mulheres dispostos em dois círculos. Os homens ficam no círculo interno e as mulheres no círculo externo. Cada mulher inicia de frente para um homem.\nA dança é composta de K movimentos; homens e mulheres se alternam nos movimentos, começando com os homens. No i-ésimo movimento, as pessoas do círculo correspondente rotacionam Pi passos em sentido horário enquanto as pessoas do outro círculo permanecem paradas. Assim, cada pessoa troca de parceiro para um que está a Pi posições de distância. Um movimento é válido se os parceiros de cada pessoa são diferentes ao início e ao fim do movimento e, além disso, nenhum par de pessoas está frente a frente em dois instantes de tempo distintos.\nComo forma de homenagem, as danças sempre precisam terminar com casais cujas somas das idades tenham o mesmo resto quando dividido pelo número sagrado M. Ou seja, se a soma das idades de um casal deixa um resto R quando divido por M, então a soma das idades de todos os casais devem deixar o mesmo resto R ao fim da dança.\nFornecidos N, M e K e as idades de todos os dançarinos, determine de quantas formas se pode realizar a dança. Como a idade dos dançarinos é medida em segundos, os valores podem ser muito grandes.\nEntrada\nA primeira linha da entrada contém três inteiros N (3 ≤ N ≤ 106), M (1 ≤ M ≤ 109) e K (1 ≤ K ≤ 109), correspondendo à quantidade de pessoas em um círculo, ao número sagrado e à quantidade de movimentos da dança, respectivamente.\nA segunda linha da entrada contém N inteiros Ai (1 ≤ Ai ≤ 109) separados por um espaço em branco e representando a idade das mulheres.\nA terceira linha da entrada contém N inteiros Bi (1 ≤ Bi ≤ 109) separados por um espaço em branco e representando a idade dos homens.\nInicialmente o i-ésimo homem está alinhado com a i-ésima mulher, e o primeiro elemento de cada vetor é considerado à direita do respectivo último elemento.\nSaída\nA saída consiste de um único inteiro representando o resto da divisão do número de danças distintas por 109 + 7.",
    "samples": [
      [
        "4 10 1\n3 4 1 7\n13 27 36 9",
        "1"
      ],
      [
        "5 10 2\n3 4 1 7 6\n4 7 1 2 5",
        "3"
      ],
      [
        "5 10 2\n3 4 1 7 6\n5 4 7 1 2",
        "4"
      ],
      [
        "6 21 3\n10 58 23 31 37 2\n45 17 9 24 38 30",
        "42"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ô nibus Venusiano",
    "text": "A Colônia Humana em Vênus está prosperando! Aqui, o meio de transporte mais usado é o Ônibus Venusiano: um disco voador com janelas e assentos ao longo de suas bordas. Nesse ônibus, todos os assentos são nas janelas. E não é permitido mudar de assento. Portanto, uma vez que uma pessoa escolhe um lugar, ela deve permanecer nele até descer do ônibus.\nApesar de ser um veículo completamente autônomo, cada ônibus opera com um engenheiro a bordo, para lidar com problemas inesperados. Você é o engenheiro do ônibus 1C9C, e passa a maior parte do seu expediente lendo livros. O problema é que você detesta ficar ao sol. Portanto, você quer escolher um lugar pra sentar que minimize o total de luz solar que você vai receber ao longo do seu expediente de trabalho.\nA colônia é representada pelo plano cartesiano, onde o eixo X aponta para o leste e o eixo Y aponta para o norte. Os dias em Vênus são bem longos (mais longos até do que o ano!), então você pode assumir que o sol sempre vem da direção leste. Isto é, a luz solar sempre viaja para o oeste, na direção contrária ao eixo X.\nVeja a figura abaixo. Quanto mais sua janela estiver virada para o leste, mais luz solar você tem que aguentar. Mas se sua janela estiver virada para o oeste, você não recebe nenhum sol.\nFormalmente, suponha que o vetor (Dx,Dy) representa a direção para a qual a sua janela está virada. Note que você só recebe sol se Dx > 0. E seja θ o ângulo entre os vetores (Dx,Dy) e (1,0) (um vetor apontando diretamente para o sol). Se cos(θ) ≤ 0, você não recebe nenhum sol. Caso contrário, você recebe cos(θ) unidades de luz solar por segundo.\nA rota do ônibus consiste de uma sequência de estações ao redor da colônia. O ônibus começa o expediente na primeira estação, visita todas as estações em ordem, e então retorna à primeira.\nO trajeto entre duas estações consecutivas é sempre em linha reta, com velocidade constante de um metro por segundo. E apesar do ônibus ser redondo, ele tem um “lado da frente”: este lado está sempre virado para a direção que o ônibus se move, e o ônibus gira apropriadamente quando muda de direção nas estações.\nVocê pode ignorar o tempo que o ônibus gasta mudando de direção, coletando ou largando passa geiros.\nEntrada\nA primeira linha contém um único inteiro N, a quantidade de estações visitadas pela rota do ônibus.\nEm seguida há N linhas, cada linha contendo as coordenadas X e Y de uma estação, separadas por um espaço.\nAs estações são dadas na ordem em que são visitadas.\nQualquer estação pode ser visitada mais de uma vez na rota.\nQuaisquer duas estações consecutivas são distintas, assim como a última e a primeira estações.\nTodas as coordenadas são dadas em metros.\n2 ≤ N ≤ 100000.\nAs coordenadas de cada estação são inteiros no intervalo −10000 ≤ X,Y ≤ 10000.\nSaída\nA saída consiste de uma única linha que deve conter um número real, a quantidade mínima total de luz solar que você pode receber numa única jornada ao longo da rota do ônibus. Sua resposta deve ter exatamente duas casas decimais.",
    "samples": [
      [
        "3\n2 5\n17 5\n11 11",
        "6.00"
      ],
      [
        "4\n3 0\n3 6\n6 3\n0 3",
        "4.24"
      ],
      [
        "4\n3 2\n1 1\n-3 -1\n-1 0",
        "0.00"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "O",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Game Show!",
    "text": "A Sociedade de Bons Competidores (SBC) organiza shows televisivos (e agora também transmitidos online!) para os seus competidores filiados. A SBC usa um sistema de créditos, denominados sbecs, que podem ser usados para participar de suas competições ou podem ser trocados por prêmios no final de cada temporada. Eles iniciaram um novo tipo de jogo, e precisam fazer algumas simulações para evitar prejuízos muito grandes na premiação! Para participar deste novo jogo, o competidor precisa apostar 100 sbecs, que são transferidos para seu saldo no jogo, e uma sequência de caixas é posicionada. O jogo consiste de rodadas e o número máximo de rodadas é igual ao número de caixas. A cada rodada o jogador decide se abre a próxima caixa ou se encerra o jogo. Se ele encerrar, ele recebe seu saldo corrente de sbecs de volta. Se ele abrir a caixa, um número secreto, contido na caixa, é adicionado ao seu saldo e o jogo continua. Como o número secreto pode ser negativo, jogadores muito gananciosos podem acabar saindo no prejuízo! O jogo termina quando o jogador resolve encerrá-lo ou quando a última caixa é aberta.\nA SBC contratou você para testar o jogo. A partir do conteúdo das caixas, você deve decidir qual seria a maior premiação possível que um jogador poderia conseguir.\nEntrada\nA primeira linha da entrada contém um inteiro C, 1 ≤ C ≤ 100, o número de caixas do jogo.\nDepois, cada uma das C linhas seguintes descrevem, em ordem, o conteúdo das C caixas. Cada um delas contém um inteiro V , −1000 ≤ V ≤ 1000, correspondente ao conteúdo da caixa correspondente.\nSaída\nA saída consiste de uma única linha contendo um inteiro correspondente à maior premiação possível para aquela sequência de caixas.",
    "samples": [
      [
        "4\n-1\n-2\n-3\n-4",
        "100"
      ],
      [
        "5\n-10\n20\n-30\n40\n-50",
        "120"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ká entre Nós",
    "text": "Empates são sempre um problema em eleições ou em jogos. Recentemente, um novo jogo, chamado Ká entre Nós, foi inventado. O jogo é disputado por jogadores conectados numa rede social. Cada jogador tem um conjunto de amigos. A cada rodada há várias votações, mas um competidor somente pode receber votos de seus amigos. Ganha o jogador que receber o maior número de votos.\nO jogo ainda está na fase de projeto, mas os desenvolvedores depararam com um problema muito comum. Dado que o número de amigos de cada jogador é em geral pequeno, empates são muito comuns, o que tira a graça do jogo. Para resolver esse problema, os desenvolvedores decidiram adicionar um novo módulo ao jogo. Esse módulo define os amigos de cada jogador, e sempre que possível dará a cada jogador um número ímpar de amigos.\nO problema se mostrou mais complicado do que eles esperavam e agora estão tentando uma variação mais simples: dado um conjunto de jogadores, o módulo deverá obter uma partição dos jogadores em no máximo dois grupos, satisfazendo a restrição que cada jogador deve ter um númeroímpar de amigos no seu grupo. Acontece que nem sempre isso é possível. Sua tarefa é decidir se é ou não possível obter a partição.\nEntrada\nA primeira linha da entrada contém dois inteiros, P e F, respectivamente o número de jogadores e o número de amizades, onde 2 ≤ P ≤ 100 e 1 ≤ F ≤ P × (P − 1)/2. Cada uma das próximas F linhas contém dois inteiros, A e B, indicando que A e B são amigos, onde 1 ≤ A,B ≤ P e A (cid:54)= B.\nCada relação de amizade é dada no máximo uma vez, isto é, se uma linha contém os inteiros A e B, nenhuma outra linha contém tais inteiros.\nSaída\nA saída contém uma única linha, contendo um único caractere. Se for possível fazer a partição em dois grupos, escreva a letra maiúscula ‘Y’; caso contrário, escreva a letra maiúscula ‘N’.",
    "samples": [
      [
        "4 4\n4 2\n1 3\n2 3\n1 4",
        "Y"
      ],
      [
        "4 3\n4 2\n2 3\n1 2",
        "Y"
      ],
      [
        "5 5\n3 5\n3 1\n1 4\n2 5\n2 4",
        "N"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Números Multiplicados",
    "text": "Eugênio é um brilhante matemático que se diverte multiplicando números.\nCerta vez, ele encontrou M pedaços de papel, numerados de 1 a M, cada um com um vértice desenhado. Chamaremos tais vértices de M-vértices. Cada um desses vértices estava rotulado com um primo distinto. Além disso, os primos estavam ordenados: Se chamarmos o rótulo do vértice no i-ésimo pedaço de papel de pi, então pi < pj para todo par i < j.\nApós encontrar os pedaços de papel, Eugênio decidiu desenhar N outros vértices, que chamaremos de N-vértices, e adicionar arestas entre os M-vértices e os N-vértices. Ele tomou o cuidado de nunca ligar um M-vértice com um M-vértice, nem um N-vértice com um N-vértice, mas não se preocupou com o número de arestas desenhadas entre dois vértices. Assim, ele obteve um multigrafo bipartido.\nComo o principal interesse de Eugênio é multiplicar números, ele decidiu rotular cada N-vértice com a multiplicação de todos os M-vértices conectados a ele. Se um M-vértice estiver conectado a um N-vértice por várias arestas, o rótulo dele será multiplicado várias vezes (igual ao número de arestas que os conecta) no processo de formar o rótulo do N-vértice.\nCada N-vértice i acabou rotulado com um número ci. Formalmente, podemos escrever a seguinte fórmula para ci: ci = (cid:89) pj, (j,i)∈E onde E é o multiconjunto de arestas (cada elemento de E é um par da forma (m,n) com 1 ≤ m ≤ M e 1 ≤ n ≤ N). Depois de construir os rótulos dos N-vértices, Eugênio foi comprar um lanche, que consistiu de um toro e um café. Ao saborear o toro, Eugênio acidentalmente derramou o seu café, tornando os rótulos p1,...,pM dos M-vértices ilegíveis.\nVocê pode ajudá-lo a recuperar os números primos ordenados destruídos pelo café? Entrada\nA primeira linha contém três inteiros M, N e K, o número de M-vértices, o número de N-vértices e o número de arestas distintas. Tais valores satisfazem 1 ≤ M,N < 103 e 1 ≤ K < 104.\nA próxima linha contém N números ci, os rótulos dos N-vértices. Tais valores satisfazem 1 < ci < 1015.\nFinalmente, há K linhas, cada uma contendo três números m, n e d, representando que há d arestas entre o M-vértice m e o N-vértice n. Tais números satisfazem 1 ≤ m ≤ M, 1 ≤ n ≤ N e 1 ≤ d ≤ 50.\nÉ garantido que todos os vértices (tanto M-vértices quanto N-vértices) têm grau pelo menos um.\nEm outras palavras, todo vértice tem pelo menos uma aresta conectada a ele.\nSaída\nImprima uma única linha com M números ordenados, os primos rótulos dos M-vértices de índices 1,...,M que fizeram Eugênio perder o sono.",
    "samples": [
      [
        "4 3 4\n15 16 13\n2 1 1\n3 1 1\n1 2 4\n4 3 1",
        "2 3 5 13"
      ],
      [
        "4 5 7\n3 9 7 143 143\n1 1 1\n1 2 2\n2 3 1\n3 4 1\n3 5 1\n4 5 1\n4 4 1",
        "3 7 11 13"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "N",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fastminton",
    "text": "A Comissão RegionaL de Fastminton (CRLF) organiza torneiros anuais deste novo e inusitado esporte derivado do badminton. Neste ano, ocorrerá a terceira edição do grande torneio.\nO antigo programador da comissão (sobrinho da diretora) desenvolveu um sistema para capturar e armazenar o resultado de cada ponto de uma partida, cujo resultado é salvo para um arquivo. Com a saída do antigo programador, que deixou para trás algumas versões defeituosas de seus programas, a CRLF precisa de você para garantir que os registros das emocionantes jogadas não sejam perdidos, confiando-lhe a tarefa de escrever um programa para ler os resultados dos arquivos de registro.\nPara auxiliá-lo, a CRLF disponibilizou um resumo com as regras relevantes do Fastminton, que é, basicamente, uma versão mais curta (menor número de games) do badminton: • As partidas de Fastminton são jogadas sempre com dois jogadores (oponentes) em uma quadra separada ao meio por uma rede; • Os jogadores são identificados pela sua posição no placar (jogador da esquerda, jogador da direita); • Uma partida é composta por três games. Ganha quem alcançar dois games; • Ganha o game quem alcançar ao menos 5 pontos e tiver uma diferença de ao menos 2 pontos do oponente, ou o primeiro a chegar em 10 pontos; • O jogador da esquerda inicia sacando no primeiro game da partida; nos demais, o jogador que inicia sacando é o que ganhou o último game; • Cada jogada resulta em um ponto, de quem sacou ou de quem recebeu o saque. Quem ganhou o ponto irá sacar na próxima jogada.\nEntrada\nA entrada é composta por uma única linha contendo uma sequência de caracteres representando a sequência completa dos eventos de uma partida, podendo conter os caracteres S (ponto de quem sacou), R (ponto de quem recebeu o saque) ou Q (anúncio de placar). A entrada não contém anúncios de placar consecutivos.\nSaída\nO programa deverá imprimir uma linha contendo o placar atual para cada anúncio de placar (Q) encontrado.\nCaso a partida esteja em andamento, o anúncio deverá ser na forma “GL (PL) - GR (PR)”, onde GL e GR representam o número de games ganhos pelos jogadores da esquerda e da direita, e PL e PR são os pontos atuais dos jogadores da esquerda e da direita. Um asterisco (*) deverá ser adicionado no final do marcador de pontos do jogador que irá sacar na próxima jogada.\nCaso a partida já esteja concluída, o anúncio será na forma “GL - GR” com a palavra “(winner)” adicionada no final do marcador de games do jogador ganhador da partida.",
    "samples": [
      [
        "SRSSQSSSSQRRSS",
        "0 (1) - 0 (3*)\n0 (0) - 1 (2*)"
      ],
      [
        "SRSSQSSSSQRRSSQ",
        "0 (1) - 0 (3*)\n0 (0) - 1 (2*)\n0 - 2 (winner)"
      ],
      [
        "RSRSSRRRRRRRRRRSSSSRRSQ",
        "2 (winner) - 0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Concatenando Times",
    "text": "Pepito é um coach da Maratona que com frequência gosta de “concatenar” os nomes de dois times, tais como “AJI” e “Oxidados”, a fim de obter nomes para novos times, tal como “AJIOxidados”.\nDado que Pepito é coach de times de duas universidades onde ele leciona, ele teve uma ideia: ele vai considerar todas as possíveis concatenações de um nome de um time da universidade A, com um nome de um time da universidade B (sempre nesta ordem: primeiro o nome de um time da universidade A e depois o nome de um time da universidade B). Por exemplo, se os nomes dos times da universidade A são “Buen” e “Kilo”, e se os nomes dos times da universidade B são “Pan” e “Flauta”, as possíveis concatenações que ele considera são as cadeias “BuenPan”, “BuenFlauta”, “KiloPan” e “KiloFlauta”.\nEle diz que um time é peculiar se a remoção desse time faz com que o conjunto de concatenações perca todas as concatenações que usam o nome desse time.\nPode-se verificar que no exemplo acima todos os times são peculiares. Contudo, se considerarmos o caso em que os nomes dos times de A são “xx” e “xxy”, e os nomes dos times de B são “z”, “yz” e “xx”, então o time “xx” da universidade A não é peculiar, porque um dos nomes por ele gerado (“xx” + “yz” = “xxyz”) pode ser também gerado sem usar o time em questão (“xxy” + “z” = “xxyz”).\nPela mesma razão, “yz”, “xxy” e “z” não são peculiares. O único time peculiar neste exemplo é “xx” da universidade B, porque é utilizado para criar os nomes “xxxx” e “xxyxx”, e é absolutamente impossível criar qualquer um desses nomes sem usar “xx” da universidade B.\nDados os nomes dos times de ambas as universidades, sua tarefa é calcular quantos times peculiares existem em cada universidade.\nEntrada\nA primeira linha contém dois inteiros, M e N, separados por um espaço. O número de times da universidade A é M (1 ≤ M ≤ 105), e o número de times da universidade B é N (1 ≤ N ≤ 105).\nA segunda linha contém os nomes dos M times da universidade A, separados por um espaço em branco e a terceira linha contém os nomes dos N times da universidade B, separados por um espaço em branco. Todos os nomes consistem apenas de letras minúsculas do alfabeto latino. Times distintos de uma mesma universidade têm nomes distintos.\nA soma dos comprimentos dos nomes de todos os times é no máximo 106.\nSaída\nA saída deve conter apenas uma linha contendo dois inteiros: o número de times peculiares da universidade A e o número de times peculiares da universidade B, separados por um espaço em branco.",
    "samples": [
      [
        "2 2\nbuen kilo\npan flauta",
        "2 2"
      ],
      [
        "2 3\nxx xxy\nz yz xx",
        "0 1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Álbum de Figurinhas",
    "text": "O álbum de figurinhas da Subregional Nlogoniana do ICPC 2020 já está disponível na Nlogônia! Programadores competitivos de todo o país estão comprando álbuns e colecionando figurinhas para celebrar a competição.\nEste álbum é especial porque todas as figurinhas são iguais: elas contêm uma foto do troféu deste ano. Para completar o álbum, basta coletar figurinhas suficientes para preencher todos os espaços nele.\nVocê pode se perguntar: qual a graça de colecionar essas figurinhas? Para deixar as coisas interes santes, as figurinhas são vendidas em pacotes, cada um com um número aleatório de figurinhas. Os fãs celebram quando encontram muitas figurinhas em um pacote, zoam aqueles azarados que encontram poucas figurinhas, e se vangloriam por preencher seus álbuns com poucos pacotes.\nVocê acabou de adquirir o seu álbum e está pronto para começar a preenchê-lo! Mas antes de comprar os pacotes de figurinhas, você se perguntou: em média, quantos pacotes são necessários para completar um álbum? Entrada\nHá apenas uma linha de entrada contendo três inteiros, N, A e B, separados por um espaço, satisfazendo 1 ≤ N ≤ 106, 0 ≤ A ≤ B ≤ 106 e B > 0, onde: • N é o número de figurinhas necessárias para preencher o álbum; • A é o número mínimo de figurinhas em um pacote; • B é o número máximo de figurinhas em um pacote.\nO número de figurinhas em cada pacote é um inteiro uniformemente distribuído no intervalo fechado [A,B].\nSaída\nA saída consiste de apenas uma linha, que deve conter o número esperado de pacotes necessários para completar um álbum. O número será considerado correto se estiver dentro de um erro absoluto ou relativo de 10−5 da resposta correta.",
    "samples": [
      [
        "40 0 2",
        "40.33333"
      ],
      [
        "100 1 10",
        "18.72727"
      ],
      [
        "30 3 3",
        "10.00000"
      ],
      [
        "314 5 8",
        "48.74556"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Empresa de Festas",
    "text": "Yankovich trabalha como Engenheiro de Software numa empresa, chamada POI, que promove festas online. Para testar os seus sistemas, os empregados organizaram festas e convidaram colegas, mas com algumas restrições.\nA empresa tem uma estrutura hierárquica: Cada empregado, com exceção do dono da empresa, tem um gerente direto, e não há relações cíclicas de gerência. Devido ao processo de promoção da empresa, a idade de um empregado nunca é maior que a idade do seu gerente direto.\nSerão organizadas M festas. A j-ésima festa tem um anfitrião e um intervalo de idades [Lj,Rj].\nPara a j-ésima festa será convidado o maior conjunto de pessoas que satisfaça todas as restrições abaixo: • O anfitrião participa da festa. Por isso, é garantido que a idade do anfitrião da j-ésima festa está no intervalo [Lj,Rj].\n• Todo convidado precisa ter idade no intervalo [Lj,Rj].\n• Todo convidado (que não o anfitrião) precisa trabalhar diretamente com (ou seja, ser gerente ou subordinado de) algum outro empregado que participa da festa.\nYankovich está responsável pelo programa que fornece informações sobre as festas das quais o usuário participou. Como uma tarefa inicial, ele tem que calcular de quantas festas cada empregado participou. Como ele está atrasado para entregar tal tarefa, ele pediu sua ajuda para escrever tal programa.\nEntrada\nA entrada consiste de várias linhas. A primeira linha contém dois inteiros N e M (1 ≤ N,M ≤ 105) representando o número de empregados e o número de festas de teste, respectivamente.\nAs próximas N linhas contêm a estrutura hierárquica da empresa. A i-ésima dessas linhas contém dois inteiros Ai e Bi (1 ≤ Ai ≤ 105, 1 ≤ Bi ≤ N) representando a idade do i-ésimo empregado e seu gerente direto. Os empregados são numerados de 1 a N, com 1 representando o dono da empresa (ele é o único empregado com Bi = i). É garantido que Ai ≤ ABi para todo 1 ≤ i ≤ N.\nAs próximas M linhas contêm os dados das festas de teste. A j-ésima dessas linhas contém três inteiros Oj, Lj, Rj (1 ≤ Lj ≤ AOj ≤ Rj ≤ 105) representando o anfitrião da festa e os limites do intervalo de idades descrito no enunciado.\nSaída\nImprima uma única linha contendo N inteiros (separados por um único espaço). O i-ésimo desses números deve ser o número de festas de que o empregado i participou.",
    "samples": [
      [
        "10 3\n8 1\n3 5\n5 1\n2 3\n4 1\n3 3\n1 2\n7 1\n2 2\n3 2\n3 5 9\n5 3 8\n3 2 6",
        "2 1 3 1 1 2 0 2 0 1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Juntando Dados",
    "text": "Acre e Amanda são muito curiosos e estão sempre procurando padrões à sua volta. Eles rotineiramente coletam e analisam dados de várias fontes (tráfego na cidade, volume de chuvas, número de folhas que caem das árvores), na esperança de encontrar padrões interessantes.\nNa sua última expedição eles obtiveram um conjunto de dados bastante promissor: formava uma linha reta perfeita! Formalmente, era uma lista de N/2 pares de inteiros, possivelmente repetidos.\nQuando esses pares eram representados por pontos no plano cartesiano, todos os pontos eram per feitamente colineares! Maravilhados, Acre e Amanda armazenaram estes dados como uma tabela contendo os pares de inteiros.\nInfelizmente, enquanto Acre e Amanda saíram para coletar mais dados, seu filho pequeno entrou no escritório deles e bagunçou a tabela, trocando os valores de lugar. Agora só o que Acre e Amanda têm são os N valores da tabela, embaralhados. Eles querem tentar reconstruir a tabela original a partir deles.\nFormalmente, Acre e Amanda querem agrupar esses números em N/2 pares, onde cada par repre senta um ponto no plano cartesiano, de tal forma que todos esses pontos sejam colineares. A lista de inteiros pode ter valores repetidos, e cada valor deve ser utilizado exatamente tantas vezes quantas aparece na lista. O conjunto de dados resultante pode ter pontos repetidos.\nAcre e Amanda querem saber quantos conjuntos de dados diferentes podem ser formados com a lista de inteiros dada, já que podem haver vários. Dois conjuntos de dados são diferentes se e somente se existe um ponto que aparece mais vezes em um dos conjuntos do que no outro.\nEntrada\nA primeira linha contém um único inteiro N, o tamanho da lista de inteiros dada. N é sempre par, pois é o dobro da quantidade de pontos do conjunto de dados original. A segunda linha contém N inteiros, que representam a lista dos valores da tabela, embaralhados.\nOs inteiros são separados por um único espaço.\n4 ≤ N ≤ 200.\nCada número I da lista está no intervalo −10000 ≤ I ≤ 10000.\nSaída\nA saída deve consistir de uma única linha com um único inteiro, o número de diferentes maneiras de arranjar a lista de inteiros em pares que representem pontos colineares. Como esse número pode ser muito grande, sua resposta deverá ser calculada módulo 1000000007 (109 + 7).\nA resposta poderá ser zero para alguns casos.",
    "samples": [
      [
        "8\n1 2 3 5 20 18 16 12",
        "2"
      ],
      [
        "6\n1 2 3 4 5 20",
        "0"
      ],
      [
        "8\n1 2 5 5 5 5 8 9",
        "10"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Interatividade",
    "text": "Um dia, Alice desafiou Beto com o problema interativo de programação descrito a seguir.\n—————(cid:111)(cid:111)————— Você tem uma árvore (um grafo acíclico conexo). Cada nó da árvore tem exatamente um pai, com exceção do nó raiz, que não tem pai. Um nó que não é pai de nenhum outro nó é uma folha. Você conhece a estrutura da árvore, porque sabe qual é o pai de cada nó que não é a raiz.\nCada nó contém um valor inteiro. Um nó que não é folha contém a soma dos valores dos seus filhos diretos. Portanto, todos os valores da árvore são determinados pelos valores contidos nas folhas.\nA figura abaixo mostra um exemplo. As folhas estão marcadas como cinza, enquanto os outros nós são brancos. Cada nó mostra o valor contido nele.\nInicialmente, você não sabe o valor de nenhum nó da árvore, mas pode consultá-los um por um.\nSua tarefa é determinar o valor de cada nó da árvore, usando o mínimo de consultas possível.\n—————(cid:111)(cid:111)————— Beto resolveu este problema facilmente. Então, para dificultar as coisas, Alice perguntou para ele: “dada a estrutura da árvore, quantas formas diferentes de solucionar este problema existem?” Isto é, quantos conjuntos mínimos de consultas existem que lhe permitam determinar os valores armazenados em cada nó da árvore? (Dois conjuntos de consultas são considerados diferentes se e somente se existe um nó consultado em apenas um dos dois conjuntos.) Entrada\nA árvore tem N nós no total. Cada nó é identificado por um inteiro entre 1 e N, onde o nó 1 é a raiz.\nA entrada consiste de duas linhas. A primeira linha contém apenas o inteiro N.\nA segunda linha contém N −1 inteiros P1,P2,...,PN−1, separados por um espaço, onde Pi é o pai do nó i + 1, para i = 1,2,...,N − 1.\n2 ≤ N ≤ 105.\n1 ≤ Pi ≤ N, para i = 1,2,...,N − 1.\nSaída\nA saída consiste de uma única linha, que deve conter o número de soluções mínimas diferentes para o problema enfrentado por Beto. Como esse número pode ser muito grande, sua resposta deverá ser calculada módulo 1000000007 (109 + 7).",
    "samples": [
      [
        "3\n1 1",
        "3"
      ],
      [
        "4\n1 2 3",
        "4"
      ],
      [
        "5\n1 2 2 2",
        "7"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Hangar do SBC",
    "text": "Um pequeno avião de carga do Sistema Binário de Cargas (SBC) foi projetado para transportar produtos especiais e secretos. Esses produtos são agrupados em caixas com diversos pesos.\nO avião tem uma faixa de peso de segurança, dentro da qual a aeronave fica estável. Mais especifi camente, existe um intervalo tal que se o peso total das caixas transportadas ficar fora desse intervalo então não será possível garantir a estabilidade do voo.\nSabe-se que todas as caixas têm pesos distintos. Além disso, dadas duas caixas, a mais pesada pesa pelo menos o dobro da caixa mais leve.\nSua tarefa é determinar de quantas formas se pode escolher um número especificado de caixas para se transportar no avião sem desestabilizá-lo.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e K, que representam o número de caixas disponíveis e o número de caixas que devem ser embarcadas no avião, respectivamente.\nA segunda linha da entrada contém N inteiros, separados por um espaço em branco, que repre sentam os pesos das caixas.\nA terceira linha da entrada contém dois inteiros, A e B, que especificam o intervalo de segurança dos pesos, que é o intervalo (fechado) [A,B].\nConsidere todos os pesos informados na mesma unidade.\n• 1 ≤ N ≤ 50.\n• 1 ≤ K ≤ 50.\n• o peso P de cada caixa está no intervalo 1 ≤ P ≤ 1018.\n• 1 ≤ A ≤ B ≤ 2 × 1018.\nSaída\nA saída consiste de uma única linha, que contém o número de diferentes escolhas de caixas na quantidade especificada, sem por em risco o voo.",
    "samples": [
      [
        "3 2\n10 1 3\n4 13",
        "3"
      ],
      [
        "4 3\n20 10 50 1\n21 81",
        "4"
      ],
      [
        "6 3\n14 70 3 1 6 31\n10 74",
        "11"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lavaspar",
    "text": "Caça Palavras é um passatempo bastante conhecido, embora esteja perdendo um pouco do seu prestígio nos últimos anos. O objetivo deste jogo é encontrar palavras em uma matriz, onde cada célula dessa matriz contém uma letra.\nBibika e seu irmão estavam jogando Caça Palavras, porém em pouco tempo perderam o interesse, visto que encontrar todas as palavras estava ficando relativamente fácil. Como Bibika queria que seu irmão saísse um pouco do computador, ela pesquisou na internet jogos do mesmo estilo e acabou encontrando o Caça Lavaspar.\nCaça Lavaspar é um jogo que segue a mesma ideia do famoso Caça Palavras. Porém, ao invés de simplesmente ter que encontrar uma palavra na matriz, o objetivo é encontrar um anagrama qualquer da palavra, fazendo assim com que o jogo fique mais difícil e interessante. O anagrama pode ser encontrado em uma linha, coluna ou diagonal.\nUm anagrama de uma palavra é formado pelo rearranjo das letras da palavra. Às vezes, o anagrama não tem sentido, mas isto não importa. balo, loba e aolb são exemplos de anagramas da palavra bola.\nBibika percebeu ser possível que uma mesma célula da matriz fizesse parte de anagramas de diferentes palavras e então ela passou a chamar essas células de células especiais.\nAgora ela gostaria de saber, dada uma configuração de uma matriz e uma coleção de palavras, quantas células especiais existem?   A imagem acima ilustra o primeiro exemplo, onde a coleção de palavras consiste de três palavras: bola, casa e boi. Os retângulos de cada cor representam anagramas de palavras diferentes da entrada. As 3 células especiais estão pintadas de amarelo.\nEntrada\nA primeira linha possui dois inteiros L e C, que correspondem ao número de linhas e de colunas da matriz, respectivamente.\nSeguem então L linhas, cada uma contendo uma palavra com C letras.\nApós isso, a próxima linha contém um inteiro, N, que representa a quantidade de palavras na coleção de palavras a seguir.\nE então, por fim, temos mais N linhas, onde cada uma delas contém uma palavra da coleção.\nTodos os caracteres utilizados, tanto na matriz quanto na coleção de palavras, são letras maiúsculas do alfabeto inglês.\nÉ garantido que nenhum par de palavras da coleção é um anagrama uma da outra.\n• 2 ≤ L, C ≤ 40.\n• 2 ≤ N ≤ 20.\n• O número P de letras de cada uma das N palavras está no intervalo 2 ≤ P ≤ min(15,max(L,C)).\nSaída\nA saída deve consistir de uma única linha que contém o número de células especiais.",
    "samples": [
      [
        "4 5\nXBOIC\nDKIRA\nALBOA\nBHGES\n3\nBOLA\nCASA\nBOI",
        "3"
      ],
      [
        "3 3\nAAB\nABA\nBAA\n2\nABA\nBBB",
        "3"
      ],
      [
        "2 4\nAAAA\nAAAA\n2\nAAA\nBBB",
        "0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Metralhadora",
    "text": "Fulanito foi jogar um arcade das antigas. No jogo, ele pode colocar uma metralhadora em qualquer lugar da sua base, que consiste de todos os pontos (x,y) com coordenadas inteiras e x < 0. Há N inimigos no campo de batalha. O i-ésimo inimigo (1 ≤ i ≤ N) está na posição (xi,yi) com xi > 0.\nTodas as posições são dadas de antemão.\nUma metralhadora posicionada em (xm,ym) cobre um ângulo de visão para a direita centrado na reta y = ym, cujos limites são dados pelas retas y = ym ± x− 2xm. Quando colocada, ela atinge todos os inimigos na região delimitada por esse ângulo, incluindo os localizados nas retas-limite.\nO sistema de pontuação usado por esse jogo é desnecessariamente complicado; muitos acreditam que tal sistema foi um grande erro dos desenvolvedores (que, em resposta, afirmam com convicção que “não é um bug, é um recurso!”). Especificamente, a pontuação obtida por um dado posicionamento da metralhadora é calculada executando os seguintes passos: • Liste os índices (i entre 1 e N) de todos os inimigos que a metralhadora atinge.\n• Ordene os índices em ordem crescente, e chame os valores ordenados de i0 < i1 < ··· < ik−1.\n• Compute a pontuação usando a fórmula (cid:16)(cid:80)k j=− 01 ij · 5782344j(cid:17) mod (109 + 7), onde a mod b denota o resto da divisão de a por b.\n• Nota: Uma metralhadora que não atinge inimigos recebe uma pontuação exatamente igual a 0.\nPara melhorar nesse jogo, Fulanito te faz Q perguntas: cada consulta pede o placar que seria obtido se posicionássemos a metralhadora numa certa posição (xm,ym). Para tornar o problema mais qd ues ea pfi oa dd eo mr, o ses rv ua slo ar de os sd pe ar( axm ca, ly cm ul) an rã xo msã eo ymda ad to rs avd éir se dta am s fe ón rt me. ulA aso xin mvé =s −di 1ss −o, (cid:0)(s pão +d aa )d mos ov dal (o 1r 0e 9s +a 7e )(cid:1)b e ym = (p + b) mod (109 + 7), onde p é a resposta da consulta anterior (p = 0 ao processar a primeira consulta).\nNOTA: É garantido que a soma do número de inimigos atingidos em todas as consultas é no máximo 106.\nEntrada\nA entrada consiste de várias linhas. A primeira linha da entrada contém dois inteiros N, Q (1 ≤ N,Q ≤ 105), o número de inimigos e o número de consultas.\nAs próximas N linhas da entrada contém dois inteiros cada: xi e yi (1 ≤ xi,yi ≤ 109), as coorde nadas da posição do i-ésimo inimigo.\nAs próximas Q linhas contém dois inteiros cada: Os valores a e b (0 ≤ a,b < 109+7) que especificam cada consulta, como explicado no enunciado.\nSaída\nPara cada consulta, imprima um único inteiro contendo a resposta para a consulta.",
    "samples": [
      [
        "7 2\n2 8\n5 7\n1 6\n4 5\n1 3\n2 2\n4 1\n2 3\n373785639 373785644",
        "626214369\n981053491"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Mountain Ranges",
    "text": "Famous for its mountain ranges, Nlogonia attracts millions of tourists every year. The government has a dedicated budget for continuous maintenance of the hiking trails spread across the country and most of them are filled with scenic viewpoints, accessible through wooden walkways and stairs.\nCurrently on a trip through Nlogonia and with hopes of going back home with lots of breath-taking pictures, Lola and her husband want to visit as many viewpoints as possible. They plan to hike a different trail each day and explore its viewpoints. However, to avoid being exhausted at the end of the day, if moving from one viewpoint to the next requires going up more than X meters they simply call it a day and go back to their hotel in order to get some rest. Fortunately, every hiking trail in Nlogonia is equipped with modern chairlifts, so the couple can start hiking the trail at any viewpoint they decide.\nOnce the hiking begins the couple only moves towards the peak of the mountain.\nTo make sure she doesn’t waste a day Lola only wants to hike on trails where she’ll get to a reasonable number of viewpoints. Given the altitudes of the scenic viewpoints on a hiking trail, you must determine the maximum number of viewpoints that the couple can visit.\nInput\nThe first line contains two integers N (1 ≤ N ≤ 1000) and X (0 ≤ X ≤ 8848), indicating respectively the number of scenic viewpoints on the hiking trail, and the maximum number of meters that Lola and her husband are willing to go up from one viewpoint to the next. The second line contains N integers A1,A2,...,AN (1 ≤ Ai ≤ 8848 for i = 1,2,...,N), where Ai is the altitude (in meters) of the i-th viewpoint. Viewpoints are given in the order they appear on the hiking trail and their altitudes are non-decreasing, that is, Ai ≤ Ai+1 for i = 1,2,...,N − 1.\nOutput\nOutput a single line with an integer indicating the maximum number of scenic viewpoints that can be visited without going up more than X meters from one viewpoint to the next, and considering that the journey can be started at any viewpoint.",
    "samples": [
      [
        "9 2\n3 14 15 92 653 5897 5897 5898 5900",
        "4"
      ],
      [
        "9 0\n3 14 15 92 653 5897 5897 5898 5900",
        "2"
      ],
      [
        "9 8848\n3 14 15 92 653 5897 5897 5898 5900",
        "9"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Database of Clients",
    "text": "Nowadays there are billions of email users. A little-known fact is that some email providers offer way more than the usual username@provider.com email address.\nSome providers simply ignore dots in usernames. Thus, if John owns the username johnsmith, he could tell people that his email address is johnsmith@provider.com, john.smith@provider.com or john.s.mith@provider.com, among others. Emails sent to any of these addresses would end up on his mailbox.\nOther providers allow appending the character “+” followed by any combination of letters and/or digits after the username. With this feature, by registering the username johnsmith, John would also be able to use johnsmith+friends@provider.com and johnsmith+2x3is6@provider.com.\nSometimes both features are available at once and in those cases john.smith+icpc@provider.com and john.smith+wants.2.eat.lemon.3.14@provider.com are valid addresses that John could use.\nThis is quite useful for users, who can manage different addresses to help organize their mailboxes and easily filter the newsletters eventually sent after registering on a new website. Unfortunately, this also opens up space for abuse. Some websites rely upon the fact that each email address identifies a single user. However, a misbehaving user might easily create multiple accounts by taking advantage of the multiple addresses allowed by the email provider.\nAfter learning all of this your boss got really worried. What if the number of unique users that has been reported to the shareholders is not accurate, bloated by duplicate accounts instead? That brings you to the task at hand: given the list of all email addresses from the users database of the company, you must determine the real number of unique users, assuming that all email providers have both described features available.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000) representing the number of email addresses in the database. Each of the next N lines contains a string of at most 100 characters representing an email address in the database. Each email address has the form localpart@provider where localpart is a non-empty list of labels with a “.” (dot) or a “+” (plus sign) between each pair of consecutive labels, and provider is a non-empty list of labels always with a “.” (dot) between each pair of consecutive labels. A label is a non-empty sequence of lowercase letters and/or digits. The character “+” (plus sign) appears at most once in each email address.\nOutput\nOutput a single line with an integer indicating the number of unique users in the database.",
    "samples": [
      [
        "2\ntwo.different.providers@now.here\ntwo.different.providers@nowhere",
        "2"
      ],
      [
        "2\n1.2.3@testing\ntesting@1.2.3",
        "2"
      ],
      [
        "7\nalice@e.mail\neve@another.mail\nbob@e.mail\njoe90@e.mail\nb.o.b@e.mail\nbob+new@e.mail\nbob@another.provider",
        "5"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Building a Field",
    "text": "John is a meticulous person. In his farm he built a circular field with some trees planted right at the circumference of the field. Figure (a) below shows the field with the trees.\nNow John wants to use a long rope and four of the field trees to demarcate a rectangle using the trees as vertices and the rope as edges. Figure (b) below shows two rectangles that can be demarcated using the trees of the field in figure (a).\nGiven the description of the positions of the trees in John’s circular field, you must determine whether it is possible to demarcate a rectangle using four of the trees as vertices and the rope as edges.\nInput\nThe first line contains an integer N (4 ≤ N ≤ 105) indicating the number of trees in the field.\nTrees are represented as points on a circumference. The second line contains N integers L1,L2,...,LN (1 ≤ Li ≤ 106 for i = 1,2,...,N) indicating the arc lengths between each pair of consecutive trees. The arcs are given in counter-clockwise order. The total length of the circumference does not exceed 109.\nOutput\nOutput a single line with the uppercase letter “Y” if it is possible to demarcate a rectangle using the given trees, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "8\n3 3 4 2 6 2 2 2",
        "Y"
      ],
      [
        "4\n14 16 15 15",
        "N"
      ],
      [
        "6\n3 7 7 3 10 10",
        "Y"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Dividing Candy",
    "text": "Bob and Charlie are two brothers that like powers of 2 a lot. Their mum decided to give them N boxes of candy, each of them containing a number of candy bars that is a power of 2.\nThey want to split the boxes between them, that is, for each box, they will decide who gets it. Each box must be given to exactly one brother.\nNow they wonder: is it possible that, for each of the two brothers, the total amount of candy bars he receives is also a power of 2? For example, if N = 4 and the boxes contain 4, 4, 32, and 8 candy bars, the answer would be yes, as one possible solution is giving the third box to Bob (32 candy bars), and the remaining boxes to Charlie (4 + 4 + 8 = 16 candy bars in total).\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105), the number of boxes the brothers want to split.\nThe second line contains N integers A1,A2,...,AN (0 ≤ Ai ≤ 105 for i = 1,2,...,N), indicating that the i-th box has 2Ai candy bars.\nOutput\nOutput a single line with the uppercase letter “Y” if it is possible to split the boxes so that the total amount of candy received by each brother is a power of 2, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "4\n2 2 5 3",
        "Y"
      ],
      [
        "1\n42",
        "N"
      ],
      [
        "5\n3 1 4 1 5",
        "N"
      ],
      [
        "7\n0 0 1 2 3 4 5",
        "Y"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Game of Slots",
    "text": "Alice and Bob are playing the following game. Initially, each of them receives N cards, each card with an integer randomly and uniformly chosen from the interval [1,1018] written on it. There are also N slots, numbered from 1 to N.\nAlice starts by placing her cards on the slots, in such a way that exactly one card is placed on each slot. She may choose any of the N! options of placement she wants. After that, Bob looks at the numbers placed by Alice on each slot and does the same with his cards. The game then ends, and for each slot i the person who placed the largest number on it earns i points (i = 1,2,...,N). If both of the placed numbers happen to be equal, the players share the points for this slot, that is, each player gets i/2 points.\nAs an example of the game, suppose N = 3, Alice is given cards with numbers 10, 20 and 40, and Bob is given cards with numbers 10, 30 and 50. Alice may choose to place numbers 40, 20 and 10 on slots 1, 2 and 3 respectively. After seeing her moves Bob may choose to place numbers 30, 50 and 10 on slots 1, 2 and 3 respectively. In this case, Alice earns 1 point for slot 1, 0 points for slot 2, and 3/2 = 1.5 points for slot 3. Her total score is 2.5 points.\nThe purpose of the above example is to illustrate the rules of the game. Alice and Bob may not place their cards as described, because both of them play optimally. You may wonder what does it mean.\nIn his turn, Bob has full information on Alice’s cards and decisions, and of course, he knows his cards. He plays in such a way to maximize his total score.\nOn the other hand, Alice does not know Bob’s cards when it’s her turn. She knows Bob’s strategy, and that his cards were randomly and uniformly chosen. Thus, she plays to maximize the expected value of her total score.\nGiven N, you must calculate the expected value of Alice’s total score at the end of the game, if the players play optimally as described.\nInput\nThe input consists of a single line that contains an integer N (1 ≤ N ≤ 100), the number of slots in the game.\nOutput\nOutput a single line with a number indicating the expected value of Alice’s total score at the end of the game, if the players play optimally as described. The result must be output as a rational number with exactly six digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "1",
        "0.500000"
      ],
      [
        "2",
        "1.333333"
      ],
      [
        "99",
        "589.631287"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Keylogger",
    "text": "Lately you have been very curious about your typing speed, and you have been wondering how long it takes for you to press each key on your keyboard, which has K keys.\nTo figure that out, you installed a keylogger on your own computer. It has been registering the delta time between each pair of key presses. After collecting data for a couple of weeks, you now have access to a 2-dimensional matrix T with K rows and K columns. The element at the i-th row and j-th column is Ti,j, and it represents how long it takes, on average, for you to press the key j right after having pressed the key i. For example, the element T3,5 represents how long it takes, on average, for you to press the key 5 right after having pressed the key 3. Coincidentally, each row on T is ordered non-decreasingly.\nGiven that your typing speed varies according to the time of the day and your mood, your keylogger has also given you a latency margin error L. That means that, for every pair of keys i and j on your keyboard, it actually takes between Ti,j −L and Ti,j +L, inclusive, for you to press the key j right after having pressed the key i.\nYou classified for the South American ICPC regional competition, and you have been asked to update some of your contact information on the ICPC website. The problem is that you have been studying so hard that you forgot your password. All you remember is that your password has length N.\nLuckily, your keylogger also has data about the last time you typed your password on that website.\nSo now you have an array P with N − 1 elements. Each element Pi represents the delta time between each consecutive key presses from your password. In other words, P1 represents the delta time between you pressing the keys of the first and the second characters of your password, P2 is the delta time between you pressing the keys of the second and third characters of your password, and so on. Notice that the latency L does not apply to P, because each Pi is not an average but a single delta time, measured precisely.\nYou need to recover your password as soon as possible. Your plan now is to try every sequence of keys that is compatible with the information you have. A sequence S of length N is compatible with L H, owT, ma an nd yP sui cf hea sc eh qup ea ni cr eo sf ac ro en ts he ec ru et ?ive keys Si and Si+1 satisfy that TSi,Si+1 − L ≤ Pi ≤ TSi,Si+1 + L.\nInput\nThe first line contains two integers K (1 ≤ K ≤ 750) and L (0 ≤ L ≤ 109), indicating respectively how many keys are there on your keyboard and the latency margin error given by your keylogger. The next K lines contain K integers each, representing the matrix T. The j-th integer on the i-th line is Ti,j (1 ≤ Ti,j ≤ 109 for i = 1,2,...,K and j = 1,2,...,K). Recall that Ti,j indicates how long it takes, on average, for you to press the key j right after having pressed the key i, and that each row on T is ordered non-decreasingly (Ti,j ≤ Ti,j+1 for i = 1,2,...,K and j = 1,2,...,K − 1). The next line contains an integer N (2 ≤ N ≤ 104), representing the length of your password. The final line contains N −1 integers P1,P2,...,PN−1 (1 ≤ Pi ≤ 109 for i = 1,2,...,N − 1), denoting the delta time between each consecutive key presses from your password.\nOutput\nOutput a single line with an integer indicating how many different sequences of keys are compatible with the information you have. Because this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "4 0\n1 1 3 5\n2 4 4 10\n1 1 1 8\n5 6 7 8\n5\n2 3 8 5",
        "1"
      ],
      [
        "3 3\n9 10 15\n9 13 16\n3 5 6\n3\n10 5",
        "0"
      ],
      [
        "5 1\n1 5 6 8 10\n1 2 4 5 5\n5 5 5 6 8\n3 3 3 4 5\n1 1 3 4 5\n4\n1 3 7",
        "4"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Cristhian Bonilha, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Non-Integer Donuts",
    "text": "Neil is a very important lawyer with a very important bank account. Since Neil is such a successful lawyer with many clients, he deposits money to his account every single morning.\nAfter going to the bank and depositing money, Neil goes to work. And there lies Neil’s great weakness: a donut shop. You see, Neil is a recovering donut addict, and although he hasn’t eaten a donut in years, he can’t help but wonder how many $1.00 donuts he could buy with the money in his account if he were to relapse.\nHaving $5.00 in his account means 5 donuts Neil could have, but what about $4.50? Well, that is more than 4 donuts for sure, but definitely less than 5. How would one even buy a non-integer amount of donuts? That concept confuses Neil, so every time his account balance is not an integer, he stops to ponder the nature of non-integer donuts and ends up being late to work.\nNow Neil has been late too many times and is starting to worry he will lose his job. He wants to know how many times he will be late to work during the next N days, given his initial account balance and the amount of money he will deposit each day. Please answer this for him, or else Neil will start pondering again.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000), the number of days Neil is interested in. Each of the next N + 1 lines contains a string representing an amount of money. The first string is Neil’s account initial balance, while the following N strings are the amounts Neil will deposit to his account in the different days. Each string has the form $X.Y where X is a substring of length 1 or 2 indicating the whole money in the amount $X.Y , while Y is a substring of length exactly 2 denoting the cents in the amount $X.Y . Both X and Y are made of digits, at least one of them contains a non-zero digit, and X does not have leading zeros.\nOutput\nOutput a single line with an integer indicating how many times Neil will be late to work during the following N days.",
    "samples": [
      [
        "1\n$1.57\n$3.14",
        "1"
      ],
      [
        "4\n$1.00\n$0.01\n$0.99\n$10.00\n$98.76",
        "2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "N",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Fascinating Partitions",
    "text": "A subarray of an array is a contiguous portion of the array. A partition of an array into subarrays is a collection of subarrays that cover all the array without overlaps (each element in the array belongs to exactly one subarray). For instance, if A = [3,1,4,1,5] is an array, [3,1,4] and [1,5] form a partition of A into subarrays, while [3,4,5] is not a subarray of A.\nGiven an integer array and a partition of the array into non-empty subarrays, we define the cost of each subarray as its maximum element, and the cost of the whole partition as the sum of the costs of the subarrays.\nAs an example, consider the array [3,5,7,1,2,4]. The partition formed by the subarrays [3,5], [7] and [1,2,4] has cost 5 + 7 + 4 = 16, while the partition formed by the subarrays [3], [5,7,1] and [2,4] has cost 3 + 7 + 4 = 14. Both partitions are formed by k = 3 subarrays, but they have different costs.\nOther partitions may have different costs.\nGiven an array A of N integers, and an integer k such that 1 ≤ k ≤ N, consider the set P(A,k) containing all the partitions of A into k non-empty subarrays. Can you compute the minimum cost over P(A,k)? Can you also compute the maximum cost? For each possible k? Okay, go ahead then.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 8000), the number of elements in the array A. The second line contains N integers A1,A2,...,AN (1 ≤ Ai ≤ 109 for i = 1,2,...,N) representing the array.\nOutput\nOutput N lines, such that the k-th line contains two integers indicating respectively the minimum and maximum costs over P(A,k).",
    "samples": [
      [
        "6\n3 5 7 1 2 4",
        "7 7\n10 12\n12 16\n14 19\n17 21\n22 22"
      ],
      [
        "4\n1 1 1 1",
        "1 1\n2 2\n3 3\n4 4"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Crisis at the Wedding",
    "text": "A famous football player just got married and is holding a party for his wedding guests. The guests are seated at tables around a circular pond in the garden of the player’s villa. Each table accommodates exactly the same number of guests, and consecutive tables around the pond are at a unit distance.\nAt the moment of the traditional Best Man toast a crisis erupted: although the total number of champagne glasses in the guests’ tables is exactly the number of guests, the glasses could have been distributed unevenly over the tables, with some tables having more glasses than guests and some other tables having fewer glasses than guests.\nA single waiter is available to fix the glasses distribution, collecting surplus glasses from tables and delivering them to tables needing glasses. The cost of each glass fix is the distance the waiter carries the glass until he delivers it to a table. The total cost for the operation is the sum of the costs for all glasses. The waiter can start at any table, but the player is superstitious and will only allow the waiter to walk in a strict clockwise or counterclockwise direction when fixing the glasses distribution. That is, once the waiter starts in one direction (clockwise or counterclockwise) he cannot change the direction.\nEarn an autographed jersey from the football player by helping him to calculate the smallest possible total cost for fixing the glasses distribution.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) indicating the number of tables around the circular pond. The second line contains N integers G1,G2,...,GN (0 ≤ Gi ≤ 1000 for i = 1,2,...,N), representing the number of glasses in the different tables. These numbers are given in clockwise order.\nIt is guaranteed that N divides (cid:80)N i=1 Gi.\nOutput\nOutput a single line with an integer indicating the smallest possible total cost for fixing the glasses distribution.",
    "samples": [
      [
        "4\n14 10 6 10",
        "8"
      ],
      [
        "6\n24 122 0 37 49 242",
        "454"
      ],
      [
        "6\n0 0 0 0 60 0",
        "150"
      ],
      [
        "1\n0",
        "0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Beautiful Mountains",
    "text": "A subarray of an array is a contiguous portion of the array. A partition of an array into subarrays is a collection of subarrays that cover all the array without overlaps (each element in the array belongs to exactly one subarray). For instance, if A = [3,1,4,1,5] is an array, [3,1,4] and [1,5] form a partition of A into subarrays, while [3,4,5] is not a subarray of A.\nThose are standard definitions that you may have read elsewhere. So, what’s new here? Well, a few more definitions follow.\nGiven an array A of integers, a subarray [Ai,Ai+1,...,Aj] of A is called a mountain if there exists an index k such that i < k < j, the subarray from Ai to Ak is non-decreasing, and the subarray from Ak to Aj is non-increasing. In simple words, the values in the subarray “go up” until index k and then “go down”, resembling a mountain. Note that a subarray with fewer than three elements cannot be a mountain.\nAn array of integers is called a beautiful mountain chain if it can be partitioned into mountains, each of them having the same number of elements, except for the last mountain which may have fewer elements.\nAs an example, [5,10,4,1,3,2] is a beautiful mountain chain because it can be partitioned into [5,10,4] and [1,3,2], being both mountains that have the same number of elements. Another example is the array [5,10,4,4,10,20,30,20,2,3,1], which is also a beautiful mountain chain because it can be partitioned into [5,10,4,4], [10,20,30,20] and [2,3,1].\nGiven an array of positive integers, where some values can be missing, determine if it is possible to complete the array with positive integers such that it becomes a beautiful mountain chain.\nInput\nThe first line contains an integer N (3 ≤ N ≤ 105) indicating the number of elements in the array.\nThe second line contains N integers A1,A2,...,AN (Ai = −1 or 1 ≤ Ai ≤ 109 for i = 1,2,...,N), where Ai = −1 indicates that the i-th element of the array needs to be determined, and a positive value is the actual i-th element of the array.\nOutput\nOutput a single line with the uppercase letter “Y” if it is possible to complete the array with positive integers such that it becomes a beautiful mountain chain, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "6\n5 10 4 1 3 2",
        "Y"
      ],
      [
        "11\n5 10 4 -1 10 20 30 20 2 3 -1",
        "Y"
      ],
      [
        "12\n1 3 2 5 -1 8 9 -1 7 -1 4 5",
        "N"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "André Amaral de Sousa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Almost Origami",
    "text": "You have a rectangular sheet of paper of height 1 and you want to locate any point at height H measured from the bottom border of the sheet. Since you do not know Haga’s theorems, you plan to repeat the following step. Assume you already located a point PL at height L on the left border of the sheet, and a point PR at height R on the right border of the sheet. Then you draw a line from the lower left corner of the sheet to PR, and another line from the lower right corner of the sheet to PL. If the crossing point is at height H, then you are done. Otherwise you draw a horizontal line that passes through the crossing point and go for another step.\nAs an example, consider the case H = 1/3. During the first step, the only possibility is choosing the upper corners of the sheet (that is, L = R = 1). So you draw the two diagonals of the sheet, and the crossing point is at height 1/2. Since H (cid:54)= 1/2, you draw a horizontal line that passes through the crossing point. This line provides two new points with known height 1/2 on the borders of the sheet, one on the left border and the other one on the right border. For the second step you can choose between using the original known points at height 1, or the points you have just located at height 1/2. That is, you can choose either L = 1 or L = 1/2 and of course R = 1 or R = 1/2. It is easy to see that if you choose L = R = 1/2, then the crossing point would be at height 1/4. However, if you choose L = 1/2 and R = 1, then the crossing point would be at the desired height H = 1/3. By symmetry, the same occurs if you choose L = 1 and R = 1/2.\nGiven a rational height H, you must determine a shortest sequence of heights on the borders of the sheet that allows locating a point at height H.\nAs the above example shows, only a point at height 1/2 can be located in a single step, and so a possible shortest sequence for H = 1/3 is S = (1,1,1/2,1). The first two heights must be chosen during the first step, and the remaining two heights must be chosen during the second step.\nInput\nThe input consists of a single line that contains two integers M and N (1 ≤ M < N ≤ 100) such that H = M/N is an irreducible fraction.\nOutput\nOutput a single line with the character “*” (asterisk) if a point at height H cannot be located by means of the described procedure. Otherwise, output a shortest sequence of heights S1,S2,...,SK that allows locating a point at height H, if they are chosen in the order they appear in the sequence. Height Si must be written in the i-th line using two integers Ai and Bi such that Si = Ai/Bi is an irreducible fraction (i = 1,2,...,K). It is guaranteed that when a point at height H can be located, it can be optimally located choosing only rational heights.",
    "samples": [
      [
        "1 3",
        "1 1\n1 1\n1 2\n1 1"
      ],
      [
        "1 3",
        "1 1\n1 1\n1 1\n1 2"
      ],
      [
        "3 4",
        "*"
      ],
      [
        "1 4",
        "1 1\n1 1\n1 2\n1 2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Excellent Views",
    "text": "Shiny City is a beautiful city, famous for three things: the fact that it only has one street, the fact that all buildings have different heights, and the breathtaking views from the top of said buildings.\nSince the pandemic began, the amount of tourists that visit Shiny City has gone down significantly.\nYou are determined to write an amazing blog to attract more tourists and impede financial doom to your lovely, but terribly inefficient city. Unfortunately, there is still some information missing from the blog.\nIn Shiny City there are N buildings, and the i-th building is identified by its position i. Going from building i to building j takes |i−j| minutes. Each building has a different height Hi, and the taller the building, the better the view from its top.\nIf you are at a certain building, it might be worth going to a different building that has a better view. Because of transportation costs, it’s never worth it to go to a building if there is a taller one that you can reach without using more time.\nFormally, we can say that going from building i to another building j is worth it if there is no k such that |i − k| ≤ |i − j| and Hj < Hk. Note that k may be equal to i.\nYou want to write on your blog, for each building, how many other buildings are worth going to from it. Please gather this information, otherwise Shiny City will be forever doomed.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105), the number of buildings in Shiny City. The second line contains N different integers H1,H2,...,HN (1 ≤ Hi ≤ 109 for i = 1,2,...,N), where Hi is the height of building i.\nOutput\nOutput a single line with N integers, such that the i-th of them represents the number of buildings worth going to from building i.",
    "samples": [
      [
        "10\n23 20 7 30 43 70 5 42 67 10",
        "3 4 3 2 1 0 1 2 1 2"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Job Allocator",
    "text": "The Infrastructure Consortium for Public Compute (ICPC) is a network of computers ran by volunteers from all around the world that share compute resources with one another. Contributors are able to plug and unplug their machines on the network, and also to run compute jobs on the network machines. With the ICPC, important projects that would otherwise have prohibitive infrastructure costs (like running online judges for programming competitions) become viable endeavors.\nAs great as it sounds on paper, for now, the ICPC is just a dream. To make it work, a key piece of software is missing: the job allocator. This is where you come in: the community is counting on you to make this important (but voluntary, of course) contribution.\nThe network is extremely dynamic: machines connect and disconnect all the time. The job allocator needs to keep track of the machines that are currently connected and which resources they share. There are several types of resources, such as CPU cores, GPUs, and SSD disks. One machine can share one or more resources, possibly more than one of the same type. Moreover, at any point in time, users can request machines to run compute jobs. For that, they specify a list of resources that a machine needs to run their job, and the job allocator has to determine how many of the currently connected machines have all the required resources to run the job. For example, for a job that needs one CPU core and two GPUs, the allocator would need to count how many machines have at least one CPU core, and two or more GPUs.\nYour task is to simply count how many connected machines satisfy each job’s resource requirements, since another volunteer took on the task of implementing the actual assignment of jobs to machines.\nThe whole ICPC community depends on you. Are you able to help? Input\nThe first line contains two integers N (1 ≤ N ≤ 105) and K (1 ≤ K ≤ 8), indicating respectively the number of network events that must be processed and the number of types of resources that are available on the ICPC. Events are described in chronological order in the next N lines, one event per line. There are three types of events.\nIf the event represents that a new machine is being connected to the network, the line contains the uppercase letter “C”, followed by an integer R (1 ≤ R ≤ 8) indicating the number of resources the machine is sharing, followed by R integers T1,T2,...,TR (1 ≤ Ti ≤ K for i = 1,2,...,R), describing the type of each of the shared resources. New machines are implicitly assigned unique sequential integer identifiers by the ICPC, starting at 1.\nWhen the event represents that a machine is being disconnected from the network, the line contains the uppercase letter “D”, followed by an integer indicating the identifier of the machine. It is guaranteed that this identifier corresponds to a valid connected machine.\nFinally, if the event represents that a user wants to run a job, the line contains the uppercase letter “J”, followed by an integer R (1 ≤ R ≤ 8) indicating the number of resources the job needs, followed by R integers T1,T2,...,TR (1 ≤ Ti ≤ K for i = 1,2,...,R), describing the type of each of the required resources. It is guaranteed that the input contains at least one event of this type.\nOutput\nOutput a line for each event of type “J”. The line must contain an integer indicating the number of machines that at the moment of the event are connected to the network and provide all the requested resources. Write the results in chronological order, that is, using the same order as the input.",
    "samples": [
      [
        "3 2\nC 3 1 1 2\nJ 2 1 2\nJ 2 2 2",
        "1\n0"
      ],
      [
        "11 3\nC 2 1 2\nJ 1 3\nC 3 1 2 3\nJ 1 3\nJ 1 1\nD 2\nJ 1 3\nJ 2 1 2\nJ 2 1 1\nD 1\nJ 1 2",
        "0\n1\n2\n0\n1\n0\n0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Impenetrable Wall",
    "text": "The president of Happyland needs to be reelected. She will do so by focusing her last efforts on one of the things the population of Happyland loves the most: children. She knows it is a great problem that children keep running away from the national orphanage, so she decided to rebuild the wall around it so the orphanage will be more secure and the population will be happier.\nThe area around which the wall must be built consists of the orphanage house, the orphanage gate, and a set of observation towers, left from Happyland’s glory days.\nThe president of Happyland determined, in a meeting with orphanage specialists, that a safe wall must be a polygon such that: 1. The house is strictly enclosed by the wall.\n2. The gate is a vertex of the wall and all other vertices are observation towers.\n3. All internal angles of vertices of the wall that are observation towers are strictly less than 180 degrees (note that this does not apply to the gate vertex).\n4. The whole wall is visible from the house. This means that for every point in the wall, the segment between the house and that point does not pass through the wall.\nA possible configuration of object as in Sample input 1. The point H represents the house, the point G is the gate, and all other points are observation towers.\nThe walls represented above violate one or more rules, so they are not valid walls.\nNow the president wants your help to know how many distinct safe walls can be built. Two walls are distinct if and only if there is an observation tower that is a vertex of one wall but not the other.\nThe walls represented above are all the distinct valid walls for Sample input 1.\nInput\nThe first line contains two integers Xh and Yh, the coordinates of the house. The next line contains two integers Xg and Yg, the coordinates of the gate. The next line contains an integer N (0 ≤ N ≤ 300), the number of observation towers. Each of the next N lines contains two integers Xt and Yt, the coordinates of a tower. All mentioned coordinates (X,Y ) are distinct and such that −109 ≤ X,Y ≤ 109.\nOutput\nOutput a single line with an integer indicating the number of distinct walls that follow the restric tions. Because this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "0 0\n-2 -1\n5\n2 1\n0 -4\n-1 2\n-4 0\n0 -2",
        "6"
      ],
      [
        "2 2\n2 0\n3\n-1 2\n4 7\n2 -2",
        "1"
      ],
      [
        "100 100\n-200 -120\n0",
        "0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Halting Wolf",
    "text": "Senoof loves programming languages, and the only thing he loves more than using them is creating new ones. His latest invention is the Wolf Programming Language, a very simple language consisting of only two types of instructions. They are numbered consecutively and written one under the other to make a program. Execution starts at instruction 1 and continues until the program gets stuck.\nThe two types of instructions are: • “K L1 L2 ··· LK” is a finite jump. Each value Li is an instruction number in the program, while K indicates how many of them are specified. When a finite jump is executed, one of the values Li is chosen, and the execution continues with instruction Li. But that’s not all! The program changes the finite jump instruction so as to consume the chosen value. If a program executes a finite jump without available values, it gets stuck and halts.\n• “* L” is an infinite jump. When it’s executed, the program continues with instruction L, leaving the infinite jump instruction unmodified.\nI know, Senoof is crazy, but it’s not that difficult. The picture below shows an example, where current instruction is indicated with a (cid:46) sign, and a consumed value is denoted with a (cid:116) sign. The program in (a) starts execution at instruction 1, which is a finite jump. Suppose that the second value is chosen, that is, execution continues with instruction 2 and this value is consumed in instruction 1, which yields the situation shown in (b). Since instruction 2 is an infinite jump to instruction 3, execution continues with this instruction, without consuming any value from instruction 2. Now imagine that from instruction 3 execution jumps to instruction 4, then to instruction 1, and then again to instruction 1, consuming the corresponding values. The situation at this point is shown in (c). As you can see the program gets stuck and halts, because there are no available values for jumping.\nAfter some playing around, Senoof noticed that programs written in Wolf may run forever, which does not imply that a given instruction can be executed infinitely many times. He kindly just sent us the following example of a program that may run forever, although instruction 1 can be executed at most twice.\nGiven a program written in Wolf, you must determine the maximum number of times that instruction 1 can be executed.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 100), the number of instructions the program has.\nEach of the next N lines describes an instruction. A finite jump is represented with a non-negative integer K followed by K integers L1,L2,...,LK (1 ≤ Li ≤ N for i = 1,2,...,K). On the other hand, an infinite jump is described with the character “*” (asterisk) followed by an integer L (1 ≤ L ≤ N).\nIt is guaranteed that the total amount of instructions mentioned in the finite jumps is at most 104.\nOutput\nOutput a single line with an integer indicating the maximum number of times instruction 1 can be executed, or the character “*” (asterisk) if instruction 1 can be executed infinitely many times.",
    "samples": [
      [
        "4\n2 1 2\n* 3\n3 4 3 4\n2 1 1",
        "3"
      ],
      [
        "4\n2 1 2\n* 4\n3 4 3 4\n* 2",
        "2"
      ],
      [
        "4\n2 2 3\n2 3 4\n1 1\n1 1",
        "3"
      ],
      [
        "3\n* 3\n* 1\n* 2",
        "*"
      ],
      [
        "1\n0",
        "1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Teodoro Freund, Argentina"
    },
    "hasImages": true
  },
  {
    "name": "Lola’s Schedule",
    "text": "Lola is an energetic girl with many interests, making each day an ocean of possibilities for her, full of exciting activities she is more than willing to participate in. Unfortunately, many of the activities Lola participates in happen in closed spaces, and because of that her vitamin D levels are slightly below ideal. To help, a doctor prescribed a vitamin supplement that she must take daily every X minutes.\nLola wrote an app to keep track of her activities. The main feature of the app is the scheduling of activities. Each activity consists of a title and its start and end times. The app also allows creating one-off reminders, consisting simply of a title and the moment she should receive a single notification, and recurring reminders, consisting of a title, the time for the first notification, and how often the reminder should repeat. After buying the supplement, Lola wants to add a recurring reminder to the app, that repeats every X minutes, to make sure she will get notified whenever it is time to take the supplement. Ideally, she prefers not to have to take the supplement while participating in an activity.\nWith such a busy schedule, she is having a hard time coming up with the ideal moment to start taking it.\nYour task is to help Lola to choose the ideal time T after buying the supplement to take it for the first time. A time T is said to be ideal if it is at most 8 hours past the moment when Lola bought the supplement, the number of times when she needs to take the supplement which conflicts with her activities is minimum, and there’s no other time earlier than T that would result in the same number of conflicts.\nFor clarity purposes, suppose that Lola needs to take the supplement every 30 minutes, bought it a certain day at 10:00, and has a single activity scheduled from 18:00 to 18:30 during that day. If she chooses to take the supplement for the first time immediately, she would take it at 10:00, 10:30, ..., 17:30, 18:00, 18:30, .... Thus, she’d have two conflicts with her activity (one at 18:00 and the other at 18:30).\nAlthough Lola cannot wait until her activity ends to take the supplement for the first time (because of the 8 hours limit), she can reduce the number of conflicts by waiting 7 hours and 59 minutes. In that way she would take the supplement at 17:59, 18:29, 18:59, ..., with a single conflict at 18:29.\nMuch better, isn’t it? However, this is not ideal, because there is an earlier time that also produces a single conflict, which is waiting 1 minute and taking the supplement for the first time at 10:01, with a single conflict at 18:01. As it’s not possible to completely avoid conflicts, the ideal time, in this case, is taking the supplement for the first time 1 minute after buying it.\nYou’ll be given a list of activities, exported from the app Lola wrote, containing information about all her activities starting after the time when she bought the supplement. Lola already did some pre processing of the data and each activity is described by the number of minutes from the time she bought the supplement and its duration in minutes.\nInput\nThe first line contains two integers N (1 ≤ N ≤ 104) and X (1 ≤ X ≤ 720), indicating that Lola has N upcoming activities exported from her app, and that she must take the supplement every X minutes. Each of the following N lines describes an activity with two integers S and D (1 ≤ S,D ≤ 105), representing that the activity starts S minutes after buying the supplement, and that its duration is D minutes. Activities do not overlap, that is, given any pair of different activities, one of them ends strictly before the other starts, or vice versa.\nOutput\nOutput a single line with two integers T and C, indicating respectively the ideal time for taking the supplement for the first time, expressed in minutes since buying the supplement, and the number of conflicts that taking the supplement at this time will lead to.",
    "samples": [
      [
        "1 30\n480 30",
        "1 1"
      ],
      [
        "5 30\n195 30\n120 45\n240 30\n30 60\n300 180",
        "451 1"
      ],
      [
        "4 720\n60 30\n150 75\n750 60\n1500 60",
        "0 0"
      ],
      [
        "2 720\n1 479\n482 298",
        "0 1"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "May I Add a Letter?",
    "text": "You have a string S of length N and you are asked to perform a sequence of Q updates of two types to S: • Append a given character to the end of S.\n• Delete the last character from S.\nInitially and after each update, you must calculate the number of distinct strings that occur at least twice as substrings of S.\nFor example, if S is initially “ABABC”, the answer is 3, as “A”, “B” and “AB” occur twice as substrings of S. If you are asked to append the character “C”, S will become “ABABCC” and the answer will be 4, as now “C” occurs twice too. If you are asked to append “C” again, S will be “ABABCCC” and the answer will be 5, as “CC” occurs twice now. If you are given a delete operation now, S will become “ABABCC” and the answer will be 4 again.\nInput\nThe first line contains a string S of length N (1 ≤ N ≤ 105), indicating the initial value of the string. Each character of S is an uppercase letter. The second line contains a string U of length Q (1 ≤ Q ≤ 105), representing the updates to perform. Each character of U is either an uppercase letter indicating that such a letter must be appended, or the character “-” (hyphen) denoting a delete operation. The updates must be applied in the order they appear in U. It is guaranteed that delete operations are not applied to empty strings.\nOutput\nOutput Q+1 lines, each line with an integer indicating the number of distinct strings that occur at least twice as substrings of S. Line 1 refers to the initial value of S, while line i + 1 refers to the value of S after applying the first i updates (i = 1,2,...,Q).",
    "samples": [
      [
        "ABABC\nCC-",
        "3\n4\n5\n4"
      ],
      [
        "ABAB\nA--CC",
        "3\n5\n3\n1\n1\n2"
      ],
      [
        "HAVE\nFUN",
        "0\n0\n0\n0"
      ]
    ],
    "source": {
      "year": "2020",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Desvio",
    "text": "Na cidade de Nlogonia, o prefeito finalmente vai cumprir sua promessa de campanha e irá repavimentar alguns trechos de ruas. Contudo, enquanto um trecho estiver sendo repavimentado, os carros não poderão usá-lo e portanto um desvio deve ser utilizado.\nCada trecho de rua conecta duas esquinas na cidade, tem comprimento positivo e pode ser percor rido em ambas as direções.\nUm desvio é um caminho alternativo que pode servir como um substituto temporário para o trecho de rua em obras. Mais especificamente, se o trecho que conecta as esquinas U e V estiver interditado, o desvio deve ser uma sequência de trechos de ruas que começa em U, termina em V , e não usa o trecho que conecta U diretamente com V . O objetivo é encontrar o desvio mais curto para cada trecho, de forma a minimizar o impacto enquanto as obras estiverem sendo feitas.\nComo Integrante do Centro de Pavimentação e Carros, você deve ajudar o prefeito a calcular qual é o comprimento do desvio mais curto, para cada trecho.\nEntrada\nA primeira linha contém dois inteiros, N e M (1 ≤ N ≤ 300), que representam, respectivamente, o número de esquinas e o número de trechos de ruas. Cada uma das M linhas seguintes contém três inteiros: U, V , e L (1 ≤ U ≤ N, 1 ≤ V ≤ N, U ̸= V , 1 ≤ L ≤ 106), que representam um trecho de mão dupla de comprimento L que liga as esquinas U e V . Nenhum trecho de rua é representado mais de uma vez.\nSaída\nImprima M linhas, onde cada linha contém um inteiro. O i-ésimo inteiro deve ser o comprimento do desvio mais curto para o i-ésimo trecho, ou -1 se não for possível fazer um desvio. A ordem dos trechos na saída deve ser a mesma ordem fornecida na entrada.",
    "samples": [
      [
        "4 5\n1 2 4\n1 3 8\n2 3 4\n4 1 2\n3 4 3",
        "9\n5\n9\n11\n10"
      ],
      [
        "2 1\n1 2 1",
        "-1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Grande Tratado da Bytelândia",
    "text": "A Grande Guerra da Bytelândia chegou ao fim. Os reinos restantes agora estão discutindo o Tratado de Divisão, que dividirá todas as terras do mundo entre eles. Este tratado se refere não apenas ao mundo conhecido, mas também a quaisquer territórios ainda não descobertos ou habitados, incluindo terra ou mar. Podemos assumir que o mundo é um plano infinito.\nCada reino no continente da Bytelândia tem uma única capital, e o Tratado de Divisão será baseado em suas localizações: ele declara que cada pedaço de terra pertence ao reino cuja capital é a mais próxima em um voo de pássaro (ou em linha reta). Em outras palavras: onde quer que você esteja no mundo, se C é a capital mais próxima de você, você estará no território do reino de C. Se houver um empate entre as distâncias de duas ou mais capitais, esse lugar estará na fronteira entre seus reinos.\nSob este tratado, alguns reinos podem ficar cercados por outros, enquanto outros reinos podem ficar com território ilimitado. Por isso, alguns monarcas estão contestando o tratado. Para informar essa discussão, eles exigem sua ajuda. Dadas as coordenadas das localizações de cada capital no continente da Bytelândia, você deve descobrir quais reinos teriam territórios infinitos sob o Tratado de Divisão.\nEntrada\nA primeira linha da entrada contém um único inteiro N (2 ≤ N ≤ 105), o número de reinos.\nCada reino é identificado por um número inteiro único entre 1 e N. Cada uma das N linhas seguintes contém dois inteiros X e Y (0 ≤ X,Y ≤ 104), as coordenadas 2D da localização da capital de um reino. As capitais são dadas em ordem crescente de identificador do reino, não há duas capitais com a mesma localização, e você pode assumir que toda capital tem tamanho insignificante.\nSaída\nImprima uma única linha com uma lista de inteiros separados por espaço em ordem crescente: os identificadores dos reinos que teriam territórios infinitos sob o Tratado de Divisão descrito. É garantido que sempre haverá pelo menos um reino assim.",
    "samples": [
      [
        "4\n3 2\n1 5\n3 6\n3 5",
        "1 2 3 4"
      ],
      [
        "6\n2 1\n3 3\n1 4\n4 5\n6 3\n4 3",
        "1 3 4 5"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "k pra Mais, k pra Menos",
    "text": "A vida daquele que estuda ciência da computação nem sempre é tão fácil quanto parece. Alguns dias você pode estar implementando um algoritmo revolucionário, mas em outros você acaba relendo o mesmo livro pela décima vez. Mas a todo momento estamos buscando a mesma coisa: otimizar e automatizar tarefas. Neste caso, um professor está precisando da sua ajuda para orientar seus alunos para a próxima prova. Na opinião do professor, não é fácil decidir quanto tempo eles devem passar estudando tópicos téoricos e quanto tempo eles devem passar implementando algoritmos.\nEssa não é a primeira vez que o professor leciona essa matéria, então a quantidade de dados disponíveis é tão grande que ele foi capaz de criar dois polinômios para descrever o desempenho final de cada aluno. Se o aluno gastar x unidades do seu tempo estudando teoria, sua nota aumentará em t(x). Se o aluno gastar x unidades do seu tempo implementando algoritmos, sua nota aumentará em p(x). De tal modo que o aluno que gastar a mesma quantidade x de tempo em cada uma das áreas terá a nota total t(x) + p(x).\nAcontece que recentemente um dos estudantes vem se destacando de forma imprevisível. E ele não esconde sua técnica de ninguém: “eu estudo muito mais teoria do que prática!”. O professor em questão acha que isso é uma grande mentira e, para confirmar sua suspeita, ele decidiu estimar as notas dos alunos se eles sempre estudassem mais teoria do que prática (ou mais prática do que teoria).\nVocê pode computar o polinômio q(x) = t(x + K) + p(x − K)? Ele será capaz de descrever a nota de todos os alunos se eles mudarem sua estratégia de estudo.\nEntrada\nA entrada consiste em três linhas. Na primeira, estão dois inteiros: N, representando o grau dos polinômios t e p (1 ≤ N ≤ 105) e K (−105 ≤ K ≤ 105). Já a segunda linha contém os N + 1 coeficientes de t e a terceira linha contém os N + 1 coeficientes de p. Os coeficientes são dados em ordem crescente de grau, com o último coeficiente da linha correspondendo ao termo de grau N, sendo todos não negativos de valor no máximo 106.\nSaída\nSeu programa deve escrever N + 1 inteiros, os coeficientes do polinômio q(x) em ordem crescente de grau, módulo 998244353.",
    "samples": [
      [
        "1 2\n1 2\n0 1",
        "3 3"
      ],
      [
        "2 0\n1 2 3\n4 5 6",
        "5 7 9"
      ],
      [
        "2 -1\n3 3 3\n1 0 0",
        "4 998244350 3"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Férias Cansativas",
    "text": "William está planejando suas próximas férias. Um tema recorrente em todas as suas férias é a neces sidade de lidar com o cansaço. Alguns dias ele nem aproveita muito, pois depois de várias atividades o cansaço começa a ser maior do que ele consegue suportar.\nDesta vez, William teve uma ideia. Ele vai estimar o impacto de cada uma das atividades de turismo em sua disposição. Ele notou que algumas das atividades de férias, como esportes e caminhadas, são cansativas, consumindo sua disposição, enquanto outras atividades, como peças de teatro e musicais, são revigorantes, recuperando sua disposição.\nMais precisamente, William começa com D unidades de disposição e separa suas atividades em dois grupos: C atividades cansativas e R atividades revigorantes. Cada atividade cansativa requer uma certa quantidade de disposição e, portanto, consome tal quantidade, quando realizada. Cada atividade revigorante lhe fornece uma certa quantidade de disposição, quando realizada. Além disso, ele ordena as atividades de cada um dos grupos segundo suas preferências, pois há atividades que ele está mais ansioso para realizar. Note que atividades dos dois conjuntos podem ser intercaladas, mas William nunca fará uma atividade de um grupo sem ter feito todas as anteriores, pois isto violaria suas preferências.\nAo longo de suas férias, ao decidir qual atividade realizar em seguida, ele escolherá a primeira atividade cansativa ainda não realizada, se tiver disposição suficiente para fazê-la. Caso contrário, ele realizará a próxima atividade revigorante ainda não realizada, se ainda houver, recuperando uma certa quantidade de disposição. Naturalmente, caso não haja mais atividades cansativas remanescentes em algum momento, ele poderá simplesmente realizar todas as atividades revigorantes restantes.\nAgora, tendo em vista este processo, ele pediu sua ajuda para determinar quantas atividades (incluindo cansativas e revigorantes) ele conseguirá realizar.\nEntrada\nA primeira linha da entrada contém 3 inteiros, D, C e R, indicando respectivamente a quantidade de disposição inicial, o número de atividades cansativas e o número de atividades revigorantes (1 ≤ D ≤ 105, 1 ≤ C ≤ 104 e 1 ≤ R ≤ 104). Cada uma das C linhas seguintes contém um inteiro Ci (1 ≤ Ci ≤ 105 para 1 ≤ i ≤ C), indicando o consumo de disposição para uma atividade cansativa, em ordem de preferência. Finalmente, cada uma das R linhas seguintes contém um inteiro Ri (1 ≤ Ri ≤ 105 para 1 ≤ i ≤ R), indicando o retorno de disposição para uma atividade revigorante, em ordem de preferência.\nSaída\nImprima uma única linha contendo um único inteiro, o número total de atividades (incluindo cansativas e revigorantes) que William conseguirá realizar.",
    "samples": [
      [
        "40 3 3\n30\n20\n10\n5\n5\n5",
        "5"
      ],
      [
        "40 2 2\n60\n80\n5\n10",
        "2"
      ],
      [
        "100 3 1\n60\n60\n50\n10",
        "2"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Caminhada na Montanha",
    "text": "Finalmente acabaram as provas e é chegada a hora de dar uma pausa na trabalheira da faculdade para umas merecidas férias. Com suas malas arrumadas, você partiu em uma aventura para explorar uma belíssima montanha da sua região – um passeio que você tem sonhado fazer há anos e que finalmente se torna realidade.\nAlém de bela, a majestosa montanha é gigantesca e oferece diversas trilhas a seus visitantes.\nContando com N marcos, cada um unicamente identificado por um número entre 1 e N a montanha possui N − 1 caminhos entre os marcos. Essas passagens garantem uma travessia tranquila de um marco a outro, de tal forma que toda a montanha está conectada.\nA cada marco i está associado um valor vi; esse número reflete o número de curtidas que uma foto tirada nele terá na sua rede social favorita. Quase explodindo de entusiasmo, você decidiu adicionar uma nova camada à sua jornada por meio do “desafio do hype”, permitindo que seus seguidores vivenciem sua aventura na mesma ordem que você. Nesse desafio, seu objetivo é, no mínimo, incrível: tirar e postar fotos de tal maneira que cada nova foto postada terá mais curtidas que a anterior.\nAs regras do desafio essencialmente ditam o desenrolar da sua jornada da seguinte maneira: 1. Sua trilha começa no marco de índice 1.\n2. Seguindo apenas os caminhos já disponíveis entre os marcos, você se move apenas em frente, não podendo passar por um marco mais de uma vez.\n3. A cada marco visitado, você pode tirar uma foto e imediatamente postar em sua rede social, ou não tirar nenhuma foto.\nSendo uma pessoa muito sábia, você já reparou que há muitas possíveis rotas e resultados para o desafio. Especificamente, para cada marco i, você gostaria de determinar o maior número de fotos que podem ser postadas se você iniciar sua jornada no marco 1 e encerrar no marco i (sem necessariamente tirar uma foto no marco i). Lembre-se, uma foto só pode ser postada se ela tiver mais curtidas que a foto anterior! Entrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 105), que representa o número de marcos na montanha. A segunda linha contém N − 1 inteiros p2,p3,...,pN (1 ≤ pi ≤ N), onde pi indica que existe um caminho entre os marcos i e pi. A terceira linha contém N inteiros v1,v2,...,vN (1 ≤ vi ≤ 109), onde vi representa o número de curtidas da foto do i-ésimo marco.\nSaída\nImprima uma única linha com N − 1 inteiros, onde o i-ésimo inteiro representa o maior número de fotos que você pode postar se você iniciar sua caminhada no marco 1 e terminar no marco (i+1).",
    "samples": [
      [
        "5\n1 1 3 3\n5 7 7 6 8",
        "2 2 2 3"
      ],
      [
        "5\n3 1 3 1\n5 4 7 6 5",
        "2 2 2 1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Baralho Embaralhado",
    "text": "Um embaralhamento justo é uma forma de rearranjar N cartas de um baralho disposto horizontalmente da esquerda para a direita. Nesse embaralhamento, as cartas são inicialmente dividas em duas partes contíguas de tamanhos possivelmente diferentes em que uma delas pode ter até mesmo zero cartas! Denotemos por L e R as partes da esquerda e direita, respectivamente. As cartas de L são, então, combinadas com as cartas de R, de tal forma que a ordem relativa entre as cartas de cada partição seja mantida.\nVocê é apresentado à uma disposição final das cartas e deve descobrir qual a quantidade mínima de embaralhamentos justos que devem ser realizados no baralho inicial para que ele chegue a este estado.\nInicialmente, as cartas do baralho podem ser vistas como a sequencia 1 2 ... N.\nPor exemplo, começando com a sequência 1 2 3 4 5 e realizando um embaralhamento justo com L = 1 2 e R = 3 4 5, podemos obter as seguintes permutações: • 1 3 2 4 5 • 1 3 4 2 5 • 3 4 5 1 2 • 1 2 3 4 5 • etc Cada uma das permutações acima representa um possível resultado do embaralhamento justo. Note que 1 3 2 5 4 não é uma embaralhamento possível pois as ordens relativas das cartas 4 e 5 de R não é preservada.\nAssuma que o resultado do primeiro embaralhamento é 1 3 2 4 5. Se fizermos um segundo embaralhamento justo nele, podemos particionar o baralho em L = 1 3 2 4, R = 5, e combinar ambas para obter a permutação 1 3 2 5 4.\nEntrada\nA primeira linha contém um inteiro N(1 ≤ N ≤ 106), o número de cartas no baralho. A segunda linha contém uma permutação de números inteiros de 1 a N descrevendo a disposição final das cartas.\nSaída\nImprima um único inteiro K, que representa o menor número de embaralhamentos justos ne cessários para obter a permutação dada.",
    "samples": [
      [
        "5\n3 4 5 1 2",
        "1"
      ],
      [
        "10\n1 6 5 2 10 3 4 8 7 9",
        "3"
      ],
      [
        "5\n5 4 2 3 1",
        "2"
      ],
      [
        "8\n1 6 2 3 7 8 4 5",
        "1"
      ],
      [
        "5\n1 2 3 4 5",
        "0"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Altura Mínima",
    "text": "Carlitos é um entusiasta de aventuras com um amor insaciável por parques de diversões. Apesar da sua paixão vibrante, Carlitos enfrenta um desafio único: a sua estatura limitada. Enquanto planeja ansiosamente sua aventura de fim de semana, ele percebe que suas limitações verticais podem atrapa lhar sua experiência no parque de diversões. Não se trata apenas de escolher um parque; trata-se de encontrar um onde ele possa aproveitar a emoção dos brinquedos.\nImagine o caleidoscópio de cores, as risadas jubilosas e a adrenalina dos passeios. Carlitos sempre foi atraído pela energia dos parques de diversões. Com o fim de semana se aproximando, ele se debruça sobre os folhetos do parque, estudando os requisitos de altura de cada passeio. O objetivo dele é maximizar sua diversão, e é aí que você entra.\nSua tarefa é ajudar Carlitos a determinar o número de passeios que ele pode desfrutar em um parque específico. Considerando sua altura e os requisitos mínimos de altura de cada passeio, oriente o a aproveitar ao máximo sua aventura no parque de diversões.\nEntrada\nA primeira linha contém dois números inteiros, N e H (1 ≤ N ≤ 6 e 90 ≤ H ≤ 200), que represen tam a quantidade de brinquedos em um parque e a altura de Carlitos em centímetros, respectivamente.\nNa segunda linha da entrada, serão fornecidas as alturas mínimas A1,...,AN (90 ≤ Ai ≤ 200) de cada um dos brinquedos do parque.\nSaída\nSeu programa deve imprimir uma única linha contendo a quantidade de brinquedos nos quais Carlitos pode ir, ou seja, a quantidade de brinquedos para os quais a altura de Carlitos é pelo menos tão grande quanto a altura mínima necessária.",
    "samples": [
      [
        "1 100\n100",
        "1"
      ],
      [
        "6 120\n200 90 100 123 120 169",
        "3"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Extraindo Pólen",
    "text": "É chegada a primavera, dando início a mais uma temporada de trabalho intenso na Sociedade das aBelhas de Chapecó (SBC)! No jardim da SBC, N lindas flores floresceram, cada uma com uma certa quantidade de grãos de pólen, que serão coletados pelas árduas trabalhadoras da sociedade. Para manter o ambiente de trabalho seguro, a SBC tem regras muito estritas para a coleta do pólen, sendo elas: 1. Quando uma abelha visita uma flor, ela deve coletar uma quantidade de pólen igual à soma dos dígitos do total de pólen atualmente naquela flor. Por exemplo, se uma flor tem 123 grãos de pólen, a abelha que a visitar deve coletar 1+2+3 = 6 grãos, deixando a flor com 123−6 = 117 grãos. Se a flor tem 201 grãos, a abelha coletará 2 + 0 + 1 = 3 grãos, deixando a flor com 201 − 3 = 198 grãos de pólen.\n2. Todas as abelhas devem formar uma fila no início do dia; aquela que estiver na primera posição da mesma deve coletar pólen de alguma flor com o maior total de pólen. Se a abelha visitar um flor com 0 grãos, ela coleta zero grãos de pólen. Após coletar o pólen de uma flor, a abelha encerra seu turno de trabalho e volta para a colmeia.\nA abelha Gertrude achou essas regras muito estranhas e procurou a sua ajuda para saber quanto pólen ela irá coletar no seu turno. Gertrude tem uma visão incrível e descobriu que atualmente está na K-ésima posição da fila.\nEntrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 106) e K (1 ≤ K ≤ 109), que representam o número de flores e a posição de Gertrude na fila, respectivamente. A segunda linha contém N inteiros, onde o i-ésimo inteiro Fi (1 ≤ Fi ≤ 106 para 1 ≤ i ≤ N) denota a quantidade inicial de pólen da i-ésima flor.\nSaída\nImprima um único inteiro Q, que representa a quantidade de pólen que será coletada por Gertrude.\n  Explicação do exemplo 1: A primeira abelha coletará o pólen da primeira flor, deixando-a com 22 − (2 + 2) = 18 grãos restantes. A segunda abelha também coletará da primeira flor, deixando-a com 18 − (1 + 8) = 9 grãos restante. Por fim, Gertrude, a terceira abelha da fila, irá coletar pólen da segunda flor, coletando um total de 1 + 5 = 6 grãos, que será a resposta para este caso de teste.",
    "samples": [
      [
        "5 3\n22 15 7 2 1",
        "6"
      ],
      [
        "3 10\n21 21 21",
        "0"
      ],
      [
        "3 9\n21 21 21",
        "9"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de Vôlei",
    "text": "Está tudo pronto para a grande final do super voleibol nos Jogos Olímpicos, e a tensão é tamanha que pode ser cortada com uma faca! Ricardão, o treinador de um dos times finalistas, está cuida dosamente posicionando seus jogadores para ter uma vantagem estratégica. Porém, ainda resta uma preocupação crescente: a de que algumas regiões da quadra não estejam cobertas por seus jogadores, o que necessitaria de pulos laterais muito longos e cansativos para que um jogador chegasse na bola antes que ela atingisse o chão.\nVamos ajudar Ricardão nessa partida decisiva! Dados uma quadra e o posicionamento dos joga dores, o treinador gostaria de saber qual o maior pulo que algum jogador deve fazer para interceptar um ataque adversário, garantindo assim que nenhum ponto da quadra fique vulnerável. Times profis sionais de super vôlei são muito bons, podendo facilmente determinar qual é o jogador mais próximo de onde a bola vai cair; apenas esse jogador tentará pular até lá, enquanto todos os outros ficarão imóveis.\nA quadra é um retângulo R de lados paralelos aos eixos do plano e definido por seus quatro vértices; por outro lado, os jogadores são modelados como um conjunto de N pontos dentro de R. Sua tarefa é determinar qual a menor distância d tal que, para qualquer ponto da quadra, exista pelo menos um jogador a distância no máximo d daquele ponto. Lembre-se: a borda da quadra também faz parte da quadra e deve ser coberta! Entrada\nAs primeiras quatro linhas definem os quatro vértices de R; ou seja, a i-ésima dessas linhas possui dois inteiros xi e yi (−105 ≤ xi,yi ≤ 105), que representam as coordenadas do i-ésimo vértice de R.\nA quinta linha contém um único inteiro N (1 ≤ N ≤ 105), que representa o número de jogadores.\nAs N linhas seguintes representam os jogadores, com a i-ésima linha tendo dois inteiros xi e yi (−105 ≤ xi,yi ≤ 105) que nos dão as coordenadas do i-ésimo jogador. É garantido que todo jogador está dentro da quadra.\nSaída\nImprima um único número d, que representa o pulo máximo que deve ser dado por algum jogador para que o time cubra toda a quadra. A saída será considerada correta se estiver com erro absoluto ou relativo de no máximo 10−5 da resposta correta.",
    "samples": [
      [
        "-1 -1\n1 -1\n1 1\n-1 1\n1\n0 0",
        "1.41421356237"
      ],
      [
        "1 -1\n-1 3\n1 3\n-1 -1\n3\n0 0\n1 3\n-1 3",
        "1.666666666667"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Investigando Zeros e Uns",
    "text": "Você se encontra em um misterioso mundo binário, onde um vetor de N dígitos binários aguarda pelo seu exame minucioso. Cada dígito é zero ou um, criando um padrão único em toda a paisagem. Sua missão é descobrir os padrões ocultos deste reino binário, desvendando o significado de subvetores com um número ímpar de uns.\nO vetor de dígitos é denotado como b1,b2,...,bN. Sua tarefa é embarcar em uma jornada para descobrir os subvetores enigmáticos – segmentos de dígitos consecutivos – e determinar a contagem de subvetores que abrigam um número ímpar de uns.\nAo percorrer essa paisagem binária, lembre-se de que um subvetor é definido por seus dígitos iniciais e finais. Por exemplo, na sequência [b1,b2,b3], os subvetores incluem [b1], [b2], [b3], [b1,b2], [b2,b3], e [b1,b2,b3].\nSua missão é projetar um algoritmo que determine o número total de subvetores contendo um número ímpar de uns nesta sequência binária. Não se esqueça de que a resposta pode não caber em um número inteiro de 32 bits.\nEntrada\nA primeira linha da entrada contém o inteiro N (1 ≤ N ≤ 105), representando o comprimento da sequência binária.\nA segunda linha contém os N dígitos binários b1,b2,...,bN (bi ∈ {0,1}), representando os elemen tos da sequência.\nSaída\nSeu programa deve imprimir uma linha contendo a quantidade de subvetores contendo uma quan tidade ímpar de uns.",
    "samples": [
      [
        "3\n0 1 0",
        "4"
      ],
      [
        "10\n1 0 0 1 1 0 1 1 1 0",
        "30"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Honroso Trabalhador",
    "text": "Rafael vive em uma sociedade igualitária ideal: todos os trabalhos oferecem um salário diário igual e você só precisa trabalhar em um emprego que seja de seu interesse. Infelizmente, nem essa utopia estava preparada para o fato de que Rafael não tem nenhuma habilidade.\nPara compensar essa situação, Rafael irá trabalhar apenas em empreitadas, onde empregadores em potencial não terão tempo de reparar no quão pouco qualificado Rafael é para o trabalho. Mesmo assim, dada sua desqualificação para esses trabalhos, ele precisa comprar cartas de recomendação falsas para ser empregado.\nRafael tem N trabalhos à sua disposição nos próximos dias. O i-ésimo trabalho começa no dia ℓi, termina no final do dia ri e paga exatamente S moedas de ouro por dia trabalhado. Rafael é realmente ruim de serviço, e não consegue trabalhar em dois empregos ao mesmo tempo; além disso, ele pode começar no emprego i apenas no dia ℓi mas, uma vez empregado, ele pode se demitir no final de cada dia, manténdo o dinheiro dos dias trabalhados (inclusive o último), sendo assim capaz de começar outro trabalho a partir do dia seguinte (mas não no mesmo dia de sua demissão). Rafael também sabe que ele precisa de ci moedas de ouro para comprar a carta de recomendação falsa para o trabalho i.\nCiente de suas inabilidades e da necessidade das cartas falsas, Rafael reservou um dinheiro e é sempre capaz de comprar quantas cartas forem necessárias, mesmo antes de começar em qualquer um dos N trabalhos.\nDadas as descrições dos trabalhos disponíveis, qual o lucro máximo que Rafael pode conseguir, levando em conta os custos para a compra das cartas falsas? Entrada\nA primeira linha contém dois inteiros N (1 ≤ N ≤ 106) e S (1 ≤ S ≤ 109), que representam o número de trabalhos disponíveis e o quanto cada um deles paga por dia trabalhado.\nCada uma das N linhas seguintes contém três inteiros: ℓi, ri e ci (1 ≤ ℓi ≤ ri ≤ 109, 1 ≤ ci ≤ 109), que representam a data de início, a data de fim, e o custo de se comprar uma carta de recomendação falsa para o trabalho i, respectivamente.\nSaída\nImprima um único inteiro que corresponde ao lucro máximo de Rafael após o fim de todos os trabalhos.\n  Explicação do exemplo 1: O ideal é começar o segundo trabalho e depois passar para o terceiro, totalizando 14×3−4−1 = 37 moedas de ouro.\n    Explicação do exemplo 3: Mesmo que ele tenha que tirar dinheiro de sua reserva para comprar a carta de recomendação falsa, ele ainda pode obter algum lucro.\n  Explicação do exemplo 4: Não vale a pena gastar dinheiro com uma carta de recomendação falsa para este trabalho.",
    "samples": [
      [
        "3 3\n1 5 10\n2 10 4\n5 15 1",
        "37"
      ],
      [
        "3 5\n1 1 3\n2 3 4\n3 3 1",
        "8"
      ],
      [
        "1 1000\n1 1 654",
        "346"
      ],
      [
        "1 5\n1 3 20",
        "0"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lexicograficamente Agradável",
    "text": "Na pitoresca vila da Lexiconia, viviam dois amigos, Lily e Ethan. Um dia, uma misteriosa carta chegou na casa dos amigos, fechada com uma encantadora insignia. Dentro do envelope, eles encontraram uma charada complexa demais até mesmo para as mentes mais sábias da vila.\nNessa charada, foram dados um inteiro K e uma string S contendo apenas letras minúsculas, que pode ser alterada de acordo com uma curiosa regra. A cada momento, os aldeões tem a liberdade de escolher umíndice i e, magicamente, os caracteres Si e Si+K trocam de posição. A charada é resolvida quando a string lexicograficamente mínima, usando apenas operações que respeitem a regra imposta pela charada, for encontrada.\nA vila ficou muito curiosa e empolgada com a charada. Lily e Ethan, sempre vorazes por aventura, decidiram mergulhar de cabeça nesse desafio. Porém, à medida que os dois observavam a string, eles notaram que, no caminho para o sucesso, haviam inúmeras trocas possíves.\nCom a string da charada vívida em suas mentes, os amigos se perguntaram: como navegar nesse gi gantesco mar de possibilidades e determinar a string lexicograficamente mínima? Cada troca realizada parecia como folhear um livro mágico, que revelaria novos segredos e mistérios.\nO tempo passou e até agora Lily e Ethan não terminaram de resolver essa charada. Será que você consegue ajudá-los? Entrada\nA primeira linha da entrada contém a string S (1 ≤ |S| ≤ 105). A segunda linha da entrada contém o inteiro K (1 ≤ K < |S|).\nSaída\nImprima uma única linha contendo a string lexicograficamente mínima possível de ser feita utili zando essas operações.",
    "samples": [
      [
        "zaaab\n4",
        "baaaz"
      ],
      [
        "njoab\n2",
        "banjo"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Malha Áerea",
    "text": "No reino de Quadradônia, o monarca quer rever todas as tarifas áereas. Para isso, pediu ao seu contador uma tabela com as propostas de novos preços.\nTodavia, o monarca estudou no Instituto de Computação e Programação de Chapecó (ICPC) e tem conhecimento suficiente para exigir coerência na tabela. A tabela é coerente se nenhuma rota com escalas é mais barata do que o voo direto.\nVerificada a coerência da tabela, o monarca gostaria de diminuir o número de voos diretos, sem contudo aumentar os custos das viagens.\nSeu problema é verificar a coerência da tabela e, sendo esta coerente, informar ao monarca quantas voos diretos podem ser eliminados sem encarecer o custo de qualquer viagem.\nEntrada\nA primeira linha contém N (1 ≤ N ≤ 100), que é o número de cidades da Quadradônia servidas por voos. Existem então mais N linhas, L1,L2,...,LN. A linha Li contém N inteiros, Ci1,Ci2,...,CiN, onde Cij é o custo do voo direto entre as cidades i e j. O custo de ida e de volta entre duas cidades é sempre igual, ou seja, Cij = Cji, para todos os pares {i,j} tais que 1 ≤ i ≤ N e 1 ≤ j ≤ N. Quando i = j, Cij = 0. Quando i ̸= j, 1 ≤ Cij ≤ 103.\nSaída\nImprima uma linha contendo um inteiro. Se a tabela for incoerente, o inteiro deve ser igual a -1. Se a tabela for coerente, o inteiro deve ser igual ao maior número de voos diretos que podem ser removidos sem aumento nos custos das viagens para os passageiros.",
    "samples": [
      [
        "3\n0 1 2\n1 0 1\n2 1 0",
        "1"
      ],
      [
        "3\n0 2 2\n2 0 2\n2 2 0",
        "0"
      ],
      [
        "3\n0 2 9\n2 0 2\n9 2 0",
        "-1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Italian Calzone & Pasta Corner",
    "text": "The Italian Calzone & Pasta Corner restaurant designed its menu having its dishes in a R × C two dimensional grid, keeping dishes that go well together nearby each other. To eat, you choose a starting cell, and then repeatedly move up, down, left, or right to any of the four adjacent cells, getting any dishes you move through. Moving into already visited cells is allowed, but you don’t get the same dish again.\nOne day, Pierre, a foreign customer, showed up really hungry, and with a very strict etiquette background. He has a very specific order in which the dishes must be eaten. For example an appetizer, then an entree, then a main dish, then a salad, etc. So he assigned a distinct integer from 1 to R × C to each dish in the menu grid, indicating the order in which he would eat the whole menu. Now he wants to choose and eat dishes following his order. Since the restaurant’s rules might prevent him from choosing the whole menu, he is fine with skipping some of the steps given by his order. Can you help him choose a meal with as many dishes as possible? Input\nThe first line contains two integers R and C (1 ≤ R,C ≤ 100), indicating that the menu grid has R rows and C columns. The next R lines contain C integers each, representing the menu grid. Each of these numbers is a distinct integer from 1 to R ×C assigned by Pierre to the corresponding dish in the menu grid.\nOutput\nOutput a single line with an integer indicating the maximum amount of dishes that Pierre can eat.",
    "samples": [
      [
        "1 5\n5 3 2 1 4",
        "5"
      ],
      [
        "1 5\n1 5 4 3 2",
        "4"
      ],
      [
        "3 3\n4 1 3\n8 5 9\n7 2 6",
        "6"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Daily Trips",
    "text": "Bella is a simple girl with a simple life: wake up, go to work, work, go home, rest, sleep, and repeat.\nBella commutes via bus, and it rains often in her city, so sometimes she needs an umbrella. However, the local weather forecast is unreliable, so Bella can’t be sure if it’s going to rain or not until right before she begins a trip. To avoid getting caught unprepared, Bella created a system.\nShe owns one or more umbrellas, keeping them at home or her workplace. Before any trip (from home to work, or vice versa), Bella looks outside to decide whether to bring an umbrella on that trip: • if it’s raining, she brings an umbrella; • otherwise, if there are currently no umbrellas at her destination (either work or home), she still brings an umbrella, just in case; • otherwise, she doesn’t bring an umbrella.\nThe second rule above is meant to prevent a situation where Bella needs an umbrella but has none at her current location (a bad memory she will talk about to anyone who asks). This guarantees that Bella will never catch rain and get sick.\nNow we need you to simulate Bella’s method for a certain period. The simulation starts with Bella at home. Each day she takes two bus trips: to and back from work. Given the starting numbers of umbrellas at her home and workplace, and the weather reports during N consecutive days, find out whether or not Bella brought an umbrella on each of her 2N bus trips.\nInput\nThe first line contains three integers N (1 ≤ N ≤ 104), H (1 ≤ H ≤ 100), and W (0 ≤ W ≤ 100), indicating respectively the duration of the simulation period in days, and the starting numbers of umbrellas at Bella’s home and workplace. For i = 1,2,...,N, the i-th of the next N lines contains two characters representing whether it rained on each trip of the i-th day. The first character refers to the first trip of the day (from home to work), while the second character refers to the second trip of the day (from work to home). Each character is the uppercase letter “Y” if it rained, and the uppercase letter “N” otherwise.\nOutput\nOutput N lines. For i = 1,2,...,N, the i-th line must contain two characters indicating whether Bella brought an umbrella on each trip of the i-th day. The first character refers to the first trip while the second character refers to the second trip. Each character must be the uppercase letter “Y” if Bella brought an umbrella, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "5 2 1\nY N\nN N\nY N\nN Y\nY Y",
        "Y N\nN N\nY Y\nN Y\nY Y"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Invested Money",
    "text": "Nowadays your programming skills are amazing, and you regularly receive lots of money for your work.\nUnfortunately, your financial skills did not evolve the same way. So each time you earn some money, you simply invest it in a bank in a 30 days time deposit with an automatic renewal clause. This means that 30 days after you invest the money, it is invested for 30 additional days, over and over again, until you inform the bank that you want to stop the renewal and get your money back. Time deposits cannot be created nor renewed during weekends; if a 30 days period ends on a weekend, the renewal occurs on the immediately following Monday.\nSince the bank holds almost all your money, you must wait until the closest renewal each time you want to buy anything but daily food. Today you decided to buy a new smartphone to replace your six-month-old device. Given the dates when you created each time deposit, you must determine the minimum number of days that you must wait to get some money from the bank.\nAs an example, suppose that today is Saturday and that you created five time deposits: a time deposit last Monday, another time deposit last Tuesday, yet another time deposit last Wednesday, and two time deposits yesterday. The first time deposit (Monday) would be renewed on a Wednesday after 25 days from today. The second time deposit (Tuesday) would be renewed on a Thursday after 26 days from today. The third time deposit (Wednesday) would be renewed on a Friday after 27 days from today. Finally, the last two time deposits (Friday) would be renewed on a Monday after 30 days from today, because the renewal on a Sunday is not allowed. Thus, in this case, you must wait 25 days to get some money from the bank.\nInput\nThe first line contains a string T and an integer N (1 ≤ N ≤ 105), indicating respectively today’s day of the week and the number of time deposits. The string is either “Mon”, “Tue”, “Wed”, “Thu”, “Fri”, “Sat”, or “Sun”, representing respectively that today is Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday. The second line contains N integers D1,D2,...,DN (0 ≤ Di ≤ 109 for i = 1,2,...,N), indicating the number of days elapsed since each time deposit was created. It is guaranteed that the time deposits were not created during weekends.\nOutput\nOutput a single line with an integer indicating the minimum number of days that you must wait to get some money from the bank.",
    "samples": [
      [
        "Sat 5\n5 4 3 1 1",
        "25"
      ],
      [
        "Sat 5\n3 1 4 1 5",
        "25"
      ],
      [
        "Thu 1\n0",
        "32"
      ],
      [
        "Thu 1\n30",
        "0"
      ],
      [
        "Fri 1\n31",
        "31"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Deciphering WordWhiz",
    "text": "WordWhiz is a popular word puzzle game that challenges players to guess a secret word within a limited number of attempts. The game uses a dictionary containing N words. Each word in this dictionary consists of five distinct lowercase letters.\nThe game begins with the player being presented with an empty grid, consisting of a number of rows. Each row allows a single guess. The player’s task is to fill rows with words contained in the dictionary until the secret word is found, or the player has used all available rows.\nAfter the player submits a guess, the game provides feedback by coloring the cells where the guess was written. The feedback consists of three colors: • Gray (“X”): The letter in the cell is not part of the secret word.\n• Yellow (“!”): The letter in the cell is part of the secret word but is in the wrong position.\n• Green (“*”): The letter in the cell is part of the secret word and is in the correct position.\nTo illustrate, let’s consider the scenario where the secret word is “hotel”, and the player submits “blast” as their guess. In this case, the first, third, and fourth cells would turn gray because “b”, “a”, and “s” are not present in the secret word “hotel”. The second and fifth cells, however, would turn yellow. This indicates that “l” and “t” are part of the secret word but appear in wrong positions: “l” should be in the fifth position instead of the second, while “t” should be in the third position instead of the fifth. This feedback would be represented by “X!XX!”.\nNow, if the player submits “heart” as their guess, the third and fourth cells would still turn gray, because “a” and “r” are not in “hotel”. The second and fifth cells would again turn yellow, because once more “t” is in the fifth position (instead of the third), and this time “e” is in the second position when it should be in the fourth. However, for this guess the first cell would turn green, indicating that “h” is the first letter in both the guess “heart” and the secret word “hotel”. This feedback would be represented by “*!XX!”.\nFinally, if the player submits “hotel” as their guess, all cells would turn green since this is the secret word. This feedback would be represented by “*****”.\nThe feedbacks above can be seen in the following picture.\nSome time ago, your company added a WordWhiz player on its website and now wants to enhance the game by adding functionality to display previous game sessions. However, only the feedback for each guess was stored, not the submitted words. This means that it might not be possible to accurately recover the guesses submitted in each session, and before investing any further effort, the company wants to analyze the recorded game sessions.\nGiven a dictionary of five-letter words, the secret word (included in the dictionary) and the feedback for a game session, your task is to determine how many words in the dictionary could have been submitted as each guess.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000) indicating the number of words in the dictionary.\nEach of the next N lines contains a string representing a word in the dictionary. All strings are different and each of them consists of five different lowercase letters. The first string is the secret word for the game session.\nThe next line contains an integer G (1 ≤ G ≤ 10) indicating the number of guesses during the game session.\nEach of the next G lines contains a five-character string representing the feedback for a guess. The feedback string contains only the characters “X”, “!” and “*”, indicating respec tively gray, yellow and green colors.\nIt is guaranteed that the input describes a valid game session.\nOutput\nOutput G lines, such that the i-th contains an integer indicating how many words in the dictionary could have been submitted on the i-th guess.\n  Explanation of sample 1: The only possibility is that the player submitted guesses as described in the statement.\n  Explanation of sample 2: The feedback when either “table” or “maple” is submitted as a guess is “X!X**” (because the secret word is “scale”). This means that for this game session, the player could have submitted either of these words for each attempt.",
    "samples": [
      [
        "6\nhotel\nweary\nheart\nblast\npilot\nvague\n3\nX!XX!\n*!XX!\n*****",
        "1\n1\n1"
      ],
      [
        "3\nscale\ntable\nmaple\n5\nX!X**\nX!X**\nX!X**\nX!X**\nX!X**",
        "2\n2\n2\n2\n2"
      ],
      [
        "4\nscale\ntable\nmaple\nsmile\n4\nX!X**\n*XX**\nX!X**\n*****",
        "2\n1\n2\n1"
      ],
      [
        "5\nlatin\nmrica\nthink\nsolve\ndebug\n1\n*****",
        "1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "GPS on a Flat Earth",
    "text": "On the day when aliens finally attacked humanity, nobody could have anticipated their weapon of choice. No nuclear weapons, meteors, lasers, or giant monsters. Instead, our planet was subjugated with the power of physics! Specifically, the aliens transformed Earth into a two-dimensional, flat surface, forever neu tering our space-faring capabilities. Although frustrated, humanity survived, and we resumed our lives as best as we could. This new two-dimensional existence requires many adjustments, including the use of GPS (Global Positioning System).\nGPS normally works by using radio waves to measure the Euclidean distances from the user to several reference points (satellites), and using these distances to calculate the user’s coordinates. However, the now flat Earth has two quirks we need to adapt to: • Without satellites in orbit, we need to use radio towers instead. Each radio tower now has coverage over the entire planet due to the flat surface.\n• Radio waves, which propagate differently in a two-dimensional world, require a shift from Euclidean to Manhattan distance for accurate calculations. Given any two points (X1,Y1) and (X2,Y2), the Manhattan distance between them is defined as |X1 − X2| + |Y1 − Y2|.\nYour task is to write software for these adapted GPS calculations. Given a list of locations of N reference radio towers and their respective Manhattan distances to the GPS user, your algorithm must provide a list of possible locations of the user. These potential user locations are limited to those that are exactly at the measured Manhattan distance from each reference radio tower. The GPS is still in the initial test phase, so the user’s true location is limited to integer coordinates.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) indicating the number of reference radio towers.\nEach of the next N lines describes a tower with three integers X, Y (−104 ≤ X,Y ≤ 104), and D (0 ≤ D ≤ 4 × 104), representing that a tower with coordinates (X,Y ) is at Manhattan distance D from the GPS user. No two towers have the same location. It is guaranteed that the input data is reliable, pinpointing a non-empty finite set of possible locations for a user with integer coordinates.\nOutput\nOutput several lines. Each line must contain a different pair of integers Xu and Yu indicating that (Xu,Yu) is a user location compatible with the input data. The lines must be sorted by non-decreasing Xu value, breaking ties by increasing Yu value.",
    "samples": [
      [
        "2\n1 1 5\n7 0 4",
        "4 -1\n5 2"
      ],
      [
        "2\n1 1 5\n5 5 3",
        "2 5\n3 4\n4 3\n5 2"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Mário da Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Keen on Order",
    "text": "Nloglonia is hosting a movie festival that spans N days. There are K distinct movies, and on each of the N days, one of them will be displayed. Each of the available movies might be displayed on multiple days or not displayed at all during the festival.\nThe festival schedule is given as an integer array V of size N, with 1 ≤ Vi ≤ K, indicating which movie will be shown on each day. Bob wants to watch all K movies, and he firmly believes that the order in which he watches them will significantly affect his experience. So now he wonders: is it true that for every order of the movies, he would be able to pick K days to visit the festival and watch those movies in that given order? More formally, is it true that every permutation of 1,2,...,K is a subsequence of V ? If this is not the case, Bob also wants you to find some permutation (any one) that is not.\nInput\nThe first line contains two integers N and K (1 ≤ N,K ≤ 300), indicating respectively the number of days the movie festival lasts and the number of movies available for display.\nThe second line contains N integers V1,V2,...,VN (1 ≤ Vi ≤ K for i = 1,2,...,N), indicating that the movie Vi will be displayed on day i.\nOutput\nOutput a single line with K integers showing a permutation of 1,2,...,K which is not a subsequence of V . If every permutation is a subsequence of V , output the character “*” (asterisk) instead.",
    "samples": [
      [
        "9 3\n1 2 3 1 2 3 1 2 3",
        "*"
      ],
      [
        "11 4\n1 2 3 4 2 3 3 2 4 1 4",
        "3 4 1 2"
      ],
      [
        "11 4\n1 2 3 4 2 3 3 2 4 1 4",
        "4 1 2 3"
      ],
      [
        "5 6\n6 5 4 3 2",
        "6 5 4 3 2 1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Forward and Backward",
    "text": "A distant planetary system has a single sun and N − 1 planets. Each planet is identified by a distinct integer from 2 to N. In planet b, numbers are represented using base b.\nA palindromic number is a number that remains the same when its digits are written both forward and backward. In this context, leading zeroes are not considered when determining if a number is palindromic.\nThe same number can be palindromic in one planet’s base but not in another. For instance, in base 10, the number 33 is palindromic. It is also palindromic in base 2 and base 32 but not in bases such as 3 or 33, since 3310 = 1000012 = 10203 = 1132 = 1033.\nThe inhabitants of this planetary system have a peculiar fondness for palindromic numbers and want to know which planets make the number N a palindromic number when represented in their base. Your task is to help them with this cosmic challenge.\nInput\nThe input consists of a single line that contains an integer N (2 ≤ N ≤ 1012) indicating the number to be checked for palindromic representation. N is given in base 10.\nOutput\nOutput a single line with an increasing list of integers in the interval [2,N], indicating the planets in which N is a palindromic number when expressed in the base of the planet’s identifier. Output\nthese integers in base 10. If N is not palindromic in any of the planets, output the character “*” (asterisk) instead.",
    "samples": [
      [
        "33",
        "2 10 32"
      ],
      [
        "3",
        "2"
      ],
      [
        "2",
        "*"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Candy Rush",
    "text": "It’s rush hour! You’ve called it a day at work, and you need to buy candies for all your family members before the mall closes.\nExclusivity and uniformity are characteristics highly valued by your family, and in order to impress them, you’ve come up with a plan. All the candies given to each family member should be from a single brand, and no other family member should receive candies from that same brand. Additionally, you don’t want to admit you love some more than others, so you want everyone to receive the same number of candies.\nThe mall has a store that sells candies from K different brands. Coincidentally, your family consists of exactly K members. This may seem too easy, but of course there’s a catch.\nThe store displays its candies aligned on a single shelf. You don’t have time to select candies individually; instead, you want to buy a group of contiguous candies to complete your task efficiently. This means that when you purchase any pair of candies, you must also buy all the candies located between them on the shelf.\nWhat is the maximum number of candies that you can buy? Input\nThe first line contains two integers N and K (1 ≤ N,K ≤ 4 × 105), indicating respectively the number of candies on the shelf and the number of family members. Candy brands are identified by distinct integers from 1 to K.\nThe second line contains N integers C1,C2,...,CN (1 ≤ Ci ≤ K for i = 1,2,...,N), denoting the brand of each candy on the shelf, in left-to-right order.\nOutput\nOutput a single line with an integer indicating the maximum number of candies that you can buy to your family. Recall that no family member can receive two different candy brands, and no candy brand can be purchased for two different family members. Additionally, each family member must receive the same number of candies, and the candies must be purchased as a contiguous block from the shelf.\n  Explanation of sample 1: Either buying from the first to the fourth candies or from the third to the sixth allows you to purchase two candies of each brand.\n  Explanation of sample 2: No contiguous block of candies has the same number of candies for brands 1, 2, and 3.\n  Explanation of sample 3: While the store is known for selling candies from K different brands, some brands might be out of stock.",
    "samples": [
      [
        "6 2\n2 2 1 1 2 2",
        "4"
      ],
      [
        "7 3\n2 1 2 1 2 2 3",
        "0"
      ],
      [
        "3 4\n3 4 2",
        "0"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Rafael Grandsire & Pedro Paniago, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Blackboard Game",
    "text": "Carlinhos and Equalizer are playing a game. The game begins with 3N elements, which are integer numbers, written on a blackboard. Then, for N rounds, the following two steps are repeated.\n1. Carlinhos, the first player, selects an unchosen element and marks it with a red circle.\n2. Equalizer, the second player, picks two unchosen elements, marks one of them with a blue square, and erases the other from the blackboard.\nAt the end of these rounds, the blackboard contains N red-marked elements and N blue marked elements, with no moves left. The game concludes with a clear winner: if the sum of the red-marked elements differs from the sum of the blue-marked elements, Carlinhos emerges victorious; otherwise, Equalizer takes the win.\nThe figure below depicts the only possible outcome for the first sample. In this case Equal izer wins for sure, no matter how they play both sums will be equal to 25.\nCarlinhos, feeling the game is imbalanced, seeks to determine whether he can secure a victory when both players play optimally. Can you help him with this task? Input\nThe first line contains an integer N (1 ≤ N ≤ 1000).\nThe second line contains 3N integers B1,B2,...,B3N (−105 ≤ Bi ≤ 105 for i = 1,2,...,3N), representing the numbers initially written on the blackboard.\nOutput\nOutput a single line with the uppercase letter “Y” if Carlinhos can win the game and the uppercase letter “N” otherwise, assuming both players play optimally.\n    Explanation of sample 2: Carlinhos wins no matter how he plays, since all subsets have distinct sums.\n  Explanation of sample 3: Carlinhos can win by picking the number 2. Notice that he would have lost if he picked a 3.",
    "samples": [
      [
        "5\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5",
        "N"
      ],
      [
        "2\n1 2 4 8 16 32",
        "Y"
      ],
      [
        "1\n2 3 3",
        "Y"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Analyzing Contracts",
    "text": "Doctor Kruskal is starting a tiberium trading business. They have N possible suppliers of tiberium, and many clients interested in receiving tiberium to run their own industries.\nCalendar days are numbered chronologically using positive integers, and each supplier is identified by a distinct integer from 1 to N. Supplier i can supply tiberium on any day from day Si onwards, but not on the days strictly before Si. They charge a price of Pi dollars per day for such a service. Since Kruskal is very smart, the list of suppliers contains only the best suppliers in the city. Besides, it is the case that Si < Si+1 and Pi > Pi+1 for i = 1,2,...,N − 1.\nKruskal’s system keeps a database of available clients. Initially, this database is empty and contains no clients. Clients will be arriving one by one, and each of them is immediately added to the database upon arrival. The j-th client is interested in receiving tiberium on any day up to day Ej inclusive. For each day that they receive tiberium, their industry will generate Rj dollars of gross revenue. Thus, if Kruskal matches supplier i to client j, the final profit of this whole operation after deducting the tiberium cost will be (Rj −Pi)×(Ej −Si +1), where Si ≤ Ej, as otherwise no tiberium could be provided.\nAt any moment, Kruskal’s system can quickly compute, for any particular supplier i, the optimal client among those in the database, so that the profit of the operation when matching the supplier and the client is maximized, and it can report such maximum profit. It might be the case that a positive profit for a supplier cannot be achieved with any of the available clients; in that case, the system reports a profit of zero.\nNotice that when Kruskal’s system is requested to compute the maximum profit for a given supplier, that supplier is matched with at most one of the available clients, and in that case, such a match has no effect at all on future operations. This means that both the supplier and the client can be considered again for future matchings.\nYour task is to implement Kruskal’s system.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 2 × 105) indicating the number of suppliers.\nThe i-th of the next N lines describes supplier i with two integers Si and Pi (1 ≤ Si,Pi ≤ 109), denoting respectively the start day and the price per day for the supplier. It is guaranteed that Si < Si+1 and Pi > Pi+1 for i = 1,2,...,N − 1.\nThe next line contains an integer Q (1 ≤ Q ≤ 2×105) representing the number of operations that must be processed. Operations are described in the next Q lines, in the order they are executed in the system, one operation per line. There are two types of operations.\nIf the operation adds a client to the database, the line contains the lowercase letter “c”, followed by two integers E and R (1 ≤ E,R ≤ 109), indicating respectively the end day and the gross revenue per day for the client.\nIf the operation requests to compute the maximum profit for a supplier, the line contains the lowercase letter “s”, followed by an integer I (1 ≤ I ≤ N) that identifies the supplier. It is guaranteed that the input contains at least one operation of this type.\nOutput\nOutput a line for each operation of type “s”. The line must contain an integer indicating the maximum possible profit when matching an available client with the given supplier. Write the results of the operations in the order they appear in the input.",
    "samples": [
      [
        "4\n2 8\n4 5\n7 3\n9 2\n11\ns 1\nc 10 10\ns 1\ns 2\ns 3\ns 4\nc 7 26\ns 2\ns 4\ns 3\ns 1",
        "0\n18\n35\n28\n16\n84\n16\n28\n108"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Agustín Santiago Gutiérrez, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Elevated Profits",
    "text": "Marina, a digital influencer who loves traveling the world, is embarking on a promotional tour for a women’s clothing brand called W2M (From Woman to Woman Marina). Marina’s journey takes her through N cities in Latin America, each with its unique charm, and identified with a distinct integer from 1 to N, called its popularity index.\nTo facilitate Marina’s travels, W2M has provided her with N − 1 transfers, connecting pairs of cities in a way that guarantees accessibility to all N cities. Marina can traverse these connections as many times as she pleases.\nMarina’s mission is to showcase the brand’s dresses in each of the N cities, with a twist.\nEach time she visits a city for the first time, she must select a dress she hasn’t worn before and capture the city’s essence in a social media post. Every new picture she shares attracts followers, creating anticipation for the next one. The anticipation value for her first picture is 1, and it increments by 1 for each subsequent picture.\nMarina can revisit any city as often as desired, but a new picture must only be posted on her initial visit to a city. Her goal is to maximize the profit of her tour, which is computed as the sum of the anticipation value of each picture multiplied by the popularity index of the city where the picture is taken. More precisely, let pi be the popularity index of the city where the i-th picture is taken. With this information, the profit can be calculated asNow, Marina seeks your assistance. Given that the tour has to start in city p1 = R, your task is to help Marina determine the maximum profit she can achieve by strategically planning the order of her city visits.\nInput\nThe first line contains two integers N (1 ≤ N ≤ 3 × 105) and R (1 ≤ R ≤ N), indicating respectively the number of cities and the initial city of the tour.\nEach of the next N − 1 lines contains two integers U and V (1 ≤ U,V ≤ N and U (cid:54)= V ), indicating that there is a transfer between cities U and V . It is guaranteed that it is possible to reach every city by using the transfers.\nOutput\nOutput a single line with an integer indicating the maximum profit Marina can achieve on her promotional tour.",
    "samples": [
      [
        "7 3\n3 5\n3 7\n5 1\n5 4\n7 2\n7 6",
        "121"
      ],
      [
        "1 1",
        "1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Journey of the Robber",
    "text": "Monopolis is a beautiful and wealthy country. Among its impressive features is the layout of the country, where N cities are interconnected by N − 1 roads of equal length, allowing to travel between any two cities.\nAnother unique feature of Monopolis is that each city has a single bank with a different amount of money. Thus, it is possible to assign a distinct number from 1 to N to each city, representing its wealth ranking relative to the other cities, with city 1 having the least money and city N having the most.\nRob is planning a “business trip” to Monopolis. Rob’s business is, in fact, robbing. Robbing banks, to be more precise. Rob is an ambitious robber and follows a particular modus operandi: he only targets banks with more money than the one he just robbed. Thus, after robbing in a city i, he moves to the closest city having more money. If there are multiple cities with more money than i at the same distance, he selects the one with the least money. If there’s no city richer than i, he remains in the same city and reflects on his actions.\nEven though Rob is very set on his modus operandi, he is still planning his business trip to Monopolis, and then he asks for your assistance. Rob wants to know for each city i which would be the next city to visit in case his first heist is at city i.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) representing the number of cities in Monopolis. Each city is identified by a distinct integer from 1 to N, in increasing order of wealth.\nEach of the next N − 1 lines contains two integers U and V (1 ≤ U,V ≤ N and U (cid:54)= V ), indicating that there is a two-way road between cities U and V . It is guaranteed that there is a path between each pair of cities using the given roads.\nOutput\nOutput a single line with N integers, such that the i-th of them indicates the next city Rob would visit in case his first heist is at city i.",
    "samples": [
      [
        "6\n1 6\n2 5\n4 5\n3 5\n5 6",
        "6 5 5 5 6 6"
      ],
      [
        "5\n5 1\n1 3\n3 2\n2 4",
        "3 3 4 5 5"
      ],
      [
        "1",
        "1"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Inversions",
    "text": "Every year, mathematicians and computer scientists from around the globe gather for the prestigious Inversion Counting Puzzle Contest (ICPC). For the next ICPC, the organizers had prepared the following challenge: given a string S consisting of lowercase letters, count the number of inversions in it. An inversion is a pair of indices i < j such that Si (the letter at position i) comes after Sj in the alphabet.\nHowever, just last month, a group of outstanding researchers devised a sophisticated algo rithm that can count the inversions in a string extremely fast. While this was great news for the advancement of science, it has been a nightmare for the ICPC staff, since their planned challenge is now obsolete.\nThis issue escalated to the head problem setter, who then presented a clever idea. Instead of simply receiving a string S, they should ask participants to repeat this string N times before counting the inversions. If the judges then set N to be large enough, at some point the algorithm proposed by the researchers will start to be too slow. Happy with this idea, the ICPC staff went ahead with organizing the next contest.\nUnfortunately, now the judges don’t know the answers to the input files anymore, and therefore can’t judge submissions! The ICPC has just kicked off, and participants are about to start submitting their solutions. Please help the judges by computing the answers, so that the ICPC can run smoothly.\nInput\nThe first line contains a string S (1 ≤ |S| ≤ 105), which is made of lowercase letters.\nThe second line contains an integer N (1 ≤ N ≤ 1012) indicating how many times the string S is to be repeated.\nOutput\nOutput a single line with an integer indicating the number of inversions in the string SN (S repeated N times). Because this number can be very large, output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "ba\n1",
        "1"
      ],
      [
        "ab\n3",
        "3"
      ],
      [
        "zkba\n1",
        "6"
      ],
      [
        "cab\n7",
        "77"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Gabriel Poesia, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Health in Hazard",
    "text": "In the frozen wilderness, a polar bear makes its home on a vast glacier, represented as a 2D plane. The coordinates of the bear’s den are (0,0). To be healthy, each time the bear wakes up in its den, it walks to any point at distance exactly D from the den (measured using Euclidean distance).\nWith the bear facing the challenges of a changing climate, a team of dedicated scientists and mathematicians has set out to assist. They have received a detailed report filled with predictions of the impending impact of global warming on the glacier in the coming days. The report contains the predictions in chronological order, and each of them is represented by an infinite line that corresponds to a melting event. After each prediction comes true, the line that represents it can no longer be crossed by the bear.\nInitially, the glacier is considered to be infinitely large in all directions, and the bear can roam freely. However, as the team of scientists and mathematicians, you understand the bear’s dilemma: according to the predictions, the glacier might eventually shrink in such a way that the bear can no longer be healthy. Your task is to calculate the earliest moment in which this will happen, that is, when no point at distance exactly D from the den can be reached by the bear.\nThe figure below depicts the first sample. The circumference contains the points at distance exactly D from the den. When just the first three predictions are considered (solid lines), the bear can still reach points in the circumference. Once the fourth prediction (dashed line) is also considered, no point in the circumference can be reached from the den.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 2 × 105) and a rational number D with at most five digits after the decimal point (1 ≤ D ≤ 106). The value N indicates the number of predictions, while D represents the distance from the den.\nEach of the next N lines describes a prediction with four integers X1, Y1, X2 and Y2 (−106 ≤ X1,Y1,X2,Y2 ≤ 106 and (X1,Y1) (cid:54)= (X2,Y2)), which define an infinite line in the plane passing through (X1,Y1) and (X2,Y2). Each prediction indicates that the corresponding line can no longer be crossed by the bear. Predictions are given in chronological order and they are identified by distinct integers from 1 to N, according to that order. It is guaranteed that no prediction defines a line passing through the den.\nOutput\nOutput a single line with an integer identifying the earliest prediction that indicates that no point at distance exactly D from the den can be reached by the bear. If this situation never occurs, output the character “*” (asterisk) instead. It is guaranteed that variations in the value of D within a range of ±10−5 from the value given in the input do not alter the output.",
    "samples": [
      [
        "5 4.321\n-2 -1 3 -2\n1 6 3 -2\n1 6 -2 -1\n-3 4 3 3\n-2 1 5 4",
        "4"
      ],
      [
        "5 2\n1 0 1 1\n-1 0 -1 -1\n3 1 1 3\n1 3 3 1\n0 4 4 0",
        "*"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Victor de Sousa Lamarca, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Latam++",
    "text": "The world does not have enough programming languages yet. To help with that, the Internal Committee for the Perfection of C (ICPC) is planning to build a brand new programming language: Latam++.\nIn Latam++, a variable name consists exclusively of one or more lowercase letters of the English alphabet. A valid expression is a “well-formed” string, expressing how to combine variables by using the four arithmetic binary operators “+”, “-”, “*” and “/”, possibly with parentheses.\nFormally, valid expressions are exactly those strings that can be produced by the following rules.\n• A variable name is a valid expression.\n• Surrounding any valid expression in parentheses produces another valid expression.\n• If A and B are valid expressions, then the concatenation AcB is a valid expression, where c is any of the four arithmetic binary operators “+”, “-”, “*” and “/”.\nThus, the following are all valid expressions: • a+b • a+b*(c+b) • atoms+boots*(charly+bob) • (((a)))*(bbasdsaqwe/a/a/a) On the contrary, the following are not valid expressions: • a+ • a+b(c+b) • atoms+boots*((charly+bob) • ((()))*(bbasdsaqwe/a/a/a) The language is far from complete, and it will likely take ICPC decades of debates until the first version of Latam++ is released. Meanwhile, we will focus only on a specific and very special feature of its compiler, called Automatic Valid Substring Expression Counting (AVSEC).\nAVSEC is an extremely useful feature, where the compiler reports the total number of substrings of a given string that are valid expressions. Your task is to implement AVSEC.\nFor counting purposes, two substrings are considered different if they start or end at different indexes, even if the corresponding strings are identical (that is, they are the same sequence of characters).\nInput\nThe input consists of a single line that contains a string S (1 ≤ |S| ≤ 2 × 105), which is made up of lowercase letters, opening or closing parenthesis, and the four characters “+”, “-”, “*” and “/”.\nOutput\nOutput a single line with an integer indicating the number of substrings of S that are valid expressions.\n  Explanation of sample 1: The seven substrings are “a”, “a+b”, “b” (third character), “(c+b)”, “c”, “c+b”, and “b” (seventh character).",
    "samples": [
      [
        "a+b(c+b)",
        "7"
      ],
      [
        "aa",
        "3"
      ],
      [
        "a-a",
        "3"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Agustín Santiago Gutiérrez, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Meeting Point",
    "text": "Your friend Pedro always gets very excited for group activities. In his excitement, he runs so fast to the meeting point that he gets tired before arriving. One day, you decided to gather data on this phenomenon and, surprisingly, noticed that he consistently gets tired exactly at the midpoint of his route. In other words, he gets tired when he has traveled half the distance he was going to travel.\nYour city has N crossroads identified by distinct integers from 1 to N, and M two-way roads.\nEach road has a length and connects a specific pair of crossroads, in such a way that there is a path in the city between every pair of crossroads. The distance between two crossroads is the length of a minimum path between those crossroads.\nPedro lives at crossroad P, and your group of friends decided to meet at crossroad G later today. After thinking for a while, you devised the following plan so that Pedro arrives on time.\nYou will tell him a misleading meeting point so that he gets tired exactly at G. To make this plan work, crossroad G must belong to every path that Pedro could possibly take while going from P to the misleading meeting point, and for each such path, Pedro must get tired exactly at G. Fortunately, you know that Pedro is a good planner and would never take a path longer than needed.\nNow you wonder, which crossroads would work as that misleading meeting point? Input\nThe first line contains two integers N (2 ≤ N ≤ 105) and M (1 ≤ M ≤ 105), indicating respectively the number of crossroads and the number of roads in the city. Each crossroad is identified by a distinct integer from 1 to N.\nThe second line contains two integers P and G (1 ≤ P,G ≤ N and P (cid:54)= G), denoting respectively the crossroad where Pedro lives and the correct meeting point.\nEach of the next M lines describes a road with three integers U, V and D (1 ≤ U,V ≤ N, U (cid:54)= V and 1 ≤ D ≤ 109), representing that there is a two-way road of length D between crossroads U and V .\nIt is guaranteed that there is a path between each pair of crossroads using the given roads, and there is at most one road between each pair of crossroads.\nOutput\nOutput a single line with an increasing list of integers indicating the crossroads that would work for your plan. If no crossroad would work, output the character “*” (asterisk) instead.",
    "samples": [
      [
        "4 5\n1 3\n1 3 1\n2 1 3\n2 4 3\n4 3 1\n3 2 1",
        "2 4"
      ],
      [
        "4 5\n1 3\n1 3 1\n2 1 2\n2 4 3\n4 3 1\n3 2 1",
        "4"
      ],
      [
        "3 2\n1 2\n1 2 100000\n2 3 99999",
        "*"
      ],
      [
        "4 4\n4 3\n3 4 1\n4 1 1\n1 2 1\n2 3 1",
        "*"
      ]
    ],
    "source": {
      "year": "2023",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Daniel Bossle, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Fechem as Portas!",
    "text": "Madame Beauvoir possui uma mansão onde ela recebe todos os seus descendentes (netos e bisnetos) durante as férias. Sua mansão possui exatamente N quartos (cada quarto é numerado de 1 a N), onde N é também a quantidade de netos e bisnetos (cada descendente é também numerado de 1 a N).\nComo toda criança, os descendentes de Mme. Beauvoir são bastante travessos. Todo dia é a mesma confusão: eles acordam de manhã cedo antes dela e se encontram no grande jardim. Cada descendente, um de cada vez, entra na mansão e troca o estado das portas dos quartos cujos números são múltiplos do seu identificador. Trocar o estado de uma porta significa fechar uma porta que estava aberta ou abrir uma porta que estava fechada. Por exemplo, o descendente cujo identificador é igual a 15 vai trocar o estado das portas 15, 30, 45, etc.\nConsiderando que todas as portas estão inicialmente fechadas (todos os descendentes fecham as portas antes de descer para o jardim) e que cada descendente entra exatamente uma vez na mansão (a confusão é tão grande que não sabemos em que ordem), quais portas estarão abertas após a entrada de todos os descendentes na mansão? Entrada\nA única linha da entrada contém apenas um inteiro N (1 ≤ N ≤ 25 × 106), indicando o número de portas e descendentes.\nSaída\nSeu programa deve produzir uma única linha, contendo uma sequ¨ência crescente de números cor respondente aos identificadores dos quartos cujas portas estarão abertas após a entrada de todos os descendentes na mansão.",
    "samples": [
      [
        "1",
        "1"
      ],
      [
        "2",
        "1"
      ],
      [
        "3",
        "1"
      ],
      [
        "4",
        "1 4"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Esquerda, Volver!",
    "text": "Este ano o sargento está tendo mais trabalho do que de costume para treinar os recrutas. Um deles é muito atrapalhado, e de vez em quando faz tudo errado – por exemplo, ao invés de virar à direita quando comandado, vira à esquerda, causando grande confusão no batalhão.\nO sargento tem fama de durão e não vai deixar o recruta em paz enquanto este não aprender a executar corretamente os comandos. No sábado à tarde, enquanto todos os outros recrutas estão de folga, ele obrigou o recruta a fazer um treinamento extra. Com o recruta marchando parado no mesmo lugar, o sargento emitiu uma série de comandos “esquerda volver!” e “direita volver!”. A cada comando, o recruta deve girar sobre o mesmo ponto e dar um quarto de volta na direção correspondente ao comando. Por exemplo, se o recruta está inicialmente com o rosto voltado para a direção norte, após um comando de “esquerda volver!” ele deve ficar com o rosto voltado para a direção oeste. Se o recruta está inicialmente com o rosto voltado para o leste, após um comando “direita, volver!” ele deve ter o rosto voltado para o sul.\nNo entanto, durante o treinamento, em que o recruta tinha inicialmente o rosto voltado para o norte, o sargento emitiu uma série tão extensa de comandos, e tão rapidamente, que até ele ficou confuso, e não sabe mais para qual direção o recruta deve ter seu rosto voltado após executar todos os comandos. Você pode ajudar o sargento? Entrada\nA primeira linha da entrada contém um inteiro N que indica o número de comandos emitidos pelo sargento (1 ≤ N ≤ 1.000). A segunda linha contém N caracteres, descrevendo a série de comandos emitidos pelo sargento. Cada comando é representado por uma letra: ‘E’ (para “esquerda, volver!”) e ‘D’ (para “direita, volver!”).\nSaída\nSeu programa deve produzir uma única linha, indicando a direção para a qual o recruta deve ter sua face voltada após executar a série de comandos, considerando que no início o recruta tem a face voltada para o norte. A linha deve conter uma letra entre ‘N’, ‘L’, ‘S’ e ‘O’, representando respectivamente as direções norte, leste, sul e oeste.",
    "samples": [
      [
        "3\nDDE",
        "L"
      ],
      [
        "2\nEE",
        "S"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Mário",
    "text": "Mário é dono de uma empresa de guarda-volumes, a Armários a Custos Moderados (ACM). Mário conquistou sua clientela graças à rapidez no processo de armazenar os volumes. Para isso, ele tem duas técnicas: • Todos os armários estão dispostos numa fila e são numerados com inteiros positivos a partir de 1. Isso permite a Mário economizar tempo na hora de procurar um armário; • Todos os armários têm rodinhas, o que lhe dá grande flexibilidade na hora de rearranjar seus armários (naturalmente, quando Mário troca dois armários de posição, ele também troca suas numerações, para que eles continuem numerados sequ¨encialmente a partir de 1).\nPara alugar armários para um novo cliente, Mário gosta de utilizar armários contíguos, pois no início da locação um novo cliente em geral faz muitas requisições para acessar o conteúdo armazenado, e o fato de os armários estarem contíguos facilita o acesso para o cliente e para Mário.\nDesde que Mário tenha armários livres em quantidade suficiente, ele sempre pode conseguir isso.\nPor exemplo, se a requisição de um novo cliente necessita de quatro armários, mas apenas os armários de número 1, 3, 5, 6, 8 estiverem disponíveis, Mário pode trocar os armários 5 e 2 e os armários 6 e 4 de posição: assim, ele pode alugar o intervalo de armários de 1 até 4.\nNo entanto, para minimizar o tempo de atendimento a um novo cliente, Mário quer fazer o menor número de trocas possível para armazenar cada volume. No exemplo acima, ele poderia simplesmente trocar os armários 1 e 4 de posição, e alugar o intervalo de 3 até 6.\nMário está muito ocupado com seus clientes e pediu que você fizesse um programa para determinar o número mínimo de trocas necessário para satisfazer o pedido de locação de um novo cliente.\nEntrada\nA primeira linha da entrada contém dois números inteiros N e L (1 ≤ N ≤ L ≤ 105), indicando quantos armários são necessários para acomodar o pedido de locação do novo cliente e quantos armários estão disponíveis, respectivamente. A segunda linha contém L inteiros distintos Xi (1 ≤ X1 < X2 < ... < XL ≤ 109), em ordem crescente, indicando as posições dos armários disponíveis.\nSaída\nSeu programa deve produzir uma única linha, contendo um único número inteiro, indicando o número mínimo de trocas que Mário precisa efetuar para satifazer o pedido do novo cliente (ou seja, ter N armários consecutivos disponíveis).",
    "samples": [
      [
        "5 6\n1 3 4 5 6 8",
        "1"
      ],
      [
        "5 5\n1 3 5 6 8",
        "2"
      ],
      [
        "5 6\n1 4 5 6 7 8",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Dona Minhoca",
    "text": "Dona Minhoca fica furiosa quando ouve as pessoas dizerem que minhocas são bichos palíndromes, nos quais não é possível distinguir a cabeça do rabo. Que infâmia! Dona Minhoca vive em uma linda caverna, composta de salões e túneis. Cada túnel liga dois salões distintos e pode ser usado nas duas direções. Um “ciclo” na caverna é uma sequência de salões s1,s2,...,sn,sn+1 = s1, tais que si (cid:54)= si+1 e (si,si+1) é um túnel, para 1 ≤ i ≤ n. A caverna de Dona Minhoca pode conter ciclos, mas cada salão faz parte de no máximo um ciclo da caverna. Os túneis e salões são estreitos, de forma que se uma parte do corpo de Dona Minhoca ocupa um túnel ou salão, não há espaço para Dona Minhoca entrar novamente por esse túnel ou salão.\nAlguns salões da caverna têm acesso a partir da superfície. Dona Minhoca tem um mapa que descreve a caverna, informando para cada túnel o seu comprimento e quais dois salões o túnel liga.\nDona Minhoca também é vaidosa e conhece o seu próprio comprimento.\nDona Minhoca quer saber, para os salões que têm acesso à superfície, se é possível entrar na caverna pelo salão, percorrer a menor distância possível dentro da caverna, e sair novamente pelo mesmo salão que entrou, sempre andando para a frente, sem nunca dar marcha-a-ré. Você pode ajudá-la? Entrada\nA primeira linha contém dois inteiros S (2 ≤ S ≤ 104) e T (1 ≤ T ≤ 2S) representando respectivamente o número de salões e o número de túneis da caverna. Os salões são identificados por inteiros de 1 a S.\nCada uma das T linhas seguintes descreve um túnel e contém três inteiros A, B e C (1 ≤ A < B ≤ S;1 ≤ C ≤ 100), onde A e B representam os salões ligados pelo túnel, e C representa o comprimento do túnel. Um salão é ligado por túneis a no máximo outros 100 salões e cada dois salões são ligados por no máximo um túnel. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 100), que indica o número de consultas. Cada uma das Q linhas seguintes descreve uma consulta, e contém dois inteiros X (1 ≤ X ≤ S) e M (1 ≤ M ≤ 105), que indicam respectivamente o salão pelo qual Dona Minhoca quer entrar e o comprimento de Dona Minhoca.\nSaída\nPara cada consulta da entrada seu programa deve produzir apenas uma linha, contendo apenas um número inteiro, o comprimento do percurso mínimo que Dona Minhoca deve percorrer dentro da caverna para entrar e sair pelo salão indicado na consulta, sem dar marcha-a-ré. Se não for possível para Dona Minhoca entrar e sair sem dar marcha-a-ré, a linha deve conter o valor −1.\nExemplos",
    "samples": [
      [
        "4 4\n1 2 12\n2 3 10\n3 4 8\n2 4 5\n3\n1 23\n4 10\n1 24",
        "47\n23\n-1"
      ],
      [
        "8 9\n1 2 1\n2 3 1\n3 4 1\n2 5 10\n5 6 25\n2 6 20\n3 7 9\n7 8 3\n3 8 4\n4\n1 10\n4 60\n8 5\n7 55",
        "20\n-1\n16\n71"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Letras",
    "text": "Os parques na Cidade da Lógica são reticulados de N × N quadrados (2 ≤ N ≤ 100), onde cada quadrado contém uma das 10 primeiras letras ASCII, abcdefghijABCDEFGHIJ, em caixa minúscula ou maiúscula. As pessoas na Cidade da Lógica têm orgulho de seguir apenas caminhos consistentes quando cruzam os parques. Por exemplo, se eles passam por um c minúsculo, eles não vão se permitir, mais adiante, passar por um C maiúsculo. Para definir isso mais precisamente, um caminho consistente é uma sequência de quadrados satisfazendo: quadrados consecutivos na sequência são adjacentes ortogonalmente; nenhuma letra ocorre na sequência tanto minúscula quanto maiúscula. Quer dizer, ou a letra não está na sequência, ou ela ocorre apenas em caixa minúscula, ou somente em caixa maiúscula.\nDdaAaA D.....\nCBAcca C.....\neEaeeE e.....\nbBbabB b.bab.\nDbDdDc DbD.D.\nfFaAaC ....aC Você deve escrever um programa para ajudar as pessoas da Cidade da Lógica a computar o com primento do menor caminho consistente entre o quadrado de coordenadas (1,1), no canto superior esquerdo, e o quadrado de coordenadas (N,N), no canto inferior direito. Por exemplo, para o parque acima, o menor caminho consistente tem comprimento 13.\nEntrada\nA primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100), o tamanho do parque. As N linhas seguintes contêm, cada uma, uma sequência de N letras, definindo o parque.\nSaída\nSeu programa deve imprimir uma linha contendo um inteiro, o comprimento de um caminho consistente mínimo. Se não houver um caminho consistente, imprima -1.\nExemplos",
    "samples": [
      [
        "6\nDdaAaA\nCBAcca\neEaeeE\nbBbabB\nDbDdDc\nfFaAaC",
        "13"
      ],
      [
        "7\naAaaaaa\naAaaaAa\naAaaaAA\naaAaAaa\nAaAaaAa\naaAAaAa\naaaaaAa",
        "-1"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Pizza do Vô Pepe",
    "text": "Vovô Pepe é famoso por suas pizzas. Elas são deliciosas, e têm o formato de um círculo perfeito.\nVovô preparou uma pizza especial para o jantar de hoje à noite, e colocou um certo número de azeitonas distribuídas aleatoriamente, mas colocadas exatamente na borda da pizza.\nSua tarefa é determinar, conhecendo a circunferência da pizza, a quantidade de azeitonas e a posição de cada azeitona, se é possível dividir a pizza em setores circulares de mesmo tamanho, de tal forma que cada pedaço de pizza contenha exatamente uma azeitona.\nA figura abaixo mostra (a) uma pizza de circunferência 12 com 3 azeitonas e uma possível divisão em pedaços iguais; e (b) uma pizza de circunferência 12 com 4 azeitonas que não pode ser dividida em pedaços iguais como descrito acima. Apesar de deliciosas, as azeitonas são muito pequenas, e suas dimensões podem ser desconsideradas no cálculo da divisão.\nEntrada\nA primeira linha contém dois inteiros C (3 ≤ C ≤ 105) e N (3 ≤ N ≤ 104,N ≤ C) representando respectivamente a circunferência da pizza e o número de azeitonas. O inteiro C é múltiplo de N. A segunda linha contém N inteiros distintos Xi (0 ≤ X1 < X2 < ... < XN < C), em ordem crescente, descrevendo as posições das azeitonas, dadas pelo comprimento do arco circular no sentido horário, a partir de um ponto fixo da circunferência.\nSaída\nSeu programa deve produzir apenas uma linha, com apenas uma letra, que deve ser S se é possível dividir a pizza como descrito acima, ou N caso contrário.\nExemplos",
    "samples": [
      [
        "12 3\n2 8 11",
        "S"
      ],
      [
        "12 4\n4 5 7 11",
        "N"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Teletransporte",
    "text": "A Confederação Galática instalou um novo sistema de teletransporte em suas naves espaciais. Cada nave recebeu uma cabine de teletransporte, na qual há um painel com quatro botões. Cada botão é rotulado com uma letra diferente A, B, C ou D e com um número que indica a nave destino para a qual o usuário será transportado, instantaneamente, se o respectivo botão for pressionado (como todos sabem, as naves da Confederação são identificadas por inteiros de 1 a N).\nPara usar o sistema, o usuário deve adquirir um bilhete para cada viagem que deseja realizar (uma viagem corresponde a pressionar um botão). Note que como o número botões no painel é pequeno comparado com o número de naves da Confederação, pode ser necessário que o usuário tenha que comprar um bilhete múltiplo de L viagens para ir de uma dada nave S para uma outra nave T.\nPor exemplo, para as naves da figura abaixo, se o usuário está na cabine de teletransporte da nave 3 e pressiona o botão B ele é transportado para a nave 2. Se ele tem um bilhete múltiplo e pressiona novamente o botão B ele é então transportado para a nave 1.\nSua tarefa neste problema é, dados a nave de partida S, a nave de chegada T e o número de viagens L do bilhete, determinar quantas sequências distintas de L botões levam o usuário da nave S para a nave T. Por exemplo, para as naves da figura acima, existem quatro sequências distintas de L = 2 botões que levam um usuário da nave S = 3 para a nave T = 1: CD, DA, AB, e BB.\nEntrada\nA primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 100) e L (0 ≤ L < 230), indicando respectivamente o número de naves e o número de viagens do bilhete. A segunda linha da entrada contém dois inteiros S e T (1 ≤ S,T ≤ N), indicando respectivamente a nave de partida e a nave de chegada. Cada uma das N linhas seguintes descreve o painel da cabine de teletransporte de uma nave.\nA i-ésima dessas linhas, 1 ≤ i ≤ N, contém quatro inteiros A, B, C e D (1 ≤ A,B,C,D ≤ N), que representam os números escritos nos quatro botões da cabine de teletransporte da nave de número i.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, que deve ser igual a r módulo 104, onde r é o número de sequências distintas de L botões que levam o usuário da nave S para a nave T.\nExemplos",
    "samples": [
      [
        "2 20\n1 1\n2 2 2 2\n1 1 1 1",
        "7776"
      ],
      [
        "2 29\n1 1\n2 2 2 2\n1 1 1 1",
        "0"
      ],
      [
        "2 0\n1 1\n2 2 2 2\n1 1 1 1",
        "1"
      ],
      [
        "2 0\n1 2\n2 2 2 2\n1 1 1 1",
        "0"
      ],
      [
        "3 2\n3 1\n1 2 2 2\n2 1 3 2\n2 2 3 1",
        "4"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Confederação",
    "text": "A Confederação Galática resolveu fazer uma reforma administrativa, para melhor distribuir os recursos de sua frota. Para isso, ela dividiu todo o espaço em regiões. Para definir as regiões, inicial mente um conjunto de planos infinitos foi especificado, e as regiões foram definidas pelos cortes desses planos. Note que algumas regiões são ilimitadas, mas que também podem existir regiões limitadas.\nO conjunto de planos foi escolhido de tal maneira que nenhum dos planos intercepta a órbita de um planeta, e portanto cada planeta transita por apenas uma região durante sua órbita (ou seja, um planeta dentro de uma região nunca cruzará um plano para outra região).\nSua tarefa consiste em determinar, dadas as equações dos planos e as posições dos planetas, quantos planetas existem na região com o maior número de planetas (em outras palavras, qual o número máximo de planetas dentro de uma região).\nEntrada\nA primeira linha da entrada contém dois inteiros M (1 ≤ M ≤ 500) e N (1 ≤ N ≤ 10000), indicando respectivamente o número de planos e número de planetas. As M linhas seguintes contêm cada uma quatro inteiros A,B,C e D (−10000 ≤ A,B,C,D ≤ 10000), os coeficientes e o termo livre da equação Ax+By+Cz = D que define cada um dos planos. A seguir, cada uma das N linhas seguintes contém três inteiros X,Y e Z (−10000 ≤ X,Y,Z ≤ 10000), indicando a posição (X,Y,Z) de um planeta.\nSaída\nSeu programa deve produzir uma única linha contendo apenas um número inteiro, o número de planetas na região que contém o maior número de planetas.\nExemplos",
    "samples": [
      [
        "2 5\n1 0 0 1\n2 0 0 8\n0 1 0\n2 2 2\n3 3 3\n5 5 5\n2 18 4",
        "3"
      ],
      [
        "4 8\n0 0 1 1\n1 0 1 2\n-1 1 1 3\n-1 -1 1 3\n0 0 5\n0 0 4\n0 0 -2\n1 0 5\n40 19 104\n13 26 84\n89 -45 18\n3 1 0",
        "5"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Baralho Embaralhado",
    "text": "Um baralho contém um número par 2n de cartas a1,a2,...,a2n, todas distintas (a1 < a2 < ··· < a2n). O baralho encontra-se perfeitamente ordenado, ou seja, a primeira carta é a1, a segunda carta é a2, e assim por diante, até a última carta, que é a2n.\nUm croupier então executa repetidamente um procedimento de embaralhar, que consiste de dois passos: 1. o baralho é dividido ao meio; 2. as cartas das duas metades são então intercaladas, de maneira que se a sequência de cartas do baralho no início do passo 1 é x1,x2,...,x2n, então ao final do passo 2 a sequência de cartas se torna xn+1,x1,xn+2,x2,...,x2n,xn.\nDado o número de cartas do baralho, escreva um programa que determine quantas vezes o procedi mento de embaralhar descrito acima deve ser repetido de forma que o baralho volte a ficar ordenado.\nEntrada\nA única linha da entrada contém um inteiro par P (2 ≤ P ≤ 2 × 105), indicando o número de cartas do baralho (note que o valor P corresponde ao valor 2n na descrição acima).\nSaída\nSeu programa deve produzir uma única linha contendo um único inteiro, o número mínimo de vezes que o processo de embaralhamento deve ser repetido para que o baralho fique novamente ordenado.\nExemplos",
    "samples": [
      [
        "4",
        "4"
      ],
      [
        "6",
        "3"
      ],
      [
        "2",
        "2"
      ],
      [
        "100002",
        "100002"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Volta",
    "text": "No automobilismo é bastante comum que o líder de uma prova, em determinado momento, ultra passe o último colocado. O líder, neste momento, está uma volta à frente do último colocado, que se torna, assim, um retardatário. Neste problema, dados os tempos que o piloto mais rápido e o piloto mais lento levam para completar uma volta, você deve determinar em que volta o último colocado se tornará um retardatário, ou seja, será ultrapassado pelo líder. Você deve considerar que, inicialmente, eles estão lado a lado, na linha de partida do circuito, ambos no início da volta de número 1 (a primeira volta da corrida); e que uma nova volta se inicia sempre depois que o líder cruza a linha de partida.\nEntrada\nA única linha da entrada contém dois números inteiros X e Y (1 ≤ X < Y ≤ 10000), os tem pos, em segundos, que o piloto mais rápido e o piloto mais lento levam para completar uma volta, respectivamente.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro: a volta em que o piloto mais lento se tornará um retardatário.\nExemplos",
    "samples": [
      [
        "1 10",
        "2"
      ],
      [
        "4 8",
        "2"
      ],
      [
        "5 7",
        "4"
      ],
      [
        "6875 7109",
        "31"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Ecologia",
    "text": "O reino da Poliminogônia passou recentemente uma lei ecológica que obriga todas as fazendas a preservar o máximo de árvores possível em uma porcentagem fixa da área da fazenda. Além disso, para que os animais silvestres possam se movimentar livremente, a área preservada deve ser conexa.\nAs fazendas na Poliminogônia são sempre um reticulado de N ×N quadrados de um hectare cada. A figura ao lado ilustra uma fazenda com N = 5. A área preservada deve cobrir exatamente M quadrados. No exemplo da figura, M = 6. Ela deve ser conexa ortogonalmente; quer dizer, tem que ser possível se movimentar entre quaisquer dois quadrados preservados apenas com movimentos ortogonais entre quadrados preservados. A área não preservada, entretanto, pode ser desconexa. Os fazendeiros sabem o número de árvores que há dentro de cada quadrado e você deve escrever um programa que calcule o número máximo possível de árvores que podem ser preservadas com uma área de M quadrados. No exemplo, é possível preservar 377 árvores! Entrada\nA primeira linha da entrada contém dois inteiros N e M (2 ≤ N ≤ 50, 1 ≤ M ≤ 10). As N linhas seguintes contêm, cada uma, N inteiros de valor entre 1 e 1000, representando o número de árvores dentro de cada quadrado da fazenda.\nSaída\nSeu programa deve imprimir uma linha contendo um número inteiro, o número máximo de árvores que podem ser preservadas, com as restrições dadas.\nExemplos\nEntrada\nSaída\n5 6 377",
    "samples": [
      [
        "5 6\n31 12 7 1 14\n23 98 3 87 1\n5 31 8 2 99\n12 3 42 17 88\n120 2 7 5 7",
        "377"
      ],
      [
        "4 8\n1 1 1 1\n9 9 9 1\n9 1 9 1\n9 9 9 1",
        "72"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Corte",
    "text": "Todo polígono convexo, com 2N vértices, pode ser decomposto em N − 1 quadriláteros, fazendo se N − 2 cortes em linha reta entre certos pares de vértices. A figura abaixo ilustra três diferentes decomposições do mesmo polígono com N = 5. O peso da decomposição é a soma dos comprimentos de seus N − 2 cortes. Seu programa deve computar o peso de uma decomposição de peso mínimo! Entrada\nA primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100). As 2N linhas seguintes contém cada uma dois números reais X e Y (0 ≤ X,Y ≤ 10000), com precisão de 4 casas decimais: as coordenadas dos 2N pontos, em sentido anti-horário, do polígono convexo.\nSaída\nSeu programa deve imprimir uma linha contendo um número real, com precisão de 4 casas decimais.\nO número deve ser o peso de uma decomposição de peso mínimo do polígono dado.\nExemplos",
    "samples": [
      [
        "4\n5715.7584 3278.6962\n3870.5535 4086.7950\n3823.2104 4080.7543\n3574.4323 170.2905\n4521.4796 144.9156\n4984.6486 306.2896\n5063.1061 347.1661\n6099.9959 2095.9358",
        "4519.6176"
      ],
      [
        "2\n6044.4737 2567.9978\n5752.5635 3226.5140\n5148.8242 3802.9292\n4598.8042 4036.8000",
        "0.0000"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "RSA",
    "text": "O algoritmo RSA é um dos algoritmos de criptografia mais utilizados e é considerado uma das alternativas mais seguras existentes. Seu funcionamento básico é descrito a seguir.\nDois números primos ímpares p e q são escolhidos e calcula-se n = pq. A seguir é calculada a função totiente φ(n) = (p − 1)(q − 1) e um inteiro e satisfazendo 1 < e < φ(n) é escolhido de forma que mdc(φ(n),e) = 1. Finalmente é calculado o inteiro d, o inverso multiplicativo de e módulo φ(n), ou seja, o inteiro d satisfazendo de = 1 (mod φ(n)).\nAssim obtemos a chave pública, formada pelo par de inteiros n e e, e a chave secreta, formada pelos inteiros n e d.\nPara criptografar uma mensagem m, com 0 < m < n, calcula-se c = me (mod n), e c é a mensagem criptografada. Para descriptografá-la, ou seja, para recuperar a mensagem original, basta calcular m = cd (mod n). Note que, para isso, a chave secreta deve ser conhecida, não sendo suficiente o conhecimento da chave pública. Note ainda que a expressão x = 1 (mod y) usada acima equivale a dizer que y é o menor natural tal que o resto da divisão de x por y é 1.\nNeste problema você deve escrever um programa para quebrar a criptografia RSA.\nEntrada\nA única linha da entrada contém três inteiros N, E, e C, onde 15 ≤ N ≤ 109, 1 ≤ E < N e 1 ≤ C < N, de forma que N e E constituem a chave pública do algoritmo RSA descrita acima e C é uma mensagem criptografada com essa chave pública.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro M, 1 ≤ M < N, a mensagem original.\nExemplos",
    "samples": [
      [
        "1073 71 436",
        "726"
      ],
      [
        "91 43 19",
        "33"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Handebol",
    "text": "Frustrado e desanimado com os resultados de sua equipe de futebol, o Super Brasileiro Clube (SBC) resolveu investir na equipe de handebol. Para melhor avaliar os atletas, os técnicos identificaram que seria útil analisar a regularidade dos jogadores. Especificamente, eles estão interessados em saber quantos jogadores fizeram gols em todas as partidas.\nComo o volume de dados é muito grande, eles gostariam de ter um programa de computador para realizar essa contagem.\nEntrada\nA primeira linha da entrada contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ 100), indicando respectivamente o número de jogadores e o número de partidas. Cada uma das N linhas seguintes descreve o desempenho de um jogador: a i-ésima linha contém M inteiros Xj (0 ≤ Xj ≤ 100, para 1 ≤ j ≤ M), informando o número de gols do i-ésimo jogador em cada partida.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o número de jogadores que fizeram gols em todas as partidas.\nExemplos",
    "samples": [
      [
        "5 3\n0 0 0\n1 0 5\n0 0 0\n0 1 2\n1 1 0",
        "0"
      ],
      [
        "12 5\n4 4 2 3 7\n0 0 0 1 0\n7 4 7 0 6\n1 2 3 3 2\n0 0 0 0 0\n4 0 9 10 10\n0 1 0 0 0\n1 2 0 2 3\n10 10 10 1 0\n0 3 3 3 4\n10 10 0 10 10\n1 1 2 0 9",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "The return of the King",
    "text": "The prolific author Stephen King was entering the grades of his literature students in an on-line general average calculator. When he finished, he noticed his return key was broken so instead of entering the grades of a student in a separate line each, he entered them in a single line without any separation.\nSince Mr. King does not have the skills to fix his return key right away, he needs you to calculate the average of the grades of the student from the non-separated input.\nEach grade is an integer between 1 and 10. All grades were entered written in base 10 without leading zeros. For example, if the grades of Mr. King’s student were 3, 10, 1 and 10 they would be entered as “310110”.\nInput\nThe input consists of a single line that contains a non-empty string S of at most 100 base 10 digits.\nThere is a unique way to partition S into a list of substrings such that each substring represents an integer between 1 and 10 in base 10 without leading zeros.\nOutput\nOutput a line with a rational number representing the average of the grades of the student whose grades Mr. King entered as S. The result must be output as a rational number with exactly two digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "310110",
        "6.00"
      ],
      [
        "10910",
        "9.67"
      ],
      [
        "222222223",
        "2.11"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "The two towers",
    "text": "A two tower of height H is a mathematical expression of the form 222...2 with the number two appearing exactly H times. The value of a two tower is the value of the corre sponding expression. For instance, the value of the two tower of height 1 is 2, the value of the two tower of height 2 is 22 = 4 and the value of the two tower of height 4 is 2222 = 65536.\nThe value of the two tower of height 5 is therefore 265536 and there is not enough space on this sheet of paper to write it in full.\nGiven that the values of two towers can grow really big, we are wondering if you can help us find the remainder of such values when divided by 3.\nInput\nThe input consists of a single line that contains an integer H representing the height of the two tower we want to consider (1 ≤ H ≤ 10100).\nOutput\nOutput a line with an integer representing the remainder of dividing the value of the two tower of height H by 3.",
    "samples": [
      [
        "1",
        "2"
      ],
      [
        "2",
        "1"
      ],
      [
        "99999999999999999999",
        "1"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "The fellowship of the ring",
    "text": "Box is a really violent sport. To compensate, there is a code of conduct to maintain chivalry and fellowship atop the ring in friendly matches. One of the most well known rules of this code of conduct is to avoid hitting the opponent below the waist or above the neck.\nGiven the heights of the waist and neck of an opponent, and the heights of a set of punches, calculate how many of those punches are fair according to the rule above.\nInput\nThe first line contains three integers W, N and P, representing respectively the height of the waist of the opponent, the height of his neck, and the number of thrown punches (1 ≤ W < N ≤ 200 and 1 ≤ P ≤ 100). The second line contains P integers H1,H2,...,HP (1 ≤ Hi ≤ 200 for i = 1,2,...,P) indicating the heights of the punches. All heights are given in centimeters.\nOutput\nOutput a line with an integer representing the number of punches that are fair, according to the code of conduct.",
    "samples": [
      [
        "80 150 3\n10 100 160",
        "1"
      ],
      [
        "80 150 3\n80 100 150",
        "3"
      ],
      [
        "2 199 5\n2 1 200 199 1",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Dividing the names",
    "text": "The Queen of Nlogonia has decided to move the capital of the queendom to a brand new city called Sortonia. The design for the city is an N ×N grid consisting of N avenues running in the North-South direction and N streets running in the East-West direction. Thus, each avenue intersects every street, and no two streets or two avenues intersect each other.\nAs the city is almost finished, it is now time to assign names to its streets and avenues. The people of Nlogonia have already voted on the 2×N names that they want to use, but it hasn’t been decided yet which of those will be used for the streets and which for the avenues. The issue is not so simple, because in each crossing there should be a sign identifying the street and the avenue that intersect there, and the Queen has expressly ordered that the letters in these signs ought to be written in gold encrusted with rubies.\nBeing the official Accountant who Counts the Money (ACM), it is your task to find a way to minimize the total number of letters written in the crossings’ signs, for obvious reasons. Luckily, you have thought of a very clever way to achieve this, which is to use abbreviations for the names of the streets and avenues in the signs. The abbreviation for the name of an avenue (respectively a street) is the shortest prefix of its name which is not a prefix of the name of any other avenue (respectively street). Of course, the abbreviation to be used for each name depends on how the set of 2 × N names is split in two disjoint sets of N names to be used for the streets and avenues.\nFor example, consider the case with N = 2 where the four chosen names are “GAUSS”, “GALOIS”, “ERDOS” and “EULER”. If the streets are assigned the names “GAUSS” and “GALOIS”, whereas the avenues are assigned the names “ERDOS” and “EULER”, then the abbreviations would be “GAU” for “GAUSS”, “GAL” for “GALOIS”, “ER” for “ERDOS” and “EU” for “EULER”. With this splitting, the total number of letters to be written in the signs would be 20, as the four intersections would be labeled by “GAU|ER”, “GAU|EU”, “GAL|ER” and “GAL|EU”.\nHowever, in the example above it would be more convenient to assign the streets the names “GAUSS” and “ERDOS”, leaving “GALOIS” and “EULER” for the avenues. Then, the abbreviations would be “G” for “GAUSS”, “E” for “ERDOS”, “G” for “GALOIS” and “E” for “EULER”, and the total number of letters to be written in the signs would be just 8 (as the intersections would be labeled by “G|G”, “G|E”, “E|G” and “E|E”).\nFortunately, the set of names that has been chosen is such that no name in it is a prefix of some other name in the set, thereby ensuring that the scheme you propose will always be feasible. Can you calculate the minimum number of letters to be written in the signs if you split the names optimally? Input\nThe first line contains an integer N (2 ≤ N ≤ 100) representing both the number of streets and the number of avenues in Sortonia. Each of the next 2 × N lines contains a non-empty string of at most 18 uppercase letters, indicating one of the names that have been chosen. You may assume that none of the given strings is a prefix of another string in the input.\nOutput\nOutput a line with an integer representing the minimum total number of letters to be written in the signs, when the splitting of the names of streets and avenues is chosen optimally.",
    "samples": [
      [
        "2\nGAUSS\nGALOIS\nERDOS\nEULER",
        "8"
      ],
      [
        "4\nAA\nAB\nAC\nAD\nBA\nBB\nBC\nBD",
        "56"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Leopoldo Taravilse, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Galaxy collision",
    "text": "The Andromeda galaxy is expected to collide with our Milky Way in about 3.8 billion years. The collision will probably be a merging of the two galaxies, with no two stars actually colliding. That is because the distance between stars in both galaxies is so huge. Professor Andrew is building a computational model to predict the possible outcomes of the collision and needs your help! A set of points in the two dimensional plane is given, representing stars in a certain region of the already merged galaxies. He does not know which stars came originally from which galaxy; but he knows that, for this region, if two stars came from the same galaxy, then the distance between them is greater than 5 light years. Since every star in this region comes either from Andromeda or from the Milky Way, the professor also knows that the given set of points can be separated into two disjoint subsets, one comprising stars from Andromeda and the other one stars from the Milky Way, both subsets with the property that the minimum distance between two points in the subset is greater than 5 light years. He calls this a good separation, but the bad news is that there may be many different good separations. However, among all possible good separations there is a minimum number of stars a subset must contain, and this is the number your program has to compute.\nFor example, the picture illustrates a given set of six points. Professor Andrew cannot tell which stars came from Andromeda, but note that there are four possible good sepa rations: {{1,2,4,5},{3,6}}; {{1,2,3,4},{5,6}}; {{1,4,5},{2,3,6}}; {{1,3,4},{2,5,6}}. Therefore, at least two stars must have come from Andromeda, since this is the minimum number of points a subset may have in a good separation.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 5×104) representing the number of points in the set.\nEach of the next N lines describes a different point with two integers X and Y (1 ≤ X,Y ≤ 5 × 105), indicating its coordinates, in light years. There are no coincident points, and the set admits at least one good separation.\nOutput\nOutput a line with an integer representing the minimum number of points a subset may have in a good separation.",
    "samples": [
      [
        "6\n1 3\n9 1\n11 7\n5 7\n13 5\n4 4",
        "2"
      ],
      [
        "2\n10 10\n50 30",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Guilherme Albuquerque Pinto, Universidade Federal de Juiz de Fora"
    },
    "hasImages": true
  },
  {
    "name": "Knights of the Round Table",
    "text": "Every month King Arthur celebrates a High Council meeting. The K knights attending these meetings are known as The Knights of the Round Table, probably because they sit at a huge round oak table having K seats and a big throne with a sword and a stone carved in its back.\nFor today’s meeting, each knight was given a number between 1 and K that indicates the seat he must take during the meeting. Seats are numbered clockwise from 1 to K, seat numbered 1 being the first to the left of the big throne. Obviously, the king himself was not given a number because he sits on the throne. King Arthur’s squire made sure that no two knights got the same number so there should be no problems.\nAs usual, the king was the first to enter the council room today. According to the protocol rules, he sat on his throne and prepared to receive the K knights that must enter and sit one by one. After the first D knights arrived, the king noted that some of them could have sat on wrong seats, because they were distracted talking about who would win the next tournament. What a mess! King Arthur’s squire promptly intervened and gave instructions to the remaining K − D knights. Each of them must enter the council room and try to sit on his rightful seat; if his seat is already occupied, the knight must walk clockwise around the table and sit on the first unoccupied seat he finds. Thus, the final distribution of knights around the table depends on the order in which they enter the room.\nKing Arthur is now interested in knowing the number of distinct distributions of the K knights around the table given the seats occupied by the first D knights. Two distributions are considered distinct if there is at least one knight who sits on different seats in both distributions.\nAs the Royal Advisor in Combinatorics and other Mathematics (or Royal ACM) the task is assigned to you. You need to provide an answer within five hours at risk of loosing the king’s favor. Hurry up! Input\nThe first line contains two integers K (1 ≤ K ≤ 106) and D (1 ≤ D ≤ 105), representing respectively the number of knights and the number of distracted knights. Each of the next D lines describes a different distracted knight with two integers A and B (1 ≤ A,B ≤ K), indicating that the knight who was assigned seat A actually sat on seat B. It is granted that no two knights sat on the same seat.\nOutput\nOutput a line with an integer representing the number of distinct distributions of the K knights around the table. This number can be rather large so output the remainder of dividing it by 109 + 7.",
    "samples": [
      [
        "3 1\n1 2",
        "2"
      ],
      [
        "5 4\n5 5\n1 2\n2 3\n3 4",
        "1"
      ],
      [
        "8 3\n3 3\n4 8\n2 4",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Jorge Enrique Moreira Broche, Universidad Central “Marta Abreu” de Las Villas"
    },
    "hasImages": false
  },
  {
    "name": "Fence the vegetables",
    "text": "At the early age of 40, Alice and Bob decided to retire. After more than two decades working as examples for networking protocols, game theoretical books and several other texts, they were tired. To remain active, they decided to go into gardening.\nAlice and Bob planted several vegetable plants in a huge field. After finishing, they realized that their plants needed protection from wild animals, so they decided to build a fence around them.\nThe field is represented as the XY plane, and each vegetable plant as a different point in it. A fence is represented as a polygon in the plane. However, not every polygon is a valid fence. The fence needs to be a single simple polygon with each of its sides parallel to one of the axes. Of course, the polygon must contain all the points representing vegetable plants. A fence too close to the plants or to itself could make it difficult to walk around, so each side of the polygon needs to be at least 1 millimeter away from all plants and all non-adjacent sides.\nAmong all valid fences, Alice and Bob decided to build the one with minimum perimeter, in order to save on fence material. If there are several valid fences with minimum perimeter, they want to build one with minimum area among those, to save time when watering their garden.\nIn the following pictures, several different fences are shown in a field with four vegetable plants represented as circles.\nLuckily, Alice and Bob’s background of participating in rigorous scientific projects made them very thorough with their records: they know the exact location of their plants with millimeter precision.\nUsing this data, help them calculate the perimeter and area of an optimal fence.\nInput\nThe first line contains an integer V (1 ≤ V ≤ 105) representing the number of vegetable plants in Alice and Bob’s field. Each of the next V lines describes a different vegetable plant with two integers X and Y (1 ≤ X,Y ≤ 108), indicating the coordinates of the plant, in millimeters. No two plants have the same location.\nOutput\nOutput a line with two integers P and A representing respectively the perimeter in millimeters and the area in squared millimeters of the fence that Alice and Bob want to build.",
    "samples": [
      [
        "4\n1 1\n3 5\n5 3\n5 5",
        "24 21"
      ],
      [
        "4\n1 1\n1 100000000\n100000000 1\n100000000 100000000",
        "400000004 10000000200000001"
      ],
      [
        "5\n50000000 1\n50000000 99999999\n1 50000000\n99999999 50000000\n50000001 50000001",
        "400000000 399999997"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": true
  },
  {
    "name": "Counting substhreengs",
    "text": "Substrings are strings formed by choosing a subset of contiguous characters from a string. This is well known. A little more obscure is the definition of substhreengs. A substhreeng is a substring which complies to the following additional requirements: 1. It is non-empty, and composed entirely of base 10 digits.\n2. Interpreted in base 10 (allowing extra leading zeros), the resulting integer is a multiple of 3.\nFor instance, the string “130a303” contains 9 substhreengs: the substhreeng “3” three times, the substhreengs “30” and “0” twice each, and the substhreengs “303” and “03” once each. The substring “30a3” is not a substhreeng because it is not composed entirely of base 10 digits, while the substring “13” is not a substhreeng because 13 is not a multiple of 3.\nNotice that two substhreengs are considered different if they are different in length or start at a different position, even if the selected characters are the same.\nGiven a string, you are asked to count the number of substhreengs it contains.\nInput\nThe input consists of a single line that contains a non-empty string S of at most 106 characters.\nEach character of S is either a digit or a lowercase letter.\nOutput\nOutput a line with an integer representing the number of substhreengs contained in S.",
    "samples": [
      [
        "130a303",
        "9"
      ],
      [
        "0000000000",
        "55"
      ],
      [
        "icpc2014regional",
        "2"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Black and white stones",
    "text": "Shagga and Dolf like to play a game with stones, each of which is either black or white. At the beginning of the game, Dolf arranges all the stones in a single line from left to right. Then, Shagga’s goal is to reorder the stones so that all the black stones are to the left of all the white stones. To do this, he can choose any pair of stones of different color and swap their positions, paying A coins to Dolf in the process. However, if the two stones whose positions he is swapping are adjacent, Dolf must give him a refund of B coins, meaning that the operation will effectively cost Shagga only A − B coins.\nShagga is not very bright, so he hasn’t realized yet that he will only loose coins while playing this game. However, he is aware of his limitations, so he knows that if he played optimally he would loose fewer coins than he is loosing right now, with his strategy of randomly choosing the stones he swaps in each movement. Therefore, he wants to know the minimum number of coins he will have to pay Dolf in order to get to the desired arrangement of stones, and is threatening to feed you to the goats if you don’t help him.\nInput\nThe first line contains two integers A and B (0 ≤ B < A ≤ 106), representing respectively the cost of swapping two stones and the value of the refund when swapping adjacent stones. The second line contains a non-empty string S of at most 5000 characters. The i-th character of S indicates the color of the i-th stone, from left to right, in the initial arrangement of the stones. The character is either the uppercase letter “B” or the uppercase letter “W”, indicating respectively a black or a white stone.\nOutput\nOutput a line with an integer representing the minimum number of coins Shagga will have to pay Dolf in order to arrange the stones such that all the black ones are to the left of all the white ones.",
    "samples": [
      [
        "2 1\nBWWB",
        "2"
      ],
      [
        "5 3\nWBWWBWBWBWBBBWWBBB",
        "27"
      ],
      [
        "1000000 0\nW",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Fidel I. Schaposnik Massolo, Universidad Nacional de La Plata"
    },
    "hasImages": false
  },
  {
    "name": "Automated Checking Machine",
    "text": "The Internet Computer Parts Company (ICPC) is an on-line shop that sells computer parts. Pairs of in-line electrical connectors are among the most popular parts that ICPC sells. However, they are also one of the parts that are returned more often by unsatisfied customers, because due to errors in packaging the connectors sent to the costumers may not be compatible.\nAn in-line connector is composed of five connection points, labelled from 1 to 5. Each connection point of a connector can be either a plug or an outlet. We say two connectors are compatible if, for every label, one connection point is a plug and the other connection point is an outlet (in other words, two connectors are compatible if, for every connection point with the same label, a plug and an outlet meet when the two connectors are connected).\nThe figure below shows examples of two connectors that are compatible and two connectors that are not compatible.\nICPC is introducing a state-of-the-art Automated Checking Machine (ACM), with an optical checker, which will verify whether the two connectors packaged for a customer are indeed compatible. The com plex and expensive hardware of the ACM is ready, but they need your help to finish the software.\nGiven the descriptions of a pair of in-line connectors, your task is to determine if the connectors are compatible.\nInput\nThe first line contains five integers Xi (0 ≤ Xi ≤ 1 for i = 1,2,...,5), representing the connection points of the first connector in the pair. The second line contains five integers Yi (0 ≤ Yi ≤ 1 for i = 1,2,...,5), representing the connection points of the second connector. In the input, a 0 represents an outlet an a 1 represents a plug.\nOutput\nOutput a line with a character representing whether the connectors are compatible or not. If they are compatible write the uppercase letter “Y”; otherwise write the uppercase letter “N”.",
    "samples": [
      [
        "1 1 0 1 0\n0 0 1 0 1",
        "Y"
      ],
      [
        "1 0 0 1 0\n1 0 1 1 0",
        "N"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Ricardo Anido, Universidade Estadual de Campinas"
    },
    "hasImages": true
  },
  {
    "name": "Even distribution",
    "text": "Endre has lots of nieces and nephews. Once a year, he takes some of them on a trip to an archipelago where a boat company operates two-way services between some pairs of islands. Since Endre and the children can fly and return directly to or from any of the islands, any trip can be described as a non empty sequence i1,i2,...,in of islands, such that each pair of consecutive islands ij and ij+1 have a boat service between them. The first and the last islands of a trip may or may not be the same island, and the islands may be visited more than once during the trip.\nEach island in the archipelago produces a different peculiar variety of candy, and greets its visitors by giving each arriving group a fixed number of pieces of candy. Endre does not like candies himself, but the children eat them all almost instantly. To avoid fights, each time the group arrives to an island and receives candies, he evenly distributes them among the children.\nYou may wonder how Endre always manages to evenly distribute the candies they receive in each island. Well, the answer is actually very simple. Each year, the travel agency sends him the trip plan (the sequence i1,i2,...,in) beforehand. Since he wants to travel with as many of his nieces and nephews as possible, he calculates the maximum number k of kids he can take on the trip without violating the rule about the even distribution of candy. Notice that each trip plan uniquely determines the number of kids to take.\nThis has been going on for years, and each time Endre ends up taking a different number of kids on the trip. He would like to know how many different numbers of kids he can take on a trip, that is, the number of integers k such that there is a trip plan for which he ends up taking k kids on the trip.\nRight now Endre is very busy preparing this year’s trip. Can you help him with the answer? Input\nThe first line contains two integers I and S (1 ≤ I,S ≤ 104), representing respectively the number of islands and the number of boat services between them. Islands are identified with distinct integers from 1 to I. The second line contains I integers C1,C2,...,CI, where Ci indicates the number of pieces of candy the group receives when arriving at island i (1 ≤ Ci ≤ 105 for i = 1,2,...,I). Each of the next S lines describes a different boat service with two integers A and B (1 ≤ A < B ≤ I), representing that it is possible to travel from island A to island B and from island B to island A. No two boat services allow to travel between the same pair of islands.\nOutput\nOutput a line with an integer representing the number of integers k such that there is a trip plan for which Endre ends up taking k kids on the trip.",
    "samples": [
      [
        "2 1\n1 9\n1 2",
        "2"
      ],
      [
        "4 2\n1 2 3 4\n1 3\n1 2",
        "4"
      ],
      [
        "4 3\n30 42 105 70\n2 4\n1 2\n2 3",
        "11"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Bruno Junqueira Adami, Universidade de São Paulo"
    },
    "hasImages": false
  },
  {
    "name": "Journey through the kingdom",
    "text": "The kingdom of Quadradonia is divided into provinces forming a grid-like pattern of R rows and C columns. Legend has it many wonderful things await discovery in some of the provinces, although it’s unclear if you can actually find the elusive solid form of water stories call “ice”, or if it’s just dragons.\nYou are planning a trip through the kingdom to find out, but the roads are dangerous so you have to be very careful. To go from one province to another you would like to use the convenient escorted carriage system managed by the Interprovincial Communication & Peregrination Company (ICPC). In each province, the ICPC provides a heavily guarded carriage for you to travel to any other province in a rectangle containing it, at the same flat rate (which may however vary from one province to another).\nMore formally, at the province in the i-th row and the j-th column you can rent an escorted carriage for a cost of Vij, allowing you to safely travel to any province at most Rij rows away from row i, and at most Cij columns away from column j (that is, having row number i(cid:48) and column number j(cid:48) with |i − i(cid:48)| ≤ Rij and |j − j(cid:48)| ≤ Cij).\nIn your journey you want to visit N provinces p1,p2,...,pN, in that order. Wandering around looking for adventures is an expensive business and your budget is limited, so you would like to spend as little as possible in transportation. Therefore, you would like to calculate the minimum cost of each leg of your trip, that is, the minimum cost of the carriages you have to rent to go from province pk to province pk+1, for k = 1,2,...,N − 1.\nInput\nThe first line contains three integers R, C and N, representing respectively the number of rows, the number of columns and the number of provinces you want to visit (1 ≤ R,C ≤ 500 and 2 ≤ N ≤ 5).\nRows are numbered from 1 to R and columns are numbered from 1 to C. The next 3×R lines describe ICPC’s escorted carriage system by means of three groups of R lines each, with each line containing C integers. In the i-th line of the first group, the j-th number represents the cost Vij of renting a carriage in the province in row i and column j, while the corresponding numbers in the second and third group represent respectively Rij and Cij (1 ≤ Vij ≤ 1000, 0 ≤ Rij ≤ R and 0 ≤ Cij ≤ C, for i = 1,2,...,R and j = 1,2,...,C). The next N lines describe the provinces p1,p2,...,pN you want to visit, in the same order you want to visit them. The k-th of these lines describes the province pk with two integers Ik and Jk, indicating that pk is in row Ik and column Jk (1 ≤ Ik ≤ R and 1 ≤ Jk ≤ C for k = 1,2,...,N).\nOutput\nOutput a line with N − 1 integers representing the minimum cost of each leg of your trip, or the value −1 if it is impossible to travel using ICPC’s escorted carriage system for that leg. More precisely, for k = 1,2,...,N − 1, the k-th number must be the minimum cost of the carriages you have to rent to go from province pk to province pk+1 using ICPC’s escorted carriage system, or the value −1 if it is impossible to travel from province pk to province pk+1 with this system.",
    "samples": [
      [
        "3 4 5\n1 2 1 1\n1 5 3 4\n1 1 6 3\n1 2 3 3\n3 3 1 2\n0 0 0 1\n1 4 0 1\n2 3 0 1\n4 1 3 1\n1 1\n3 4\n1 1\n2 2\n2 2",
        "3 -1 1 0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Fidel I. Schaposnik Massolo, Universidad Nacional de La Plata"
    },
    "hasImages": false
  },
  {
    "name": "Intrepid climber",
    "text": "Who would guess? You climbed the highest mountain of your city. You are so excited about it that you need to tell it to all your friends, and you decided to start with those that are trying to be exactly where you are at this precise moment.\nThe mountain has N landmarks, and one of them is the top of the mountain, where you are now.\nEach of your friends that is climbing the mountain is in some other landmark, and you want to visit all of them. There are tracks that connect pairs of landmarks in such a way that there exists exactly one route (that is, a sequence of consecutive tracks) that goes down from the top of the mountain to each other landmark. To visit two friends in two different landmarks, you may have to go down some tracks, climb others, and go down others again. Going down the mountain is “easy”, so you do not consume energy when you go down through the tracks. But each time you climb a track, you consume a certain amount of energy. After visiting all your friends, you can just sit and rest.\nFor example, consider the mountain in the picture below, which has N = 6 landmarks. If your friends are in landmarks 5 and 2, you can visit both if you follow the sequence of landmarks 1 ↓ 2 ↑ 1 ↓ 3 ↓ 5, where a ↓ b means that you go down a track from landmark a to landmark b, and a ↑ b means that you climb a track from landmark a to landmark b. Another possible sequence is 1 ↓ 3 ↓ 5 ↑ 3 ↑ 1 ↓ 2.\nGiven the tracks between the landmarks, the energy required to climb them, and the landmarks where your friends are, compute the minimum total amount of energy required to visit all your friends from the top of the mountain.\nInput\nThe first line contains two integers N and F (1 ≤ F < N ≤ 105), representing respectively the number of landmarks and the number of your friends that are climbing the mountain. Landmarks are identified with distinct integers from 1 to N, being 1 the top of the mountain, where you initially are.\nEach of the next N − 1 lines describes a different track with three integers A, B and C, indicating that there is a track from A to B that goes down and requires an amount C of energy to be climbed (1 ≤ A ≤ N, 2 ≤ B ≤ N, A (cid:54)= B and 1 ≤ C ≤ 100). The next line contains F different integers L1,L2,...,LF (2 ≤ Li ≤ N for i = 1,2,...,F) representing the landmarks where your friends are. You may assume that the tracks between landmarks are such that there exists exactly one route that goes down from the top of the mountain to each other landmark.\nOutput\nOutput a line with an integer representing the minimum total amount of energy required to visit all your friends starting from the top of the mountain.",
    "samples": [
      [
        "6 2\n1 2 2\n2 4 2\n1 3 3\n3 6 3\n3 5 1\n5 2",
        "2"
      ],
      [
        "4 2\n1 2 2\n1 3 1\n3 4 2\n2 4",
        "2"
      ],
      [
        "4 2\n1 4 1\n1 3 1\n4 2 2\n2 4",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Cristhian Bonilha, Universidade Tecnológica Federal do Paraná"
    },
    "hasImages": true
  },
  {
    "name": "Help cupid",
    "text": "Cupid’s job is getting harder, so he is adopting new technologies to help him with his difficult task of matching people into happy couples. He appointed the best programmers in his staff to a new project called Advanced Couples Matching (ACM). For this project, the programmers need to produce an algorithm that takes a set of an even number of N lonely persons and matches them into N/2 couples, such that each person is in exactly one couple.\nSadly, the data available about each person is limited. In this modern world, using gender, ethnicity, age or nationality as criteria to form couples is not a sensible option, so the programmers can only use data about the internet connection of each candidate. They decided to focus this stage on time zones.\nPeople living in closer time zones are more likely to find time to interact with each other. Thus, the programmers decided to create couples so as to minimize the total time difference.\nEach time zone is identified by an integer between −11 and 12, inclusive, representing its difference in hours from a particular time zone called Coordinated Universal Time (or UTC). The time difference of two people living in time zones represented by integers i and j is the minimum between |i − j| and 24 − |i − j|. Given a partition of a set of an even number N of candidates into N/2 couples, its total time difference is the sum of the time difference of each couple.\nYou are asked to write a program that receives as input the time zones of a set of N candidates.\nThe output of the program must be the minimum total time difference among all possible partitions of the set into couples.\nInput\nThe first line contains an even integer N (2 ≤ N ≤ 1000) representing the number of candidates to be coupled. The second line contains N integers T1,T2,...,TN (−11 ≤ Ti ≤ 12 for i = 1,2,...,N) indicating the time zones of the candidates.\nOutput\nOutput a line with an integer representing the minimum total time difference among all possible partitions of the set of candidates into couples.",
    "samples": [
      [
        "6\n-3 -10 -5 11 4 4",
        "5"
      ],
      [
        "2\n-6 6",
        "12"
      ],
      [
        "8\n0 0 0 0 0 0 0 0",
        "0"
      ]
    ],
    "source": {
      "year": "2014",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Pablo Ariel Heiber, Universidad de Buenos Aires"
    },
    "hasImages": false
  },
  {
    "name": "Cachorro-quente",
    "text": "Em 2018 foi alcançado um novo recorde mundial na famosa Competição de Cachorros-Quentes do Nathan: o campeão, Joey Chestnut, devorou 74 cachorros-quentes em dez minutos, superando o incrível recorde de 72 sanduíches devorados pelo mesmo Chestnut em 2017.\nO restaurante Nathan’s Famous Corporation, localizado no Brooklyn, NY, é o responsável pela competição. Eles produzem deliciosos cachorros-quentes, mundialmente famosos, mas quando o as sunto é matemática eles não são tão bons. Eles desejam ser listados no Livro de Recordes do Guinness, mas para isso devem preencher um formulário descrevendo os fatos básicos da competição. Em par ticular, eles devem informar o número médio de cachorros-quentes consumidos pelos participantes durante a competição.\nVocê pode ajudá-los? Eles prometeram pagá-lo com um dos seus saborosos cachorros-quentes. Da dos o número total de cachorros-quentes consumidos e o número total de participantes na competição, você deve escrever um programa para determinar o número médio de cachorros-quentes consumidos pelos participantes.\nEntrada\nA entrada consiste de uma única linha que contém dois inteiros H e P (1 ≤ H,P ≤ 1000) indicando respectivamente o número total de cachorros-quentes consumidos e o número total de participantes na competição.\nSaída\nSeu programa deve produzir uma única linha com um número racional representando o número médio de cachorros-quentes consumidos pelos participantes. O resultado deve ser escrito como um número racional com exatamente dois dígitos após o ponto decimal, arredondado se necessário.",
    "samples": [
      [
        "10 90",
        "0.11"
      ],
      [
        "840 11",
        "76.36"
      ],
      [
        "1 50",
        "0.02"
      ],
      [
        "34 1000",
        "0.03"
      ],
      [
        "35 1000",
        "0.04"
      ],
      [
        "36 1000",
        "0.04"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo de boca",
    "text": "Um jogo infantil, muito popular, é o 21 de boca. O jogo é jogado da seguinte forma: o primeiro jogador diz um número, n0, que pode ser 1 ou 2. O segundo jogador pode então dizer um número n1 tal que n1 ∈ {n0 +1,n0 +2}. E assim por diante, os jogadores se alternam, dizendo sempre um número que é um ou dois maior do que o anterior. O jogador que disser 21 ganha o jogo. Por exemplo, a sequência de números poderia ser: 1,3,5,6,7,9,11,12,14,15,16,18,19,21. Neste jogo, o primeiro jogador sempre perde, se o segundo souber jogar bem.\nA cada nova geração as crianças ficam mais espertas. Atualmente, apesar de acharem o 21 de boca um jogo interessante, muitas crianças não se sentem desafiadas o bastante e por isso resolveram generalizar o jogo, criando assim o N de boca. Dado um inteiro N, no lugar do 21, o primeiro jogador pode escolher 1 ou 2. A partir daí os jogadores se alternam, adicionando 1 ou 2 ao número anterior, até que um deles diga o número N e ganhe o jogo. Sabendo que ambos os jogadores são excelentes e sabem jogar muito bem, seu problema é determinar qual o inteiro inicial que o primeiro jogador deve escolher para ganhar o jogo.\nEntrada\nA entrada consiste de uma única linha que contém o inteiro N (3 ≤ N ≤ 10100) escolhido para a partida atual do N de boca.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o número, em {1,2}, que o primeiro jogador deve escolher, para ganhar o jogo. Se não for possível, então o inteiro deve ser zero.",
    "samples": [
      [
        "7",
        "1"
      ],
      [
        "9",
        "0"
      ],
      [
        "12341234123412341234123412341234",
        "2"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Desvendando Monty Hall",
    "text": "No palco de um programa de auditório há três portas fechadas: porta 1, porta 2 e porta 3. Atrás de uma dessas portas há um carro, atrás de cada uma das outras duas portas há um bode. A produção do programa sorteia aleatoriamente a porta onde vai estar o carro, sem trapaça. Somente o apresentador do programa sabe onde está o carro. Ele pede para o jogador escolher uma das portas. Veja que agora, como só há um carro, atrás de pelo menos uma entre as duas portas que o jogador não escolheu, tem que haver um bode! Portanto, o apresentador sempre pode fazer o seguinte: entre as duas portas que o jogador não escolheu, ele abre uma que tenha um bode, de modo que o jogador e os espectadores possam ver o bode. O apresentador, agora, pergunta ao jogador: “você quer trocar sua porta pela outra porta que ainda está fechada?”. É vantajoso trocar ou não? O jogador quer ficar com a porta que tem o carro, claro! Paulinho viu uma demonstração rigorosa de que a probabilidade de o carro estar atrás da porta que o jogador escolheu inicialmente é 1/3 e a probabilidade de o carro estar atrás da outra porta, que ainda está fechada e que o jogador não escolheu inicialmente, é 2/3 e, portanto, a troca é vantajosa.\nPaulinho não se conforma, sua intuição lhe diz que tanto faz, que a probabilidade é 1/2 para ambas as portas ainda fechadas...\nNeste problema, para acabar com a dúvida do Paulinho, vamos simular esse jogo milhares de vezes e contar quantas vezes o jogador ganhou o carro. Vamos supor que: • O jogador sempre escolhe inicialmente a porta 1; • O jogador sempre troca de porta, depois que o apresentador revela um bode abrindo uma das duas portas que não foram escolhidas inicialmente.\nNessas condições, em um jogo, dado o número da porta que contém o carro, veja que podemos saber exatamente se o jogador vai ganhar ou não o carro.\nEntrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 104), indicando o número de jogos na simulação. Cada uma das N linhas seguintes contém um inteiro: 1, 2 ou 3; representando o número da porta que contém o carro naquele jogo.\nSaída\nSeu programa deve produzir uma única linha, contendo um inteiro representando o número de vezes que o jogador ganhou o carro nessa simulação, supondo que ele sempre escolhe inicialmente a porta 1 e sempre troca de porta depois que o apresentador revela um bode abrindo uma das duas portas que não foram escolhidas inicialmente.",
    "samples": [
      [
        "5\n1\n3\n2\n2\n1",
        "3"
      ],
      [
        "1\n1",
        "0"
      ],
      [
        "15\n3\n2\n3\n1\n1\n3\n3\n2\n2\n1\n2\n3\n2\n1\n1",
        "10"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Gasolina",
    "text": "Terminada a greve dos caminhoneiros, você e os demais especialistas em logística da Nlogônia agora têm a tarefa de planejar o reabastecimento dos postos da cidade. Para isso, foram coletadas informações sobre os estoques das R refinarias e sobre as demandas dos P postos de gasolina. Além disso, há restrições contratuais que fazem com que algumas refinarias não possam atender alguns postos; quando uma refinaria pode fornecer a um posto, sabe-se o menor tempo de percurso para transportar o combustível de um lugar ao outro.\nA tarefa dos especialistas é minimizar o tempo de abastecimento de todos os postos, satisfazendo completamente suas demandas. As refinarias têm uma quantidade suficientemente grande de ca minhões, de modo que é possível supor que cada caminhão precisará fazer no máximo uma viagem, de uma refinaria para um posto de gasolina. A capacidade de cada caminhão é maior do que a demanda de qualquer posto, mas pode ser necessário usar mais de uma refinaria para atender a demanda de um posto.\nSeu programa deve encontrar o tempo mínimo no qual é possível abastecer totalmente todos os postos, respeitando os estoques das refinarias.\nEntrada\nA primeira linha da entrada contém três inteiros, P, R e C, respectivamente o número de postos, o número de refinarias e o número de pares de refinaria e posto cujo tempo de percurso será dado (1 ≤ P,R ≤ 1000 e 1 ≤ C ≤ 20000). A segunda linha contém P inteiros Di (1 ≤ Di ≤ 104), representando as demandas, em litros de gasolina, dos postos i = 1,2,...,P, nessa ordem. A terceira linha contém R inteiros Ei (1 ≤ Ei ≤ 104), representando os estoques, em litros de gasolina, das refinarias i = 1,2,...,R, nessa ordem. Finalmente, as últimas C linhas descrevem tempos de percurso, em minutos, entre postos e refinarias. Cada uma dessas linhas contém três inteiros, I, J e T (1 ≤ I ≤ P e 1 ≤ J ≤ R e 1 ≤ T ≤ 106), onde I é a identificação de um posto, J é a identificação de uma refinaria e T é o tempo do percurso de um caminhão da refinaria J ao posto I. Não haverá pares (J,I) repetidos.\nNem todos os pares são informados; caso um par não seja informado, há restrições contratuais que impedem a refinaria de atender o posto.\nSaída\nImprima um inteiro T que indica o tempo mínimo em minutos para que todas os postos sejam completamente abastecidos. Caso isso não seja possível, imprima −1.",
    "samples": [
      [
        "3 2 5\n20 10 10\n30 20\n1 1 2\n2 1 1\n2 2 3\n3 1 4\n3 2 5",
        "4"
      ],
      [
        "3 2 5\n20 10 10\n25 30\n1 1 3\n2 1 1\n2 2 4\n3 1 2\n3 2 5",
        "5"
      ],
      [
        "4 3 9\n10 10 10 20\n10 15 30\n1 1 1\n1 2 1\n2 1 3\n2 2 2\n3 1 10\n3 2 10\n4 1 1\n4 2 2\n4 3 30",
        "-1"
      ],
      [
        "1 2 2\n40\n30 10\n1 1 100\n1 2 200",
        "200"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Kepler",
    "text": "Neste estranho sistema planetário, N planetas se guem órbitas circulares ao redor de uma estrela que está nas coordenadas (0,0) do sistema. A es trela está estritamente contida no interior de to dos os círculos que definem as órbitas, mas o cen tro dessas órbitas não está necessariamente nas coordenadas (0,0). As órbitas circulares estão em posição geral: se duas órbitas se interceptam, então elas se interceptam em dois pontos distin tos; além disso, três órbitas não se interceptam em um ponto comum.\nO cientista João Kepler está interessado em tes tar uma nova teoria e, para isso, pediu sua ajuda para computar o número de pontos de interseção entre as órbitas, caso esse número seja menor que ou igual a 2N. Caso contrário, precisamos ape nas saber que o número é maior do que 2N.\nEntrada\nA primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 150000), representando o número de órbitas. Cada uma das N linhas seguintes contém três números reais, com exatamente 3 dígitos decimais, X, Y (−25.0 ≤ X,Y ≤ 25.0) e R (1.0 ≤ R ≤ 200000.0), definindo as coordenadas do centro e o raio das órbitas.\nSaída\nImprima uma linha contendo um inteiro, representando o número de pontos de interseção entre as órbitas, se esse número for menor ou igual a 2N. Caso contrário, imprima “greater”.",
    "samples": [
      [
        "6\n0.000 1.000 4.000\n0.000 0.000 10.500\n4.000 0.000 6.000\n1.000 1.000 1.750\n-1.000 -1.000 8.000\n2.000 -2.000 4.000",
        "10"
      ],
      [
        "4\n-1.000 -1.000 3.000\n1.000 -1.000 3.001\n-3.004 3.003 5.002\n1.000 1.000 3.005",
        "greater"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Festival",
    "text": "Festivais de música deveriam ser pura diversão, porém alguns deles se tornam tão grandes a ponto de causar dor de cabeça para os frequentadores. O problema é que são tantas atrações boas tocando em tantos palcos que a simples tarefa de escolher quais shows assistir se torna complexa.\nPara ajudar frequentadores de tais festivais, Fulano decidiu criar um aplicativo que, após avaliar as músicas ouvidas em seus serviços de streaming favoritos, sugere quais shows assistir de modo que não exista outra combinação de shows melhor de acordo com os critérios descritos a seguir: • Para aproveitar a experiência ao máximo é importante assistir cada um dos shows escolhidos por completo; • Ir no festival e não ver um dos palcos está fora de cogitação; • Para garantir que a seleção dos artistas seja compatível com o usuário, contou-se quantas músicas de cada artista o usuário conhece por já ter ouvido-as nos serviços de streaming. O total de músicas conhecidas dos artistas escolhidos deve ser o maior possível.\nInfelizmente a versão beta do aplicativo recebeu várias críticas, pois os usuários conseguiram pensar em seleções melhores que aquelas sugeridas. Sua tarefa nesse problema é ajudar Fulano e escrever um programa que, dadas as descrições dos shows acontecendo em cada palco, calcula a lista ideal para o usuário.\nO tempo de deslocamento entre os palcos é ignorado; portanto, desde que não haja interseção entre os horários de quaisquer dois shows escolhidos considera-se que é possível assistir a todos por completo. Em particular, se um show acaba exatamente quando um outro começa, é possível assistir a ambos.\nEntrada\nA primeira linha contém um número inteiro 1 ≤ N ≤ 10 representando o número de palcos. As N linhas seguintes descrevem os shows acontecendo em cada palco. A i-ésima delas é composta por um inteiro Mi ≥ 1, representando o número de shows marcados para o i-ésimo palco seguido por Mi descrições de shows. Cada descrição de show contém 3 inteiros ij, fj e oj (1 ≤ ij < fj ≤ 86400 e 1 ≤ oj ≤ 1000), representando respectivamente os horários de início e fim do show e o número de músicas do cantor se apresentando que foram previamente ouvidas pelo usuário. A soma dos Mi não excederá 1000.\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando o total de músicas previamente ouvidas dos artistas escolhidos, ou −1 caso não haja solução válida.",
    "samples": [
      [
        "3\n4 1 10 100 20 30 90 40 50 95 80 100 90\n1 40 50 13\n2 9 29 231 30 40 525",
        "859"
      ],
      [
        "3\n2 13 17 99 18 19 99\n2 13 14 99 15 20 99\n2 13 15 99 18 20 99",
        "-1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Cortador de Pizza",
    "text": "Vô Giuseppe ganhou de presente um cortador profissional de pizza, daqueles do tipo carretilha e, para comemorar, assou uma pizza retangular gigante para seus netos! Ele sempre dividiu suas pizzas em pedaços fazendo cortes ao longo de linhas contínuas, não necessariamente retilíneas, de dois tipos: algumas começam na borda esquerda da pizza, seguem monotonicamente para a direita e terminam na borda direita; outras começam na borda inferior, seguem monotonicamente para cima e terminam na borda superior. Mas Vô Giuseppe sempre seguia uma propriedade: dois cortes do mesmo tipo nunca podiam se interceptar. Veja um exemplo com 4 cortes, dois de cada tipo, na parte esquerda da figura, que dividem a pizza em 9 pedaços.\nAcontece que Vô Giuseppe simplesmente ama geometria, topologia, combinatória e coisas assim; por isso, resolveu mostrar para as crianças que poderia obter mais pedaços, com o mesmo número de cortes, se cruzamentos de cortes de mesmo tipo fossem permitidos. A parte direita da figura mostra, por exemplo, que se os dois cortes do tipo dos que vão da esquerda para a direita puderem se interceptar, a pizza será dividida em 10 pedaços.\nVô Giuseppe descartou a propriedade, mas não vai fazer cortes aleatórios. Além de serem de um dos dois tipos, eles vão obedecer às seguintes restrições: • Dois cortes têm no máximo um ponto de interseção e, se tiverem, é porque os cortes se cruzam naquele ponto; • Três cortes não se interceptam num mesmo ponto; • Dois cortes não se interceptam na borda da pizza; • Um corte não intercepta um canto da pizza.\nDados os pontos de começo e término de cada corte, seu programa deve computar o número de pedaços resultantes dos cortes do Vô Giuseppe.\nEntrada\nA primeira linha da entrada contém dois inteiros X e Y , (1 ≤ X,Y ≤ 109), representando as coor denadas (X,Y ) do canto superior direito da pizza. O canto inferior esquerdo tem sempre coordenadas (0,0). A segunda linha contém dois inteiros H e V , (1 ≤ H,V ≤ 105), indicando, respectivamente, o número de cortes que vão da esquerda para a direita, e o número de cortes que vão de baixo para cima.\nCada uma das H linhas seguintes contém dois inteiros Y1 e Y2 definindo as ordenadas de encontro dos lados verticais da pizza com um corte que vai do lado esquerdo, na ordenada Y1, para o lado direito, na ordenada Y2. Cada uma das V linhas seguintes contém dois inteiros X1 e X2 definindo as abscissas de encontro dos lados horizontais da pizza com um corte que vai do lado inferior, na abscissa X1, para o lado superior, na abscissa X2.\nSaída\nImprima uma linha contendo um inteiro representando o número de pedaços resultantes.",
    "samples": [
      [
        "3 4\n3 2\n1 2\n2 1\n3 3\n1 1\n2 2",
        "13"
      ],
      [
        "5 5\n3 3\n2 1\n3 2\n1 3\n3 4\n4 3\n2 2",
        "19"
      ],
      [
        "10000 10000\n1 2\n321 3455\n10 2347\n543 8765",
        "6"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Bolinhas de Gude",
    "text": "Usar bolinhas de gude como moeda não deu muito certo em Cubicônia. Na tentativa de se redimir com seus amigos, depois de roubar suas bolinhas de gude, o imperador decidiu convidar todos para uma noite de jogos em seu palácio.\nNaturalmente, os jogos utilizam bolinhas de gude, afinal agora o imperador precisa encontrar alguma utilidade para tantas bolinhas. N bolinhas de gude são espalhadas em um grande tabuleiro cujas linhas são numeradas de 0 a L e as colunas numeradas de 0 a C. Os jogadores alternam turnos e em cada turno o jogador da vez deve escolher uma das bolinhas de gude e movê-la. O primeiro jogador que mover uma bolinha para a posição (0,0) é o vencedor. Para que o jogo seja interessante, os movimentos são limitados; do contrário, o primeiro jogador sempre moveria a bolinha para a posição (0,0) e venceria. Um movimento consiste em escolher um inteiro u maior que 0 e uma bolinha, cuja localização denotaremos por (l,c), e movê-la para uma das seguintes posições, desde que a mesma não saia do tabuleiro: • (l − u,c); • (l,c − u); ou • (l − u,c − u).\nNote que mais de uma bolinha de gude pode ocupar a mesma posição no tabuleiro.\nComo o imperador não gosta de perder você deve ajudá-lo a determinar em quais partidas ele deve participar. Como é de se esperar, sempre que joga o imperador fica com o primeiro turno. Assumindo que todos jogam de forma ótima, seu programa deve analisar a distribuição inicial das bolinhas de gude no tabuleiro e informar se é possível ou não que o imperador vença caso ele jogue.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes contém dois inteiros li e ci indicando em qual linha e coluna a i-ésima bolinha de gude se encontra no tabuleiro (1 ≤ li,ci ≤ 100).\nSaída\nSeu programa deve produzir uma única linha contendo o caractere Y caso seja possível para o imperador ganhar o jogo ou N caso contrário.",
    "samples": [
      [
        "2\n1 3\n2 3",
        "Y"
      ],
      [
        "1\n1 2",
        "N"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Aventurando-se no Slackline",
    "text": "Beltrano recentemente se interessou por slackline. Slackline é um esporte de equilíbrio sobre uma fita elástica esticada entre dois pontos fixos, o que permite ao praticante andar e fazer manobras em cima da fita. Durante as férias tudo que Beltrano quer fazer é praticar, e para isso ele foi para a fazenda de um amigo, onde há uma plantação de eucaliptos.\nA plantação é muito bem organizada. Os eucaliptos estão dispostos em N fileiras com M árvores em cada. Há um espaço de um metro entre cada fileira e as árvores nas diferentes fileiras estão todas perfeitamente alinhadas com um espaço de um metro entre elas.\nBeltrano vai montar o slackline usando duas árvores. Ao montar o slackline Beltrano não gosta que a distância entre as duas árvores seja muito pequena, já que as melhores manobras exigem que a fita tenha pelo menos L metros. Também não é possível esticar demais a fita já que ela tem um comprimento máximo de R metros. Note que ao esticar a fita entre as duas árvores escolhidas não pode haver nenhuma outra árvore na linha formada, caso contrário não seria possível utilizar a fita toda para as manobras.\nBeltrano gostaria de saber de quantas formas diferentes é possível montar o slackline usando as árvores da fazenda. Duas formas são consideradas diferentes se pelo menos uma das árvores onde a fita foi amarrada é diferente.\nEntrada\nA entrada consiste de uma única linha que contém quatro inteiros, N,M,L,R, representando respectivamente o número de linhas e colunas da plantação e os comprimentos mínimo e máximo do slackline (1 ≤ N,M ≤ 105; 1 ≤ L ≤ R ≤ 105).\nSaída\nSeu programa deve produzir uma única linha com um inteiro representando de quantas formas diferentes o slackline pode ser montado. Como o resultado pode ser grande, a resposta deve ser esse número módulo 109 + 7.",
    "samples": [
      [
        "2 2 1 1",
        "4"
      ],
      [
        "2 3 1 4",
        "13"
      ],
      [
        "3 4 1 4",
        "49"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Enigma",
    "text": "Dada uma configuração inicial, a máquina de criptografia alemã Enigma, da Segunda Guerra Mundial, substituía cada letra digitada no teclado por alguma outra letra. A substituição era bastante complexa, mas a máquina tinha uma vulnerabilidade: uma letra nunca seria substituída por ela mesma! Essa vulnerabilidade foi explorada por Alan Turing, que trabalhou na criptoanálise da Enigma durante a guerra. O objetivo era encontrar a configuração inicial da máquina usando a suposição de que a mensagem continha uma certa expressão usual da comunicação, como por exemplo a palavra ARMADA.\nEssas expressões eram chamadas de cribs. Se a mensagem cifrada era, por exemplo, FDMLCRDMRALF, o trabalho de testar as possíveis configurações da máquina era simplificado porque a palavra ARMADA, se estivesse nessa mensagem cifrada, só poderia estar em duas posições, ilustradas na tabela abaixo com uma seta. As demais cinco posições não poderiam corresponder ao crib ARMADA porque ao menos uma letra do crib, sublinhada na tabela abaixo, casa com sua correspondente na mensagem cifrada; como a Enigma nunca substituiria uma letra por ela própria, essas cinco posições poderiam ser descartadas nos testes.\n  Neste problema, dada uma mensagem cifrada e um crib, seu programa deve computar o número de posições possíveis para o crib na mensagem cifrada.\nEntrada\nA primeira linha da entrada contém a mensagem cifrada, que é uma sequência de pelo menos uma letra e no máximo 104 letras. A segunda linha da entrada contém o crib, que é uma sequência de pelo menos uma letra e no máximo o mesmo número de letras da mensagem. Apenas as 26 letras maiúsculas, sem acentuação, aparecem na mensagem e no crib.\nSaída\nImprima uma linha contendo um inteiro, indicando o número de posições possíveis para o crib na mensagem cifrada.",
    "samples": [
      [
        "FDMLCRDMRALF\nARMADA",
        "2"
      ],
      [
        "AAAAABABABABABABABABA\nABA",
        "7"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Juntando Capitais",
    "text": "Um reino longínquo possui N cidades, dentre as quais K são capitais. O rei Richard quer construir linhas de transmissão, cada uma delas ligando duas cidades. É preciso haver um caminho, ou seja, uma sequência de linhas de transmissão, entre qualquer par de capitais.\nCada linha de transmissão possui um custo associado, que é a distância euclidiana entre as cidades que a linha de transmissão conecta. Como o rei é avarento, ele deseja que as linhas de transmissão sejam criadas de modo que o custo total (soma dos custos das linhas) seja o menor possível.\nA figura, na parte A, mostra um exemplo de reino com N = 10 cidades, sendo K = 4 capitais.\nO engenheiro chefe apresentou ao rei a solução mostrada na parte B, que minimiza de fato o custo total. Mas o rei não gostou de ver uma capital possuindo mais de uma linha de transmissão. Ele, então, determinou uma nova restrição: uma capital só pode estar ligada a uma outra cidade. Desse jeito, depois de trabalhar muito, o engenheiro chefe apresentou a nova solução, ilustrada na parte C da figura. Só que ele não tem certeza se essa solução é ótima e precisa da sua ajuda! Dadas as coordenadas das cidades, seu programa deve computar o custo total mínimo possível para construir linhas de transmissão de modo que todo par de capitais esteja ligado por um caminho e toda capital esteja ligada a apenas uma cidade.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e K, 4 ≤ N ≤ 100 e 3 ≤ K < min(10,N), indicando respectivamente o número de cidades e o número de capitais. As N linhas seguintes contêm, cada uma, dois inteiros X e Y , −1000 ≤ X,Y ≤ 1000, representando as coordenadas de uma cidade.\nAs K primeiras cidades são as capitais. Não há duas cidades com as mesmas coordenadas.\nSaída\nImprima uma linha contendo um número real, com 5 casas decimais, indicando o custo total mínimo para construir as linhas de transmissão, de acordo com as restrições acima.",
    "samples": [
      [
        "6 4\n-20 10\n-20 -10\n20 10\n20 -10\n-10 0\n10 0",
        "76.56854"
      ],
      [
        "22 9\n-3 -25\n0 -6\n-1 -9\n2 -21\n-5 -19\n0 -23\n-2 24\n-4 37\n-3 33\n-3 -12\n2 39\n3 -49\n-3 -26\n2 24\n5 3\n-4 -9\n-2 -9\n-4 8\n3 -33\n-2 31\n-1 -13\n0 2",
        "95.09318"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Interruptores",
    "text": "No painel de controle de um grande anfiteatro existem N interruptores, numerados de 1 a N, que controlam as M lâmpadas do local, numeradas de 1 a M. Note que o número de interruptores e lâmpadas não é necessariamente o mesmo e isso acontece porque cada interruptor está associado a um conjunto de lâmpadas e não apenas a uma lâmpada. Quando um interruptor é acionado, o estado de cada uma das lâmpadas associadas a ele é invertido. Quer dizer, aquelas apagadas acendem e as acesas se apagam.\nAlgumas lâmpadas estão acesas inicialmente e o zelador do anfiteatro precisa apagar todas as lâmpadas. Ele começou tentando acionar interruptores aleatoriamente mas, como não estava conse guindo apagar todas as lâmpadas ao mesmo tempo, decidiu seguir uma seguinte estratégia fixa. Ele vai acionar os interruptores na sequência 1,2,3,...,N,1,2,3,... ou seja, toda vez após acionar o interruptor de número N, ele recomeça a sequência a partir do interruptor 1. Ele pretende acionar interruptores, seguindo essa estratégia, até que todas as lâmpadas estejam apagadas ao mesmo tempo (momento em que ele para de acionar os interruptores). Será que essa estratégia vai funcionar? Neste problema, dadas as lâmpadas acesas inicialmente e dados os conjuntos de lâmpadas que estão associados a cada interruptor, seu programa deve computar o número de vezes que o zelador vai acionar os interruptores. Caso a estratégia do zelador nunca apague todas as lâmpadas ao mesmo tempo, seu programa deve imprimir −1.\nEntrada\nA primeira linha contém dois inteiros N e M (1 ≤ N,M ≤ 1000) representando, respectivamente, o número de interruptores e o número de lâmpadas. A segunda linha contém um inteiro L (1 ≤ L ≤ M) seguido por L inteiros distintos Xi (1 ≤ Xi ≤ M), representando as lâmpadas acesas inicialmente.\nCada uma das N linhas seguintes contém um inteiro Ki (1 ≤ Ki ≤ M) seguido por Ki inteiros distintos Yi (1 ≤ Yi ≤ M), representando as lâmpadas associadas ao interruptor i (1 ≤ i ≤ N).\nSaída\nSe programa deve produzir uma única linha contendo um inteiro representando o número de vezes que o zelador vai acionar os interruptores, seguindo a estratégia descrita, até todas as lâmpadas estarem apagadas ao mesmo tempo. Caso isso nunca vá acontecer, imprima −1.",
    "samples": [
      [
        "6 3\n2 1 3\n3 1 2 3\n2 1 3\n2 1 2\n2 2 3\n1 2\n3 1 2 3",
        "5"
      ],
      [
        "3 3\n2 2 3\n1 3\n2 1 2\n1 2",
        "-1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Hipótese Policial",
    "text": "O sistema de transporte público da Nlogônia conta com uma rede expressa conectando os principais pontos turísticos do país. São usados N −1 trens-bala para conectar N atrações de modo que a partir de um dos pontos turísticos é possível alcançar qualquer outro ponto usando apenas essa rede expressa.\nComo em qualquer lugar do mundo, é comum que haja pichações nas estações de trem. O que chamou a atenção da polícia do país é o fato de que em cada uma das estações é possível encontrar exatamente uma letra pichada com um estilo específico. A hipótese é de que criminosos podem estar alterando as pichações como meio de comunicação e portanto decidiu-se criar um sistema capaz de monitorar as pichações e suas alterações.\nDado um padrão P, a descrição das conexões entre as estações e as letras suspeitas em cada uma das estações, sua tarefa é escrever um programa capaz de lidar com as seguintes operações: • 1 u v: imprime quantas ocorrências do padrão P existem no caminho de u até v se olharmos para os caracteres associados a vértices consecutivos do caminho; • 2 u x: Altera a letra suspeita na estação u para x.\nEntrada\nA primeira linha contém dois inteiros N e Q (1 ≤ N,Q ≤ 105), representando o número de estações e a quantidade de operações que devem ser processadas. A segunda linha contém o padrão P monitorado (1 ≤ |P| ≤ 100). A terceira linha contém uma string S com N caracteres representando as letras inicialmente associadas a cada uma das estações. Cada uma das N − 1 linhas seguintes contém dois inteiros u e v indicando que existe um trem-bala entre as estações u e v. As Q linhas seguintes descrevem as operações que devem ser processadas conforme descrito acima.\nSaída\nSeu programa deve imprimir uma linha para cada operação do tipo 1 contendo um inteiro que representa o número de ocorrências do padrão P no caminho analisado.",
    "samples": [
      [
        "4 4\nxtc\nxtzy\n1 2\n2 3\n3 4\n1 1 3\n2 3 c\n1 1 3\n1 3 1",
        "0\n1\n0"
      ],
      [
        "6 7\nlol\ndlorlx\n1 2\n1 3\n3 4\n3 5\n5 6\n1 2 6\n2 3 l\n2 6 l\n2 5 o\n1 2 6\n2 1 o\n1 6 2",
        "0\n1\n2"
      ],
      [
        "5 2\naba\nababa\n1 2\n2 3\n3 4\n4 5\n1 1 5\n1 5 1",
        "2\n2"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Linhas de Metrô",
    "text": "O sistema de metrô de uma grande cidade é formado por um conjunto de estações e por túneis que ligam alguns pares de estações. O sistema foi desenhado de forma que existe exatamente uma sequência de túneis ligando qualquer par de estações. As estações nas quais apenas um túnel chega são chamadas de terminais. Há várias linhas de trens que fazem viagens de ida e volta entre duas estações terminais, transitando pelo caminho único entre elas. A população está reclamando das linhas atuais e, por isso, o prefeito ordenou uma reformulação total das linhas. Como o sistema possui muitas estações, nós precisamos ajudar os engenheiros que estão tentando decidir quais pares de terminais passarão a definir uma linha.\nA figura ilustra um sistema onde as estações terminais são mostradas como círculos preenchidos e as não-terminais são mostradas como círculos vazios. Na parte esquerda, veja que se o par (A,B) definir uma linha e o par (C,D) definir outra, elas não terão qualquer estação em comum. Mas, na parte direita, podemos ver que se os pares (E,F) e (G,H) definirem duas linhas, elas terão duas estações em comum.\nDada a descrição do sistema de túneis e uma sequência de Q consultas constituídas de dois pares de terminais, seu programa deve computar, para cada consulta, quantas estações em comum as linhas definidas pelos dois pares teriam.\nEntrada\nA primeira linha da entrada contém dois inteiros N (5 ≤ N ≤ 105) e Q (1 ≤ Q ≤ 20000), repre sentando respectivamente o número de estações e o número de consultas. As estações são numeradas de 1 até N. Cada uma das N −1 linhas seguintes contém dois inteiros distintos U e V , 1 ≤ U,V ≤ N, indicando que existe um túnel entre as estações U e V . Cada uma das Q linhas seguintes contém quatro inteiros distintos A, B, C e D (1 ≤ A,B,C,D ≤ N), representando uma consulta: as duas linhas de trem são definidas pelos pares (A,B) e (C,D).\nSaída\nPara cada consulta, seu programa deve imprimir uma linha contendo um inteiro representando quantas estações em comum teriam as duas linhas de trem definidas pela consulta.",
    "samples": [
      [
        "10 4\n1 4\n4 5\n3 4\n3 2\n7 3\n6 7\n7 8\n10 8\n8 9\n6 10 2 5\n1 9 5 10\n9 10 2 1\n5 10 2 9",
        "0\n4\n0\n3"
      ],
      [
        "5 1\n1 5\n2 5\n5 3\n5 4\n1 2 3 4",
        "1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Modificando SAT",
    "text": "O problema da Satisfatibilidade Booleana (conhecido como SAT) consiste em decidir, dada uma fórmula booleana na forma normal conjuntiva, se existe alguma atribuição de valores “verdadeiro” ou “falso” a suas variáveis de forma que a fórmula inteira seja verdadeira.\nNa forma normal conjuntiva, a fórmula é dada em um formato bem específico. Em primeiro lugar, as únicas operações lógicas utilizadas são o “E”, o “OU” e a negação, denotados por ∧,∨ e ¬, respectivamente. Uma fórmula é formada através da operação “E” de diferentes partes, chamadas cláusulas, C1,...,Cm. Desta forma, uma fórmula ϕ terá o seguinte formato: ϕ = C1 ∧ ··· ∧ Cm.\nAlém disso, cada uma das cláusulas também possui um formato específico. Em particular, cada uma das cláusulas é composta pelo “OU” de literais, que são variáveis ou negações de variáveis, cercada por parênteses. Assim, (x1 ∨ ¬x2) é uma cláusula válida, enquanto (x1 ∧ ¬x2) não o seria, por usar o operador “E”. Um exemplo completo de fórmula seria: ϕ = (x1 ∨ x2 ∨ x3) ∧ (¬x1) ∧ (x1 ∨ ¬x2 ∨ x3) ∧ (x2 ∨ ¬x3).\nUma variação do problema SAT é conhecida como k-SAT, onde cada cláusula possui no máximo k literais. A fórmula acima seria um exemplo de instância do problema 3-SAT, mas não de 2-SAT.\nNote que, em todos estes problemas, para uma fórmula ser verdadeira, cada uma das cláusulas deve ser verdadeira e, portanto, pelo menos um dos literais (da forma xi ou ¬xi) de cada cláusula deve ser verdadeiro.\nUma atribuição é um modo de definir as variáveis como verdadeiras ou falsas. Neste problema estamos interessados em numa variação do problema 3-SAT, no qual uma atribuição válida deve ter exatamente 1 ou exatamente 3 literais verdadeiros em cada cláusula. Dada uma fórmula, sua tarefa é decidir se existe uma atribuição válida, levando em conta tal restrição extra. Caso haja uma atribuição válida, você deve imprimir a lexicograficamente máxima. A ordem lexicográfica é definida do seguinte modo: dadas duas atribuições diferentes, podemos compará-las olhando para a variável de menor índice que difere nas duas atribuições; das duas, a maior atribuição é a que dá valor verdadeiro para tal variável.\nEntrada\nA primeira linha da entrada contém dois inteiros M e N (1 ≤ M,N ≤ 2000), descrevendo o número de cláusulas e variáveis, respectivamente. Em seguida, serão fornecidas M linhas, cada uma descrevendo uma cláusula (veja o exemplo para detalhes do formato). Cláusulas consecutivas são separadas pela string “ and”. Cada cláusula contém no máximo 3 literais. As variáveis são denotadas por “x” seguido de um número entre 1 e N. Não haverá dois espaços consecutivos, nem haverá espaço no final das linhas.\nO primeiro exemplo descreve a fórmula ϕ acima.\nSaída\nSeu programa deve imprimir uma única linha contendo N caracteres correspondentes a atribuição válida lexicograficamente máxima, ou impossible caso não haja atribuição válida. O i-ésimo caractere deve ser T se a variável é verdadeira na atribuição e F caso contrário.",
    "samples": [
      [
        "4 3\n(x1 or x2 or x3) and\n(not x1) and\n(x1 or not x2 or x3) and\n(x2 or not x3)",
        "impossible"
      ],
      [
        "5 6\n(not x1) and\n(x1 or x2 or x4) and\n(x1 or x3 or x5) and\n(not x2 or x3 or x5) and\n(x2 or x3 or not x4)",
        "FTTFFT"
      ],
      [
        "1 1\n(x1 or x1 or not x1)",
        "F"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Help Cupid",
    "text": "Cupid’s job is getting harder, so he is adopting new technologies to help him with his difficult task of matching people into happy couples. He appointed the best programmers in his staff to a new project called Advanced Couples Matching (ACM). For this project, the programmers need to produce an algorithm that takes a set of an even number of N lonely persons and matches them into N/2 couples, such that each person is in exactly one couple.\nSadly, the data available about each person is limited. In this modern world, using gender, ethnicity, age or nationality as criteria to form couples is not a sensible option, so the programmers can only use data about the internet connection of each candidate. They decided to focus this stage on time zones.\nPeople living in closer time zones are more likely to find time to interact with each other. Thus, the programmers decided to create couples so as to minimize the total time difference.\nEach time zone is identified by an integer between −11 and 12, inclusive, representing its difference in hours from a particular time zone called Coordinated Universal Time (or UTC). The time difference of two people living in time zones represented by integers i and j is the minimum between |i − j| and 24 − |i − j|. Given a partition of a set of an even number N of candidates into N/2 couples, its total time difference is the sum of the time difference of each couple.\nYou are asked to write a program that receives as input the time zones of a set of N candidates.\nThe output of the program must be the minimum total time difference among all possible partitions of the set into couples.\nInput\nThe first line contains an even integer N (2 ≤ N ≤ 1000) representing the number of candidates to be coupled. The second line contains N integers T1,T2,...,TN (−11 ≤ Ti ≤ 12 for i = 1,2,...,N) indicating the time zones of the candidates.\nOutput\nOutput a single line with an integer the minimum total time difference among all possible partitions of the set of candidates into couples.",
    "samples": [
      [
        "6\n-3 -10 -5 11 4 4",
        "5"
      ],
      [
        "2\n-6 6",
        "12"
      ],
      [
        "8\n0 0 0 0 0 0 0 0",
        "0"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Braille",
    "text": "The Braille system, designed by Louis Braille in 1825, revolutionized written communication for blind and visually impaired persons. Braille, a blind Frenchman, developed a tactile language where each element is represented by a cell with six dot positions, arranged in three rows and two columns.\nEach dot position can be raised or not, allowing for 64 different configurations which can be felt by trained fingers. The figure below shows the Braille representation for the decimal digits (a black dot indicates a raised position).\nIn order to develop a new software system to help teachers to deal with blind or visual impaired students, a Braille translator module is necessary. Given a braille message, composed only by braille digits, your job is to translate the message. Can you help? Input\nThe first line contains an integer D indicating the number of digits in the braille message (1 ≤ D ≤ 100). The next three lines contain a message composed of D Braille cells that your program must translate. Braille cells are separated by single spaces. In each Braille cell a raised position is denoted by the character “*” (asterisk), while a not raised position is denoted by the character “.” (dot).\nOutput\nFor each test case print just the digits of the corresponding translation, in the same format as the input (see the examples for further clarification).",
    "samples": [
      [
        "3\n** ** *.\n.* ** **\n.. .. ..",
        "478"
      ],
      [
        "10\n.* *. ** ** *. ** ** *. *. .*\n*. ** ** *. .* .* .. *. .. **\n.. .. .. .. .. .. .. .. .. ..",
        "9876543210"
      ],
      [
        "3\n.* .* .*\n** ** **\n.. .. ..",
        "000"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Vinícius Santos, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Hours and Minutes",
    "text": "Heidi has a discrete analog clock in the shape of a circle, as the one in the figure. Two hands rotate around the center of the circle, indicating hours and minutes. The clock has 60 marks placed around its perimeter, with the distance between consecutive marks being constant.\nThe minute hand moves from its current mark to the next exactly once every minute. The hour hand moves from its current mark to the next exactly once every 12 minutes, so it advances five marks each hour.\nWe consider that both hands move discretely and instantly, which means they are always positioned exactly over one of the marks and never in between marks.\nAt midnight both hands reach simultaneously the top mark, which indicates zero hours and zero minutes. After exactly 12 hours or 720 minutes, both hands reach the same position again, and this process is repeated over and over again. Note that when the minute hand moves, the hour hand may not move; however, when the hour hand moves, the minute hand also moves.\nHeidi likes geometry, and she likes to measure the minimum angle between the two hands of the clock at different times of the day. She has been writing some measures down, but after several years and a long list, she noticed that some angles were repeated while some others never appeared. For instance, Heidi’s list indicates that both at three o’clock and at nine o’clock the minimum angle between the two hands is 90 degrees, while an angle of 65 degrees does not appear in the list. Heidi decided to check, for any integer number A between 0 and 180, if there exists at least one time of the day such that the minimum angle between the two hands of the clock is exactly A degrees. Help her with a program that answers this question.\nInput\nThe input consists of a single line that contains an integer A representing the angle to be checked (0 ≤ A ≤ 180).\nOutput\nFor each test case output a line containing a character. If there exists at least one time of the day such that the minimum angle between the two hands of the clock is exactly A degrees, then write the uppercase letter “Y”. Otherwise write the uppercase letter “N”.",
    "samples": [
      [
        "90",
        "Y"
      ],
      [
        "65",
        "N"
      ],
      [
        "66",
        "Y"
      ],
      [
        "67",
        "N"
      ],
      [
        "0",
        "Y"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Pablo Ariel Heiber, Argentina"
    },
    "hasImages": true
  },
  {
    "name": "Database of Clients",
    "text": "Nowadays there are billions of email users. A little-known fact is that some email providers offer way more than the usual username@provider.com email address.\nSome providers simply ignore dots in usernames. Thus, if John owns the username johnsmith, he could tell people that his email address is johnsmith@provider.com, john.smith@provider.com or john.s.mith@provider.com, among others. Emails sent to any of these addresses would end up on his mailbox.\nOther providers allow appending the character “+” followed by any combination of letters and/or digits after the username. With this feature, by registering the username johnsmith, John would also be able to use johnsmith+friends@provider.com and johnsmith+2x3is6@provider.com.\nSometimes both features are available at once and in those cases john.smith+icpc@provider.com and john.smith+wants.2.eat.lemon.3.14@provider.com are valid addresses that John could use.\nThis is quite useful for users, who can manage different addresses to help organize their mailboxes and easily filter the newsletters eventually sent after registering on a new website. Unfortunately, this also opens up space for abuse. Some websites rely upon the fact that each email address identifies a single user. However, a misbehaving user might easily create multiple accounts by taking advantage of the multiple addresses allowed by the email provider.\nAfter learning all of this your boss got really worried. What if the number of unique users that has been reported to the shareholders is not accurate, bloated by duplicate accounts instead? That brings you to the task at hand: given the list of all email addresses from the users database of the company, you must determine the real number of unique users, assuming that all email providers have both described features available.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000) representing the number of email addresses in the database. Each of the next N lines contains a string of at most 100 characters representing an email address in the database. Each email address has the form localpart@provider where localpart is a non-empty list of labels with a “.” (dot) or a “+” (plus sign) between each pair of consecutive labels, and provider is a non-empty list of labels always with a “.” (dot) between each pair of consecutive labels. A label is a non-empty sequence of lowercase letters and/or digits. The character “+” (plus sign) appears at most once in each email address.\nOutput\nOutput a single line with an integer indicating the number of unique users in the database.",
    "samples": [
      [
        "2\ntwo.different.providers@now.here\ntwo.different.providers@nowhere",
        "2"
      ],
      [
        "2\n1.2.3@testing\ntesting@1.2.3",
        "2"
      ],
      [
        "7\nalice@e.mail\neve@another.mail\nbob@e.mail\njoe90@e.mail\nb.o.b@e.mail\nbob+new@e.mail\nbob@another.provider",
        "5"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Gathering Red-Black Fruits",
    "text": "It’s harvest time at Farmer Fred’s orchard of red-black trees! But since he’s too old to climb trees, Fred brought all his grandchildren to the orchard for a competition of fruit gathering: those who collect the most fruits will be awarded red-black jam jars! Red-black trees are special, because the same tree gives two different kinds of fruit: the red fruit and the black fruit. That gives Farmer Fred a problem: how to rank children who collected the same amounts of different fruits? For instance, if Abby picked two red and three black fruits, and Bruce picked three red and two black fruits, who should rank higher in the competition? How much should each fruit be worth? To solve this problem, Farmer Fred decided that each red fruit would be worth r points, and each black fruit would be worth b points, both r and b positive integers. Then he would rank the kids according to the total number of points each one has, ties broken arbitrarily.\nAll that’s left to do now is choose the values of r and b. But Farmer Fred got curious, and now he wants to know in how many different ways he can rank his grandchildren according to the described criteria. Two rankings are considered different if, and only if, there is any child who has different positions in them.\nInput\nThe first line contains an integer N (2 ≤ N ≤ 1000) representing the number of Farmer Fred’s grandchildren. Each of the next N lines describes the fruits gathered by a grandchild with two integers R and B (0 ≤ R,B ≤ 104), indicating respectively the amounts of red and black fruits the child gathered.\nOutput\nOutput a single line with an integer indicating the number of different possible rankings. Print the answer modulo 109 + 7.",
    "samples": [
      [
        "3\n0 2\n1 2\n2 1",
        "3"
      ],
      [
        "4\n1 0\n1 3\n2 2\n1 3",
        "6"
      ],
      [
        "4\n0 0\n3 1\n0 0\n0 0",
        "6"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Mario Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "KryptoLocker Ate my Homework",
    "text": "Your friend’s computer was infected by KryptoLocker last night. KryptoLocker is a ransomware that encrypts user’s data making it unusable until a ransom is paid to the person behind the attack.\nLuckily your friend noticed there was something weird happening and was able to stop the malicious process before all data was lost. Unfortunately it didn’t happen in time to save the homework he had just finished.\n“The dog ate my homework” never really worked as an excuse for most teachers and probably things won’t be different with “KryptoLocker encrypted my homework”.\nBut not all hope is lost. For this homework each student was assigned an array of integer numbers v1 ≤ v2 ≤ ··· ≤ vN. Then, each student had to generate a list of 2N numbers, containing the sums of the elements in each possible subsequence of the array. KryptoLocker only corrupted the first line of the file containing your friend’s answer and this was the line where the array was written. So, all sums are still known and that should be enough to recover the array.\nCan you help your friend save his homework? Input\nThe first line contains an integer N (1 ≤ N ≤ 18) indicating the number of elements in the array assigned to your friend. Each of the next 2N lines contains an integer S (−109 ≤ S ≤ 109) representing the sum of the elements in a subsequence of the array. The sums of all possible subsequences appear in the input, in no particular order. There is at least one array whose sums are the values given.\nOutput\nOutput each different array that may have been assigned to your friend, one array per line, with the lines lexicographically sorted. Two arrays are considered different if, and only if, they contain different elements in at least one position.",
    "samples": [
      [
        "3\n9\n8\n7\n0\n15\n16\n17\n24",
        "7 8 9"
      ],
      [
        "2\n1\n0\n-1\n0",
        "-1 1"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Fantastic Beasts",
    "text": "The eccentric magizoologist Newt Scamander recently came to Nlogonia to study the fantastic creatures that inhabit this prosperous kingdom. But before he could begin to explore the area an accident disrupted his plans: his suitcase sprang open and his collection of fantastic beasts escaped from the magical object.\nThe inhabitants of Nlogonia love zoos, and so there are many of them in the kingdom. It turns out that the beasts share Nlogonians’ passion for zoos and since the accident they have been visiting the various zoos.\nBeasts breaking free and causing trouble is nothing new for Newt so he had trackers put on the beasts since the previous incident. Thus, at any moment he knows the exact position of each of the beasts. After watching the beasts movements for some time he noticed that they follow a peculiar pattern: if a beast is currently in a given zoo, after a unit of time it will either stay in that zoo or it will move to another zoo that depends on the current zoo. All beasts that move to another zoo do this instantly and simultaneously.\nWith this information Newt conjectured that perhaps it’s not so difficult to recover the creatures.\nHe believes that eventually all of them may meet in the same zoo at the same time so he only needs to wait at the right place and capture all the fantastic beasts at once. Given the information Newt has so far, can you help him determine where and when to wait for the beasts? If there are several possibilities, he wants to catch the beasts as early as possible.\nInput\nThe first line contains two integers B (1 ≤ B ≤ 10) and Z (1 ≤ Z ≤ 100), indicating respectively the number of fantastic beasts and the number of zoos. Zoos are identified by distinct integers from 1 to Z. Each of the next B lines describes Newt’s findings on a different beast with Z + 1 integers P0,P1,...,PZ (1 ≤ Pi ≤ Z for i = 0,1,...,Z); the value P0 is the zoo where the beast initially is, while for i = 1,2,...,Z the value Pi is the zoo where the beast would be after a unit of time if it is currently in the zoo i.\nOutput\nOutput a single line with two integers, P and T, indicating that all the beasts will meet for the first time at zoo P after T units of time, or the character “*” (asterisk) if the beasts will never be all at the same zoo.",
    "samples": [
      [
        "2 4\n3 4 1 2 3\n2 1 1 4 3",
        "1 2"
      ],
      [
        "2 4\n3 4 1 2 3\n4 1 1 4 3",
        "*"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Cheap Trips",
    "text": "Nlogonia has a new scheme for public transportation. When the first trip of a passenger starts, it also starts a 120 minutes interval such that discounts are applied to some of the trips that the passenger starts before the end of the interval. The discount for the second trip is 50% of the regular cost, while the discount for each of the remaining trips up to the sixth trip (that is, four more trips) is 75% of the regular cost. Once the 120 minutes interval ends, a new trip starts a new interval having the same kind of discounts.\nÁstor is an exchange student that has just arrived to Nlogonia. He wants to spend as little money as possible for making a sequence of trips. The first trip in the sequence can be started at any time.\nEach trip but the first one cannot be started before the previous trip in the sequence ends, although it can be delayed as much as needed. Given the duration and the regular cost of each trip in the sequence, can you tell Ástor the minimum cost he must afford so as to complete all the trips in the sequence? Input\nThe first line contains an integer N (1 ≤ N ≤ 104) representing the number of trips in the sequence.\nEach of the next N lines describes a trip with two integers D and C (1 ≤ D,C ≤ 1000), indicating respectively the duration (in minutes) and the regular cost of the trip.\nOutput\nOutput a single line with a number representing the minimum cost needed to complete all the trips in the order they appear in the input. The result must be output as a rational number with exactly two digits after the decimal point, rounded if necessary.",
    "samples": [
      [
        "2\n120 10\n10 30",
        "40.00"
      ],
      [
        "3\n110 10\n10 30\n1000 101",
        "90.50"
      ],
      [
        "7\n10 1\n10 2\n10 4\n10 4\n10 4\n10 4\n10 1",
        "7.00"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Building a Field",
    "text": "John is a meticulous person. In his farm he built a circular field with some trees planted right at the circumference of the field. Figure (a) below shows the field with the trees.\nNow John wants to use a long rope and four of the field trees to demarcate a rectangle using the trees as vertices and the rope as edges. Figure (b) below shows two rectangles that can be demarcated using the trees of the field in figure (a).\nGiven the description of the positions of the trees in John’s circular field, you must determine whether it is possible to demarcate a rectangle using four of the trees as vertices and the rope as edges.\nInput\nThe first line contains an integer N (4 ≤ N ≤ 105) indicating the number of trees in the field.\nTrees are represented as points on a circumference. The second line contains N integers L1,L2,...,LN (1 ≤ Li ≤ 106 for i = 1,2,...,N) indicating the arc lengths between each pair of consecutive trees. The arcs are given in counter-clockwise order. The total length of the circumference does not exceed 109.\nOutput\nOutput a single line with the uppercase letter “Y” if it is possible to demarcate a rectangle using the given trees, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "8\n3 3 4 2 6 2 2 2",
        "Y"
      ],
      [
        "4\n14 16 15 15",
        "N"
      ],
      [
        "6\n3 7 7 3 10 10",
        "Y"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Ricardo Anido, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "A Symmetrical Pizza",
    "text": "Bob has a symmetry craze. Everything in his life must be symmetric: his house, his clothes, his car, even his food. And pizza is no exception. For him to eat a pizza, all the toppings, like tomatoes, olives, pepperoni or basil, must be arranged with some degree of rotational symmetry.\nThis evening Bob ordered some pizza. As usual, when it arrived, he asked the delivery driver to demonstrate that the pizza met his demands for rotational symmetry. The driver demonstrated the symmetry then, as they are trained to do, using the following procedure: • take a picture of the pizza with a cellphone; • rotate the pizza by R degrees around its center; • take another picture; • show Bob the two pictures side by side, so that he sees that the pizza appears identical in both.\nSatisfied, Bob paid for the pizza and took it to the kitchen. In order to test his brand new laser pizza cutter, he decided to cut the pizza in as many slices as possible. Of course, Bob wants to cut the slices in a way that all of them look exactly the same, in accordance with another of his crazes. Now given the angle R of the symmetry demonstration, Bob wants to know the maximum amount of equal slices he can cut the pizza in.\nInput\nThe input consists of a single line that contains a rational number R (0 < R < 360) indicating the angle of the rotational symmetry demonstration. This number has exactly two digits after the decimal point.\nOutput\nOutput a single line with an integer representing the maximum amount of equal slices Bob can cut the pizza in, based on the provided information.",
    "samples": [
      [
        "45.00",
        "8"
      ],
      [
        "180.00",
        "2"
      ],
      [
        "240.00",
        "3"
      ],
      [
        "35.00",
        "72"
      ],
      [
        "2.50",
        "144"
      ],
      [
        "11.34",
        "2000"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Mario Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Escape, Polygon!",
    "text": "A suspicious-looking convex polygon wants to escape its current position by translating itself along some straight-line direction. Three very diligent straight lines want to lock it up by placing themselves along three distinct sides of the polygon. Then, if the triple of lines defines a triangle and the polygon lies inside this triangle, it will be locked up. Otherwise, it will escape.\nFigure (a) above illustrates a triple that will lock the polygon up. For (b), the lines do not define a triangle since two of them are parallel, and so the polygon will escape. In (c), the polygon lies outside the triangle defined by the triple and it will easily escape.\nGiven a polygon, you must compute the number of distinct triples of lines that can lock the polygon up.\nInput\nThe first line contains an integer N (3 ≤ N ≤ 105) representing the number of vertices of the polygon. Each of the next N lines describes a vertex with two integers X and Y (−108 ≤ X,Y ≤ 108) indicating the coordinates of the vertex in the XY plane. The vertices are given in counter-clockwise order and they define a simple convex polygon. No three vertices are collinear.\nOutput\nOutput a single line with an integer indicating the number of distinct triples of lines that can lock the given polygon up.",
    "samples": [
      [
        "4\n0 0\n10 0\n10 10\n0 5",
        "1"
      ],
      [
        "8\n0 32\n-12 15\n-10 -10\n0 -12\n10 -12\n22 0\n25 10\n18 20",
        "18"
      ],
      [
        "3\n10 -10\n0 10\n-10 -10",
        "1"
      ],
      [
        "6\n-100000000 131\n-50000067 -100000000\n50000014 -100000000\n100000000 -109\n70000173 100000000\n-90000011 100000000",
        "6"
      ],
      [
        "4\n0 0\n10 0\n10 10\n0 10",
        "0"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Guilherme A. Pinto, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Jeopardized Election",
    "text": "Nlogonian elections are coming up soon and there are many candidates running for President of one of the greatest nations on Earth.\nThe voting system used in Nlogonia is quite out of the ordinary. Each person votes by making a list of all candidates, in order of preferences of the voter. This means that the first candidate in the list is the one whose proposals please the voter most, and the last candidate in the list is the one whose proposals please the voter least.\nSuppose that there are exactly five voters 1, 2, 3, 4 and 5, exactly five candidates A, B, C, D and E, and the voters voted as shown in the following table: To determine the winner, the Electoral Commission first makes a draw, called Election Ordering, which contains all the candidates in a certain order. Then each candidate is evaluated following the Election Ordering, until one of them is elected as President. For this to happen, the current evaluated candidate must be the preferred still-running candidate for more than half of the voters.\nTo make the election system clearer, continuing the example above, suppose that the result of the Election Ordering is C, D, A, E and B. To determine the winner the Electoral Commission would perform the following steps: • The first candidate evaluated is C. As this candidate is the preferred candidate for just two of the five voters (1 and 3), then C is eliminated.\n• Next candidate evaluated is D, who is the preferred still-running candidate for only two voters (1 and 5). Thus, candidate D is also eliminated.\n• Candidate A is evaluated next. Since this candidate is the preferred still-running candidate for three of the five voters (1, 4 and 5), candidate A is elected as President and the voting ends.\nOne of the candidates has managed to corrupt some members of the Electoral Commission, and can now decide what the result of the Election Ordering will be. Also, thanks to various social networks analysis, the candidate knows the list that each voter will vote. The only thing the candidate needs to win the election now is to figure out a proper Election Ordering. As this is not an easy task, someone from the candidate staff anonymously hired you to find an ordering that makes the candidate win.\nHurry up, because the draw will occur within the next few hours.\nInput\nThe first line contains two integers C and V (1 ≤ C,V ≤ 100, with V odd), representing respectively the number of candidates and the number of voters. Candidates are identified by distinct non-empty strings of at most 10 uppercase letters. Each of the next V lines describes the vote of a voter, that is, the line contains the list of candidates in order of preference of the voter. All lists contain the same candidates, although candidates may appear in different order. After the votes there is a last line that contains a string W, indicating the candidate that must win.\nOutput\nOutput a single line with the Election Ordering that makes candidate W win the election, or the character “*” (asterisk) if it is not possible for W to win. If more than one possible Election Ordering exists, output the lexicographically smallest one.",
    "samples": [
      [
        "5 5\nC D A B E\nB C E D A\nC E B A D\nA C B D E\nD A C E B\nA",
        "C B D A E"
      ],
      [
        "3 5\nKATE BOB ED\nBOB ED KATE\nED BOB KATE\nBOB ED KATE\nKATE BOB ED\nKATE",
        "*"
      ],
      [
        "3 5\nKATE BOB ED\nBOB ED KATE\nED BOB KATE\nBOB ED KATE\nKATE BOB ED\nED",
        "BOB ED KATE"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Edwin Ninõ Velasquez, Colombia"
    },
    "hasImages": true
  },
  {
    "name": "Ink Colors",
    "text": "Stick Man left the family tree and went out for adventures. On his journey he found a strange tree with the root on the air and branches directed towards the ground. He decided to paint some of the tree branches to remind himself of home. To do so he wants that branches painted with the same color are all connected and form a stick man. A stick man is a group of six branches (p,q) (q,r) (q,s) (q,t) (s,u) and (s,v), as show in figure (a) below. Figure (b) shows a tree with one stick man painted and figure (c) shows the same tree with two stick men painted.\nStick Man would like to paint as many stick men on the tree as possible, such that each branch is part of at most a single stick man. Can you help him figure out how many ink colors he needs to buy? Input\nThe first line contains an integer N (1 ≤ N ≤ 105) indicating the number of nodes in the tree. Nodes are identified by distinct integers from 1 to N, where node 1 is the root of the tree. The second line contains N − 1 integers P2,P3,...,PN (1 ≤ Pi ≤ N for i = 2,3,...,N), where the value Pi represents that there is a branch (Pi,i), that is, from node Pi to node i.\nOutput\nOutput a single line with an integer indicating the maximum number of stick men that might be simultaneously painted on the tree.",
    "samples": [
      [
        "14\n1 1 2 2 2 2 5 5 5 6 6 9 9",
        "2"
      ],
      [
        "13\n13 7 5 1 5 2 5 7 4 2 2 4",
        "2"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Highway Decommission",
    "text": "Nlogonia’s government is eager to cut down public debt. One of the measures about to take place is the decommission of some highways as most of them incur a high maintenance cost. Each highway connects two different cities and can be traveled in both directions. Using the existing highways it is possible to reach any city from any other city.\nGovernment promises that the impact of the decommission will be minimal in the lives of Nlogonians.\nIn particular they guarantee that after the decommission, for each city the minimum distance needed to travel from that city to the capital of the country will remain the same as it is now, when all the highways can be used.\nThe Department of Roads of Nlogonia believes that interns are not there just to get coffees or run errands but should do meaningful work instead and that’s why you are assigned the following task.\nGiven the length and maintenance cost of each highway, you must decide which highways will be kept active and which will be decommissioned. As you might guess, the sum of maintenance costs for the remaining highways must be minimum.\nInput\nThe first line contains two integers N (2 ≤ N ≤ 104) and M (1 ≤ M ≤ 105), indicating respectively the number of cities and the number of highways. Cities are identified by distinct integers from 1 to N, where city 1 is the capital of Nlogonia. Each of the following M lines describes a highway with four integers A, B, L and C (1 ≤ A,B ≤ N, A (cid:54)= B and 1 ≤ L,C ≤ 109), indicating that there is a highway between cities A and B that has length L and maintenance cost C. Using the existing highways it is possible to reach any city from any other city.\nOutput\nOutput a single line with an integer indicating the minimum possible sum of maintenance costs for a set of highways to be kept active. This set of highways must ensure that for each city the minimum distance needed to travel from that city to the capital of Nlogonia remains the same using only those highways.",
    "samples": [
      [
        "3 4\n2 3 2 4\n2 3 2 2\n1 2 5 1\n1 3 1 4",
        "6"
      ],
      [
        "2 2\n1 2 10 5\n2 1 6 11",
        "11"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Arthur Nascimento, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Looking for the Risk Factor",
    "text": "For testing a new cryptographic algorithm, engineers working for a large investment bank need to compute a value they named the Risk Factor of the algorithm. Informally, the Risk Factor is the amount of numbers less than or equal to a certain value N, that aren’t multiples of prime numbers greater than a certain value K.\nMore formally, given the values N and K, the Risk Factor is the number of elements of the following set: {x such that 2 ≤ x ≤ N and for every prime divisor p of x, p ≤ K} The engineers need to compute the Risk Factor for different values of N and K and have prepared a set of queries for you to answer. Can you help them? Input\nThe first line contains an integer Q (1 ≤ Q ≤ 5 × 104) representing the number of queries that the engineers prepared for you. Each of the following Q lines describes a query with two integers N and K (2 ≤ N,K ≤ 105).\nOutput\nOutput Q lines, each line with an integer indicating the Risk Factor for the corresponding query of the input.",
    "samples": [
      [
        "4\n10 3\n10 4\n15 3\n5 20",
        "6\n6\n7\n4"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Juan Pablo Marín Rosas, México"
    },
    "hasImages": false
  },
  {
    "name": "Mount Marathon",
    "text": "Mount Marathon is a solitaire game that is played using a regular deck of 52 cards. To start the game the player shuffles the deck and lays N cards face up on the table, forming a straight line of N piles, each pile having a single card. No other cards are used during the rest of the play. Then the player repeatedly moves a pile on top of another pile until no more movements are available. The goal of the game is to end up with the minimum number of piles. When moving a pile p on top of another pile q, the following conditions must hold: • Pile p must be a single-card pile.\n• The value of the only card in pile p must be greater than or equal the value of the card that is on top of pile q.\n• Pile q must be the next pile remaining immediately on the right of pile p.\nFigure (a) below shows a configuration with six cards at the beginning of the game. The player may move the fifth pile on top of the sixth pile, and then the second pile on top of the third pile; since no more movements are available, this would conclude the game with four piles remaining, as it can be seen in figure (b). However, in this case it is possible to end up the game with just the three piles that appear in figure (c).\nGiven the initial piles, you must determine the minimum number of piles that it is possible to obtain at the end of the game.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 52) representing the number of cards in the game.\nThe second line contains N integers C1,C2,...,CN (1 ≤ Ci ≤ 13 for i = 1,2,...,N) indicating the values of the cards in the initial piles, from left to right. Each card value appears at most four times.\nOutput\nOutput a single line with an integer indicating the minimum number of piles that it is possible to obtain at the end of the game.",
    "samples": [
      [
        "6\n5 8 6 6 10 4",
        "3"
      ],
      [
        "1\n13",
        "1"
      ],
      [
        "5\n2 4 6 8 10",
        "5"
      ],
      [
        "11\n13 1 1 1 13 7 8 10 4 2 1",
        "4"
      ]
    ],
    "source": {
      "year": "2018",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Inés Kereki, Uruguay"
    },
    "hasImages": true
  },
  {
    "name": "Deslocando Partículas",
    "text": "Um quadrado possui seus vértices nas coordenadas (0,0),(0,2N),(2N,2N),(2N,0). Cada vértice possui um atrator. Uma partícula é posicionada inicialmente na posição (2N−1,2N−1). Cada atrator pode ser ativado individualmente, qualquer quantidade de vezes. Quando um atrator na posição (i,j) é ativado, se a partícula encontra-se na posição (p,q), ela desloca-se para o ponto médio entre (i,j) e (p,q).\nDados N e um ponto (x,y), determine o menor número de ativações necessárias para que a partícula seja posicionada na posição (x,y).\nEntrada\nA entrada consiste de uma única linha contendo três inteiros N, x e y, satisfazendo 1 ≤ N ≤ 20 e 0 < x,y < 2N.\nSaída\nImprima uma única linha, contendo o menor número de ativações necessárias.",
    "samples": [
      [
        "1 1 1",
        "0"
      ],
      [
        "4 12 4",
        "1"
      ],
      [
        "4 3 1",
        "3"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Geometria Triangular",
    "text": "Todo polígono pode ser construído juntando-se triângulos. Em particular, podemos fazer isso ite rativamente: começamos com um triângulo, adicionamos um segundo triângulo identificando um de seus lados a um dos lados do triângulo inicial, adicionamos um terceiro triângulo identificando um de seus lados a um dos lados livres de um dos triângulos originais e assim por diante. Consideraremos apenas polígonos que podem ser construídos dessa maneira, onde cada triângulo adicionado toca (e é identificado com) exatamente um lado de um triângulo posicionado anteriormente.\nDado um polígono P, seja T o conjunto de triângulos que foi utilizado para formá-lo. Os lados de cada triângulo são segmentos de reta. Seja L o conjunto de segmentos que são lados de algum triângulo em T. Note que cada elemento de L é um lado de um ou dois elementos de T.\nUma vez que tenhamos um polígono posicionado no plano, em alguns casos podemos remover alguns dos triângulos que o compõem, sem alterar o conjunto L. Queremos remover triângulos de forma que o conjunto L seja mantido e que a área total dos triângulos remanescentes seja mínima.\nEquivalentemente, queremos selecionar um subconjunto S de triângulos de T de forma que: 1. Todo elemento de L seja o lado de pelo menos um triângulo em S; e 2. A soma das áreas dos elementos de S seja a menor possível.\nEntrada\nA primeira linha da entrada contém um inteiro N, 1 ≤ N ≤ 105 correspondendo ao número de triângulos na triangulação de P. Cada uma das N linhas seguintes contém 6 números, x1,y1,x2,y2,x3 e y3, indicando a existência de um triângulo de coordenadas (x1,y1),(x2,y2) e (x3,y3).Os triângulos são dados em ordem arbitrária. Todas as coordenadas serão números inteiros de valor absoluto no máximo 106.\nSaída\nVocê deve imprimir a área mínima possível respeitando as condições do problema, com exatamente uma casa decimal.\nNa figura acima as triangulações T1 = {a,b,c,d} e T2 = {a,b,c} representam, respectivamente, o primeiro e o segundo exemplo. Note como S1 = {a,c,d} é um subconjunto válido para o primeiro caso.\nO triângulo b é deixado de fora, mas todos os seus lados estão presentes nos triângulos selecionados.",
    "samples": [
      [
        "4\n0 0 0 10 10 0\n10 10 0 10 10 0\n10 10 0 10 0 20\n10 10 20 0 10 0",
        "150.0"
      ],
      [
        "3\n0 0 0 10 10 0\n10 10 0 10 10 0\n10 10 20 0 10 0",
        "150.0"
      ],
      [
        "1\n0 0 1 0 0 1",
        "0.5"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Kalel, o Sapo Saltador",
    "text": "Kalel é um sapo que gosta de pular sobre pedras.\nHá N pedras em uma linha, numeradas de 1 a N da esquerda para a direita. Kalel começa na pedra 1 e gostaria de chegar na pedra N.\nEm cada movimento, Kalel pode escolher um dentre M tipos de pulo. O j-ésimo pulo permite que ele pule da pedra x até a pedra x + dj, e custa pj pontos de energia. Pode acontecer de pj ser igual a 0 para alguns valores de j. Você pode assumir que Kalel nunca fica sem energia.\nDados N e K, calcule de quantas maneiras diferentes Kalel consegue chegar na pedra N gastando no máximo K pontos de energia no total. Duas maneiras são consideradas diferentes caso a sequência de escolha de pulos seja diferente. Como este número pode ser muito grande, estamos interessados apenas no resto da divisão do mesmo por 109 (um bilhão).\nEntrada\nA primeira linha contém três inteiros, N, M e K (1 ≤ N ≤ 109, 1 ≤ M ≤ 105, 0 ≤ K ≤ 400). As próximas M linhas contêm dois inteiros cada, os números dj e pj (1 ≤ dj ≤ 10, 0 ≤ pj ≤ K).\nSaída\nImprima uma única linha, contendo o número de maneiras diferentes de chegar na pedra N gas tando no máximo K pontos de energia, módulo 109 (um bilhão).",
    "samples": [
      [
        "5 3 10\n1 3\n2 0\n3 1",
        "6"
      ],
      [
        "100000 3 10\n1 9\n2 0\n7 3",
        "85449877"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Números Virados",
    "text": "Você acaba de ganhar um baralho com N cartas. Cada uma dessas cartas tem dois números escritos: um no lado da frente, e outro no lado de trás.\nSeu amigo te desafiou para um jogo. Ele embaralhou as cartas do baralho e as colocou numa mesa.\nAs cartas estão dispostas em uma linha, uma ao lado da outra, todas com a face da frente virada para cima.\nDa esquerda para a direita, você sabe que o número escrito na face da frente da i-ésima carta é Ai, e que o número escrito na face de trás da i-ésima carta é Bi.\nO jogo é dividido em duas partes.\nNa primeira parte, você deve escolher K cartas do baralho. Para escolher uma carta você deve selecionar ou a carta mais à esquerda ou a carta mais à direita da mesa e pegá-la para si.\nEm seguida você deve escolher L das cartas que você pegou e virá-las.\nA sua pontuação será igual à soma do número na face da frente de todas as K cartas escolhidas, mais a soma do número na face de trás de todas as L cartas viradas.\nO desafio? Conseguir a maior pontuação possível, é claro! Entrada\nA primeira linha contém um inteiro N(1 ≤ N ≤ 105). A segunda linha contém N inteiros A1, A2, ..., AN, (1 ≤ Ai ≤ 109). A terceira linha contém N inteiros B1, B2, ..., BN, (1 ≤ Bi ≤ 109). A quarta linha contém dois inteiros K e L (1 ≤ L ≤ K ≤ N).\nSaída\nImprima uma linha contendo um inteiro, representando a maior pontuação possível.",
    "samples": [
      [
        "5\n9 7 2 2 9\n5 2 2 3 1\n2 1",
        "23"
      ],
      [
        "5\n9 7 2 2 9\n5 9 2 3 1\n2 1",
        "25"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "N",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Forca Multidimensional",
    "text": "O Jogo da Forca Multidimensional tem regras muito peculiares. De certa forma, é como se você estivesse jogando várias partidas do tradicional Jogo da Forca ao mesmo tempo, com a diferença que as palavras não precisam existir no dicionário. Se você nunca jogou o Jogo da Forca, não se preocupe: toda a informação que você precisa estará abaixo.\nNa versão multidimensional do jogo, existem várias palavras no tabuleiro, inicialmente desconhe cidas, todas de mesmo comprimento. Em cada momento do jogo, você conhece alguns caracteres de certas posições das palavras (a maneira como estes caracteres foram descobertos não é importante para este problema). Em determinado momento, quando resta apenas um caractere desconhecido em cada palavra do tabuleiro, o jogo parte para a fase de tudo ou nada. Neste momento, você deve escolher uma palavra que maximize o número de compatibilidades com as palavras do tabuleiro. Para uma escolha de palavra P, dizemos que ela é compatível com uma palavra T do tabuleiro se todas as letras conhecidas de T ocorrem exatamente nas mesmas posições em P.\nDadas as informações conhecidas sobre as palavras do tabuleiro, você deve determinar qual palavra escolher para o tudo ou nada, que maximiza o número de compatibilidades. Se houver mais de uma solução, imprima a menor lexicograficamente. Dizemos que uma palavra P é lexicograficamente menor que uma palavra Q se Pi < Qi onde Pi é o i-ésimo caractere de P, Qi é o i-ésimo caractere de Q e i é o menor índice tal que Pi (cid:54)= Qi.\nEntrada\nA primeira linha da entrada contém dois inteiros N e C satisfazendo 1 ≤ N ≤ 104 e 1 ≤ C ≤ 12, indicando número de palavras no tabuleiro e comprimento das palavras que ele contém. Em seguida, N linhas descrevem, cada uma, uma palavra de comprimento C composta apenas de caracteres de “a” a “z” exceto por uma das posições, que conterá um caracter “*”, indicando que o caractere daquela posição ainda é desconhecido.\nSaída\nVocê deve imprimir uma única linha, contendo, respectivamente, uma palavra T, de comprimento C, e um inteiro M, onde M é o maior número de compatibilidades que uma palavra pode ter com as palavras da entrada e T é a palavra lexicograficamente menor dentre aquelas com compatibilidade M.",
    "samples": [
      [
        "5 4\nrat*\nru*d\nrot*\nr*ta\nr*ta",
        "rata 3"
      ],
      [
        "5 4\nbon*\nfon*\nn*no\n*eto\n*ano",
        "nano 2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Brincando com Pedras",
    "text": "Alice e Bob irão jogar um jogo com 3 pilhas de pedras. As jogadas são feitas alternadamente, e cada jogador deve escolher uma pilha que ainda tenha pedras e retirar um número positivo de pedras dela.\nVence quem remover a última pedra da última pilha que ainda tenha pedras. Alice faz a primeira jogada.\nA i-ésima pilha terá um número de pedras aleatório e uniformemente distribuído no intervalo [Li,Ri]. Qual é a probabilidade de Alice ganhar assumindo que ambos jogam de maneira ótima? Entrada\nA entrada consiste de uma linha com 6 inteiros, L1,R1,L2,R2,L3,R3, nessa ordem. Para cada i, 1 ≤ Li ≤ Ri ≤ 109.\nSaída\nImprima um inteiro representando a probabilidade de Alice ganhar módulo 109 + 7.\nÉ possível mostrar que a resposta pode ser expressa como uma fração irredutível p, tal que p e q q são inteiros e q (cid:54)≡ 0 (mod 109 + 7), ou seja, estamos interessados no inteiro p × q−1 (mod 109 + 7).",
    "samples": [
      [
        "3 3 4 4 5 5",
        "1"
      ],
      [
        "4 4 8 8 12 12",
        "0"
      ],
      [
        "1 10 1 10 1 10",
        "580000005"
      ],
      [
        "5 15 2 9 35 42",
        "1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Achando os Monótonos Não-Triviais Maximais",
    "text": "Neste problemas iremos lidar com sequências de caracteres, muitas vezes chamadas de strings. Uma sequência é não-trivial se ela possui ao menos dois elementos.\nDada uma sequência s, dizemos que um trecho si,...,sj é monótono se todos seus caracteres são iguais, e dizemos que ela é maximal se este trecho não pode ser estendido à esquerda e nem à direita sem perder a monotonicidade.\nDada uma sequência composta apenas por caracteres “a” e “b”, determine quantos caracteres “a” ocorrem em trechos monótonos maximais não-triviais.\nEntrada\nA entrada é composta por duas linhas. A primeira linha contém um único inteiro N, satisfazendo 1 ≤ N ≤ 105. A segunda linha contém uma string, com exatamente N caracteres, composta apenas pelos caracteres “a” e “b”.\nSaída\nA saída é composta por uma única linha contendo um inteiro correspondente à quantidade total de vezes que o caractere “a” ocorre em trechos monótonos maximais não-triviais.",
    "samples": [
      [
        "7\nabababa",
        "0"
      ],
      [
        "7\nbababab",
        "0"
      ],
      [
        "10\naababaaabb",
        "5"
      ],
      [
        "10\nbbaababaaa",
        "5"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Estourando Balões",
    "text": "Após a cerimônia de encerramento da Maratona um número enorme de balões soltos estão flutuando no espaço do salão. O dono do salão está bravo porque no dia seguinte ocorre outro evento importante e os balões precisam ser removidos. Felizmente este ano Carlinhos veio preparado com seu arco e flecha para estourar os balões.\nFelizmente também, devido ao fluxo do ar condicionado, os balões estão todos em um mesmo plano vertical (isto é, um plano paralelo a uma das paredes), embora em alturas e posições distintas.\nCarlinhos vai atirar a partir do lado esquerdo do salão, a uma altura de sua escolha, em direção ao lado direito do salão. Cada flecha se move da esquerda para a direita, na altura em que foi lançada, no mesmo plano vertical dos balões. Ao encontrar um balão, este estoura e a flecha continua seu movimento para a direita, com a altura diminuída de 1. Ou seja, se a flecha estava a uma altura H, após atingir um balão ela continua na altura H − 1.\nCarlinhos quer estourar todos os balões atirando o menor número possível de flechas. Você pode ajudá-lo? Entrada\nA primeira linha da entrada contém um inteiro N, o número de balões (1 ≤ N ≤ 5 × 105). Como todos os balões estão num mesmo plano vertical, vamos definir que a altura de um balão é dada em relação ao eixo y e a posição de um balão é dada em relação ao eixo x desse plano. Os balões são numerados de 1 a N. Os números dos balões indicam as suas posições, da esquerda (balão número 1) para a direita (balão número N), independentemente das suas alturas. A posição do balão número i é diferente da posição do balão número i + 1, para todo i. A segunda linha contém N inteiros Hi, onde Hi indica a altura em que o balão número i está (1 ≤ Hi ≤ 106 para 1 ≤ i ≤ N).\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o menor número de flechas que Carlinhos precisa atirar para estourar todos os balões.",
    "samples": [
      [
        "5\n3 2 1 5 4",
        "2"
      ],
      [
        "4\n1 2 3 4",
        "4"
      ],
      [
        "6\n5 3 2 4 6 1",
        "3"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogando 23",
    "text": "Vinte e três é um jogo de cartas simples, jogado por crianças. Como o nome sugere, ele é uma variação do jogo vinte e um (blackjack em inglês), que é um dos jogos mais jogados em cassinos e sites de jogos.\nO jogo utiliza um baralho de 52 cartas, com quatro naipes, cada naipe com 13 cartas (ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, valete, dama e rei). Os naipes das cartas não são relevantes. As cartas com figuras (valete, dama e rei) valem dez pontos, as cartas com números valem o seu número em pontos (por exemplo, a carta 4 vale quatro pontos) e o ás vale um ponto.\nGanha o jogo o jogador que tiver o maior número de pontos, desde que não exceda 23. Se um jogador tem um número de pontos maior do que 23 dizemos que o jogador estourou.\nAs regras do jogo são simples: a cada partida, inicialmente o baralho é embaralhado, as cartas são colocadas em um monte e cada jogador recebe duas cartas do monte. Todas as cartas são distribuídas com a face para cima (todos os jogadores vêem as cartas de todos os jogadores). O passo seguinte, chamado de rodada, é repetido enquanto houver jogadores ativos: uma carta é retirada do monte e colocada na mesa com a face para cima. Essa carta, denominada carta comum, vale para todos os jogadores. Se um jogador estourar, ele sai do jogo. Vence a partida o jogador que numa determinada rodada somar 23 (somando suas duas cartas iniciais mais as cartas comuns), ou se o jogador for o único jogador ativo ao final da rodada. Note que pode haver mais de um vencedor (cujas cartas somam 23) e que pode não haver vencedor em uma partida.\nJoão e Maria estão jogando vinte e três. Os dois são os únicos jogadores, nenhum dos dois estourou e nenhum dos dois tem 23 pontos. Além disso, a pontuação dos jogadores é tal que a próxima carta comum pode fazer com que a partida termine.\nDadas as cartas iniciais de João e Maria e as cartas comuns, determine qual é o valor da carta de menor valor que deve ser retirada do monte na próxima rodada para que Maria vença a partida.\nEntrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 8), o número de rodadas do jogo até o momento. Cada carta é descrita por um inteiro I (1 ≤ I ≤ 13). Note que as cartas com figuras (valete, dama e rei) são representadas na entrada pelos valores 11, 12 e 13 e não por quantos pontos elas valem. A segunda linha contém dois inteiros, descrevendo as duas cartas iniciais de João. A terceira linha contém dois inteiros, descrevendo as duas cartas iniciais de Maria. A quarta e última linha contém N inteiros, descrevendo as cartas comuns, na ordem em que são retiradas do monte.\nSaída\nSeu programa deve produzir uma única linha, contendo um único inteiro, o valor da carta de menor valor que deve ser retirada do monte na próxima rodada para Maria vencer a partida, ou -1 se não for possível Maria vencer a partida nessa próxima rodada.",
    "samples": [
      [
        "1\n10 5\n9 10\n1",
        "3"
      ],
      [
        "1\n10 5\n8 7\n2",
        "6"
      ],
      [
        "1\n9 10\n10 5\n1",
        "4"
      ],
      [
        "2\n8 4\n4 1\n4 4",
        "5"
      ],
      [
        "8\n2 1\n1 1\n1 2 2 2 3 3 3 3",
        "-1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Interceptando Informações",
    "text": "A Spies Breaching Computers (SBC), uma agência privada de espiões digitais, está desenvolvendo um novo dispositivo para interceptação de informações que, através de ondas eletromagnéticas, permite a espionagem mesmo sem contato físico com o alvo.\nO dispositivo tenta coletar informações de um byte por vez, isto é, uma sequência de 8 bits onde cada um deles, naturalmente, pode ter valor 0 ou 1. Em determinadas situações, devido a interferências de outros dispositivos, a leitura não pode ser feita com sucesso. Neste caso, o dispositivo retorna o valor 9 para o bit correspondente, informando que não foi possível efetuar a leitura.\nDe forma a automatizar o reconhecimento das informações lidas, foi feita uma solicitação de um programa que, a partir das informações lidas pelo dispositivo, informe se todos os bits foram lidos com sucesso ou não. Sua tarefa é escrever este programa.\nEntrada\nA entrada consiste de uma única linha, contendo 8 números inteiros N1,N2,N3,N4,N5,N6,N7 e N8, indicando os valores lidos pelo dispositivo (Ni é 0, 1 ou 9 para 1 ≤ i ≤ 8).\nSaída\nImprima uma única linha contendo a letra maiúscula “S” caso todos os bits sejam lidos com sucesso; caso contrário imprima uma única linha contendo a letra maiúscula “F”, correspondendo a uma falha.",
    "samples": [
      [
        "0 0 1 1 0 1 0 1",
        "S"
      ],
      [
        "0 0 1 9 0 1 0 1",
        "F"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Habilitando a Movimentação",
    "text": "O presidente da Nlogônia decidiu, por decreto, que todas as ruas da Nlogônia deveriam ser de mão única. Devido a certo desconhecimento de ciência básica, não houve um planejamento adequado para as mudanças. Depois que o novo sistema entrou em vigor, as pessoas não eram capazes de ir trabalhar, ou não conseguiam voltar para casa do trabalho, por exemplo. Como resultado, houve caos e rebeliões em muitas cidades.\nO presidente sofreu impeachment e a nova administração do país contratou uma equipe de cientistas para resolver o problema. Por sua vez, essa equipe contratou você, especialista em complexidade de algoritmos, para ajudá-los no cálculo eficiente de soluções.\nAssim, para cada cidade, você recebe os pontos de referência da cidade e as ruas de mão única, cada uma conectando dois pontos de referência. Sua tarefa é determinar o número mínimo de pontes de mão única que devem ser construídas para ter conectividade total na cidade. Cada ponte também deve conectar dois pontos de referência.\nEntrada\nA primeira linha da entrada contém dois inteiros, N e M (1 ≤ N ≤ 104,1 ≤ M ≤ 106), onde N é o número de pontos de referência e M é o número de ruas. Cada uma das próximas M linhas contém dois inteiros, R e S, 1 ≤ R,S ≤ N, R (cid:54)= S, que corresponde a uma rua que liga R a S, tal que todos os veículos daquela rua se deslocam de R em direção a S.\nSaída\nSeu programa deve imprimir uma única linha contendo o número mínimo de pontes necessárias para deixar os habitantes felizes.",
    "samples": [
      [
        "7 7\n1 2\n2 3\n3 1\n6 1\n6 4\n4 5\n7 6",
        "2"
      ],
      [
        "7 7\n2 1\n3 2\n1 3\n1 6\n4 6\n5 4\n6 7",
        "2"
      ],
      [
        "2 1\n1 2",
        "1"
      ],
      [
        "3 3\n1 2\n2 3\n3 1",
        "0"
      ],
      [
        "2 0",
        "2"
      ],
      [
        "6 4\n1 2\n1 3\n4 6\n5 6",
        "3"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Listando Caminhos Tediosos",
    "text": "Uma árvore é um grafo conexo (existe um caminho entre quaisquer dois de seus vértices), não direci onado (as arestas do grafo não possuem orientação), e acíclico (não possui ciclos).\nUma árvore colorida é aquela em que cada um de seus vértices tem uma determinada cor.\nUm caminho tedioso é um caminho na árvore tal que tanto o vértice inicial quanto o vértice final tem a mesma cor, e não existe vértice ou aresta que apareça mais de uma vez no caminho. Note que as cores dos vértices intermediários do caminho, caso existam, não são relevantes.\nDada uma árvore colorida, com N vértices, sua tarefa é calcular, para cada aresta da árvore, a quantidade de caminhos tediosos que passam por aquela aresta.\nEntrada\nA primeira linha contém o número de vértices N (1 ≤ N ≤ 105). A segunda linha contém N inteiros C1,...,CN, onde Ci (1 ≤ Ci ≤ N) representa a cor do vértice i. Nas próximas N − 1 linhas temos dois inteiros cada, u e v, representando uma aresta (1 ≤ u,v ≤ N e u (cid:54)= v). É garantido que o grafo dado será uma árvore.\nSaída\nImprima N −1 inteiros, representando o número de caminhos tediosos que passam por cada aresta, seguindo a mesma ordem em que as arestas aparecem na entrada.",
    "samples": [
      [
        "6\n1 1 1 2 2 1\n1 2\n2 3\n4 6\n2 4\n1 5",
        "4 3 3 4 1"
      ],
      [
        "12\n1 2 3 1 2 2 1 3 2 3 1 2\n1 2\n2 3\n2 4\n4 5\n4 6\n1 7\n7 8\n7 9\n9 10\n6 11\n6 12",
        "10 2 10 4 9 9 2 6 2 3 4"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Maratona de Amarelinha",
    "text": "Nesta data, 8 de outubro de 2022, ocorre o mais aclamado evento por estudantes de computação de todo o país. Não, não estamos falando da maratona de programação.\nEstamos falando, é claro, da Amarelinha! Para quem não conhece, a Amarelinha é uma competição anual tradicionalmente organizada como evento paralelo da maratona de programação. Transmitida ao vivo para espectadores de todos os continentes, essa variante exótica do popular jogo infantil ocorre em um campo infinito, em formato de espiral, dividido em casas sequencialmente numeradas a partir de zero, conforme a ilustração abaixo.\nNeste ano, a Amarelinha atraiu um número recorde de N participantes, numerados sequencialmente de 1 a N. Sabe-se que o i-ésimo participante inicia na casa de número Ai.\nA Amarelinha consiste de Q rodadas. Na q-ésima rodada, o Carlão, fenomenal organizador da Amarelinha praticamente desde a sua concepção, informará dois números inteiros aos participantes: cq e dq. Essa é uma ordem para que todos os participantes de número i tal que i e cq compartilhem um fator inteiro comum maior que 1 retrocedam dq posições nas casas da Amarelinha, uma por uma, sem nunca retroceder além da casa 0. (Se um participante eventualmente retornar à casa 0, ele deve permanecer lá, ignorando quaisquer comandos adicionais de retrocesso, para não acabar saindo do campo.) Assumindo que todos os participantes executaram as instruções perfeitamente (nenhum deles gos taria de decepcionar o Carlão), a sua tarefa é determinar, para cada um dos participantes, o número da rodada em que ele retorna à casa 0 (ou indicar que isso nunca acontece).\nEntrada\nA primeira linha da entrada contém os inteiros N e Q (1 ≤ N,Q ≤ 105). A segunda linha contém N inteiros, respectivamente, A1, A2, ···, AN (1 ≤ Ai ≤ 109). Cada uma das próximas Q linhas contém dois inteiros, cq e dq (1 ≤ cq ≤ 105, 1 ≤ dq ≤ 109).\nSaída\nA saída deverá conter exatamente N linhas. A i-ésima linha deverá conter um único inteiro, indicando o número da rodada em que o i-ésimo participante retorna à casa 0 (ou, se isso nunca acontece, o valor −1).",
    "samples": [
      [
        "7 6\n10 20 30 40 50 60 70\n2 25\n3 36\n100 42\n5 10\n7 70\n1 1000",
        "-1\n1\n2\n3\n4\n2\n5"
      ],
      [
        "6 4\n100 100 100 100 100 100\n2 50\n3 50\n5 99\n5 1",
        "-1\n-1\n-1\n-1\n4\n2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Non-Integer Donuts",
    "text": "Neil is a very important lawyer with a very important bank account. Since Neil is such a successful lawyer with many clients, he deposits money to his account every single morning.\nAfter going to the bank and depositing money, Neil goes to work. And there lies Neil’s great weakness: a donut shop. You see, Neil is a recovering donut addict, and although he hasn’t eaten a donut in years, he can’t help but wonder how many $1.00 donuts he could buy with the money in his account if he were to relapse.\nHaving $5.00 in his account means 5 donuts Neil could have, but what about $4.50? Well, that is more than 4 donuts for sure, but definitely less than 5. How would one even buy a non-integer amount of donuts? That concept confuses Neil, so every time his account balance is not an integer, he stops to ponder the nature of non-integer donuts and ends up being late to work.\nNow Neil has been late too many times and is starting to worry he will lose his job. He wants to know how many times he will be late to work during the next N days, given his initial account balance and the amount of money he will deposit each day. Please answer this for him, or else Neil will start pondering again.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000), the number of days Neil is interested in. Each of the next N + 1 lines contains a string representing an amount of money. The first string is Neil’s account initial balance, while the following N strings are the amounts Neil will deposit to his account in the different days. Each string has the form $X.Y where X is a substring of length 1 or 2 indicating the whole money in the amount $X.Y , while Y is a substring of length exactly 2 denoting the cents in the amount $X.Y . Both X and Y are made of digits, at least one of them contains a non-zero digit, and X does not have leading zeros.\nOutput\nOutput a single line with an integer indicating how many times Neil will be late to work during the following N days.",
    "samples": [
      [
        "1\n$1.57\n$3.14",
        "1"
      ],
      [
        "4\n$1.00\n$0.01\n$0.99\n$10.00\n$98.76",
        "2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Invested Money",
    "text": "Nowadays your programming skills are amazing, and you regularly receive lots of money for your work.\nUnfortunately, your financial skills did not evolve the same way. So each time you earn some money, you simply invest it in a bank in a 30 days time deposit with an automatic renewal clause. This means that 30 days after you invest the money, it is invested for 30 additional days, over and over again, until you inform the bank that you want to stop the renewal and get your money back. Time deposits cannot be created nor renewed during weekends; if a 30 days period ends on a weekend, the renewal occurs on the immediately following Monday.\nSince the bank holds almost all your money, you must wait until the closest renewal each time you want to buy anything but daily food. Today you decided to buy a new smartphone to replace your six-month-old device. Given the dates when you created each time deposit, you must determine the minimum number of days that you must wait to get some money from the bank.\nAs an example, suppose that today is Saturday and that you created five time deposits: a time deposit last Monday, another time deposit last Tuesday, yet another time deposit last Wednesday, and two time deposits yesterday. The first time deposit (Monday) would be renewed on a Wednesday after 25 days from today. The second time deposit (Tuesday) would be renewed on a Thursday after 26 days from today. The third time deposit (Wednesday) would be renewed on a Friday after 27 days from today. Finally, the last two time deposits (Friday) would be renewed on a Monday after 30 days from today, because the renewal on a Sunday is not allowed. Thus, in this case, you must wait 25 days to get some money from the bank.\nInput\nThe first line contains a string T and an integer N (1 ≤ N ≤ 105), indicating respectively today’s day of the week and the number of time deposits. The string is either “Mon”, “Tue”, “Wed”, “Thu”, “Fri”, “Sat”, or “Sun”, representing respectively that today is Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday. The second line contains N integers D1,D2,...,DN (0 ≤ Di ≤ 109 for i = 1,2,...,N), indicating the number of days elapsed since each time deposit was created. It is guaranteed that the time deposits were not created during weekends.\nOutput\nOutput a single line with an integer indicating the minimum number of days that you must wait to get some money from the bank.",
    "samples": [
      [
        "Sat 5\n5 4 3 1 1",
        "25"
      ],
      [
        "Sat 5\n3 1 4 1 5",
        "25"
      ],
      [
        "Thu 1\n0",
        "32"
      ],
      [
        "Thu 1\n30",
        "0"
      ],
      [
        "Fri 1\n31",
        "31"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Almost Origami",
    "text": "You have a rectangular sheet of paper of height 1 and you want to locate any point at height H measured from the bottom border of the sheet. Since you do not know Haga’s theorems, you plan to repeat the following step. Assume you already located a point PL at height L on the left border of the sheet, and a point PR at height R on the right border of the sheet. Then you draw a line from the lower left corner of the sheet to PR, and another line from the lower right corner of the sheet to PL. If the crossing point is at height H, then you are done. Otherwise you draw a horizontal line that passes through the crossing point and go for another step.\nAs an example, consider the case H = 1/3. During the first step, the only possibility is choosing the upper corners of the sheet (that is, L = R = 1). So you draw the two diagonals of the sheet, and the crossing point is at height 1/2. Since H (cid:54)= 1/2, you draw a horizontal line that passes through the crossing point. This line provides two new points with known height 1/2 on the borders of the sheet, one on the left border and the other one on the right border. For the second step you can choose between using the original known points at height 1, or the points you have just located at height 1/2. That is, you can choose either L = 1 or L = 1/2 and of course R = 1 or R = 1/2. It is easy to see that if you choose L = R = 1/2, then the crossing point would be at height 1/4. However, if you choose L = 1/2 and R = 1, then the crossing point would be at the desired height H = 1/3. By symmetry, the same occurs if you choose L = 1 and R = 1/2.\nGiven a rational height H, you must determine a shortest sequence of heights on the borders of the sheet that allows locating a point at height H.\nAs the above example shows, only a point at height 1/2 can be located in a single step, and so a possible shortest sequence for H = 1/3 is S = (1,1,1/2,1). The first two heights must be chosen during the first step, and the remaining two heights must be chosen during the second step.\nInput\nThe input consists of a single line that contains two integers M and N (1 ≤ M < N ≤ 100) such that H = M/N is an irreducible fraction.\nOutput\nOutput a single line with the character “*” (asterisk) if a point at height H cannot be located by means of the described procedure. Otherwise, output a shortest sequence of heights S1,S2,...,SK that allows locating a point at height H, if they are chosen in the order they appear in the sequence. Height Si must be written in the i-th line using two integers Ai and Bi such that Si = Ai/Bi is an irreducible fraction (i = 1,2,...,K). It is guaranteed that when a point at height H can be located, it can be optimally located choosing only rational heights.",
    "samples": [
      [
        "1 3",
        "1 1\n1 1\n1 2\n1 1"
      ],
      [
        "1 3",
        "1 1\n1 1\n1 1\n1 2"
      ],
      [
        "3 4",
        "*"
      ],
      [
        "1 4",
        "1 1\n1 1\n1 2\n1 2"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Daily Trips",
    "text": "Bella is a simple girl with a simple life: wake up, go to work, work, go home, rest, sleep, and repeat. Bella commutes via bus, and it rains often in her city, so sometimes she needs an umbrella. However, the local weather forecast is unreliable, so Bella can’t be sure if it’s going to rain or not until right before she begins a trip. To avoid getting caught unprepared, Bella created a system.\nShe owns one or more umbrellas, keeping them at home or her workplace. Before any trip (from home to work, or vice versa), Bella looks outside to decide whether to bring an umbrella on that trip: • if it’s raining, she brings an umbrella; • otherwise, if there are currently no umbrellas at her destination (either work or home), she still brings an umbrella, just in case; • otherwise, she doesn’t bring an umbrella.\nThe second rule above is meant to prevent a situation where Bella needs an umbrella but has none at her current location (a bad memory she will talk about to anyone who asks). This guarantees that Bella will never catch rain and get sick.\nNow we need you to simulate Bella’s method for a certain period. The simulation starts with Bella at home. Each day she takes two bus trips: to and back from work. Given the starting numbers of umbrellas at her home and workplace, and the weather reports during N consecutive days, find out whether or not Bella brought an umbrella on each of her 2N bus trips.\nInput\nThe first line contains three integers N (1 ≤ N ≤ 104), H (1 ≤ H ≤ 100), and W (0 ≤ W ≤ 100), indicating respectively the duration of the simulation period in days, and the starting numbers of umbrellas at Bella’s home and workplace. For i = 1,2,...,N, the i-th of the next N lines contains two characters representing whether it rained on each trip of the i-th day. The first character refers to the first trip of the day (from home to work), while the second character refers to the second trip of the day (from work to home). Each character is the uppercase letter “Y” if it rained, and the uppercase letter “N” otherwise.\nOutput\nOutput N lines. For i = 1,2,...,N, the i-th line must contain two characters indicating whether Bella brought an umbrella on each trip of the i-th day. The first character refers to the first trip while the second character refers to the second trip. Each character must be the uppercase letter “Y” if Bella brought an umbrella, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "5 2 1\nY N\nN N\nY N\nN Y\nY Y",
        "Y N\nN N\nY Y\nN Y\nY Y"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Gravitational Wave Detector",
    "text": "Byteland is a very inhospitable planet, so its inhabitants study the galaxy in search of a better planet to move to. In this world, astronomy is a matter of survival. The President of Byteland has just approved a proposal from the Science Minister to build a new Gravitational Wave Detector (GWD). Its design consists of three scientific stations to be built somewhere on the planet’s capital city (which you can treat as a two-dimensional plane). Their locations must be distinct and collinear, and one of the stations must be exactly in the middle of the other two.\nThis GWD will consume massive amounts of energy, so the Science Minister must choose the stations’ locations with this in mind. She studied the capital city’s electric grid, and learned the following: • The city has two major power plants. Each one has its own area of influence that can be seen as a non-empty convex polygon with no three consecutive vertices aligned. Within its area of influence, each major power plant can deliver as much power as the GWD requires.\n• Throughout the city, there are N minor power plants, and each can deliver the required power only to their immediate vicinity.\n• The areas of influence of the two major power plants do not intersect anywhere, not even on the borders. No two minor power plants have the same location, but a minor power plant can be within the area of influence of a major power plant.\nWith this knowledge in mind, the Science Minister decided to adopt the following additional constraints on the locations of the GWD stations: • The first station will be built within the area of influence of the first major power plant.\n• The second station will be built within the area of influence of the second major power plant.\n• The third station will be built at the location of a minor power plant.\nAny of the three GWD stations can be the middle one in the line. You can treat each GWD station and each minor power plant as a point with negligible size. The area of influence of each major power plant includes its border.\nThe next step for the Science Minister is to choose which minor power plant will house the third GWD station. Given the areas of influence of the two major power plants, and the locations of all minor power plants, you must find which ones are suitable candidates.\nThe figure above shows an example of an electric grid layout, as well as a few possible configurations for the GWD. It also shows two minor power plants that can’t possibly be used for the GWD.\nInput\nThe first line contains an integer M1 (3 ≤ M1 ≤ 105) indicating the number of vertices of the area of influence of the first major power plant. Each of the next M1 lines contains two integers X1 and Y1 (−108 ≤ X1,Y1 ≤ 108), representing the coordinates of one of those vertices. Vertices are given in counterclockwise order.\nThe next line contains an integer M2 (3 ≤ M2 ≤ 105) indicating the number of vertices of the area of influence of the second major power plant. Each of the next M2 lines contains two integers X2 and Y2 (−108 ≤ X2,Y2 ≤ 108), representing the coordinates of one of those vertices. Vertices are given in counterclockwise order.\nThe next line contains an integer N (1 ≤ N ≤ 5 × 105) indicating the number of minor power plants. Each of the next N lines contains two integers X and Y (−108 ≤ X,Y ≤ 108), representing the coordinates of one of the minor power plants. Minor power plants are identified by distinct integers from 1 to N, according to the order they appear in the input.\nOutput\nOutput a single line with a string of length N such that its i-th character is the uppercase letter “Y” if the minor power plant i is a suitable candidate, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "3\n2 5\n4 5\n2 7\n3\n8 8\n10 6\n10 8\n10\n5 7\n5 8\n6 6\n7 7\n9 4\n13 9\n15 8\n15 10\n15 12\n18 9",
        "YNYNNNYYNY"
      ],
      [
        "4\n1 3\n2 4\n1 5\n0 4\n4\n3 1\n2 1\n2 0\n3 0\n7\n1 2\n6 -5\n2 2\n-3 9\n2 -3\n-1 7\n1 3",
        "YNYNYYN"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Kind Baker",
    "text": "Flora loves baking cakes, and for her company’s K-th birthday she promised to bring a special treat: a cake, with K different combinations of toppings to choose from! Unfortunately, she doesn’t have much time, so she needs to simplify things a bit.\nA cake can be described as a 100 × 100 grid of square cake pieces. A collection of pieces is connected if, for every pair of pieces in the collection, they are connected directly (they share a side) or indirectly (there is a sequence of pieces such that you can go from one piece to the other through directly connected pieces). The figure below depicts two collections of pieces (only a relevant part of the grid is shown). One collection is connected, while the other one is not.\nNot connected Flora has a machine that accepts a connected collection of cake pieces and puts a certain topping on each of those pieces. A different topping is applied each time the machine runs.\nAfter using the machine a given number of times, each piece will have a (possibly empty) combination of toppings on it. Two pieces are considered to be of different types if they have a different combination of toppings. Flora wants to know the minimum number of times she has to use the machine to achieve exactly K different types of cake pieces, and a possible way to choose a connected collection of cake pieces for each time she will use the machine.\nInput\nThe input consists of a single line that contains an integer K (1 ≤ K ≤ 4000) indicating the number of different types of pieces that the cake must have.\nOutput\nThe first line must contain an integer T indicating the minimum number of times that Flora has to use the machine. Each of the next T lines describes a connected collection of cake pieces to drive into the machine the successive times that Flora will use it; the line must contain a positive integer N followed by N different pairs of integers X1,Y1,X2,Y2,...,XN,YN (1 ≤ Xi,Yi ≤ 100 for i = 1,2,...,N), indicating that the collection consists of the pieces with coordinates (X1,Y1),(X2,Y2),...,(XN,YN). It is guaranteed that there exists at least one solution. The coordinates (1,1) identify the square piece in any corner of the cake.\n    The picture below explains the first sample (only a relevant part of the grid is shown). To get exactly K = 6 combinations of toppings, Flora has to use the machine a minimum of T = 3 times. In the picture, the first topping applied by the machine is represented as a pineapple ((cid:63)), the second as a cherry ( ), and the third as a blueberry (•). The lists of pieces having each combination of toppings are as follows: 1. Only topping 1 ((cid:63)): (2,3); 2. Only topping 2 ( ): (3,2); 3. Only topping 3 (•): (4,4); 4. Toppings 2 ( ) and 3 (•): (4,3); 5. All three toppings: (3,3); 6. No toppings: rest of the pieces.",
    "samples": [
      [
        "6",
        "3\n2 2 3 3 3\n3 3 2 3 3 4 3\n3 3 3 4 3 4 4"
      ],
      [
        "2",
        "1\n3 100 99 99 99 99 100"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Favorite Tree",
    "text": "After learning about tree isomorphism, Telio couldn’t avoid but wonder in how many trees out there his favorite tree is hiding.\nGiven two trees, T1 and T2, can you help him determine if there is a subtree of T1 isomorphic to T2? Two trees are isomorphic if it is possible to label their vertices in such a way that they become exactly the same tree. For instance, a tree having edges {(1,2),(2,3)} is isomorphic to a tree having edges {(1,3),(3,2)}.\nThe figure below corresponds to the first sample, with tree T1 on the left and tree T2 on the right. The subtree of T1 formed by all of its vertices but vertex 5 is isomorphic to T2.\nInput\nThere are two groups of lines, each group describing a tree. The first group describes the tree T1, while the second group describes the tree T2.\nWithin each group describing a tree, the first line contains an integer N (1 ≤ N ≤ 100) representing the number of vertices in the tree. Vertices are identified by distinct integers from 1 to N. Each of the next N − 1 lines contains two integers U and V (1 ≤ U,V ≤ N and U (cid:54)= V ), indicating that the tree has the edge (U,V ).\nIt is guaranteed that the input describes two valid trees.\nOutput\nOutput a single line with the uppercase letter “Y” if there is a subtree of T1 that is isomorphic to T2, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "5\n1 3\n4 5\n3 2\n3 4\n4\n2 4\n2 1\n3 2",
        "Y"
      ],
      [
        "4\n2 3\n2 1\n2 4\n4\n1 2\n2 3\n3 4",
        "N"
      ],
      [
        "1\n1",
        "Y"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "City Folding",
    "text": "Joe’s bedroom is so dirty that the germs have developed civilization! They have communities and cities everywhere, and the bedroom is their world: Joe’s shoes are giant caves, his fishbowl is an ocean, his moldy pizza boxes are jungles, etc.\nOne of the biggest germ metropolis, Long City, is built on a long strip of paper left on the floor. It’s an awkward city layout, so the inhabitants decided to go three-dimensional: they will fold the strip several times and turn it into a stack! This way, transportation across the city will be much easier, by moving up and down across layers.\nSpecifically, the germs will repeat the following procedure N times: • find the exact middle of the current strip; • then either fold the left side on top of the right side, or vice versa.\nThe result will be a stack of 2N paper layers.\nAmelia is a powerful and wealthy amoeba who inhabits Long City, and like everyone else, she’s looking forward to the folding. However, she has a particular preference: after the folding process is complete, she would like her home to end up in the H-th layer from the ground, because H is her lucky number. To achieve this, Amelia can influence the folding process: at each of the N steps, she can decide whether to fold the left side over the right side, or vice versa.\nNow she needs your help to decide the exact sequence of folds to perform. According to Amelia, if you were to divide Long City into 2N sections of equal length, her home would be on the P-th section from left to right. Given N, P, and H, find the answer she wants.\nThe figure below illustrates the first sample. Amelia’s home is on the fourth section of the strip, and after the three shown folds it ends up in the seventh layer from the ground.\nInput\nThe input consists of a single line that contains three integers N (1 ≤ N ≤ 60), P and H (1 ≤ P,H ≤ 2N), indicating respectively the number of folds, the initial position of Amelia’s home on the strip, and the desired final height in the stack.\nOutput\nOutput a single line with a string of length N such that its i-th character indicates how to perform the i-th fold. The uppercase letter “L” means folding the left side on top of the right side, while the uppercase letter “R” means folding the right side on top of the left side. It is guaranteed that a unique solution exists.",
    "samples": [
      [
        "3 4 7",
        "LRL"
      ],
      [
        "4 16 16",
        "LLLR"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Board Game",
    "text": "Danilo loves board games. Every weekend he meets his friends to play. However, after years of playing the same classic board games, he grew tired of them and hence decided to create his own game.\nDanilo’s game starts with T tokens on the board, which can be seen as points in the two dimensional plane. There are P players that take a single turn each. In their turn, each player picks a card from a deck. The card describes a straight line, and the player gets all the tokens located strictly below this line. Tokens received by a player do not return to the board. Note that a token located at (X,Y ) is strictly below a line y = Ax + B if and only if Y < AX + B.\nGiven the list of cards, your task is to find which tokens each player receives.\nInput\nThe first line contains an integer T (1 ≤ T ≤ 105) indicating the number of tokens on the board. Tokens are identified by distinct integers from 1 to T. For i = 1,2,...,T, the i-th of the next T lines contains two integers Xi and Yi (−109 ≤ Xi,Yi ≤ 109), denoting the coordinates of the token. No two tokens have the same location.\nThe next line contains an integer P (1 ≤ P ≤ 105) representing the number of players in the game. Players are identified by distinct integers from 1 to P, according to the order they take turns. For i = 1,2,...,P, the i-th of the next P lines contains two integers Ai and Bi (−109 ≤ Ai,Bi ≤ 109), indicating that the line in the card picked by player i is y = Aix+Bi.\nOutput\nOutput P lines. For i = 1,2,...,P, the i-th line must contain an integer Ki indicating the number of tokens that player i receives, followed by Ki integers identifying those tokens in ascending order.",
    "samples": [
      [
        "5\n0 0\n5 0\n4 3\n2 4\n2 -1\n3\n-1 5\n0 2\n1 1",
        "2 1 5\n1 2\n1 3"
      ],
      [
        "2\n0 0\n1 1\n2\n0 1\n0 1",
        "1 1\n0"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Asking for Money",
    "text": "The International Commission for the Prevention of Cons is studying the possible effects of a pyramid scheme in a town. The scheme is as follows: someone asks a person for $1 and tells them to ask two other people for $1 each and to tell each of them to ask for money from two others just as they are doing. In this way, the victim thinks that they are going to earn $1. As there is a finite number of people in the world, not everyone can earn money this way, this is a con.\nThe N people in town are susceptible to the con, that is, they are willing to give $1 and later ask for money from two other people. However, they are willing to participate only once, that is, if they are asked for money again they will not give it or ask anyone. Once a person is asked for money, they give it immediately but can take some time before asking the other two people. The con starts with someone from outside the town asking someone in the town for money. This triggers a sequence of requests for money within the town.\nFor example, in the picture below we depict a town with five people. An arrow from A to B indicates that A would ask B for the money.\nIn this example, B can lose money. We can check that with the following scenario.\n1. Someone from outside the town asks A for money.\n2. A asks B for money.\n3. A asks C for money.\n4. C asks D for money.\n5. B asks C for money.\n6. B asks D for money.\nObserve that when B asks C and D for money, they will not give it to B since they have already given money to someone else.\nFor each person in the town you know whom they are going to ask for money. Your task is to determine who in the town can lose money.\nInput\nThe first line contains an integer N (3 ≤ N ≤ 1000) indicating the number of people in the town. Each person is identified by a distinct integer from 1 to N. For i = 1,2,...,N, the i-th of the next N lines contains two integers Xi and Yi (1 ≤ Xi,Yi ≤ N, Xi,Yi (cid:54)= i and Xi (cid:54)= Yi), representing that person i would ask for money to person Xi and person Yi.\nOutput\nOutput a single line with a string of length N such that its i-th character is the uppercase letter “Y” if person i can lose money, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "5\n2 3\n3 4\n4 5\n5 1\n1 2",
        "YYYYY"
      ],
      [
        "4\n2 3\n3 4\n2 4\n2 3",
        "NYYY"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Empty Squares",
    "text": "Martín has a board of 1 × N squares. He also has N tiles of 1 × 1,1 × 2,...,1 × N squares, one of each type. He has placed one of the tiles on the board. His friend, Nico, wants to place some of the remaining tiles in such a way that as many squares as possible are covered. How many squares will remain empty if he succeeds? Tiles placed on the board cannot overlap each other. Besides, each placed tile must be located completely within the board and must cover whole squares.\nInput\nThe input consists of a single line that contains three integers N (1 ≤ N ≤ 1000), K (1 ≤ K ≤ N) and E (0 ≤ E ≤ N − K), indicating that the board has 1 × N squares, and a tile of 1 × K squares is placed leaving E empty squares to its left.\nOutput\nOutput a single line with an integer indicating the number of squares that will remain empty if Nico covers as many squares as possible with the remaining tiles.",
    "samples": [
      [
        "6 2 2",
        "3"
      ],
      [
        "1000 1 1",
        "1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Joining a Marathon",
    "text": "There are R runners about to participate in a marathon. Johnny, who is organizing the marathon, knows that if a runner starts to run at time T with constant speed S, then at time t (for t ≥ T) the runner will be at position (t−T)×S on the track. Before time T, the runner is considered to not be on the track.\nOf course, such an event has to have great photos taken. P photos will be taken in total.\nEach photo will be taken at a specific time and will contain a carefully chosen segment of the track. If there are no runners in that segment at that time, the photo is considered to be trash.\nJohnny, knowing all this, was saddened by the number of trash photos that would come from his event, so he decided to take the matter into his own feet and participate in the marathon along with the other runners.\nJohnny is considering how he may run, so he will ask you Q queries of the following format: if Johnny starts to run at a given time with a certain constant speed, how many trash photos will still be taken in his event? Input\nThe first line contains an integer R (1 ≤ R ≤ 1000) indicating the number of runners. Each of the next R lines describes a runner with two integers T (0 ≤ T ≤ 109) and S (1 ≤ S ≤ 109), representing respectively the starting time and the speed of the runner.\nThe next line contains an integer P (1 ≤ P ≤ 106) denoting the number of photos. Each of the next P lines describes a photo with three integers U (0 ≤ U ≤ 109), A and B (0 ≤ A ≤ B ≤ 109), specifying that the photo will be taken at time U and will cover the segment [A,B] of the track.\nThe next line contains an integer Q (1 ≤ Q ≤ 1000) indicating the number of queries. Each of the next Q lines describes a query with two integers T(cid:48) (0 ≤ T(cid:48) ≤ 109) and S(cid:48) (1 ≤ S(cid:48) ≤ 109), representing respectively a possible starting time and speed for Johnny.\nOutput\nOutput Q lines, each line with an integer indicating the number of trash photos for the corresponding query of the input.",
    "samples": [
      [
        "3\n0 1\n2 2\n4 2\n3\n1 2 4\n5 8 16\n3 1 8\n3\n3 1\n1 3\n0 2",
        "2\n1\n0"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Italian Calzone & Pasta Corner",
    "text": "The Italian Calzone & Pasta Corner restaurant designed its menu having its dishes in a R×C two-dimensional grid, keeping dishes that go well together nearby each other. To eat, you choose a starting cell, and then repeatedly move up, down, left, or right to any of the four adjacent cells, getting any dishes you move through. Moving into already visited cells is allowed, but you don’t get the same dish again.\nOne day, Pierre, a foreign customer, showed up really hungry, and with a very strict eti quette background. He has a very specific order in which the dishes must be eaten. For example an appetizer, then an entree, then a main dish, then a salad, etc. So he assigned a distinct integer from 1 to R × C to each dish in the menu grid, indicating the order in which he would eat the whole menu. Now he wants to choose and eat dishes following his order. Since the restaurant’s rules might prevent him from choosing the whole menu, he is fine with skipping some of the steps given by his order. Can you help him choose a meal with as many dishes as possible? Input\nThe first line contains two integers R and C (1 ≤ R,C ≤ 100), indicating that the menu grid has R rows and C columns. The next R lines contain C integers each, representing the menu grid. Each of these numbers is a distinct integer from 1 to R × C assigned by Pierre to the corresponding dish in the menu grid.\nOutput\nOutput a single line with an integer indicating the maximum amount of dishes that Pierre can eat.",
    "samples": [
      [
        "1 5\n5 3 2 1 4",
        "5"
      ],
      [
        "1 5\n1 5 4 3 2",
        "4"
      ],
      [
        "3 3\n4 1 3\n8 5 9\n7 2 6",
        "6"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Horse Race",
    "text": "The Exponential Horse Racing company has been building larger and larger stadiums, allowing for many more horses than usual to participate in the same race. And, to facilitate filling those slots, it combines races of different tiers. That is, horses that are known to be much worse than others are allowed to race together, and spectators are allowed to bet on each of the small races that are happening. This also allows for horses that are between tiers to race in both tiers at once.\nPaul is in charge of noting down the winner of each small race. To speed up that work, instead of noting down the full name of the winning horse, Paul notes down only its placement on the full race.\nAs an example, suppose that horses “a”, “b”, “c”, “d” and “e” participated in a full race, and they reached the finish line in the order “e”, “c”, “a”, “b” and “d”. Hence a small race with horses “c” and “b” was won by “c”, and then Paul would note down that the winner of the small race was the second horse, because “c” got that placement on the full race.\nOne day you got Paul’s notes, but didn’t have the full race results on hand. All you know is that there were no ties in the full race, and that every horse reached the finish line. Can you figure out the full race results by having only the description of each small race? Input\nThe first line contains an integer N (2 ≤ N ≤ 300) indicating the number of horses in the full race. The second line contains N different strings representing the names of the horses.\nEach string has a length of up to three and is made of lowercase letters. The third line contains an integer R (1 ≤ R ≤ 105) denoting the number of small races. For i = 1,2,...,R, the i-th of the next R lines describes a small race with two integers Mi (2 ≤ Mi ≤ N) and Wi (1 ≤ Wi ≤ N), followed by Mi different strings, indicating respectively the number of horses in the small race, the winner according to Paul’s notes, and the names of the participating horses.\nIt is guaranteed that (cid:80) i Mi ≤ 105.\nOutput\nOutput a single line with N strings indicating the names of the horses in a valid order, that represents a possible result of the full race. It is guaranteed that there exists at least one solution. If there are multiple solutions, output any of them.",
    "samples": [
      [
        "5\na b c d e\n3\n4 2 a b c d\n2 4 b d\n2 2 c b",
        "e c a b d"
      ],
      [
        "2\naaa b\n3\n2 1 aaa b\n2 1 b aaa\n2 1 aaa b",
        "b aaa"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lazy Printing",
    "text": "Vinícius has an interesting typing machine. The machine accepts instructions consisting of a non-empty string s and a positive integer n. For each such instruction, the machine prints n characters: the i-th (0-based) printed character equals sr, where r is the remainder after dividing i by the length of s and sr denotes the r-th (0-based) character of s. For instance, with the sequence of instructions: 1. s = “ab”, n = 4 2. s = “cd”, n = 3 3. s = “xx”, n = 2 the machine will print “ababcdcxx”.\nVinícius is lazy, so he only gives strings of length at most D to the machine in each instruc tion. Since he is very lazy, he also wants to use as few instructions as possible. Given a string T and the integer D, help Vinícius find the minimum number of instructions he needs in order to print T using the machine.\nInput\nThe input consists of a single line that contains a string T of lowercase letters followed by the integer D (1 ≤ D ≤ |T| ≤ 2 × 105), as described in the statement.\nOutput\nOutput a single line with an integer indicating the minimum number of instructions Vinícius needs.",
    "samples": [
      [
        "ababcdcxx 2",
        "3"
      ],
      [
        "aaabbcd 1",
        "4"
      ],
      [
        "abcabca 3",
        "1"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Maze in Bolt",
    "text": "Usain has an online store specializing in selling 3D puzzles made by 3D printers. One of the best-selling puzzles these days is the Maze in Bolt. This puzzle is composed of two parts: a screw-shaped piece with an embossed labyrinth engraved on it, and a nut. The inner part of the nut may contain tips. These tips make the nut slide only through the corridors of the labyrinth.\nInitially, the two parts of the puzzle are separated. The challenge is to slide the nut all the way through the maze until it reaches the head of the bolt. The nut can be moved clockwise, counterclockwise, down (towards the head of the bolt), and up (away from the head). Each of these movements is only possible when every tip in the inner part of the nut is not prevented from sliding to the new position due to some wall of the maze. Besides the mentioned movements, another one is allowed: when the bolt and the nut are separated, the nut can be flipped. The illustration below shows both parts of the puzzle as well as all the allowed moves.\n(A customer placed an order for a large quantity of the Maze in Bolt. Each puzzle is designed by Usain himself in a random and unique way but, due to the size of the order and the tight deadline, he believes he will not be able to check whether the created puzzles have a solution or not. Usain asked for your help in devising an algorithm that quickly checks any given pair of nut and bolt. For doing so, the inner part of the nut will be modeled as a binary circular string. Regarding the bolt, each row of the maze will be modeled the same way.\nInput\nThe first line contains two integers R (1 ≤ R ≤ 1000) and C (3 ≤ C ≤ 100), indicating respectively the number of rows and columns of the maze. The second line contains a circular string S of length C, representing the inner part of the nut. Each character of S is “1” if the nut has a tip in the corresponding position, while an empty space is indicated by character “0”. Each of the next R lines contains a circular string describing a row of the maze. In this case, each character of the string is “1” if the maze has a wall in the corresponding position, while an empty space is indicated by character “0”. Rows are given from top (the tip of the bolt) to bottom (the head).\nOutput\nOutput a single line with the uppercase letter “Y” if the puzzle has a solution, and the uppercase letter “N” otherwise.\n          The picture below explains the first sample. Images on the left represent 3D views of different stages of the game. In the middle, the images are flattened 2D versions of the corre sponding 3D views. Finally, images on the right represent the stages of the game according to the described model (although for the sake of clarity, each character “1” has been replaced by a given symbol, and each character “0” is shown as an empty space).\nIt can be seen in the top three images that the nut (having three pins) and the bolt start separated. The second group of three images shows the situation of the game after the nut has been moved four rows down (towards the head of the bolt). Then the nut is rotated one position, moved down two more rows, rotated four positions in the opposite direction, and finally moved down three rows, which solves the puzzle. Note that in this case the nut has not been flipped, nor moved up (away from the head of the bolt).",
    "samples": [
      [
        "8 13\n0110010000000\n1100101110100\n1001101000100\n1100101110100\n1000100010000\n1010111011001\n0000001010000\n1001101111101\n0001001100100",
        "Y"
      ],
      [
        "1 3\n100\n101",
        "Y"
      ],
      [
        "2 3\n100\n101\n010",
        "N"
      ],
      [
        "4 6\n001000\n011111\n010001\n010100\n110111",
        "Y"
      ],
      [
        "1 6\n001011\n001011",
        "Y"
      ]
    ],
    "source": {
      "year": "2022",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Dividindo o Reino",
    "text": "O reino da Nlogônia historicamente tem sido um lugar rico e tranquilo. Entretanto, as atuais cir cunstâncias podem dar fim a esta era de paz e prosperidade: o rei é pai de gêmeos, então ambos são herdeiros do trono.\nOs gêmeos não se dão muito bem e são ciumentos e competitivos um com o outro. Devido a este fato, tê-los governando o reino cooperativamente não é realmente uma opção. O reino terá de ser dividido em dois principados independentes, de forma que cada um seja dado a um príncipe. Além disso, a divisão precisa ser totalmente justa, para evitar conflitos entre os irmão invejosos.\nO reino consiste em N cidades e M estradas conectando pares de cidades. Os Nlogonianos são particularmente orgulhosos de suas estradas. Cada estrada tem um valor positivo associado a ela, representando sua beleza.\nO reino será dividido da seguinte maneira: primeiro, as cidades serão particionadas em dois conjun tos de forma que cada cidade está em exatamente um conjunto. Então, cada principado será composto pelas cidades em um dos conjuntos e pelas estradas conectando as cidades naquele conjunto. Estra das que conectam cidades de diferentes principados serão destruídas, uma vez que os príncipes não estão interessados em fazer negócios ou colaborações entre os principados, e manter estradas apenas aumentaria a chance de guerras.\nA beleza de um principado é definida como a maior beleza dentre todas as estradas daquele principado, ou 0 (zero) se o principado não possui estradas. Por motivos óbvios, o rei gostaria que a beleza de ambos os principados fosse igual.\nAjude o rei a determinar todos os possíveis valores de beleza dos possíveis principados resultantes, dado que a divisão é feita de maneira que os principados sejam igualmente belos.\nEntrada\nA primeira linha contém dois inteiros N, M (1 ≤ N,M ≤ 5 × 105), representando o número de cidades e o número de estradas respectivamente.\nCada uma das M linhas seguintes contém três inteiros xi,yi,bi (1 ≤ xi < yi ≤ N, 1 ≤ bi ≤ 109), representando que existe uma estrada que conecta as cidades xi e yi e possui beleza bi. Não existem estradas entre um mesmo par de cidades.\nSaída\nSe não for possível dividir o reino de maneira que ambos os principados tenham a mesma beleza, imprima uma linha com a string “IMPOSSIBLE”. Caso contrário, imprima todos os possíveis valores resultantes da divisão do reino em principados de mesma beleza. Os valores devem ser impressos em ordem crescente, um por linha.",
    "samples": [
      [
        "9 7\n1 2 3\n2 3 3\n3 4 3\n1 3 2\n2 4 2\n6 7 1\n8 9 1",
        "2\n3"
      ],
      [
        "4 4\n1 2 5\n2 3 6\n1 3 7\n3 4 7",
        "IMPOSSIBLE"
      ],
      [
        "2 1\n1 2 10",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "D",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Garantindo o Treino",
    "text": "Juan decidiu começar a se exercitar e está começando a preparar uma sessão de treinamento.\nEle sabe que em alguns dias pode não querer fazer todos os exercícios de sua sessão. Ele então decidiu criar algumas regras para evitar pular a sessão inteira e acabar não se exercitando, mas de forma que ainda possa evitar alguns exercícios de vez em quando.\nAs regras são: • Haverá dois tipos de exercícios: A e B.\n• Após terminar um exercício do tipo B ele fará o próximo exercício, se houver algum. Caso contrário, a sessão termina.\n• Após terminar um exercício do tipo A, há duas possibilidades: ele pode iniciar o exercício seguinte ou pulá-lo, executando o exercício imediatamente posterior.\n• O último exercício da sessão será sempre do tipo B.\nAssim, podem existir diferentes maneiras de se completar a sessão de exercícios. Por exemplo, se os tipos dos exercícios são BAAB, existem 3 maneiras de se completar a sessão: fazendo todos os exercícios, pulando o terceiro ou pulando o último.\nJuan quer preparar sua sessão de exercícios de maneira que existam exatamente N maneiras diferentes de completá-la. Você pode ajudá-lo? Entrada\nA entrada é composta por uma única linha contendo um inteiro N (2 ≤ N ≤ 1015), representando o número de maneiras que a sessão de exercícios pode ser completada.\nSaída\nImprima uma linha, formada pelos caracteres ‘A’ e ‘B’, representando os tipos dos exercícios na sessão. Se houver múltiplas respostas, imprima aquela que é lexicograficamente menor. Se não houver sessões válidas, imprima uma linha contendo a string “IMPOSSIBLE” (sem aspas).",
    "samples": [
      [
        "2",
        "AB"
      ],
      [
        "4",
        "ABAB"
      ],
      [
        "7",
        "IMPOSSIBLE"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "G",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Katmandu",
    "text": "Finalmente a pandemia está melhorando e você finalmente pode fazer a coisa com a qual esteve sonhando nos últimos anos: comer no seu restaurante favorito. Acontece que esse restaurante fica em Katmandu, mas tudo bem, é só você ir de avião.\nO problema é que viajar de avião quase sempre te deixa muito cansado. Você se considera descan sado se você consegue dormir por T minutos sem interrupção, ou seja, você nunca está acordado de um certo momento t até t + T. Além disso você dorme com muita facilidade: você consegue dormir no começo de qualquer minuto e acordar ao fim de qualquer minuto.\nClaro que se você dormir demais você vai acabar perdendo todas as refeições que servem no vôo! Isso é completamente inaceitável: nenhuma oportunidade de comer de graça pode passar em branco.\nFelizmente, a companhia áerea te mandou o cronograma completo do vôo: a duração do vôo, D minutos, o número de refeições que serão servidas, M, e o tempo a partir do início do vôo em que essas refeições serão servidas, yi. Você precisa estar acordado no início do minuto em que a refeição será servida para comê-la, caso contrário você não será servido. Como você está sempre com fome, a refeição será devorada instantaneamente.\nAgora você quer saber, para ter o vôo perfeito, você consegue ficar descansado e ainda assim comer todas as refeições durante o vôo? Entrada\nA primeira linha da entrada contém três inteiros, T, D, M (1 ≤ T,D ≤ 105, 0 ≤ M ≤ 1000), que representam, respectivamente, o número de minutos consecutivos que você precisa dormir para ficar descansado, a duração do vôo e o número de refeições que serão servidas durante o vôo.\nCada uma das M linhas seguintes contém um inteiro yi (0 ≤ yi ≤ D). Esses inteiros representam os tempos nos quais cada refeição será servida, e são dados em ordem cronológica.\nSaída\nImprima uma única linha contendo um único caractere. Se você consegue descansar durante o vôo e ainda assim comer todas as refeições, imprima ‘Y’; caso contrário, imprima ‘N’.",
    "samples": [
      [
        "3 10 3\n2\n4\n7",
        "Y"
      ],
      [
        "4 10 3\n2\n4\n7",
        "N"
      ],
      [
        "5 5 0",
        "Y"
      ],
      [
        "4 8 2\n5\n7",
        "Y"
      ],
      [
        "4 8 2\n3\n4",
        "Y"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "K",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Na Trave!",
    "text": "Vini é um pintor de carros muito dedicado. Desde que ele aprendeu como pintar carros, o seu sonho tem sido participar da Internacional Competição de Pintores de Carros (ICPC).\nTodo ano a região de Vini tem uma competição local para classificar todos os times competitivos de pintores de carro da região. Pintores em times que se classificaram nas melhores x posições avançam para competir na ICPC. É uma competição muito emocionante com muitos competidores novos em todos os anos, até que a fumaça nociva das tintas eventualmente faz com que os competidores se aposentem permanentemente.\nPor causa de variações de verba e também por restrições da ICPC, a quantidade x pode variar de ano pra ano, o que pode acabar causando desgosto de alguns dos competidores.\nNo último ano de Vini como competidor, o seu time estava a uma posição de se qualificar para a ICPC. Que azar! Para fazer com que o seu sentimento de “má sorte” ficasse ainda mais forte, no ano seguinte o time que obteve a mesma colocação se classificou para a ICPC! Apesar do sentimento, depois de falar com outros antigos competidores, ele notou que muitos deles já haviam se sentido azarados de uma forma ou de outra.\nAntigos competidores geralmente seguem os resultados das competições regionais por alguns anos após se aposentarem. Portanto, um competidor não se sentiria azarado pelas mudanças em x que acontecessem muitos anos após se aposentar. Mais precisamente, cada antigo competidor participou da sua última competição no ano ai, se posicionando na posição pi e, após se aposentar, seguiu os resultados pelos fi anos seguintes.\nUm competidor que não se qualificou para a ICPC em sua última participação se sentiu azarado em todos os anos em que ele seguiu os resultados e nos quais ele teria se classificado se tivesse competido.\nEm outras palavras, para cada ano até fi anos após se aposentar, se ele não se qualificou em sua última participação, ele se sentiu azarado se o número de times qualificados para a ICPC naquele ano foi ao menos pi.\nDado o número de vagas por ano, e as informações sobre cada antigo competidor, nós gostaríamos de saber em quantos anos cada antigo competidor se sentiu azarado.\nEntrada\nA primeira linha contém dois inteiros Y e N (1 ≤ Y,N ≤ 3 × 105), representando a quantidade de anos de competições e a quantidade de antigos competidores com quem Vini conversou, respecti vamente. (Sim, pintar carros é uma tradição milenar, e bem popular!).\nA próxima linha contém Y inteiros x1, x2, ..., xY (0 ≤ xi ≤ 105), representando quantas vagas para a ICPC a região teve em cada ano.\nCada uma das seguintes N linhas contém três inteiros ai, pi e fi (1 ≤ ai ≤ Y , 1 ≤ pi ≤ 105, 0 ≤ fi ≤ Y −ai), representando o ano em que o i-ésimo antigo competidor teve sua última participação, a colocação do time do i-ésimo antigo competidor naquele ano, e por quantos anos o i-ésimo antigo competidor seguiu os resultados após se aposentar, respectivamente.\nSaída\nImprima N linhas, onde a i-ésima linha deve conter um inteiro representando quantos anos o i-ésimo antigo competidor se sentiu azarado.",
    "samples": [
      [
        "5 3\n1 2 3 4 5\n1 3 4\n2 6 3\n3 4 1",
        "3\n0\n1"
      ],
      [
        "4 1\n8 8 8 8\n1 7 3",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "N",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Fuga da Prisão",
    "text": "Michael e seu irmão Lincoln foram presos injustamente, na mesma prisão, mas Michael tem um plano para resgatar seu irmão. Pode-se considerar que a prisão é um conjunto de polígonos convexos no plano, cujas arestas são muros. Os muros de polígonos distintos não se interceptam, mas os polígonos podem ser encaixados, isto é, um polígono pode estar dentro de outro polígono. Pode-se considerar que Michael e Lincoln são dois pontos no plano. O caminho para o resgate consiste em primeiro Michael chegar até seu irmão e então ambos precisam escapar da prisão.\nEles não têm problema para andar, mas escalar muros é perigoso e difícil, assim Michael tentará minimizar o número total de muros que ele deverá escalar. Portanto, Michael primeiro precisa escalar alguns muros para chegar ao seu irmão, caso não se encontrem na mesma área. Em seguida deve escalar mais alguns muros para deixar a prisão. Deixar a prisão significa não estar dentro de quaisquer muros, que pode-se considerar equivalente a atingir um ponto muito longe, digamos, (1020,1020). Brad está encarregado da alocação dos prisioneiros e está sabendo do plano, de forma que ele colocará os dois prisioneiros em dois pontos diferentes do plano, mas não nos muros, e de tal forma que o número mínimo de muros que precisam ser escalados por Michael seja o maior possível. Qual é o valor do número mínimo de muros que Michael precisará escalar se Brad colocar os dois irmãos de forma ótima? Entrada\nA primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 2×105), que é o número de polígonos convexos. Esta linha é seguida pelas descrições de cada polígono. A primeira linha da i-ésima descrição contém um inteiro ki (3 ≤ ki ≤ 6 × 105), seguida de ki linhas, cada uma das quais contém um ponto (xj, yj) (−109 ≤ xj,yj ≤ 109).\nOs pontos para formar cada polígono convexo são dados na ordem anti horária e não há três pontos consecutivos colineares. As arestas de dois polígonos distintos não se interceptam. O número total de arestas não passa de 6 × 105, ou seja, (cid:80)N i=1 ki ≤ 6 × 105.\nSaída\nImprima um inteiro, o número mínimo de muros que precisarão ser escalados por Michael para resgatar seu irmão, supondo que Brad os colocou em lugares que torna esse número de muros o maior possível.",
    "samples": [
      [
        "4\n4\n1 10\n-2 13\n-5 7\n-1 6\n5\n15 11\n9 20\n-6 19\n-14 5\n5 0\n4\n-1 15\n-8 7\n1 4\n2 11\n3\n7 17\n7 6\n12 11",
        "6"
      ],
      [
        "2\n4\n0 0\n3 0\n3 3\n0 3\n4\n1 1\n2 1\n2 2\n1 2",
        "4"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "F",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Criando Multiplos",
    "text": "Malba é um garoto muito inteligente que gosta de calcular. Já ganhou muitas competições, inclusive a prestigiosa competição Tahan, em que conseguiu o primeiro lugar, representando o seu país, a Logônia.\nEle inventou um problema, no qual ele considera um número N, escrito numa certa base B, e representado por L algarismos. O objetivo do jogo é reduzir não mais do que um dos algarismos de forma que o novo número, M, seja um múltiplo do número B + 1. Mas há um detalhe: dentre as alterações possíveis, deve-se escolher uma que minimize M.\nPor exemplo, suponha que B = 10 e N = 23456. Há duas maneiras de obter M: ou reduzimos o algarismo 4 para 0 ou reduzimos o algarismo 6 para 2. Então, o 4 deve ser reduzido para 0, portanto M = 23056. Em alguns casos não há solução, como no caso em que B = 10 e N = 102. Nesse caso, se trocarmos o algarismo 1 por 9 obteremos um múltiplo de 11, mas não podemos aumentar o valor de um algarismo! Observe que pode ser necessário reduzir o primeiro algarismo para o valor 0. Por exemplo, isto acontece se B = 10 e N = 322.\nVocê consegue dizer qual dígito deve ser reduzido e qual seu novo valor? Entrada\nA primeira linha contém dois inteiros B e L (2 ≤ B ≤ 104, 1 ≤ L ≤ 2×105), representando a base e o número de algarismos do número N, respectivamente.\nA segunda linha contém L inteiros D1,D2,...,DL (0 ≤ Di < B para i = 1,2,...,L), representando os algarismos do número N. O primeiro algarismo, D1, é o mais significativo e o último algarismo, DL, é o menos significativo.\nSaída\nImprima uma linha contendo dois inteiros, separados por um espaço. O primeiro inteiro é o índice do algarismo a ser alterado (lembre que o índice do primeiro algarismo, D1, é 1 e o índice do último algarismo, DL, é L). O segundo inteiro é o novo valor do algarismo. Se não houver solução para o problema, imprima -1 -1. Se N já for um múltiplo de B + 1, imprima 0 0.",
    "samples": [
      [
        "10 5\n2 3 4 5 6",
        "3 0"
      ],
      [
        "10 3\n1 0 2",
        "-1 -1"
      ],
      [
        "2 5\n1 0 1 1 1",
        "4 0"
      ],
      [
        "17 5\n3 0 0 0 0",
        "1 0"
      ],
      [
        "16 4\n15 0 13 10",
        "1 14"
      ],
      [
        "16 5\n1 15 0 13 10",
        "0 0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "C",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Belas Palavras",
    "text": "São dados uma string A de comprimento N e um conjunto S contendo M strings.\nUma permutação cíclica Bi de A, onde i é um número entre 1 e N, é a string Bi = AiAi+1 ···AN−1ANA1A2 ···Ai−2Ai−1 e a sua pontuação é definida como o maior comprimento de uma substring de Bi que é também uma substring de uma string em S.\nUma substring é definida como uma sequência contígua de letras. Por exemplo, ab e dc são substrings de abfdc, mas ad e fc não são substrings de abfdc.\nSua tarefa é calcular a menor pontuação dentre todas as permutações cíclicas da string A.\nEntrada\nA primeira linha contém dois inteiros positivos N e M, (1 ≤ N ≤ 105, 1 ≤ M ≤ 104), representando o comprimento da string A e o tamanho do conjunto S, respectivamente.\nA segunda linha contém a string A.\nCada uma das M linhas seguintes contém uma string si, representando a i-ésima string em S.\nTodas as strings contêm apenas letras minúsculas do alfabeto, e é garantido que a soma dos tamanhos de todas as strings em S nunca ultrapassa 105 caracteres.\nSaída\nImprima uma linha contendo um inteiro representando a menor pontuação dentre todas as per mutações cíclicas da string A.",
    "samples": [
      [
        "7 3\nacmicpc\nacm\nicpc\nmaratona",
        "3"
      ],
      [
        "11 4\ncompetition\noncom\npetition\nztxvu\nfmwper",
        "5"
      ],
      [
        "12 4\nlatinamerica\nzyvu\nokp\nwsgh\nkqpdb",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "B",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Alocação de Prêmios",
    "text": "Uma competição de programação se dará na Nlogônia, para determinar quem é o melhor programador Nlogoniano de todos os tempos.\nA competição terá N participantes e não há empates, ou seja, todo participante terminará colocado em uma posição de 1 a N, e todas as posições são distintas. Menores posições correspondem a melhores resultados.\nOs organizadores do evento decidiram que cada participante receberá um prêmio de no máximo R pontos e, para ser justo com os participantes com melhor desempenho, um participante nunca receberá menos pontos que um outro com pior colocação.\nAlguns participantes, entretanto, são gananciosos e querem receber mais pontos para serem felizes.\nUm competidor na colocação i precisa receber um prêmio de pelo menos pi pontos para ser feliz.\nIna, uma organizadora muito curiosa, está se perguntando de quantas maneiras é possível distri buir prêmios aos participantes de maneira a satisfazer as condições da organização, e fazer todos os participantes felizes. Como esse número é muito grande, você deve calculá-lo módulo 109 + 7.\nDuas maneiras são diferentes se pelo menos um competidor recebe um prêmio diferente.\nEntrada\nA primeira linha contém dois inteiros N e R (1 ≤ N ≤ 5000, 1 ≤ R ≤ 109), representando o número de participantes e o prêmio máximo que cada competidor pode receber, respectivamente.\nA segunda linha contém N inteiros, pi (1 ≤ pi ≤ 109), representando a menor quantidade de pontos que o participante na colocação i precisa receber para ficar feliz.\nSaída\nImprima uma linha contendo o número de diferentes maneiras de se distribuir o prêmio, módulo 109 + 7.",
    "samples": [
      [
        "2 5\n4 1",
        "9"
      ],
      [
        "3 10\n7 1 10",
        "1"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "A",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Escada Rolante",
    "text": "Você acaba de inventar um novo tipo de escada rolante: uma escada rolante dupla. Escadas rolantes normais levam as pessoas de uma das pontas para a outra, mas não na direção contrária, enquanto que as escadas rolantes duplas podem levar pessoas de qualquer uma das pontas para a outra.\nLeva-se 10 segundos para que a escada rolante dupla leve uma pessoa de uma das pontas até a outra. Isto é, se a pessoa entra na escada rolante dupla em uma das pontas no momento T, então vai sair na outra ponta no momento T + 10 – esta pessoa não estará mais na escada rolante dupla no momento T + 10.\nA todo momento que ninguém esteja usando a escada rolante dupla, ela estará parada. Portanto, inicialmente ela está parada.\nQuando a escada rolante dupla está parada e uma pessoa entra por uma das pontas, a escada rolante dupla se ligará automaticamente e se moverá na direção que aquela pessoa quer ir.\nSe uma pessoa chegar na escada rolante dupla e esta já estiver movendo-se na direção que a pessoa quer ir, então a pessoa entrará nela imediatamente. Caso contrário, se a escada rolante estiver se movendo na direção oposta, a pessoa terá que esperar até que a escada rolante pare e só então a pessoa poderá entrar nela. A escada rolante dupla é tão larga que ela pode acomodar inúmeras pessoas entrando nela ao mesmo tempo.\nA escada rolante dupla tem um efeito bem estranho, provavelmente relacionado a alguma propri edade da física quântica (ou simplesmente ao acaso): nenhuma pessoa vai chegar na escada rolante dupla no momento exato em que ela está prestes a parar.\nAgora que você sabe como a escada rolante dupla funciona, você terá a tarefa de simulá-la. Dada a informação de N pessoas, incluindo o momento em que elas chegaram na escada rolante dupla e em qual direção elas querem andar, você tem que descobrir qual o último momento em que a escada para.\nEntrada\nA primeira linha contém um inteiro N (1 ≤ N ≤ 104), representando quantas pessoas usarão a escada rolante.\nEm seguida haverão N linhas contendo dois inteiros ti e di cada (1 ≤ ti ≤ 105, 0 ≤ di ≤ 1), representando o momento em que a i-ésima pessoa chegará na escada rolante dupla e em qual direção ela quer ir. Se di é igual a 0, então a pessoa quer ir da ponta esquerda para a ponta direita, e se di é igual 1, então a pessoa quer ir da ponta direita para a ponta esquerda. Todos os valores de ti são distintos e dados em ordem crescente.\nSaída\nImprima uma linha contendo o momento no qual a última pessoa saiu da escada rolante.",
    "samples": [
      [
        "3\n5 0\n8 0\n13 0",
        "23"
      ],
      [
        "3\n5 0\n7 1\n9 0",
        "29"
      ],
      [
        "3\n5 0\n10 1\n16 0",
        "35"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "E",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Jogo Duro",
    "text": "Futebol nem sempre foi o esporte mais popular das Américas. Historiadores encontraram registros de um antigo esporte que era jogado em muitas civilizações pelo continente. Por causa da falta da tradição de se falar sobre este esporte, o nome original é desconhecido, mas em tempos modernos ele é criativamente chamado de “butefol”.\nNós não sabemos muito sobre butefol, nem as regras básicas. Porém, arquéologos encontraram muitas anotações feitas pelos técnicos enquanto eles montavam seus times, o que nos deu dicas sobre como os times eram formados. Estas anotações estão lotadas de números e cálculos. Os técnicos de butefol tentaram minuciosamente otimizar seus times ao atribuir os jogadores às melhores posições possíveis. Para facilitar esta tarefa, eles desenvolveram uma métrica para determinar a performance de cada arranjo.\nHá M posições em um campo de butefol, que são distribuídas em uma linha. Um time de butefol é composto de N jogadores, cada um o qual é designado uma posição (todos os jogadores devem ser designados a uma posição, e cada posição pode ser ocupada por zero ou mais jogadores).\nNaturalmente, os jogadores não são todos iguais: cada jogador pode ter performances diferentes quando joga em posições diferentes. Concretamente, para cada jogador i e cada posição j, há um inteiro positivo Pi,j que representa a performance do jogador i quando jogando na posição j.\nPara complicar as coisas ainda mais, os treinadores também consideravam o aspecto de interação dos jogadores. Há alguns pares de jogadores que são “melhores amigos”. Quando melhores amigos estão longes um do outro no campo, isto tem um impacto negativo na performance do time. Há um inteiro positivo C que representa a penalidade de performance quando melhores amigos estão longes um do outro.\nUma vez que os jogadores estejam distribuídos no campo, o valor da performance do time é calcu lado da seguinte maneira: primeiro, nós somamos a performance de cada jogador em sua determinada posição. Em seguida, para cada par de jogadores que são melhores amigos, nós subtraímos C mul tiplicado pela distância entre os dois jogadores, onde a distância entre dois jogadores é definida pela diferença (em valor absoluto) das posições onde os dois jogadores estão designados.\nNós gostaríamos de saber o quão bem os treinadores de butefol estavam formando seus times.\nPara isto, nós gostaríamos de saber qual é a maior performance possível de ser alcançada ao designar os jogadores de maneira ótima, dadas as performances dos jogadores em cada posição e os pares de jogadores que são melhores amigos.\nEntrada\nA primeira linha contém quatro inteiros N, M, K e C (1 ≤ N,M ≤ 50, 0 ≤ K ≤ 50, 0 ≤ C ≤ 106), representando a quantidade de jogadores, a quantidade de posições, a quantidade de pares de melhores amigos e a penalidade por colocar amigos longe uns dos outros.\nCada uma das N linhas seguintes contém M inteiros. O j-ésimo inteiro da i-ésima linha é Pi,j, representando a performance do jogador i se ele for designado na posição j (0 ≤ Pi,j ≤ 106).\nCada uma das K linhas seguintes contém 2 inteiros ai e bi (1 ≤ ai < bi ≤ N), que representa que os jogadores ai e bi são melhores amigos. Nenhum par de jogadores estará repetido nesta lista.\nSaída\nImprima uma linha contendo um inteiro, representando o máximo de performance possível para o time.\n  (Neste caso, a solução ótima é designar os jogadores 1 e 3 na posição 2, e o jogador 2 na posição 3, para que a soma da performance dos jogadores seja 2+8+9=19, a penalidade seja 5 pelos jogadores 1 e 2 estarem distantes por 1 posição, e a penalidade seja 0 pelos jogadores 1 e 3 estarem na mesma posição).",
    "samples": [
      [
        "3 3 2 5\n5 2 1\n3 2 8\n1 9 3\n1 2\n1 3",
        "14"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "J",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Invertendo Ferrovias",
    "text": "O governo de Nlogônia está incomodado com a falta de eficiência de seu sistema ferroviário. Todo par de cidades possui uma única ferrovia que as liga, porém, devido a problemas monetários, algumas delas estão inativas.\nUma configuração ideal da malha ferroviária é tal que, para qualquer par de cidades, existe um único caminho ligando essas duas cidades usando somente ferrovias ativas.\nO governador de Nlogônia te contratou para transformar seu conjunto de ferrovias em uma confi guração ideal. Infelizmente, você não fala Nlogoniano e nem tem controle sobre as ferrovias: somente os líderes de cada cidade, que só falam Nlogoniano, podem ativar ou desativar as ferrovias.\nNlogoniano possui algumas expressões extremamente específicas. Para tentar te ajudar, e te de safiar ao mesmo tempo, um amigo te ensinou uma frase que você pode tentar usar: “lupDujHomwIj luteb gharghmey”. Ele disse que, ao falar isso para o líder de uma cidade, tal líder ativará todas as ferrovias adjacentes a essa cidade que estavam previamente desativadas e desativará todas as ferrovias adjacentes a essa cidade que estavam previamente ativas. Em outras palavras, o status de “ativação” de todas as ferrovias adjacentes à cidade em questão será trocado.\nSabendo essa frase, você pode ligar para alguns líderes e fazê-los “lupDujHomwIj luteb gharghmey” as ferrovias de suas cidades.\nSeu amigo duvida que você conseguirá transformar o sistema de ferrovias em uma configuração ideal apenas utilizando essa frase. Você realmente quer provar que ele está errado. Você não só vai achar uma solução, mas, mais do que isso, vai lhe dizer de quantas maneiras diferentes pode completar o objetivo. Mais precisamente, digamos que um conjunto de líderes é bom se contatando precisamente cada um dos líderes desse conjunto uma única vez, a configuração ideal é obtida. Você vai dizer ao seu amigo quantos conjuntos bons distintos existem.\nDois conjuntos de líderes são considerados distintos se existe pelo menos um líder contido em um conjunto que não está contido no outro.\nComo esse número pode ser muito grande, você deverá informá-lo módulo 109 + 7.\nEntrada\nA primeira linha contém dois inteiros, N e M (1 ≤ N ≤ 100, 0 ≤ M ≤ N × (N − 1)/2), representando o número de cidades e o número de ferrovias inicialmente ativas, respectivamente.\nCada uma das próximas M linhas contém dois inteiros, u e v (1 ≤ u < v ≤ N), representando a existência de uma ferrovia inicialmente ativa entre as cidades u e v. É garantido que não existem duas dessas linhas iguais.\nSaída\nImprima uma linha contendo a quantidade de conjuntos de líderes que tornam a configuração ideal módulo 109 + 7.",
    "samples": [
      [
        "5 6\n1 2\n1 3\n2 4\n3 4\n3 5\n4 5",
        "8"
      ],
      [
        "3 2\n1 2\n2 3",
        "6"
      ],
      [
        "4 4\n1 2\n2 3\n3 4\n1 3",
        "4"
      ],
      [
        "3 1\n1 2",
        "0"
      ],
      [
        "2 0",
        "2"
      ],
      [
        "10 15\n1 6\n1 2\n1 5\n6 7\n6 10\n2 3\n2 9\n7 3\n7 8\n3 4\n8 9\n8 5\n4 5\n4 10\n9 10",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "I",
      "author": null
    },
    "hasImages": true
  },
  {
    "name": "Haja Ordenação",
    "text": "Um amigo seu inventou um jogo e quer saber se você consegue resolvê-lo ou se ele é impossível.\nEle montou uma sequencia de N blocos. Cada bloco tem um número gravado e uma cor. Todos os números são números distintos entre 1 e N, e blocos diferentes podem ter a mesma cor.\nO jogo funciona da seguinte maneira: você pode jogar quantos turnos você quiser. Em um turno, você escolhe dois blocos diferentes que têm a mesma cor e os troca de posição.\nVocê deve dizer se é possível fazer com que a sequência inteira fique em ordem crescente ou não.\nEntrada\nA primeira linha contém dois inteiros N e K (1 ≤ N ≤ 105, 1 ≤ K ≤ N), representando o número de blocos na sequência e o número de cores diferentes, respectivamente.\nCada uma das N linhas seguintes contém dois inteiros ni e ci (1 ≤ ni ≤ N, 1 ≤ ci ≤ K), representando o número e a cor do i-ésimo bloco, respectivamente.\nSaída\nImprima uma linha contendo um caracter. Se a sequência puder ser ordenada em ordem crescente, imprima a letra maiúscula ‘Y’; caso contrário, imprima a letra maiúscula ‘N’.",
    "samples": [
      [
        "4 2\n3 1\n4 2\n1 1\n2 2",
        "Y"
      ],
      [
        "4 2\n2 1\n4 2\n1 1\n3 2",
        "N"
      ],
      [
        "3 1\n1 1\n2 1\n3 1",
        "Y"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "H",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Lembre sua Senha",
    "text": "Michael é o gerente de um escritório pouco conhecido, e dentro de sua sala existe um cofre com o dinheiro para pagar seus funcionários. Infelizmente, Michael esqueceu a senha do cofre, e agora é a responsabilidade de Dwight ajudar seu chefe.\nA senha é uma sequência de N dígitos, contendo apenas zeros e uns, e Michael lembra do valor de apenas algumas posições da sequência, mas não da senha inteira. Michael também lembra de M intervalos da senha que são palíndromos – sua mente memoriza palíndromos, por algum motivo.\nUm intervalo é um palíndromo se, e somente se, o primeiro e o último dígitos do intervalo são iguais, o segundo e o penúltimo dígitos são iguais, e assim por diante.\nAgora Dwight quer saber o quão difícil vai ser recuperar a senha inteira. Você pode ajudar Dwight ao calcular o número de senhas possíveis que respeitam a memória de Michael.\nComo a resposta pode ser muito grande, imprima-a módulo 109 + 7.\nEntrada\nA primeira linha contém dois inteiros N e M (1 ≤ N ≤ 3 × 105, 1 ≤ M ≤ 3 × 105), representando quantos dígitos a senha tem, e a quantidade de intervalos que Michael lembra que são palíndromos, respectivamente.\nA segunda linha contém N caracteres si, representando qual dígito Michael lembra sobre cada posição da senha. Se si é ‘0’ ou ‘1’, então isto significa que o i-ésimo dígito da senha é 0 ou 1, respectivamente. Se si é ‘?’, então isto significa que Michael não lembra qual é o i-ésimo dígito.\nCada uma das M linhas seguintes contém dois inteiros li e ri (1 ≤ li ≤ ri ≤ N), que significa que o intervalo da senha iniciando da posição li até a posição ri, inclusive, é um palíndromo.\nSaída\nImprima o número de possíveis senhas que formam uma senha válida módulo 109 + 7. Como a memória de Michael pode ser conflitante, caso não haja nenhuma senha que respeite suas memórias, imprima ‘0’.",
    "samples": [
      [
        "5 2\n1??0?\n1 3\n2 4",
        "2"
      ],
      [
        "3 2\n???\n1 1\n1 3",
        "4"
      ],
      [
        "5 2\n1???0\n1 3\n3 5",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "L",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Monarquia em Vertigem",
    "text": "A ordem de sucessão da monarquia é um tópico complexo, pois pode envolver múltiplos fatores tal como descendência, gênero, legitimidade, e religião. Geralmente a Coroa é herdada pelo filho do soberano, ou pela linhagem lateral do soberano caso ele não tenha filhos. Não é muito óbvio, não é mesmo? E este é um dos motivos pelos quais, em todos os lugares do mundo, a monarquia está quase acabando.\nA Nlogônia ainda é dominada pela monarquia, mas felizmente com regras de sucessão simples. Em resumo há dois aspectos para levar em consideração: “filhos vêm antes de irmãos” e “os mais velhos vêm antes dos mais novos”.\nOs servos do reino mantêm uma linda e gigante tapeçaria onde a linhagem de Constante, o primeiro rei da Nlogônia, é desenhada em forma de uma árvore. Sempre que um novo membro da família nasce um novo ramo do pai para o filho é desenhado na tapeçaria. Este evento é tão importante que a lenda diz que quando um descendente de Constante tem um filho ele não vai morrer até que o nome do seu filho seja desenhado na tapeçaria. Quando alguém morre, uma cruz é desenhada perto do nome do falecido na tapeçaria. Quando o monarca morre, a tapeçaria é usada pelos servos para determinar quem deve ser o novo monarca. Para que isso seja feito, os servos analisam a árvore iniciando pelo Constante e atravessam os ramos de acordo com as regras descritas antes, “filhos vêm antes de irmãos” e “os mais velhos vêm antes dos mais novos”. Eles visitam cada nó da árvore iniciando pelo Constante, seguido pelo filho mais velho de Constante, seguido pelo filho mais velho daquele filho, e assim por diante, até que encontram alguma pessoa ainda viva, ou até que um membro da família não tenha filhos, e neste caso eles voltam para o pai daquela pessoa e movem para o seu segundo filho, repetindo este processo até que um novo monarca seja encontrado.\nDepois de milhares de anos no poder, a linhagem de Constante é gigante. Manter a tapeçaria e, quando a hora chega, determinar quem é o novo monarca são processos demorados e os servos Nlogonianos decidiram que está na hora de modernizar. Eles querem escrever um programa que seja usado para manter a linhagem de Constante e que também possa definir quem é o novo monarca quando o monarca anterior tragicamente morre. Dada a importância desta tarefa, os servos da monarquia querem testar o programa garantindo que ele produza a saída correta para todos os eventos que aconteceram até agora. Só existe um problema: nenhum deles é bom em programação. Por isso eles querem a sua ajuda.\nMais tecnicamente, cada pessoa na linhagem de Constante vai ser representado por um identificador inteiro positivo único. Sempre que um novo filho nasce, ele é atribuído o próximo menor inteiro único.\nO identificador de Constante é o número 1, e inicialmente ele é a única pessoa viva. Você terá que processar vários eventos em ordem cronológica. Sempre que uma pessoa morrer, você deve ajudar os servos a descobrirem quem é o atual monarca. É garantido que sempre haverá alguém vivo para governar.\nEntrada\nA primeira linha contém um inteiro Q (1 ≤ Q ≤ 105), representando quantos eventos devem ser processados. As próximas Q linhas conterão dois inteiros ti e xi cada, representando o tipo e o argumento do i-ésimo evento. Se ti é igual a 1, então isso significa que a pessoa com identificador xi teve um filho. Se ti é igual a 2, então isso significa que a pessoa com identificador xi morreu.\nSaída\nPara cada evento em que uma pessoa morre, você deve imprimir uma linha com um inteiro, representando o identificador do monarca atual.",
    "samples": [
      [
        "8\n1 1\n1 1\n1 2\n2 1\n2 4\n1 2\n2 2\n2 5",
        "2\n2\n5\n3"
      ],
      [
        "4\n1 1\n1 1\n2 2\n2 1",
        "1\n3"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 1,
      "warmup": false,
      "letter": "M",
      "author": null
    },
    "hasImages": false
  },
  {
    "name": "Non-Integer Donuts",
    "text": "Neil is a very important lawyer with a very important bank account. Since Neil is such a successful lawyer with many clients, he deposits money to his account every single morning.\nAfter going to the bank and depositing money, Neil goes to work. And there lies Neil’s great weakness: a donut shop. You see, Neil is a recovering donut addict, and although he hasn’t eaten a donut in years, he can’t help but wonder how many $1.00 donuts he could buy with the money in his account if he were to relapse.\nHaving $5.00 in his account means 5 donuts Neil could have, but what about $4.50? Well, that is more than 4 donuts for sure, but definitely less than 5. How would one even buy a non-integer amount of donuts? That concept confuses Neil, so every time his account balance is not an integer, he stops to ponder the nature of non-integer donuts and ends up being late to work.\nNow Neil has been late too many times and is starting to worry he will lose his job. He wants to know how many times he will be late to work during the next N days, given his initial account balance and the amount of money he will deposit each day. Please answer this for him, or else Neil will start pondering again.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 1000), the number of days Neil is interested in. Each of the next N + 1 lines contains a string representing an amount of money. The first string is Neil’s account initial balance, while the following N strings are the amounts Neil will deposit to his account in the different days. Each string has the form $X.Y where X is a substring of length 1 or 2 indicating the whole money in the amount $X.Y , while Y is a substring of length exactly 2 denoting the cents in the amount $X.Y . Both X and Y are made of digits, at least one of them contains a non-zero digit, and X does not have leading zeros.\nOutput\nOutput a single line with an integer indicating how many times Neil will be late to work during the following N days.",
    "samples": [
      [
        "1\n$1.57\n$3.14",
        "1"
      ],
      [
        "4\n$1.00\n$0.01\n$0.99\n$10.00\n$98.76",
        "2"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": true,
      "letter": "C",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Mountain Ranges",
    "text": "Famous for its mountain ranges, Nlogonia attracts millions of tourists every year. The government has a dedicated budget for continuous maintenance of the hiking trails spread across the country and most of them are filled with scenic viewpoints, accessible through wooden walkways and stairs.\nCurrently on a trip through Nlogonia and with hopes of going back home with lots of breath-taking pictures, Lola and her husband want to visit as many viewpoints as possible. They plan to hike a different trail each day and explore its viewpoints. However, to avoid being exhausted at the end of the day, if moving from one viewpoint to the next requires going up more than X meters they simply call it a day and go back to their hotel in order to get some rest. Fortunately, every hiking trail in Nlogonia is equipped with modern chairlifts, so the couple can start hiking the trail at any viewpoint they decide.\nOnce the hiking begins the couple only moves towards the peak of the mountain.\nTo make sure she doesn’t waste a day Lola only wants to hike on trails where she’ll get to a reasonable number of viewpoints. Given the altitudes of the scenic viewpoints on a hiking trail, you must determine the maximum number of viewpoints that the couple can visit.\nInput\nThe first line contains two integers N (1 ≤ N ≤ 1000) and X (0 ≤ X ≤ 8848), indicating respectively the number of scenic viewpoints on the hiking trail, and the maximum number of meters that Lola and her husband are willing to go up from one viewpoint to the next. The second line contains N integers A1,A2,...,AN (1 ≤ Ai ≤ 8848 for i = 1,2,...,N), where Ai is the altitude (in meters) of the i-th viewpoint. Viewpoints are given in the order they appear on the hiking trail and their altitudes are non-decreasing, that is, Ai ≤ Ai+1 for i = 1,2,...,N − 1.\nOutput\nOutput a single line with an integer indicating the maximum number of scenic viewpoints that can be visited without going up more than X meters from one viewpoint to the next, and considering that the journey can be started at any viewpoint.",
    "samples": [
      [
        "9 2\n3 14 15 92 653 5897 5897 5898 5900",
        "4"
      ],
      [
        "9 0\n3 14 15 92 653 5897 5897 5898 5900",
        "2"
      ],
      [
        "9 8848\n3 14 15 92 653 5897 5897 5898 5900",
        "9"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": true,
      "letter": "B",
      "author": "Vinicius Santos, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Almost Origami",
    "text": "You have a rectangular sheet of paper of height 1 and you want to locate any point at height H measured from the bottom border of the sheet. Since you do not know Haga’s theorems, you plan to repeat the following step. Assume you already located a point PL at height L on the left border of the sheet, and a point PR at height R on the right border of the sheet. Then you draw a line from the lower left corner of the sheet to PR, and another line from the lower right corner of the sheet to PL. If the crossing point is at height H, then you are done. Otherwise you draw a horizontal line that passes through the crossing point and go for another step.\nAs an example, consider the case H = 1/3. During the first step, the only possibility is choosing the upper corners of the sheet (that is, L = R = 1). So you draw the two diagonals of the sheet, and the crossing point is at height 1/2. Since H (cid:54)= 1/2, you draw a horizontal line that passes through the crossing point. This line provides two new points with known height 1/2 on the borders of the sheet, one on the left border and the other one on the right border. For the second step you can choose between using the original known points at height 1, or the points you have just located at height 1/2. That is, you can choose either L = 1 or L = 1/2 and of course R = 1 or R = 1/2. It is easy to see that if you choose L = R = 1/2, then the crossing point would be at height 1/4. However, if you choose L = 1/2 and R = 1, then the crossing point would be at the desired height H = 1/3. By symmetry, the same occurs if you choose L = 1 and R = 1/2.\nGiven a rational height H, you must determine a shortest sequence of heights on the borders of the sheet that allows locating a point at height H.\nAs the above example shows, only a point at height 1/2 can be located in a single step, and so a possible shortest sequence for H = 1/3 is S = (1,1,1/2,1). The first two heights must be chosen during the first step, and the remaining two heights must be chosen during the second step.\nInput\nThe input consists of a single line that contains two integers M and N (1 ≤ M < N ≤ 100) such that H = M/N is an irreducible fraction.\nOutput\nOutput a single line with the character “*” (asterisk) if a point at height H cannot be located by means of the described procedure. Otherwise, output a shortest sequence of heights S1,S2,...,SK that allows locating a point at height H, if they are chosen in the order they appear in the sequence. Height Si must be written in the i-th line using two integers Ai and Bi such that Si = Ai/Bi is an irreducible fraction (i = 1,2,...,K). It is guaranteed that when a point at height H can be located, it can be optimally located choosing only rational heights.",
    "samples": [
      [
        "1 3",
        "1 1\n1 1\n1 2\n1 1"
      ],
      [
        "1 3",
        "1 1\n1 1\n1 1\n1 2"
      ],
      [
        "3 4",
        "*"
      ],
      [
        "1 4",
        "1 1\n1 1\n1 2\n1 2"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": true,
      "letter": "A",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Daily Turnovers",
    "text": "Fernando is a professional who works in the accounting department of Stark Companies. He is responsible for the control and analysis of the company’s daily turnover. Fernando recorded the company’s turnovers during N consecutive days. From this, he generated a list V of size N where Vi represents the amount of money the company earned on the i-th day. Notice that a value Vi < 0 indicates that the company lost money that day.\nOne of Fernando’s tasks is to pass on to his superior Tony a list indicating the turnovers during a range of days. But Fernando knows that Tony will be very angry with his subordinates if, in the list he received, there is a day i such that the sum of the turnovers for the first i days is negative, indicating that the company lost money. Since Fernando wants his superior to be happy with him, he will modify his list V a little before sending it to Tony. This modification consists of removing some days from the beginning of the list and some days from the end of the list.\nFernando says that the happiness of the list V is the number of sublists he can send so that Tony will be happy. Formally, the happiness of V is the number of integer pairs p,q (p,q ≥ 0 and p + q < N) such that if Fernando removes the first p days and the last q days from V , for every i the sum of the first i values of the resulting list is non-negative.\nFernando was thinking about happiness when an additional problem arose. The company’s IT staff reported that there was a glitch in the system that calculates the company’s daily turnover. They discovered that for one of the N days, the system calculated a turnover that differs by X units from the actual turnover. That is, there is one day i such that the actual turnover for that day is Vi + X instead of Vi. Fernando could dig deep and find out exactly which of the days this error happened, but he is too lazy. So he decides that he will add X on a day in such a way that the happiness of the modified V is as high as possible.\nYou, being a friend of Fernando, have decided to help him. Given the glitch X and the list of turnovers V , you must find the maximum happiness of V considering that X must be added to one of the turnovers.\nInput\nThe first line contains two integers X (−109 ≤ X ≤ 109) and N (1 ≤ N ≤ 5 × 105), indicating respectively the value of the glitch and the number of days in the list of turnovers.\nThe second line contains N integers V1,V2,...,VN (−109 ≤ Vi ≤ 109 for i = 1,2,...,N), describing the list.\nOutput\nOutput a single line with an integer indicating the maximum happiness considering that X must be added to one of the turnovers given by V .",
    "samples": [
      [
        "1 6\n1 1 -2 1 3 -5",
        "13"
      ],
      [
        "-1 6\n1 1 -2 1 3 -5",
        "9"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "D",
      "author": "Yan Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Generator Tree",
    "text": "It is Christmas in Medford, Texas, and Meemaw Cooper spent a long time preparing a beautiful tree with Christmas lights in a very special configuration. But while Meemaw was outside the house, her granddaughter Missy accidentally bumped into the tree and broke the Christmas lights. Missy wants to restore the same configuration of lights before Meemaw comes back, that’s why she asked for the help of her brother Sheldon who knew something about how the configuration of the lights was built.\nSheldon knew that Meemaw bought many copies of the same configuration of lights and simply put them together. A configuration of lights can be seen as a tree (undirected acyclic connected graph) in which the vertices are the lights and the edges are the wires connecting them. Each edge connects two different lights and the set of edges forms a tree. So Meemaw bought many copies of the same configuration and added some wires connecting distinct copies such that the resulting configuration was also a tree.\nSheldon quickly explained to Missy what she had to do to recover the configuration of Meemaw, and he spent the rest of the afternoon thinking about the following generalization of the problem. Given a collection of N trees, determine for each tree how many other trees in the collection can generate that tree. A tree T1 can generate a tree T2 if it is possible to connect one or more copies of T1 with edges so as to obtain a tree isomorphic to T2. Note that no edge can be removed, only adding edges is allowed. Two trees are isomorphic if it is possible to label their vertices in such a way that they become exactly the same tree. For instance, a tree having edges {(1,2),(2,3)} is isomorphic to a tree having edges {(1,3),(3,2)}.\nCan you help Sheldon in solving his problem? The following picture shows an example of a collection of N = 4 trees. In this case, tree 1 cannot be generated from any other tree in the collection, tree 2 can be generated from tree 1, tree 3 can be generated from tree 4, and tree 4 can be generated from tree 3.\nInput\nThe first line contains an integer N (2 ≤ N ≤ 2 × 105) indicating the number of trees that Sheldon is considering. After this line, there are N groups of lines, each group describing a tree.\nWithin each group describing a tree, the first line contains an integer K (2 ≤ K ≤ 2×105) representing the number of vertices in the tree. Vertices are identified by distinct integers from 1 to K. Each of the next K − 1 lines contains two integers U and V (1 ≤ U,V ≤ K and U (cid:54)= V ), indicating that the tree has the edge (U,V ).\nThe total amount of vertices over all the trees is at most 4 × 105.\nOutput\nOutput a single line with N integers, such that the i-th of them represents, for the i-th input tree, how many other trees in the input can generate that tree.",
    "samples": [
      [
        "4\n4\n1 2\n1 3\n1 4\n8\n1 2\n1 3\n1 4\n5 6\n5 7\n5 8\n1 5\n2\n1 2\n2\n2 1",
        "0 1 1 1"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "G",
      "author": "Victor de Sousa Lamarca, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "KIARA is a Recursive Acronym",
    "text": "A recursive acronym is an acronym in which one of its letters stands for the acronym itself.\nFor instance, the first word in the title of this problem is a recursive acronym of the full title.\nAnother example is “BOB”, which is an acronym of “Beware of Bob”.\nGiven a list of words, you must decide whether there exists a word in the list which is a recursive acronym of a phrase that can be formed using words in the list. Since the first letter of any word can stand for the whole word, it is enough to decide whether there exists a word in the list which can be formed using the first letter of some words in the list.\nInput\nThe first line contains a positive integer N indicating the number of words in the list. Each of the next N lines contains a non-empty string made of uppercase letters representing a word in the list. The sum of the lengths of all the strings is at most 106.\nOutput\nOutput a single line with the uppercase letter “Y” if there exists a word in the list which is a recursive acronym of a phrase that can be formed using words in the list, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "3\nOF\nBOB\nBEWARE",
        "Y"
      ],
      [
        "3\nWHO\nMADE\nWHO",
        "N"
      ],
      [
        "5\nJUST\nUSE\nWORD\nXX\nTWICE",
        "Y"
      ],
      [
        "1\nYYYYYYYYYYY",
        "Y"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "K",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Fields Division",
    "text": "The Silva family is a wheat producer in the interior of Brazil. They have a huge plantation managed by Mr. and Mrs. Silva. But the plantation has a peculiar shape: it has N fields numbered from 1 to N, connected by M two-way roads. To facilitate the work at harvest time, the plantation was designed in such a way that there is a path between each pair of fields using the existing roads. In addition, the fields have different sizes, thus impacting the productivity of each one. The i-th field has a yield of 2i kg of wheat per year.\nAs time went by, the Silva couple got tired of taking care of the plantation and decided to leave the task to their two kids: Ana and Bob. To not have any fights between the children, the couple wants to divide the N fields according to the following rules: • Each field must belong to exactly one sibling.\n• There must be a path between each pair of fields that belong to the same sibling, using the existing roads, and visiting only that sibling’s fields.\n• The sums of the yields of each sibling’s fields must be as similar as possible.\nIf it is not possible to divide the fields so that the sums of the yields are equal, Ana will get the fields with the larger sum since she’s the eldest sibling.\nWhen the couple tried to make this division, they realized that the task would be very complex, so they asked for your help. Given the fields and the roads, your job is to help the Silva family to divide the fields between the two siblings the way they wish.\nInput\nThe first line contains two integers N (2 ≤ N ≤ 3 × 105) and M (1 ≤ M ≤ 3 × 105), indicating respectively the number of fields and the number of roads. Each of the next M lines contains two integers U and V (1 ≤ U,V ≤ N and U (cid:54)= V ), denoting that there’s a two-way road between fields U and V . It is guaranteed that there is a path between each pair of fields using the given roads, and there is at most one road between each pair of fields.\nOutput\nOutput a single line with a string of length N such that its i-th character is either the uppercase letter “A” or the uppercase letter “B”, indicating respectively that Ana or Bob should receive the i-th field. If there are multiple solutions, output any of them.",
    "samples": [
      [
        "3 2\n1 3\n3 2",
        "ABA"
      ],
      [
        "6 6\n3 5\n2 6\n1 3\n3 6\n5 1\n4 6",
        "BABABA"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "F",
      "author": "Yan Silva, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Cyclists versus Clouds",
    "text": "In Nlogonia, several campaigns aim to transform the bicycle into the main mean of trans portation in the country. One of the actions to promote bikes is a Hackathon focused on the development of applications to facilitate cyclists’ day-to-day.\nYour university’s team has a promising idea. As Nlogonia is a very rainy country, sometimes those who go out in the rain do not intend to get wet but do so purely for lack of option. The idea then is to develop an application capable of generating a route between two points that guarantees that it is possible to make the journey without getting wet, such that there isn’t another route with the same guarantee that would take less time.\nFor the prototype to be presented at the Hackathon, consider that all points of interest are arranged in the Cartesian plane and have integer coordinates. Rain clouds are modeled as simple polygons (non-contiguous edges do not intersect) with each edge parallel to one of the axes. Each cloud moves one unit of distance per unit of time in one of the cardinal directions (North, South, East, or West). A cyclist also moves one unit of distance per unit of time in cardinal directions. The cyclist can change direction at any of the points of interest; changing directions happens instantly. In addition, during the journey the cyclist can stand still at any of the points of interest, protecting themselves from the rain for any integer amount of units of time desired. The cyclist gets wet if they are not stopped at a point of interest (protecting themselves from the rain) and there’s at least one cloud above them. A cloud is not considered to be above the cyclist when the cyclist is at its border.\nWhile other team members are concerned with generating the data and creating the graph ical interface for the Hackathon, your task is to develop the part of the software responsible for generating the best route for a cyclist who wants to travel between two points of interest without getting wet.\nThe picture above corresponds to the first two samples. In the first sample, as the cloud moves east, the cyclist can go directly to the destination, first moving west and then north, for a total of seven units of time. In the second sample, the cloud moves south, so the cyclist can only move one unit of distance west without getting wet. If the cyclist tried to move west a second time, the cloud would be above them. The fastest way then is to wait one unit of time after moving west, then move north following the border of the cloud, and finally west towards the destination, for a total of eight units of time.\nInput\nThe first line contains four integers Xo, Yo, Xd, and Yd (0 ≤ Xo,Yo,Xd,Yd ≤ 100), indicating that the cyclist starts at point (Xo,Yo) and wants to arrive to point (Xd,Yd). The second line contains an integer N (0 ≤ N ≤ 100) representing the number of rain clouds. After these lines, there are N groups of lines, each group describing a cloud.\nWithin each group describing a cloud, the first line contains a character C and an integer V (4 ≤ V ≤ 100). The character C is one of the uppercase letters “N”, “S”, “E” or “W”, indicating respectively that the cloud moves in the direction North (y ascending), South (y descending), East (x ascending) or West (x descending). The value V represents the number of vertices of the polygon that models the cloud. Each of the next V lines contains two integers X and Y (0 ≤ X,Y ≤ 100), denoting that the point (X,Y ) is a vertex of the polygon. Vertices appear in clockwise order. All the given vertices are actual corners of the polygon.\nOutput\nOutput a single line with an integer indicating the minimum amount of units of time needed to travel from (Xo,Yo) to (Xd,Yd) without getting wet.",
    "samples": [
      [
        "4 0 1 4\n1\nE 8\n0 5\n3 5\n3 2\n5 2\n5 1\n2 1\n2 2\n0 2",
        "7"
      ],
      [
        "4 0 1 4\n1\nS 8\n0 5\n3 5\n3 2\n5 2\n5 1\n2 1\n2 2\n0 2",
        "8"
      ],
      [
        "1 2 1 3\n1\nN 4\n1 4\n2 4\n2 1\n1 1",
        "1"
      ],
      [
        "0 0 0 1\n1\nW 4\n1 1\n1 0\n0 0\n0 1",
        "2"
      ],
      [
        "20 1 1 10\n2\nE 4\n1 30\n15 30\n15 0\n1 0\nS 4\n0 29\n100 29\n100 22\n0 22",
        "32"
      ],
      [
        "42 42 42 42\n0",
        "0"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "C",
      "author": "Paulo Cezar Pereira Costa, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Because, Art!",
    "text": "Leo is a designer. He has a collection of N fonts and N colors, each of them having an integer grade that indicates how much beautiful it is. A negative grade indicates that the font or color is “ugly”.\nBased on that, Leo invented a new way of measuring the beauty of any text. If a text has a font of grade Fi and a color of grade Cj, then the beauty of the text is the product Fi × Cj.\nNote that when both the font and the color are ugly, the resulting text is beautiful, because, Art! Leo has to present to his boss k beautiful text designs. The boss said to him that the texts must be really different from each other. With this in mind, Leo decided to select a distinct font and a distinct color for each text in such a way that the sum of the beauties of the k formed texts is maximum. For his pride, he also wants to know the minimum possible sum of the beauties of k texts made of distinct fonts and colors.\nBut there is a problem! Leo forgot how many designs the boss asked for, so he needs to find the answer for each integer k between 1 and N.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 105) indicating the number of fonts and colors.\nThe second line contains N integers F1,F2,...,FN (−104 ≤ Fi ≤ 104 for i = 1,2,...,N), representing the grades of the fonts. The third line contains N integers C1,C2,...,CN (−104 ≤ Ci ≤ 104 for i = 1,2,...,N), denoting the grades of the colors.\nOutput\nOutput N lines, such that the k-th line contains two integers indicating respectively the minimum and maximum sum of beauties if the boss asks for k texts.",
    "samples": [
      [
        "2\n-100 -10\n1 2",
        "-200 -10\n-210 -120"
      ],
      [
        "4\n0 -1 1 2\n10 20 30 40",
        "-40 80\n-40 110\n-30 110\n0 100"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "B",
      "author": "Naim Shaikhzadeh Santos, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Ancient Towers",
    "text": "The king of Nlogonia has conquered many lands throughout his life, and now that his son has come of age, the king wants to share his possessions with him.\nNlogonia has N ancient towers that can be seen as points in the Cartesian plane. The king decided that his son must choose four of those towers. Then the son must build a wall connecting the towers, so as to form a (simple but not necessarily convex) quadrilateral with the towers as vertices. The land surrounded by the wall will be owned by the son. Since the king does not want people making fun of his son for not having enough land, the area of the quadrilateral must be greater than or equal to a given value S.\nThe son is eager to choose his portion of the land, but the king wants to know beforehand in how many different ways this can be done. The picture below shows an example with N = 4 towers. In this case, there are two different quadrilaterals with an area of at least S = 2.\nInput\nThe first line contains two integers S (1 ≤ S ≤ 1018) and N (4 ≤ N ≤ 400), indicating respectively the minimum area and the number of ancient towers. Each of the next N lines describes a tower with two integers X and Y (0 ≤ X,Y ≤ 109), denoting the coordinates of the tower. No two towers have the same location, and no three of them are collinear.\nOutput\nOutput a single line with an integer indicating the number of different simple quadrilaterals having towers as vertices and area at least S. A quadrilateral is simple if non-contiguous edges do not intersect. Two quadrilaterals are considered different if they have different vertices or different edges.",
    "samples": [
      [
        "2 4\n1 2\n3 4\n3 3\n4 1",
        "2"
      ],
      [
        "1 4\n1 2\n3 4\n3 3\n4 1",
        "3"
      ],
      [
        "4 5\n1 1\n3 3\n3 0\n0 1\n1 0",
        "3"
      ],
      [
        "1 4\n0 0\n1000 0\n0 1000\n1000 1000",
        "1"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "A",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Expedition Plans",
    "text": "The International Company of Pipes and Cables runs an internet cable across the Pacific.\nHowever, it has stopped working! But wait, no need to panic, this is not unexpected, being sometimes caused by shark attacks. The cable is composed of a sequence of N + 1 segments, with a repeater between each pair of consecutive segments. Repeaters are identified by distinct integers from 1 to N, from left to right, according to their positions within the cable.\nA signal is transmitted from left to right along the cable. A repeater is said to be offline if no signal reaches the repeater; this indicates that there is a faulty segment before the repeater.\nOn the contrary, a repeater is said to be online if the repeater receives data; this indicates that there is a failing segment after the repeater. The technical staff has determined that there is a single faulty segment. To locate and fix it, an expedition is required.\nAn expedition starts at repeater 1 and repeats the following three steps until the faulty segment is located: sail to some repeater, dive to that repeater, and diagnose whether the signal is reaching that repeater or not. The failing segment is located if the signal is reaching its first endpoint but not its second endpoint. Once the faulty segment is recognized, it is repaired.\nAn expedition plan defines how the trip will happen based on the diagnoses that are made along the way. The picture above shows a possible scenario with N = 3 repeaters (that is, N + 1 = 4 segments). Five possible expedition plans for this case follow: 1. Diagnose repeater 2. If it’s offline, then diagnose repeater 1 to decide which of the first two segments is the faulty segment. On the contrary, if repeater 2 is online, then diagnose repeater 3 to decide which of the last two segments is failing.\n2. Diagnose in order repeaters 1, 2, and 3, stopping early when the failing segment is found.\n3. Diagnose in order repeaters 1, 3, and 2, stopping early when the failing segment is found.\n4. Diagnose in order repeaters 3, 1, and 2, stopping early when the failing segment is found.\n5. Diagnose in order repeaters 3, 2, and 1, stopping early when the failing segment is found.\nThe total cost of an expedition is composed of sailing cost, diving cost, and fixing cost. The sailing cost is proportional to the distance sailed. The diving cost for each dive is proportional to the depth of the repeater. The fixing cost for the failing segment depends on the terrain it is laid across. In our example, the costs of the first-mentioned expedition plan would be as follows: • If the first segment is failing, the expedition sails to repeater 2, dives, sails back to repeater 1, dives, and repairs the segment. So the sailing cost is 1 + 1 = 2, the diving cost is 8 + 3 = 11, and the fixing cost is 7, for a total of 2 + 11 + 7 = 20.\n• If the second segment is failing, the total cost is (1 + 1) + (8 + 3) + (1) = 14.\n• If the third segment is failing, the total cost is (1 + 1) + (8 + 2) + (2) = 14.\n• If the fourth segment is failing, the total cost is (1 + 1) + (8 + 2) + (12) = 24.\nDue to the high affinity between network disruptions and Murphy’s Law, the most accurate cost estimation for an expedition plan is the maximum it can reach. That is, we should consider that the failing segment is always the one that makes the expedition have maximum cost. Thus, the estimated cost of the first expedition plan is 24. Your task is to find the minimum estimated cost among all expedition plans. In our example, the expedition plan that diagnoses in order repeaters 1, 3 and 2 would have total costs of 10, 17, 18, or 19, depending on the failing segment.\nThis means its estimated cost is 19, which is the minimum among all expedition plans.\nInput\nThe first line contains an integer N (2 ≤ N ≤ 3000) indicating the number of repeaters.\nThe second line contains N −1 integers S1,S2,...,SN−1 (0 ≤ Si ≤ 109 for i = 1,2,...,N − 1), where Si is the cost of sailing between repeaters i and i+1. The third line contains N integers D1,D2,...,DN (0 ≤ Di ≤ 109 for i = 1,2,...,N), such that Di is the cost of diving to repeater i. The last line contains N +1 integers F1,F2,...,FN+1 (0 ≤ Fi ≤ 109 for i = 1,2,...,N + 1), where Fi is the cost of fixing the i-th segment.\nOutput\nOutput a single line with an integer indicating the minimum estimated cost among all expedition plans.",
    "samples": [
      [
        "3\n1 1\n3 8 2\n7 1 2 12",
        "19"
      ],
      [
        "2\n2\n5 1\n1 2 6",
        "12"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "E",
      "author": "Daniel Bossle, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Joining Pairs",
    "text": "Alexander and Melina are really good friends. After a long summer of playing games together, they finally had to take the bus back home. Since they had such an active summer, they were getting bored from the bus ride, so Alexander challenged Melina to one final puzzle.\nAlexander gave Melina a piece of graph paper W centimeters wide and H centimeters tall.\nThe paper was subdivided into 1 × 1 squares, forming a W × H coordinate system. In the paper, Alexander had drawn many colorful points, in such a way that there were exactly two points of each color, all points were at integer coordinates (possibly including the edges and corners of the paper) and there were no two points in the same spot.\nAlexander asked Melina to draw a line between each pair of equally colored points, con necting them. The lines connecting the points couldn’t touch each other. However, they could assume an arbitrary shape (as long as they remained inside the paper) and they could be considered infinitely thin.\nMelina argued with Alexander that the game was unfair since there was no way to satisfy his requirements. Alexander assured her that the game was fair, and she simply had to “get good” to solve the challenge. After much arguing, the friends decided to task you, an unbiased observer, with determining whether the game is fair or not.\nIn the example above, Melina can connect each pair of points without crossing lines, there fore the game is fair. On the contrary, in the example below, Melina can’t connect the twos without crossing whichever line connects the ones, therefore the game is not fair.\nInput\nThe first line contains two integers W and H (1 ≤ W,H ≤ 109), indicating respectively the width and height of the paper. The second line contains an integer N (1 ≤ N ≤ 105), representing the number of pairs of points drawn in the paper. Each of the next N lines contains four integers X1, Y1, X2 and Y2 (0 ≤ X1,X2 ≤ W and 0 ≤ Y1,Y2 ≤ H), representing a pair of points of the same color drawn at coordinates (X1,Y1) and (X2,Y2). No two points have the same location.\nOutput\nOutput a single line with the uppercase letter “Y” if the game is fair, and the uppercase letter “N” otherwise.",
    "samples": [
      [
        "5 5\n3\n4 0 2 5\n1 0 2 4\n4 2 1 2",
        "Y"
      ],
      [
        "5 5\n2\n4 0 3 5\n5 3 0 2",
        "N"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "J",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": true
  },
  {
    "name": "Invested Money",
    "text": "Nowadays your programming skills are amazing, and you regularly receive lots of money for your work. Unfortunately, your financial skills did not evolve the same way. So each time you earn some money, you simply invest it in a bank in a 30 days time deposit with an automatic renewal clause. This means that 30 days after you invest the money, it is invested for 30 additional days, over and over again, until you inform the bank that you want to stop the renewal and get your money back. Time deposits cannot be created nor renewed during weekends; if a 30 days period ends on a weekend, the renewal occurs on the immediately following Monday.\nSince the bank holds almost all your money, you must wait until the closest renewal each time you want to buy anything but daily food. Today you decided to buy a new smartphone to replace your six-month-old device. Given the dates when you created each time deposit, you must determine the minimum number of days that you must wait to get some money from the bank.\nAs an example, suppose that today is Saturday and that you created five time deposits: a time deposit last Monday, another time deposit last Tuesday, yet another time deposit last Wednesday, and two time deposits yesterday. The first time deposit (Monday) would be re newed on a Wednesday after 25 days from today. The second time deposit (Tuesday) would be renewed on a Thursday after 26 days from today. The third time deposit (Wednesday) would be renewed on a Friday after 27 days from today. Finally, the last two time deposits (Friday) would be renewed on a Monday after 30 days from today, because the renewal on a Sunday is not allowed. Thus, in this case, you must wait 25 days to get some money from the bank.\nInput\nThe first line contains a string T and an integer N (1 ≤ N ≤ 105), indicating respectively today’s day of the week and the number of time deposits. The string is either “Mon”, “Tue”, “Wed”, “Thu”, “Fri”, “Sat”, or “Sun”, representing respectively that today is Monday, Tues day, Wednesday, Thursday, Friday, Saturday, or Sunday. The second line contains N integers D1,D2,...,DN (0 ≤ Di ≤ 109 for i = 1,2,...,N), indicating the number of days elapsed since each time deposit was created. It is guaranteed that the time deposits were not created during weekends.\nOutput\nOutput a single line with an integer indicating the minimum number of days that you must wait to get some money from the bank.",
    "samples": [
      [
        "Sat 5\n5 4 3 1 1",
        "25"
      ],
      [
        "Sat 5\n3 1 4 1 5",
        "25"
      ],
      [
        "Thu 1\n0",
        "32"
      ],
      [
        "Thu 1\n30",
        "0"
      ],
      [
        "Fri 1\n31",
        "31"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "I",
      "author": "Alejandro Strejilevich de Loma, Argentina"
    },
    "hasImages": false
  },
  {
    "name": "Hamilton - The Musical",
    "text": "Nlogonia is well known for its robust road infrastructure. The country has N cities numbered from 1 to N, and for each pair of distinct cities i and j, there is a two-way road between them with length Li,j.\nThe citizens of Nlogonia are very excited because the musical Hamilton has arrived in the country for the first time. The organization of Hamilton wants to let every citizen have an opportunity to watch the musical, so they want to choose a path that visits each city exactly o (cid:80)n N ic =e − 1.\n1 LSu Pic ,h Pi+a 1.path is a permutation P1,P2,...,PN of the N cities, and its total length is The organization fears that if they let the actors choose the path, they will have to spend a lot of money on fuel. But they also fear that if they don’t let the actors choose anything, the actors will become demotivated and might have a bad performance on stage. So the organization allowed the actors to choose the cities in the even positions of the path, that is, the actors can choose the cities P2,P4,...,P2·(cid:98)N/2(cid:99).\nAfter much deliberations, the actors made their choice. Contrary to what one would expect from such a creative bunch, they agreed on a somewhat boring outcome and decided that even positions should be occupied by cities with the same identifier as their indices, that is, Pi = i for even i.\nNow the organization needs your help. Can you determine the minimum total length of a path satisfying the actors’ decision? Input\nThe first line contains an integer N (2 ≤ N ≤ 500) indicating the number of cities in Nlogonia. The next N lines contain N integers each, representing the lengths of the roads between cities. The j-th integer on the i-th of these lines is Li,j (1 ≤ Li,j = Lj,i ≤ 109 for i = 1,2,...,N, j = 1,2,...,N and i (cid:54)= j), denoting the length of the two-way road between cities i and j. If i = j then Li,j = 0, since there is no actual road from a city to itself.\nOutput\nOutput a single line with an integer representing the minimum total length of a path that visits each city exactly once satisfying the actors’ decision.",
    "samples": [
      [
        "4\n0 3 2 13\n3 0 8 9\n2 8 0 5\n13 9 5 0",
        "16"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "H",
      "author": "Tiago Domingos Almeida Souza, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Leaving Yharnam",
    "text": "Eileen works for the municipal bus company in a city called Yharnam. As a classic over achiever, she always wants to assure the passengers are as happy as they can be, which wasn’t very hard since there were not many people wanting to leave the great city. Recently, though, there have been some crazy diseases appearing in town, and many citizens of Yharnam have decided to leave. By bus, of course.\nEach bus in Yharnam is formed by pairs of seats. Each pair is formed by two seats: the window seat, and the aisle seat. These two seats are considered to be next to each other. Each seat can be empty, which means no one is sitting on it, or full, which means someone is sitting on it.\nSome people prefer the seat next to theirs to be empty. Some people like having people to talk to, so they would rather have the seat next to theirs to be full. Some people are just really happy to be leaving Yharnam. Thus, when it comes to happiness in sitting on a bus, there are three types of people: • introvert: an introvert is happy if they get a spot in the bus and the seat next to them is empty; • extrovert: an extrovert is happy if they get a spot in the bus and the seat next to them is full; • easygoing: an easygoing person is happy as long as they get a spot in the bus.\nThe order in which people board a bus is determined beforehand. While boarding, each person selects a seat and seats on it before the next person is allowed to choose. Once someone has chosen a seat, they can’t change it. The introverts avoid as much as possible sitting next to another introvert since they know the struggle. Other than that, every person proceeds in a similar way when selecting a seat: • If there is any empty seat that makes them happy, the person selects one of those seats uniformly at random.\n• If there is any empty seat but none of them makes them happy, an extrovert selects one empty seat uniformly at random, while an introvert selects one seat uniformly at random among the empty seats that aren’t next to introverts, or among all empty seats in case all the empty seats are next to introverts. Note that this cannot happen to an easygoing person.\n• If there are no empty seats, the person leaves the bus grumbling.\nEileen defines the happiness of a bus as the number of happy passengers in it when the bus is ready to go, that is, after either everyone has boarded or there are no empty seats. With more buses leaving Yharnam and more passengers in those buses, guaranteeing the happiness of everyone has become harder than ever.\nEileen’s current strategy to maximize the number of happy passengers is to let all easygoing people board first, then all extroverts, and finally the introverts. She explains her strategy as follows: first let the chaotic and easy to please easygoing people find their way on the bus, then let the extroverts make themselves happy by seating close to either an easygoing person or another extrovert, and finally let some lucky introverts look for a peaceful seat.\nAlthough Eileen’s strategy is sensible, the trip ratings received from the passengers are showing a downward trend. That’s why she came to you asking for help.\nBefore making any changes to the way the passengers board the bus, Eileen wants to better understand her current approach. A bus formed by N pairs of seats is about to leave Yharnam.\nEileen knows that G easygoing people, I introverts, and E extroverts are ready to board. She wants to know the expected happiness of the bus, given that the easygoing people board first, followed by the extroverts, and finally the introverts.\nInput\nThe input consists of a single line that contains four integers N, G, I and E (0 ≤ N,G,I,E ≤ 106), as described in the statement.\nOutput\nThe expected happiness of the bus can be expressed as an irreducible fraction P/Q. Output\nthe remainder of dividing P × Q(cid:48) by 109 + 7, where Q(cid:48) is the modular multiplicative inverse of Q, that is, Q × Q(cid:48) ≡ 1 (mod 109 + 7).",
    "samples": [
      [
        "1 0 1 1",
        "1"
      ],
      [
        "10 0 11 0",
        "9"
      ],
      [
        "2 2 1 0",
        "333333338"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "L",
      "author": "Giovanna Kobus Conrado, Brasil"
    },
    "hasImages": false
  },
  {
    "name": "Most Ordered Way",
    "text": "Sofia was given N assignments from school, numbered from 1 to N. For each assignment she knows two values T and D (time and deadline), indicating that the assignment takes T minutes to be done and must be completed not later than D minutes from now.\nSofia can do the assignments in any order, she can do a single assignment at a time, and once she starts an assignment, she keeps working on it until the assignment is done. Sofia only spends time doing the assignments. This means that she can start working right now, and each time she completed an assignment she can start working on a new one immediately, without taking any breaks (how hardworking, huh?).\nSofia is a perfectionist and wants to complete all the assignments. Originally, she wanted to do the assignments in the order she was given, but she soon realized that this restriction might lead to assignments not being completed on time. Thus, if there are several ways to complete the assignments within their deadlines, Sofia wants to complete them in the “most ordered” way. Can you tell her how to organize her work? Time is running out, she needs your advice immediately.\nInput\nThe first line contains an integer N (1 ≤ N ≤ 5000) representing the number of assignments.\nEach of the next N lines describes an assignment with two integers T and D (1 ≤ T ≤ D ≤ 109), indicating that the assignment takes T minutes to be done and must be completed not later than D minutes from now.\nOutput\nOutput a single line with a permutation of the integers from 1 to N describing an order in which the assignments can be done so as to complete each of them on time, or the character “*” (asterisk) if such an order does not exist. If more than one permutation allows completing the assignments on time, output the lexicographically smallest permutation.",
    "samples": [
      [
        "2\n5 9\n5 9",
        "*"
      ],
      [
        "3\n6 6\n2 9\n2 1000",
        "1 2 3"
      ],
      [
        "3\n6 6\n2 1000\n2 9",
        "1 3 2"
      ],
      [
        "3\n30 100\n20 100\n10 100",
        "1 2 3"
      ]
    ],
    "source": {
      "year": "2021",
      "phase": 2,
      "warmup": false,
      "letter": "M",
      "author": "Naim Shaikhzadeh Santos, Brasil"
    },
    "hasImages": false
  }
]